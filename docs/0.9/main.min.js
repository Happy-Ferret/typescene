/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n// CONCATENATED MODULE: ./dist/core/lib/Async/Promise.js\n\n\n/** Represents a value to be resolved at any time in the future */\nvar Promise_Promise = (function () {\n    /** Create a new Promise instance by running the given callback function, which is given callbacks to resolve and/or reject the promise; the promise is also rejected if the callback function throws an exception */\n    function Promise(executor) {\n        /* @internal */\n        this._Resolve = Signal_Signal.create();\n        /* @internal */\n        this._Reject = Signal_Signal.create();\n        if (typeof executor === \"function\")\n            this._resolveWith(executor);\n    }\n    /** Delay the execution of a callback but return a promise for its result */\n    Promise.delay = function (f, ms, args) {\n        var result = new Promise();\n        // set a timer and run all deferred functions right away (e.g. .then(...))\n        setTimeout(function () {\n            result._resolveWith(function (r) { return r(f.apply(undefined, args)); });\n            runYield();\n        }, ms);\n        return result;\n    };\n    /** Return a promise that will be resolved after a delay */\n    Promise.sleep = function (ms, value) {\n        return Promise.delay(function () { return value; }, ms);\n    };\n    /** Defer the execution of a callback but return a promise for its result */\n    Promise.defer = function (f, args) {\n        var result = new Promise();\n        Defer_defer(function () { result._resolveWith(function (r) { return r(f.apply(undefined, args)); }); });\n        return result;\n    };\n    /** Executes given callback, providing it with a Node.js-style (err, result) => {...} handler that immediately resolves or rejects the resulting promise when called; (use as e.g. `Promise.fn(f => fs.readFile('/etc/passwd', f)).then(...))` */\n    Promise.fn = function (callback) {\n        return new Promise(function (resolve, reject) {\n            callback(function (err, result) {\n                if (err)\n                    reject(err);\n                else\n                    resolve(result);\n            });\n        });\n    };\n    /** Return a resolved promise */\n    Promise.resolve = function (value) {\n        return new Promise()._resolve(value);\n    };\n    /** Return a rejected promise */\n    Promise.reject = function (error) {\n        return new Promise()._reject(error);\n    };\n    /** Return a promise that is fulfilled when all given promises are fulfilled and is immediately rejected when one of the promises is rejected */\n    Promise.all = function (promises) {\n        var result = new Promise();\n        var values = [];\n        var left = promises.length;\n        // fulfill promise if not rejected before\n        function fulfill() {\n            !result._isRejected && result._resolve(values);\n        }\n        // wait for each given promise\n        promises.forEach(function (p, i) {\n            p.then(function (value) {\n                values[i] = value;\n                --left || fulfill();\n            }, function (error) {\n                result._reject(error);\n            });\n        });\n        // fulfill already if no promises given\n        !left && fulfill();\n        return result;\n    };\n    /** Return a promise that is resolved or rejected exactly like the first of the given promises that is resolved or rejected */\n    Promise.race = function (promises) {\n        var result = new Promise();\n        promises.forEach(function (p) {\n            p.then(function (value) { return result._resolve(value); }, function (error) { return result._reject(error); });\n        });\n        return result;\n    };\n    Promise.prototype.then = function (onFulfilled, onRejected) {\n        var _this = this;\n        var result = new Promise();\n        if (this._isResolved) {\n            // if already fulfilled, schedule call to onFulfilled or fulfill now\n            if (typeof onFulfilled === \"function\")\n                Defer_defer(function () { result._resolveWith(function (r) { return r(onFulfilled(_this._value)); }); });\n            else\n                result._resolve(this._value);\n        }\n        else if (this._isRejected) {\n            // if already rejected, schedule call to onRejected or reject now\n            if (typeof onRejected === \"function\")\n                Defer_defer(function () { result._resolveWith(function (r) { return r(onRejected(_this._error)); }); });\n            else\n                result._reject(this._error);\n            // set flag to make sure UnhandledException does not get called async\n            this._hndRejection = true;\n        }\n        else {\n            // fulfill result when ready\n            if (typeof onFulfilled === \"function\") {\n                this._Resolve._connect(function (v) {\n                    return result._resolveWith(function (r) { return r(onFulfilled(v)); });\n                });\n            }\n            else {\n                // pass on result if no handler passed in\n                this._Resolve._connect(function (v) { return result._resolve(v); });\n            }\n            // handle rejections\n            if (typeof onRejected === \"function\") {\n                this._Reject._connect(function (v) {\n                    return result._resolveWith(function (r) { return r(onRejected(v)); });\n                });\n            }\n            else {\n                // pass on rejections if no handler passed in\n                this._Reject._connect(function (v) { return result._reject(v); });\n            }\n        }\n        // always return a promise with the result of onFulfilled OR onRejected\n        return result;\n    };\n    Promise.prototype.catch = function (onRejected) {\n        return this.then(undefined, onRejected);\n    };\n    /** @internal Return current status: null if unfulfilled, object with value property (if resolved), and/or error property (if rejected) */\n    Promise.prototype._getStatus = function () {\n        if (this._isResolved)\n            return { value: this._value };\n        if (this._isRejected)\n            return { rejected: true, error: this._error };\n        return null;\n    };\n    /** @internal Resolve the promise with a value, or (future) result of a promise */\n    Promise.prototype._resolve = function (value, resolving) {\n        var _this = this;\n        if (!this._isResolved && !this._isRejected &&\n            (!this._resolving || resolving === this._resolving)) {\n            if (value === this)\n                throw new TypeError(\"Recursive promise found\");\n            try {\n                var thenFn = value && value.then;\n                if (typeof thenFn === \"function\" &&\n                    ((typeof value === \"object\") || (typeof value === \"function\"))) {\n                    // wait for promise to be resolved and recurse\n                    resolving = this._resolving = {};\n                    thenFn.call(value, function (v) { _this._resolve(v, resolving); }, function (e) { _this._reject(e, resolving); });\n                }\n                else {\n                    // set status and schedule handler chain (if any)\n                    this._isResolved = true;\n                    delete this._resolving;\n                    this._value = value;\n                    this._Resolve.emit(value);\n                    // remove signal references to help garbage collection\n                    delete this._Resolve;\n                    delete this._Reject;\n                }\n            }\n            catch (e) {\n                // oops, caught an exception, now reject this promise\n                this._reject(e, resolving);\n            }\n        }\n        return this;\n    };\n    /** @internal Run a function that may resolve or reject the promise, if still not fulfilled */\n    Promise.prototype._resolveWith = function (executor) {\n        var _this = this;\n        try {\n            // call resolver function with callback for resolving this promise\n            this._isResolved || this._isRejected ||\n                executor(function (v) { _this._resolve(v); }, function (e) { _this._reject(e); });\n        }\n        catch (e) {\n            // oops, caught an exception, now reject this promise\n            this._reject(e);\n        }\n        return this;\n    };\n    /** @internal Reject the promise because an error occurred */\n    Promise.prototype._reject = function (error, resolving) {\n        var _this = this;\n        // set status and schedule handler chain (if any)\n        if (!this._isResolved && !this._isRejected &&\n            (!this._resolving || resolving === this._resolving)) {\n            this._isRejected = true;\n            this._error = error;\n            if (this._Reject.isConnected()) {\n                // emit signal which is handled by onRejected handler(s)\n                this._Reject.emit(error);\n                // remove signal references to help garbage collection\n                delete this._Resolve;\n                delete this._Reject;\n            }\n            else {\n                // emit signal async if still not handled\n                // (wait for chained calls on already-rejected promise)\n                Defer_defer(function () {\n                    _this._hndRejection ||\n                        UnhandledException.emit(error);\n                });\n            }\n        }\n        return this;\n    };\n    return Promise;\n}());\n\n/** Return a promise that will be resolved after a delay */\nfunction sleep(ms, value) {\n    return Promise_Promise.delay(function () { return value; }, ms);\n}\n\n// CONCATENATED MODULE: ./dist/core/lib/Async/Signal.js\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n// remove cyclical dependency by requiring this from root:\n\n/** Flag used to coordinate between handler added by connectOnce, and emitSync method (set when deleted own handler, i.e. emitSync needs to call handler at same index again) */\nvar _handlerDeletedSelf = false;\n/** Variable used by Signal.create to keep track of most specific signal to be emitted */\nvar _currentSignal;\n/** Helper function that generates a handler function which looks for a given method on given target */\nfunction makeMethodHandler(method, target) {\n    if (!target)\n        throw new TypeError(\"Target is \" + target);\n    return function () {\n        var f = target[method];\n        if (typeof f !== \"function\")\n            throw new TypeError(\"Target does not contain method: \" + method);\n        f.apply(target, arguments);\n    };\n}\n/** Encapsulates a signal that can be used to trigger one or more handlers asynchronously; do _not_ construct `Signal` classes directly, use the static `.create` method to create derived classes which can be instantiated and emitted */\nvar Signal_Signal = (function () {\n    function Signal(data, self) {\n        if (!(this instanceof Signal)) {\n            // called as a function, not a constructor: emit directly\n            self && self.emit.call(self, data, true);\n        }\n        else {\n            if (!this.constructor.__emittable)\n                throw new TypeError;\n            this._data = data;\n        }\n    }\n    Signal.create = function () {\n        var Result = (function (_super) {\n            __extends(DefinedSignal, _super);\n            function DefinedSignal(value) {\n                var _this = this;\n                if (!_currentSignal)\n                    _currentSignal = Result;\n                _this = _super.call(this, value, _currentSignal) || this;\n                _currentSignal = undefined;\n                return _this;\n            }\n            return DefinedSignal;\n        }(this));\n        Result.$sigNHnd = 0;\n        Result.__emittable = true;\n        return Result;\n    };\n    /** [implementation] Create a read-only observable value that contains the last emitted value (initially undefined, only contains a value after the first time this signal is emitted) */\n    Signal.observe = function () {\n        return Observable_ObservableValue.fromSignal(this);\n    };\n    /** [implementation] Add a handler */\n    Signal.connect = function (callback, target) {\n        // make handler function if given only a method name\n        if (typeof callback === \"string\")\n            callback = makeMethodHandler(callback, target);\n        // add handler to the list, return a SignalConnection object\n        var connection = { disconnected: false };\n        connection.disconnect = Signal._connect.call(this, callback, connection);\n        return connection;\n    };\n    /** [implementation] Add a one-time handler */\n    Signal.connectOnce = function (callback, target) {\n        // make handler function if given only a method name\n        if (typeof callback === \"string\")\n            callback = makeMethodHandler(callback, target);\n        // add wrapper to the list, call handler only once\n        var called = false, un = Signal._connect.call(this, function (data, src) {\n            if (!called) {\n                called = true;\n                _handlerDeletedSelf = true;\n                un();\n                callback(data, src);\n            }\n        });\n    };\n    /** @internal Implementation of connect: returns disconnect function [used to speed up connections in other Async classes] */\n    Signal._connect = function (callback, signalConnection) {\n        // copy all inherited static properties onto this class instance\n        // (or initialize re-used object)\n        var s = this;\n        if (s.$sigSelf !== s) {\n            s.$sigSelf = s;\n            s.$sigh1 = s.$sigh1, s.$sigh2 = s.$sigh2, s.$sigh3 = s.$sigh3, s.$sigh4 = s.$sigh4;\n            s.$sigHnd = s.$sigHnd && s.$sigHnd.slice();\n            s.$sigNHnd = s.$sigNHnd || 0;\n        }\n        // add handler to the list\n        switch (s.$sigNHnd++) {\n            case 0:\n                // call \"up\" listener to make sure signals get emitted\n                s.$sigh1 = callback;\n                s.onHandlerConnected && s.onHandlerConnected();\n                break;\n            case 1:\n                s.$sigh2 = callback;\n                break;\n            case 2:\n                s.$sigh3 = callback;\n                break;\n            case 3:\n                s.$sigh4 = callback;\n                break;\n            default: (s.$sigHnd || (s.$sigHnd = [])).push(callback);\n        }\n        return function () {\n            // remove handler from the list\n            if (s.$sigh1 === callback)\n                _a = [s.$sigh2, s.$sigh3, s.$sigh4, s.$sigHnd && s.$sigHnd.shift()], s.$sigh1 = _a[0], s.$sigh2 = _a[1], s.$sigh3 = _a[2], s.$sigh4 = _a[3], _a,\n                    s.$sigNHnd--;\n            else if (s.$sigh2 === callback)\n                _b = [s.$sigh3, s.$sigh4, s.$sigHnd && s.$sigHnd.shift()], s.$sigh2 = _b[0], s.$sigh3 = _b[1], s.$sigh4 = _b[2], _b,\n                    s.$sigNHnd--;\n            else if (s.$sigh3 === callback)\n                _c = [s.$sigh4, s.$sigHnd && s.$sigHnd.shift()], s.$sigh3 = _c[0], s.$sigh4 = _c[1], _c,\n                    s.$sigNHnd--;\n            else if (s.$sigh4 === callback)\n                s.$sigh4 = s.$sigHnd && s.$sigHnd.shift(),\n                    s.$sigNHnd--;\n            else if (s.$sigNHnd > 4) {\n                for (var i = s.$sigHnd.length - 1; i >= 0; i--) {\n                    if (s.$sigHnd[i] === callback) {\n                        s.$sigHnd.splice(i, 1);\n                        s.$sigNHnd--;\n                        break;\n                    }\n                }\n            }\n            // check new length: call \"down\" listener if none\n            if (!s.$sigNHnd && s.onHandlersDisconnected)\n                s.onHandlersDisconnected();\n            // set disconnected flag\n            if (signalConnection)\n                signalConnection.disconnected = true;\n            var _a, _b, _c;\n        };\n    };\n    /** [implementation] Remove all handlers */\n    Signal.disconnectAll = function () {\n        // call \"down\" callback to allow signals to stop for now\n        if (this.$sigNHnd) {\n            this.$sigh1 = undefined;\n            this.$sigh2 = undefined;\n            this.$sigh3 = undefined;\n            this.$sigh4 = undefined;\n            this.$sigHnd = undefined;\n            this.$sigNHnd = 0;\n            this.onHandlersDisconnected && this.onHandlersDisconnected();\n        }\n        return this;\n    };\n    /** [implementation] Returns true if this signal has any handlers */\n    Signal.isConnected = function () {\n        return (this.$sigNHnd > 0);\n    };\n    /** @internal Invoke all handlers synchronously, without creating a Signal instance at all; exceptions in handlers are NOT caught here */\n    Signal.emitSync = function (data) {\n        if (this.$sigNHnd) {\n            _handlerDeletedSelf = false;\n            while (this.$sigh1 && (this.$sigh1.call(undefined, data),\n                _handlerDeletedSelf))\n                _handlerDeletedSelf = false;\n            while (this.$sigh2 && (this.$sigh2.call(undefined, data),\n                _handlerDeletedSelf))\n                _handlerDeletedSelf = false;\n            while (this.$sigh3 && (this.$sigh3.call(undefined, data),\n                _handlerDeletedSelf))\n                _handlerDeletedSelf = false;\n            while (this.$sigh4 && (this.$sigh4.call(undefined, data),\n                _handlerDeletedSelf))\n                _handlerDeletedSelf = false;\n            var handlers = this.$sigHnd;\n            if (handlers) {\n                for (var i = 0; i < handlers.length; i++) {\n                    while (handlers[i] &&\n                        (handlers[i].call(undefined, data),\n                            _handlerDeletedSelf))\n                        _handlerDeletedSelf = false;\n                }\n            }\n        }\n    };\n    /** @internal Invoke all handlers asynchronously, possibly without creating a Signal instance at all; exceptions in handlers are NOT caught here */\n    Signal.emit = function (data) {\n        if (!this.__emittable)\n            throw new TypeError;\n        if (this.$sigNHnd) {\n            if (this.$sigh1)\n                Defer_defer(this.$sigh1.bind(this, data));\n            if (this.$sigh2)\n                Defer_defer(this.$sigh2.bind(this, data));\n            if (this.$sigh3)\n                Defer_defer(this.$sigh3.bind(this, data));\n            if (this.$sigh4)\n                Defer_defer(this.$sigh4.bind(this, data));\n            var handlers = this.$sigHnd;\n            if (handlers) {\n                for (var i = 0, len = handlers.length; i < len; i++)\n                    handlers[i] && Defer_defer(handlers[i].bind(this, data));\n            }\n        }\n    };\n    /** Invoke all handlers and capture promises of their return values in .results (unless argument is true); works only once; returns this */\n    Signal.prototype.emit = function (noResults) {\n        var _this = this;\n        if (this._emitted)\n            return this;\n        this._emitted = true;\n        var nHandlers = this.constructor.$sigNHnd;\n        if (!nHandlers)\n            return this;\n        var handler1 = this.constructor.$sigh1;\n        var handler2 = this.constructor.$sigh2;\n        var handler3 = this.constructor.$sigh3;\n        var handler4 = this.constructor.$sigh4;\n        var handlers = this.constructor.$sigHnd;\n        var data = this._data;\n        if (!noResults) {\n            // intialize an array of Promises\n            var results = this._results = [handler1 ?\n                    Promise_Promise.defer(handler1.bind(this, data)) :\n                    Promise_Promise.resolve(undefined)];\n            if (nHandlers > 1)\n                results.push(handler2 ?\n                    Promise_Promise.defer(handler2.bind(this, data)) :\n                    Promise_Promise.resolve(undefined));\n            if (nHandlers > 2)\n                results.push(handler3 ?\n                    Promise_Promise.defer(handler3.bind(this, data)) :\n                    Promise_Promise.resolve(undefined));\n            if (nHandlers > 3)\n                results.push(handler4 ?\n                    Promise_Promise.defer(handler4.bind(this, data)) :\n                    Promise_Promise.resolve(undefined));\n            if (nHandlers > 4)\n                handlers.forEach(function (f) { return results.push(f ?\n                    Promise_Promise.defer(f.bind(_this, data)) :\n                    Promise_Promise.resolve(undefined)); });\n        }\n        else {\n            // no need to capture results, schedule plain handlers\n            Defer_defer(handler1.bind(this, data));\n            if (nHandlers > 1)\n                Defer_defer(handler2.bind(this, data));\n            if (nHandlers > 2)\n                Defer_defer(handler3.bind(this, data));\n            if (nHandlers > 3)\n                Defer_defer(handler4.bind(this, data));\n            if (nHandlers > 4)\n                handlers.forEach(function (f) { return f && Defer_defer(f.bind(_this, data)); });\n        }\n        if (this._onEmit)\n            this._onEmit(true);\n        return this;\n    };\n    /** Invoke given callback(s) with return values of all handlers, or any exception that occurred during execution of all handlers; returns a Promise that resolves to the return value of the callback(s) itself */\n    Signal.prototype.then = function (onFulfilled, onRejected) {\n        var _this = this;\n        if (!this._promise) {\n            if (!this._emitted)\n                this._promise = new Promise_Promise(function (r) { _this._onEmit = r; })\n                    .then(function () { return Promise_Promise.all(_this.results); });\n            else\n                this._promise = Promise_Promise.all(this.results);\n        }\n        return this._promise.then(onFulfilled, onRejected);\n    };\n    /** Catch errors that occur during execution of all handlers; returns a Promise that resolves to the return value of the callback itself */\n    Signal.prototype.catch = function (onRejected) {\n        return this.then(undefined, onRejected);\n    };\n    Object.defineProperty(Signal.prototype, \"results\", {\n        /** Array of Promises that resolve to return values of all handlers */\n        get: function () {\n            return this._results || [];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Signal.prototype, \"data\", {\n        /** The payload data for this signal instance */\n        get: function () { return this._data; },\n        enumerable: true,\n        configurable: true\n    });\n    /** @internal Number of handlers */\n    Signal.$sigNHnd = 0;\n    return Signal;\n}());\n\n/** Signal that is emitted for all exceptions that were unhandled during async execution; a custom handler may be added here, the default handler just logs a warning message to the console; to disable this behavior for specific errors, set error.message to a blank string */\nvar UnhandledException = Signal_Signal.create();\n// hook up default behavior:\nUnhandledException._connect(function (error) {\n    try {\n        error && error.message && console && (console.warn || console.log)(\"Unhandled exception in asynchronous code - \", error);\n    }\n    catch (all) { }\n});\n\n// CONCATENATED MODULE: ./dist/core/lib/Async/Defer.js\n\n/** Queue of functions to execute when idle (deferred functions) */\nvar deferred = [];\nvar deferredArgs = [];\n/** True if currently handling deferred functions */\nvar runningDeferred = false;\n/** True if already scheduled next handler */\nvar scheduled;\n/** Current setTimeout ID, if >= 0 */\nvar deferTimeout = -1;\n/** True if postMessage works, too */\nvar canPostMessage;\n/** True if requestAnimationFrame works */\nvar canRequestAnimationFrame = (typeof window !== \"undefined\") &&\n    (typeof window.requestAnimationFrame === \"function\") &&\n    (typeof performance !== \"undefined\");\n/** True if native Promise exists */\nvar resolvedPromise = (typeof window !== \"undefined\") &&\n    (typeof window.Promise !== \"undefined\") &&\n    window.Promise.resolve(0);\n/** Run a batch of deferred functions */\nfunction _runDeferred(time, manualYield) {\n    var trackTime = (time > 0);\n    if (manualYield !== true)\n        scheduled = false;\n    if (deferTimeout >= 0) {\n        clearTimeout(deferTimeout);\n        deferTimeout = -1;\n    }\n    // run a number of deferred functions\n    runningDeferred = true;\n    var n = deferred.length;\n    var max = Math.max(trackTime ? 1000 : 100, n >> 2);\n    for (var i = 0; i < deferred.length && i < max; i++) {\n        try {\n            deferred[i].apply(undefined, deferredArgs[i]);\n        }\n        catch (err) {\n            UnhandledException(err);\n        }\n        // stop if exceeding animation frame time (if applicable),\n        // keep going if queue is still growing\n        if (trackTime && (deferred.length < n + i) &&\n            performance.now() - time > 60)\n            break;\n    }\n    runningDeferred = false;\n    // reschedule if necessary\n    if (i < deferred.length) {\n        deferred.splice(0, i);\n        deferredArgs.splice(0, i);\n        // reschedule slowly if queue didn't grow significantly\n        _reschedule(deferred.length > n + 20);\n    }\n    else {\n        deferred.length = 0;\n        deferredArgs.length = 0;\n    }\n}\n/** Schedule a deferred function run (but not through Promise twice in a row) */\nfunction _reschedule(immediate) {\n    if (!scheduled && !runningDeferred) {\n        scheduled = true;\n        if (!immediate && canRequestAnimationFrame)\n            window.requestAnimationFrame(_runDeferred);\n        else if (immediate && resolvedPromise)\n            resolvedPromise.then(_runDeferred);\n        else if (canPostMessage)\n            window.postMessage(\"yield\", \"*\");\n        else\n            deferTimeout = setTimeout(_runDeferred, 0, 0);\n    }\n}\n/** Execute given function only when idle, with given arguments (array or `arguments` object) if any */\nfunction Defer_defer(f, args) {\n    deferred.push(f);\n    deferredArgs.push(args);\n    _reschedule(true);\n}\n/** Run a batch of deferred functions; returns true if there are still more deferred functions in the queue, or false if there are none or if already running; set argument to true to run _all_ deferred functions that are currently in the queue (but not those that get added after the call to `runYield`) */\nfunction runYield(yieldAll) {\n    if (runningDeferred)\n        return false;\n    if (yieldAll) {\n        // run up to current position in queue\n        var stop = false;\n        deferred.push(function () { stop = true; });\n        deferredArgs.push(undefined);\n        while (_runDeferred(0, true) && !stop)\n            ;\n    }\n    else {\n        // run only one batch or until timed out\n        var time = canRequestAnimationFrame ? performance.now() : 0;\n        _runDeferred(time, true);\n    }\n    return (deferred.length > 0);\n}\n// check if postMessage works in this browser and set flag\nif (typeof window === \"object\") {\n    window.addEventListener(\"message\", function () {\n        canPostMessage = true;\n        _runDeferred();\n    });\n    setTimeout(function () { return window.postMessage(\"yield\", \"*\"); }, 1);\n}\n\n// CONCATENATED MODULE: ./dist/core/lib/Async/ObservableObject.js\n\n\nvar OBSERVABLE_HIDDEN_PROP_PREFIX = \"*observable:\";\nvar HAS_GETTER_PROP = \"*observable-getter\";\n/** Represents an object with (some) observable members; may be extended into a derived class, or use `makeObjectObservable` function to mix into any object [requires ES5+ target] */\nvar ObservableObject_ObservableObject = (function () {\n    /** Create an object with (some) observable members */\n    function ObservableObject() {\n        assertUnobserved();\n        _addSignalGetter(this);\n    }\n    /** Returns true if property with given name is observable */\n    ObservableObject.prototype.hasObservableProperty = function (name) {\n        return isObservableProperty(this, name);\n    };\n    /** Add an observable property with given name and value; any existing (observable) properties with this name are removed first */\n    ObservableObject.prototype.addObservableProperty = function (name, value) {\n        makePropertyObservable(this, name);\n        this[name] = value;\n    };\n    return ObservableObject;\n}());\n\n/** Returns a new `ObservableObject` with properties copied from given object; `ObservableValue` instances are referenced directly (including getter and setter), Array properties are turned into `ObservableArray` instances, and plain Object instances into `ObservableObject` instances; also seals the new instance if the object parameter was sealed, and freezes it if the object parameter was frozen*/\nfunction makeObjectObservable(obj) {\n    var result = new ObservableObject_ObservableObject();\n    if (obj instanceof Object) {\n        // define non-configurable properties with getters and setters\n        var specIsObservable = (obj instanceof ObservableObject_ObservableObject);\n        var desc;\n        for (var member in obj) {\n            if ((specIsObservable ?\n                obj.hasObservableProperty(member) :\n                Object.prototype.hasOwnProperty.call(obj, member)) &&\n                (desc = Object.getOwnPropertyDescriptor(obj, member))) {\n                _defineObservableProperty(result, member, desc.value, desc.get, desc.set);\n            }\n        }\n        // mixin method and signal\n        Object.defineProperty(result, \"hasObservableProperty\", {\n            configurable: false,\n            writable: false,\n            enumerable: false,\n            value: ObservableObject_ObservableObject.prototype.hasObservableProperty\n        });\n        _addSignalGetter(result);\n        // copy object status\n        if (Object.isFrozen(obj)) {\n            // go through all properties to initialize hidden observable first\n            for (var member in obj)\n                result[member];\n            Object.freeze(result);\n        }\n        else if (Object.isSealed(obj)) {\n            // go through all properties to initialize hidden observable first\n            for (var member in obj)\n                result[member];\n            Object.seal(result);\n        }\n    }\n    return result;\n}\n/** Make the property with given name observable; use given observable value instance, if any, otherwise use a new observable value instance that holds the current property value and/or uses the current property getter and setter [requires ES5+ target] */\nfunction makePropertyObservable(obj, member, instance) {\n    var propertyName = String(member);\n    if (instance instanceof Observable_ObservableValue) {\n        // use given instance\n        _defineObservableProperty(obj, propertyName, instance);\n    }\n    else {\n        // use property descriptor, or otherwise just the value\n        var desc = Object.getOwnPropertyDescriptor(obj, propertyName);\n        _defineObservableProperty(obj, propertyName, desc ? desc.value : obj[propertyName], desc && desc.get, desc && desc.set);\n    }\n}\n/** Delete the property with given name and clear its observable value */\nfunction deleteObservableProperty(obj, member) {\n    var hiddenMember = _getHiddenName(member);\n    var observable = obj[hiddenMember];\n    if (observable && observable.subscribed && observable.writable)\n        observable.value = undefined;\n    delete obj[member];\n    delete obj[hiddenMember];\n}\n/** Returns true if property with given name is defined and is observable */\nfunction isObservableProperty(obj, member) {\n    var hiddenMember = _getHiddenName(member);\n    if (Object.prototype.hasOwnProperty.call(obj, hiddenMember))\n        return true;\n    var ppDescriptor = _getProtoPropDesc(obj, member);\n    if (ppDescriptor && ppDescriptor.get && ppDescriptor.get[HAS_GETTER_PROP])\n        return true;\n    return false;\n}\n// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n/** Helper function to add a getter for the `ObservableObject.PropertyChange` signal to any object */\nfunction _addSignalGetter(obj) {\n    if (!Object.prototype.hasOwnProperty.call(obj, \"PropertyChange\")) {\n        var S;\n        Object.defineProperty(obj, \"PropertyChange\", {\n            configurable: false,\n            enumerable: false,\n            get: function () {\n                if (!S) {\n                    S = Signal_Signal.create();\n                    S.target = obj;\n                    this._hasPropertyChangeSignal = true;\n                }\n                return S;\n            }\n        });\n    }\n}\n/** Helper function to get a prototype's property descriptor */\nfunction _getProtoPropDesc(obj, member) {\n    var proto = Object.getPrototypeOf(obj);\n    return proto ?\n        Object.getOwnPropertyDescriptor(proto, String(member)) ||\n            _getProtoPropDesc(proto, member) :\n        undefined;\n}\n/** Helper function to add a getter and setter for a single property */\nfunction _defineObservableProperty(obj, member, initial, getter, setter) {\n    var hiddenMember = _getHiddenName(member);\n    // clear existing observable value, if any, or define hidden property\n    if (Object.prototype.hasOwnProperty.call(obj, hiddenMember))\n        deleteObservableProperty(obj, member);\n    else {\n        Object.defineProperty(obj, hiddenMember, {\n            configurable: true,\n            enumerable: false,\n            value: false,\n            writable: true\n        });\n    }\n    // define observable property itself\n    var descriptor = { enumerable: true, configurable: true };\n    _makeObservablePropertyDef(descriptor, member, getter, setter);\n    Object.defineProperty(obj, member, descriptor);\n    // store observable value instance, if referenced directly\n    if (initial instanceof Observable_ObservableValue)\n        obj[hiddenMember] = initial;\n    else if (initial !== undefined)\n        obj[member] = initial;\n}\n/** Helper function to get a property definition for an observable property */\nfunction _makeObservablePropertyDef(descriptor, member, getter, setter, getFilter, setFilter, shallow) {\n    var hiddenMember = _getHiddenName(member);\n    // helper function that returns ObservableValue for a member\n    function getObservableValue(obj) {\n        if (obj[hiddenMember])\n            return obj[hiddenMember];\n        // create new observable value\n        return obj[hiddenMember] = unobserved(function () {\n            var o = new Observable_ObservableValue();\n            if (shallow)\n                o.shallow = true;\n            if (getter)\n                o.getter(getter.bind(obj));\n            if (setter)\n                o.setter(setter.bind(obj));\n            // emit PropertyChange for Observable object properties\n            o.invokeOnChange(function () {\n                if (obj._hasPropertyChangeSignal)\n                    obj.PropertyChange(member);\n            });\n            return o;\n        });\n    }\n    // save getter with flag\n    descriptor.get = getFilter ?\n        function () {\n            return getFilter(getObservableValue(this).value);\n        } :\n        function () {\n            return getObservableValue(this).value;\n        };\n    descriptor.get[HAS_GETTER_PROP] = true;\n    // save setter\n    descriptor.set = setFilter ?\n        function (v) {\n            return getObservableValue(this).value = setFilter(v);\n        } :\n        function (v) {\n            return getObservableValue(this).value = v;\n        };\n}\nfunction _getHiddenName(name) {\n    return OBSERVABLE_HIDDEN_PROP_PREFIX + name;\n}\n// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n/** _Method/accessor decorator_, wraps a method or getter (but not setter) in an `unobserved` call, so that any observable values read by this method (or functions invoked synchronously from within this method) are not marked as dependencies of any currently evaluating observable values [requires ES5+ target] [decorator] */\nfunction unobservable(target, key, descriptor) {\n    if (descriptor) {\n        if (descriptor.get) {\n            // wrap getter to invoke it as unobserved (no arguments)\n            var f_1 = descriptor.get;\n            descriptor.get = function () {\n                return unobserved.call(this, f_1);\n            };\n            return descriptor;\n        }\n        else if (typeof descriptor.value === \"function\") {\n            // wrap function to monkey patch it as unobserved\n            var f_2 = descriptor.value;\n            descriptor.value = function () {\n                var _this = this;\n                var a = arguments;\n                return unobserved(function () { return f_2.apply(_this, a); });\n            };\n            return descriptor;\n        }\n    }\n    throw new TypeError();\n}\n/** _Read-only-accessor decorator_, wraps a getter (without setter) in an `unobserved` call, so that any observable values read by the accessor (or functions invoked synchronously from within the accessor) are not marked as dependencies of any currently evaluating observable values; defines a read-only property using the result of the accessor call, after the first time it was invoked for each instance [requires ES5+ target] [decorator] */\nfunction unobservable_memoize_get(target, key, descriptor) {\n    if (descriptor && descriptor.get) {\n        // property cannot contain a setter (must be read-only)\n        if (descriptor.set)\n            throw new TypeError;\n        // wrap getter to invoke it as unobserved (no arguments)\n        var f = descriptor.get;\n        descriptor.get = function () {\n            var value = unobserved.call(this, f);\n            // redefine the property on this instance\n            Object.defineProperty(this, key, {\n                enumerable: true,\n                writable: false,\n                configurable: true,\n                value: value\n            });\n            return value;\n        };\n        return descriptor;\n    }\n    throw new TypeError();\n}\nfunction observable(target, key, descriptor, getFilter, setFilter, shallow) {\n    if (!descriptor)\n        descriptor = { enumerable: true };\n    _makeObservablePropertyDef(descriptor, key, descriptor.get, descriptor.set, getFilter, setFilter, shallow);\n    return descriptor;\n}\n/** _Property/accessor decorator_, makes a property observable on every instance and converts values to strings when read (empty string for null/undefined/NaN) [requires ES5+ target] [decorator] */\nfunction observable_string(target, key, descriptor) {\n    return observable(target, key, descriptor, function (value) {\n        return (value || value === 0 || value === false) ? String(value) : \"\";\n    });\n}\n/** _Property/accessor decorator_, makes a property observable on every instance and converts values to numbers using Number(...) when read [requires ES5+ target] [decorator] */\nfunction observable_number(target, key, descriptor) {\n    return observable(target, key, descriptor, function (value) { return Number(value); });\n}\n/** _Property/accessor decorator_, makes a property observable on every instance, as a shallow observable value (i.e. does not read values from observable values assigned to this property; and does not convert arrays to observable arrays nor objects to observable objects) [requires ES5+ target] [decorator] */\nfunction observable_shallow(target, key, descriptor) {\n    return observable(target, key, descriptor, undefined, undefined, true);\n}\n/** _Property/accessor decorator_, makes a property observable on every instance and enforces that values are not undefined or null when read (throws TypeError) and that undefined/null values cannot be set (also throws TypeError) [requires ES5+ target] [decorator] */\nfunction observable_not_null(target, key, descriptor) {\n    return observable(target, key, descriptor, function (value) {\n        if (value === undefined || value === null)\n            throw new TypeError(key + \" is \" + value);\n        return value;\n    }, function (value) {\n        if (value === undefined || value === null)\n            throw new TypeError(key + \" cannot be \" + value);\n        return value;\n    });\n}\n/** @internal Alias for backwards compatibility */\nfunction observable_nonNull() {\n    return observable_not_null.call(undefined, arguments);\n}\n/** _Property/accessor decorator_, makes a property observable on every instance and enforces that values are not undefined or null when read (throws TypeError) and that only instances of Object can be set, which are sealed automatically [requires ES5+ target] [decorator] */\nfunction observable_seal(target, key, descriptor) {\n    return observable(target, key, descriptor, function (value) {\n        if (value === undefined || value === null)\n            throw new TypeError(key + \" is \" + value);\n        return value;\n    }, function (value) {\n        if (!(value instanceof Object))\n            throw new Error(key + \" must be an Object, not \" + value);\n        return Object.isSealed(value) ? value : Object.seal(value);\n    });\n}\n/** _Property/accessor decorator_, makes a property observable on every instance and enforces that values are not undefined or null when read (throws TypeError) and that only instances of Object can be set, which are frozen automatically [requires ES5+ target] [decorator] */\nfunction observable_freeze(target, key, descriptor) {\n    return observable(target, key, descriptor, function (value) {\n        if (value === undefined || value === null)\n            throw new TypeError(key + \" is \" + value);\n        return value;\n    }, function (value) {\n        if (!(value instanceof Object))\n            throw new Error(key + \" must be an Object, not \" + value);\n        return Object.isFrozen(value) ? value : Object.freeze(value);\n    });\n}\n\n// CONCATENATED MODULE: ./dist/core/lib/Async/ObservableArray.js\n\n\n\n;\n/** Encapsulates `Array` with observable properties; the result works exactly like a regular array, but setting elements outside the bounds of the array (>= length) does NOT work: length must be set first */\nvar ObservableArray_ObservableArray = (function () {\n    /** Create a new empty `ObservableArray` instance */\n    function ObservableArray() {\n        var _this = this;\n        assertUnobserved();\n        var _length = Observable_ObservableValue.fromValue(0);\n        Object.defineProperty(this, \"length\", {\n            get: function () { return _length.value; },\n            set: function (value) {\n                // make new numeric properties observable\n                var currentLength = _length.getLastValue() || 0;\n                while (currentLength < value)\n                    makePropertyObservable(_this, currentLength++);\n                // clear removed properties\n                for (var l = value; l < currentLength; l++)\n                    deleteObservableProperty(_this, l);\n                _length.value = value;\n            },\n            configurable: true\n        });\n    }\n    /** Create an `ObservableArray` out of a regular Array */\n    ObservableArray.fromArray = function (array) {\n        var result = new ObservableArray();\n        for (var i = array.length - 1; i >= 0; i--)\n            result[i] = array[i];\n        result.length = array.length;\n        return result;\n    };\n    /** Create an `ObservableArray` that takes array elements from the array in given `ObservableValue`, or the value itself as a single element if it is not an array, or an empty array if the value is null or undefined; changes in array elements and/or observable values are reflected asynchronously; use the `lazy` argument to defer initialization of array elements until the `.length` property is accessed */\n    ObservableArray.fromObservableValue = function (observableValue, lazy) {\n        var result = new ObservableArray();\n        // proxy length and all numeric properties in result\n        var _length = 0;\n        var makeMap = function (i) { return new Observable_ObservableValue(function () {\n            var value = observableValue.value;\n            if (value instanceof Array)\n                return value[i];\n            else if (i === 0 && value !== null)\n                return value;\n            else\n                return undefined;\n        }); };\n        Object.defineProperty(result, \"length\", {\n            get: function () {\n                var value = observableValue.value;\n                var newLength = (value instanceof Array) ? value.length :\n                    (value === undefined || value === null) ? 0 : 1;\n                if (newLength > _length) {\n                    unobserved(function () {\n                        // make new numeric properties observable\n                        for (var l = _length; l < newLength; l++)\n                            makePropertyObservable(result, l, makeMap(l));\n                    });\n                }\n                else {\n                    unobserved(function () {\n                        // clear removed properties\n                        for (var l = newLength; l < _length; l++)\n                            deleteObservableProperty(result, l);\n                    });\n                }\n                return _length = newLength;\n            },\n            set: function () {\n                throw new Error(\"Cannot modify length of mapped array\");\n            }\n        });\n        // initialize all values\n        if (!lazy)\n            unobserved(function () { return result.length; });\n        return result;\n    };\n    /** Create a read-only `ObservableArray` with each value of the original array mapped to the result of the given getter function; observable values used in the map function are not observed (like `ObservableValue#map`); the getter is called for combinations of value and index (i.e. deleting a value in the middle of the source array will trigger changes for all elements after it; if the index is not important then use `.mapAsyncValues` instead); the resulting array length changes along with the original array length; use the `lazy` argument to defer initialization of array elements until the `.length` property is accessed */\n    ObservableArray.prototype.mapAsync = function (callback, thisArg, lazy) {\n        var _this = this;\n        var result = new ObservableArray();\n        // keep length in an observable just like the properties to avoid\n        // unexpected differences in change propagation timings\n        var observableLength = new Observable_ObservableValue(function () { return _this.length; });\n        // proxy all numeric properties in result\n        var _length = 0;\n        var makeMap = function (i) {\n            var lastValue = {};\n            var mapped = new Observable_ObservableValue(function () {\n                var value = _this[i];\n                if (value === lastValue)\n                    return mapped.value;\n                mapped.value = unobserved(function (value) {\n                    return (i >= 0 && i < _this.length) ?\n                        callback.call(thisArg || result, value, i, _this) :\n                        undefined;\n                }, lastValue = value);\n            });\n            return mapped;\n        };\n        Object.defineProperty(result, \"length\", {\n            get: function () {\n                var newLength = observableLength.value;\n                if (newLength > _length) {\n                    unobserved(function () {\n                        // make new numeric properties observable\n                        for (var l = _length; l < newLength; l++)\n                            makePropertyObservable(result, l, makeMap(l));\n                    });\n                }\n                else if (newLength < _length) {\n                    unobserved(function () {\n                        // clear removed properties\n                        for (var l = newLength; l < _length; l++)\n                            deleteObservableProperty(result, l);\n                    });\n                }\n                return _length = newLength;\n            },\n            set: function () {\n                throw new Error(\"Cannot modify length of mapped array\");\n            }\n        });\n        // initialize all values\n        if (!lazy)\n            unobserved(function () { return result.length; });\n        return result;\n    };\n    /** Create a read-only ObservableArray with each value of the original array mapped to the result of the given function; observable values used in the map function are not observed (like ObservableValue map method); the resulting array length changes along with the original array length; this method is slightly more expensive than mapAsync for larger arrays, especially in non-ES6 environments, but is overall more efficient because it avoids unnecessary callbacks when subscribed to; use the `lazy` argument to defer initialization of array elements until the `.length` property is accessed */\n    ObservableArray.prototype.mapAsyncValues = function (callback, thisArg, lazy) {\n        var _this = this;\n        // keep track of previously seen values in a Map (with \"semi-polyfill\")\n        var _get, _add;\n        var _del;\n        var _forEach;\n        if (typeof Map === \"function\") {\n            // use native Map implementation\n            var map = new Map();\n            _get = map.get.bind(map), _add = map.set.bind(map);\n            _forEach = map.forEach.bind(map);\n            _del = map.delete.bind(map);\n        }\n        else {\n            // use minimal approximation of Map methods\n            var ownMap = [];\n            _add = function (v, o) { ownMap.push({ v: v, o: o }); };\n            _get = function (v) {\n                var result;\n                ownMap.some(function (x) { return (x.v === v ? (result = x.o, true) : false); });\n                return result;\n            };\n            _del = function (v) {\n                ownMap.some(function (x, i) { return (x.v === v ? !!ownMap.splice(i, 1) : false); });\n            };\n            _forEach = function (f) {\n                ownMap.slice(0).forEach(function (x) { return f(x.o, x.v); });\n            };\n        }\n        // keep track of all current inputs to be able to prune the map\n        // (really only works when entire array is subscribed to)\n        var currentInputs = [];\n        var timer = -1;\n        var deferPrune = function () {\n            if (timer >= 0)\n                clearTimeout(timer);\n            var myTimer = timer = setTimeout(function () {\n                if (myTimer === timer) {\n                    timer = -1;\n                    var len = _this.length;\n                    if (currentInputs.length > len)\n                        currentInputs.length = len;\n                    _forEach(function (o, v) {\n                        currentInputs.indexOf(v) < 0 && _del(v);\n                    });\n                }\n            }, 1);\n        };\n        // prune the map when the array gets shorter\n        var pruning = false;\n        var subscribeToPrune = function () {\n            pruning = true;\n            unobserved(function () {\n                new Observable_ObservableValue(function () { return _this.length; }).subscribe(function (len) {\n                    if (currentInputs.length > len)\n                        deferPrune();\n                });\n            });\n        };\n        // map input array to another observable array\n        var ownNaN = {}, ownUndefined = {};\n        return this.mapAsync(function (v, i) {\n            var defv = v === undefined ? ownUndefined :\n                (typeof v === \"number\" && isNaN(v)) ? ownNaN : v;\n            if (currentInputs[i] !== undefined && currentInputs[i] !== defv)\n                deferPrune();\n            else if (!pruning)\n                subscribeToPrune();\n            currentInputs[i] = defv;\n            // return last result for same input value if found\n            var found = _get(defv);\n            if (found !== undefined)\n                return found;\n            // get result for current input value and keep it for later\n            var o = callback.call(thisArg || _this, v);\n            _add(defv, o);\n            return o;\n        }, undefined, lazy);\n    };\n    /** Create a read-only observable array that contains all values from the original array and all nested (observable) arrays, optionally removing gaps (i.e. undefined or null elements); the resulting array and its length _always_ change asynchronously with the contents of the original array, even if not subscribed to a value or the length property; use the `lazy` argument to defer initialization of array elements until the `.length` property is accessed */\n    ObservableArray.prototype.flattenAsync = function (removeGaps, lazy) {\n        var _this = this;\n        // create an observable that all other properties depend on; this is\n        // where the flattening actually happens, asynchronously\n        var nonObservableFlat = [];\n        var count = 0, lastCount;\n        var o = new Observable_ObservableValue(function () {\n            var i = 0;\n            var f = function (a) {\n                for (var _i = 0, a_1 = a; _i < a_1.length; _i++) {\n                    var v = a_1[_i];\n                    if (v instanceof Array) {\n                        // recurse on arrays, to add elements in this position\n                        f(v);\n                    }\n                    else if (!removeGaps || v !== undefined && v !== null) {\n                        // add element to result\n                        nonObservableFlat[i++] = v;\n                    }\n                }\n            };\n            f(_this);\n            nonObservableFlat.length = i;\n            // always return something new to force updates\n            return (lastCount = ++count);\n        });\n        // use the observable value to update flattened array\n        // (temporarily subscribe to avoid flattening again within\n        // current defer timeframe)\n        function flattenAutoSubscribe() {\n            if (!o.subscribed && !Observable_ObservableValue.isObserving()) {\n                unobserved(function () {\n                    var temp = o.map(function (v) { return v; }).subscribe();\n                    Defer_defer(function () { temp.clear(); });\n                });\n            }\n            o.value;\n        }\n        // proxy all flattened properties in result\n        var makeItem = function (i) {\n            var io = new Observable_ObservableValue(function () {\n                // flatten the array first, if needed\n                flattenAutoSubscribe();\n                return nonObservableFlat[i];\n            });\n            return io;\n        };\n        // now, map all properties from this observable\n        var result = new ObservableArray();\n        var _length = 0;\n        Object.defineProperty(result, \"length\", {\n            get: function () {\n                // flatten the array first, if needed\n                flattenAutoSubscribe();\n                var newLength = nonObservableFlat.length;\n                if (newLength > _length) {\n                    unobserved(function () {\n                        // make new numeric properties observable\n                        for (var l = _length; l < newLength; l++)\n                            makePropertyObservable(result, l, makeItem(l));\n                    });\n                }\n                else if (newLength < _length) {\n                    unobserved(function () {\n                        // clear removed properties\n                        for (var l = newLength; l < _length; l++)\n                            deleteObservableProperty(result, l);\n                    });\n                }\n                return _length = newLength;\n            },\n            set: function () {\n                throw new Error(\"Cannot modify length of flattened array\");\n            }\n        });\n        // initialize all values\n        if (!lazy)\n            unobserved(function () { return result.length; });\n        return result;\n    };\n    /** Represent observable arrays as regular JSON arrays */\n    ObservableArray.prototype.toJSON = function () {\n        return this.slice(0);\n    };\n    return ObservableArray;\n}());\n\nvar _mapAsync = ObservableArray_ObservableArray.prototype.mapAsync;\nvar _mapAsyncValues = ObservableArray_ObservableArray.prototype.mapAsyncValues;\nvar _flattenAsync = ObservableArray_ObservableArray.prototype.flattenAsync;\nvar _toJSON = ObservableArray_ObservableArray.prototype.toJSON;\nObservableArray_ObservableArray.prototype = new Array;\nObservableArray_ObservableArray.prototype.constructor = ObservableArray_ObservableArray;\nObservableArray_ObservableArray.prototype.mapAsync = _mapAsync;\nObservableArray_ObservableArray.prototype.mapAsyncValues = _mapAsyncValues;\nObservableArray_ObservableArray.prototype.flattenAsync = _flattenAsync;\nObservableArray_ObservableArray.prototype.toJSON = _toJSON;\n// these functions should not depend on .length but would if not wrapped\nvar _arrayPush = ObservableArray_ObservableArray.prototype.push;\nObservableArray_ObservableArray.prototype.push = function () {\n    var _this = this;\n    var items = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        items[_i] = arguments[_i];\n    }\n    return unobserved(function () { return _arrayPush.apply(_this, items); });\n};\nvar _arrayUnshift = ObservableArray_ObservableArray.prototype.unshift;\nObservableArray_ObservableArray.prototype.unshift = function () {\n    var _this = this;\n    var items = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        items[_i] = arguments[_i];\n    }\n    return unobserved(function () { return _arrayUnshift.apply(_this, items); });\n};\n// override concat, which otherwise would see ObservableArrays as values:\nObservableArray_ObservableArray.prototype.concat = function () {\n    var items = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        items[_i] = arguments[_i];\n    }\n    return Array.prototype.concat.apply(this.slice(0), items.map(function (item) { return (item instanceof ObservableArray_ObservableArray) ? item.slice(0) : item; }));\n};\n/** Returns an ObservableArray instance based on the result of given function: if the returned value is an array, then all elements are copied to the result; if the returned value is an observable array, all elements are proxied; if the returned value is not an array, the result contains this value as a single element; if the returned value is null or undefined, the result will be an empty array; changes in values/elements are reflected asynchronously */\nfunction observeArray(f) {\n    return ObservableArray_ObservableArray.fromObservableValue(new Observable_ObservableValue(f));\n}\n\n// CONCATENATED MODULE: ./dist/core/lib/Async/Observable.js\n\n\n\n\n\n/** Watched observable currently evaluating, if any; used to connect dependencies through signals */\nvar currentWatchedEvaling;\n/** Unwatched observable currently evaluating, if any; used to collect dependencies for dirty checking */\nvar currentUnwatchedEvaling;\n/** @internal Throws an error if currently running an observable getter */\nfunction assertUnobserved() {\n    if (currentWatchedEvaling || currentUnwatchedEvaling)\n        throw new Error(\"Observable getter must be a pure function, \" +\n            \"cannot create or set other observables\");\n}\n/** Represents an observable value (with the value itself in `.value`) */\nvar Observable_ObservableValue = (function () {\n    /** Create a new (single) observed value using optional getter and setter functions; note that getters *should* be pure functions without side effects, creating or setting other observables from the getter will result in an error; getter is not called immediately but only when being subscribed to or when obtaining the value itself (from `.value`) */\n    function ObservableValue(getter, setter) {\n        /** @internal Unique ID used to quickly index dependants of observables */\n        this._uid = String(++ObservableValue.UID);\n        /** @internal Counter that is incremented every time the value becomes unstable (i.e. value set directly, dependency changed, etc.) */\n        this._dirtyIdx = 0;\n        assertUnobserved();\n        // hold off on evaluating until value getter is called\n        if (getter) {\n            this._getter = getter;\n            this._dirtyIdx++;\n        }\n        this._setter = setter;\n    }\n    /** Returns true if currently running in a subscribed-to observable context (i.e. evaluating an observable value, recording dependencies on other observable values being accessed from this context) */\n    ObservableValue.isObserving = function () {\n        return !!currentWatchedEvaling;\n    };\n    /** Encapsulate given value as an ObservableValue */\n    ObservableValue.fromValue = function (value) {\n        var result = new ObservableValue();\n        result.value = value;\n        return result;\n    };\n    /** Encapsulate given promised value as an ObservableValue; the observed value will start out as `undefined` but then changes to the `Promise` result when resolved; or if promise was rejected, hangs on to the error and throws it when retrieving the observable value */\n    ObservableValue.fromPromise = function (valuePromise) {\n        var result = new ObservableValue();\n        if (valuePromise instanceof Promise_Promise) {\n            // shortcut promise status to avoid async\n            var status = valuePromise._getStatus();\n            if (status) {\n                if (status.rejected) {\n                    // set value to \"error\" to trigger change signal\n                    result.value = \"error\";\n                    result._error = status.error;\n                    result._ro = result._nc = true;\n                    return result;\n                }\n                else {\n                    // set value to resolved promise value\n                    result.value = status.value;\n                    result._ro = result._nc = true;\n                    return result;\n                }\n            }\n            // if not fulfilled yet, use .then anyway:\n        }\n        valuePromise.then(function (value) {\n            // set value to resolved promise value\n            result.value = value;\n            result._ro = result._nc = true;\n        }, function (error) {\n            // set value to \"error\" to trigger change signal\n            result.value = \"error\";\n            result._error = error;\n            result._ro = result._nc = true;\n        });\n        return result;\n    };\n    /** Connect to given `Signal`, and create a read-only observable value that always contains the last emitted signal value (initially undefined; the value is only set after the next time the signal is emitted) */\n    ObservableValue.fromSignal = function (signal) {\n        var result = new ObservableValue();\n        result._ro = true;\n        signal._connect(function (v) {\n            result._ro = false;\n            result.value = v;\n            result._ro = true;\n        });\n        return result;\n    };\n    /** Set a getter function for the observable value, which should return a current value, or another ObservableValue instance, or set `.value` directly; note that getters *should* be pure functions without side effects, creating or setting other observables from the getter will result in an error; the getter is only invoked (asynchronously) if a value had been set previously and needs to be updated; reading `.value` from the getter results in the value previously set, no recursion occurs; returns this */\n    ObservableValue.prototype.getter = function (f) {\n        if (this._ro)\n            throw new Error(\"Cannot modify this observable value\");\n        assertUnobserved();\n        this._getter = f;\n        // remove current static value and re-eval if needed\n        if (Object.prototype.hasOwnProperty.call(this, \"_val\")) {\n            if (f)\n                delete this._val;\n            this._asyncEval();\n        }\n        if (!f) {\n            // remove all (old getter's) dependencies if clearing getter\n            this._removeDependencies();\n        }\n        return this;\n    };\n    /** Set a setter function for the observable value; setting `.value` directly from the setter results in changing the underlying observable value (which can also be read by the getter, or the setter itself), no recursion occurs; returns this */\n    ObservableValue.prototype.setter = function (f) {\n        if (this._ro)\n            throw new Error(\"Cannot modify this observable value\");\n        assertUnobserved();\n        this._setter = f;\n        return this;\n    };\n    Object.defineProperty(ObservableValue.prototype, \"value\", {\n        /** Observable value, (re-) evaluated only if necessary; when set to an `ObservableValue` instance, this property returns that instance's value, until this property is set to another value (except if the `ObservableValue` has a setter, which is called first); plain Array values are turned into `ObservableArray` instances, and plain Object instances into `ObservableObject` instances --- unless `.shallow` is set to true */\n        get: function () {\n            var _this = this;\n            if (this._error)\n                throw this._error;\n            // return current value if running getter, setter, or value will not\n            // change and is not proxied from another observable value:\n            if (this._getting && !this._set)\n                return undefined;\n            if (this._getting || this._setting ||\n                this._nc && !(this._val instanceof ObservableValue))\n                return this._val;\n            // register as dependency to previously evaluating observable\n            if (currentWatchedEvaling)\n                currentWatchedEvaling._addConnection(this);\n            else if (currentUnwatchedEvaling)\n                currentUnwatchedEvaling._addCheck(this);\n            // re-evaluate if necessary:\n            var hadValue = !!this._valIdx;\n            var oldValue = this._val;\n            if (this._needsEval()) {\n                this._oldConnections = this._depConnections;\n                // set this instance as currently evaluating to find dependencies\n                var prevWatched = currentWatchedEvaling, prevUnwatched = currentUnwatchedEvaling;\n                if (this._watched) {\n                    currentWatchedEvaling = this;\n                    this._depConnections = {};\n                }\n                else {\n                    currentUnwatchedEvaling = this;\n                    this._depChecks = [];\n                }\n                this._getting = true;\n                this._direct = false;\n                try {\n                    // store getter result or let getter set value directly\n                    var result = this._getter.call(undefined);\n                    if (!(result === undefined && this._direct))\n                        this._val = result;\n                }\n                finally {\n                    this._getting = false;\n                    // stop solliciting dependencies\n                    currentWatchedEvaling = prevWatched;\n                    currentUnwatchedEvaling = prevUnwatched;\n                    // unsubscribe from old dependencies that are no longer used\n                    var oldConnections = this._oldConnections;\n                    delete this._oldConnections;\n                    if (this._depConnections) {\n                        for (var uid in oldConnections)\n                            if (!this._depConnections[uid])\n                                oldConnections[uid].dis();\n                    }\n                }\n                // mark value as up to date\n                this._valIdx = this._dirtyIdx;\n            }\n            // return new value\n            var value = this._val;\n            // proxy other ObservableValues' values\n            var oldConnection = this._proxyConnection;\n            if (!this.shallow && value instanceof ObservableValue) {\n                if (this._watched) {\n                    // subscribers should also be notified for proxy value changes\n                    // (until next value is evaluated, or this observable is\n                    // unsubscribed from)\n                    var proxied = value;\n                    var sig = proxied;\n                    this._proxyConnection = sig.connect(function (v) {\n                        if (_this._val === proxied)\n                            _this.emitSync(v);\n                    });\n                }\n                value = value.value;\n            }\n            if (oldConnection) {\n                oldConnection.disconnect();\n                if (this._proxyConnection === oldConnection)\n                    delete this._proxyConnection;\n            }\n            // emit signal(s) if changed\n            if (hadValue && this._val !== oldValue) {\n                this._auxCallbacks && this._auxCallbacks.forEach(function (f) { return f(); });\n                this.emitSync(value);\n            }\n            return value;\n        },\n        set: function (value) {\n            if (!this._getting && !this._setting)\n                assertUnobserved();\n            // convert plain arrays and objects (unless about to run setter)\n            if (!this.shallow && (!this._setter || this._setting)) {\n                // make ObservableArray instances out of plain Arrays\n                if (value instanceof Array && value.constructor === Array) {\n                    unobserved(function () {\n                        value = ObservableArray_ObservableArray.fromArray(value);\n                    });\n                }\n                // make ObservableObject instances out of plain Objects\n                if (value instanceof Object && value.constructor === Object) {\n                    unobserved(function () {\n                        value = makeObjectObservable(value);\n                    });\n                }\n            }\n            // check what to do with the new value:\n            if (this._getting) {\n                // set value directly, no signals but mark as changed\n                this._val = value;\n                this._set = true;\n                this._direct = true;\n                this._valIdx = ++this._dirtyIdx;\n            }\n            else if (this._getter && !this._setter || this._ro) {\n                // cannot set value directly outside of getter function\n                // (or value is resolved Promise)\n                throw new Error(\"Cannot set value\");\n            }\n            else if ((!this._setter || this._setting) &&\n                (this._val instanceof ObservableValue) &&\n                this._val._setter) {\n                // proxy through observable value setter\n                this._val.value = value;\n            }\n            else if (this._setter && !this._setting) {\n                // invoke setter\n                this._setting = true;\n                try {\n                    this._setter.call(undefined, value);\n                }\n                finally {\n                    this._setting = false;\n                }\n            }\n            else if (value !== this._val) {\n                // mark value as changed (but not dirty)\n                this._valIdx = ++this._dirtyIdx;\n                // set value and emit signal(s)\n                this._val = value;\n                this._set = true;\n                this._auxCallbacks && this._auxCallbacks.forEach(function (f) { return f(); });\n                this.emitSync(value);\n            }\n            else {\n                this._set = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Returns .value (observable if used within an observable getter) */\n    ObservableValue.prototype.valueOf = function () { return this.value; };\n    /** Returns .value as a string (observable if used within an observable getter) */\n    ObservableValue.prototype.toString = function () { return String(this.value); };\n    /** Returns last value set, does not re-evaluate and/or add dependency */\n    ObservableValue.prototype.getLastValue = function () {\n        // return value or proxy other ObservableValue's value\n        var value = this._val;\n        while (value instanceof ObservableValue)\n            value = value.getLastValue();\n        return value;\n    };\n    /** Transform this observable value using given function, into a new ObservableValue instance; note that the transformation function is not necessarily invoked after each value change, if the new observable is not subscribed to and/or multiple changes occur (asynchronously) before the transformation is evaluated; observables used by the given function itself are not automatically subscribed to (wrap given function in observe(...) to observe dependencies as well) */\n    ObservableValue.prototype.map = function (callback) {\n        var _this = this;\n        var lastValue = {};\n        var mapped = new ObservableValue(function () {\n            var value = _this.value;\n            if (value === lastValue)\n                return mapped.value;\n            mapped.value = unobserved(callback, lastValue = value);\n        });\n        return mapped;\n    };\n    ObservableValue.prototype.subscribe = function (callback) {\n        var _this = this;\n        this._connect(callback);\n        // listen for signal emissions while initializing value if needed\n        var current = this._val, emitted = false, f;\n        if (this._getter || this._val instanceof ObservableValue) {\n            if (!this._auxCallbacks)\n                this._auxCallbacks = [];\n            this._auxCallbacks.push(f = function () { emitted = true; });\n            unobserved(function () { current = _this.value; });\n            if (this._auxCallbacks.length === 1)\n                delete this._auxCallbacks;\n            else\n                this._auxCallbacks = this._auxCallbacks.filter(function (v) { return v !== f; });\n        }\n        // if not already emitted signal, invoke callback for current value\n        if (!emitted)\n            callback && Defer_defer(callback, [current]);\n        return this;\n    };\n    /** Start listening for changes to this observable value and all of its dependencies asynchronously, and return a promise for the next (different) value of the observable; does _not_ force evaluation of the current value (i.e. getters are not called); stops subscribing immediately after the promise is resolved */\n    ObservableValue.prototype.next = function () {\n        var _this = this;\n        // force signal even if no value had been set yet\n        if (!this._valIdx)\n            this._valIdx = -1;\n        return new Promise_Promise(function (resolve) {\n            _this.connectOnce(function (v) { resolve(v); });\n        });\n    };\n    Object.defineProperty(ObservableValue.prototype, \"subscribed\", {\n        /** True if this observable value is currently subscribed to, either directly or from dependent observables */\n        get: function () { return !!this._watched; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ObservableValue.prototype, \"writable\", {\n        /** True if this observable value is writable (not only a getter defined) */\n        get: function () { return !(this._ro || this._getter && !this._setter); },\n        enumerable: true,\n        configurable: true\n    });\n    /** @internal Add a callback to invoke (synchronously) when this value changes, but do not watch for changes directly (i.e. does not connect to signal and start watching), callback must NOT throw an exception; used for emitting Observable.PropertyChange */\n    ObservableValue.prototype.invokeOnChange = function (callback) {\n        if (!this._auxCallbacks)\n            this._auxCallbacks = [];\n        this._auxCallbacks.push(callback);\n    };\n    /** Clear value and remove getter/setter functions, unsubscribe from dependencies */\n    ObservableValue.prototype.clear = function () {\n        this.getter(undefined).setter(undefined);\n        delete this._val;\n        delete this._set;\n    };\n    /** Manually invoke the getter function synchronously, if any; can be used only if not currently evaluating another observable value (otherwise, wrap in a call to `unobserved`); calling this method is normally not necessary, and should only be used if external factors outside of observables change in such a way that the result of the getter function changes; if so, then subsequent retrieval of `.value` results in the new value, and dependent observable values are scheduled to update automatically (asynchronously) */\n    ObservableValue.prototype.update = function () {\n        assertUnobserved();\n        if (this._getter) {\n            this._dirtyIdx++;\n            this.value;\n        }\n    };\n    /** @internal Returns true if value needs to be reevaluated */\n    ObservableValue.prototype._needsEval = function () {\n        if (!this._getter)\n            return false;\n        if ((this._valIdx || 0) !== this._dirtyIdx)\n            return true;\n        // if value is watched, then dependencies are watched too\n        // and are up to date if value is up to date (above check)\n        if (this._watched)\n            return false;\n        // check if dependencies (may) have changed since last evaluation\n        return !this._depChecks || this._depChecks.some(function (f) { return f({}); });\n    };\n    /** @internal Mark as dirty (if not already dirty) and schedule re-evaluation of value if still watched */\n    ObservableValue.prototype._asyncEval = function () {\n        var _this = this;\n        if ((this._valIdx || 0) === this._dirtyIdx && !this._getting) {\n            this._dirtyIdx++;\n            Defer_defer(function () {\n                if (_this._watched && _this._valIdx !== _this._dirtyIdx)\n                    _this.value;\n            });\n        }\n    };\n    /** @internal Register a watched dependency of this value */\n    ObservableValue.prototype._addConnection = function (other) {\n        if (other === this)\n            return;\n        if (!this._depConnections)\n            this._depConnections = {};\n        // check if connection already existed\n        var old;\n        if (this._oldConnections && (old = this._oldConnections[other._uid])) {\n            // use existing object\n            this._depConnections[other._uid] = old;\n        }\n        else {\n            // add handler to mark this value as dirty whenever other value\n            // changes (not async since signal is always emitted synchronously,\n            // see above); _connect returns disconnect method\n            var dis = other._connect(this._asyncEval.bind(this));\n            // store new dependency object\n            this._depConnections[other._uid] = { dep: other, dis: dis };\n        }\n    };\n    /** @internal Register an unwatched dependency of this value (checked for changes every time when getting the unwatched observable value) */\n    ObservableValue.prototype._addCheck = function (other) {\n        var _this = this;\n        if (other === this)\n            return;\n        // maintain a function to check if the other value has changed\n        // (different _dirtyIdx or recurse down dependency tree)\n        var lastDirtyIdx = other._dirtyIdx;\n        (this._depChecks || (this._depChecks = [])).push(function (seen) {\n            if (seen[_this._uid])\n                return true;\n            seen[_this._uid] = true;\n            return (other._dirtyIdx !== lastDirtyIdx ||\n                !other._depChecks || other._depChecks.some(function (f) { return f(seen); }));\n        });\n    };\n    /** @internal Disconnect existing dependencies */\n    ObservableValue.prototype._removeDependencies = function () {\n        delete this._depChecks;\n        var connections = this._depConnections;\n        delete this._depConnections;\n        for (var uid in connections)\n            connections[uid].dis();\n        // also disconnect from proxied observable, if any\n        if (this._proxyConnection) {\n            this._proxyConnection.disconnect();\n            delete this._proxyConnection;\n        }\n    };\n    /** @internal handler for first signal connection */\n    ObservableValue.prototype.onHandlerConnected = function () {\n        this._watched = true;\n        if (!this._depChecks || this._depChecks.length) {\n            // not sure about dependencies, force re-eval\n            this._removeDependencies();\n            this._dirtyIdx++;\n        }\n        else {\n            // no dependencies last time, no need to check\n            this._removeDependencies();\n        }\n    };\n    /** @internal handler for last signal disconnection */\n    ObservableValue.prototype.onHandlersDisconnected = function () {\n        this._watched = false;\n        this._removeDependencies();\n    };\n    /** @internal */\n    ObservableValue.UID = 0;\n    return ObservableValue;\n}());\n\n// NOTE: mixing in required signal methods here for better performance,\n// repurposing ObservableValue instances as their own change signals\nObservable_ObservableValue.prototype._connect = Signal_Signal._connect;\nObservable_ObservableValue.prototype.connect = Signal_Signal.connect;\nObservable_ObservableValue.prototype.connectOnce = Signal_Signal.connectOnce;\nObservable_ObservableValue.prototype.emitSync = Signal_Signal.emitSync;\nfunction observe(v) {\n    return (typeof v === \"function\") ? new Observable_ObservableValue(v) :\n        (v && typeof v === \"object\" && typeof v.then === \"function\") ?\n            Observable_ObservableValue.fromPromise(v) :\n            (v instanceof Array) ?\n                ObservableArray_ObservableArray.fromArray(v) :\n                (v instanceof Object) ?\n                    makeObjectObservable(v) :\n                    (function () { throw new TypeError(); })();\n}\nfunction unobserved(f) {\n    var prevWatched = currentWatchedEvaling;\n    var prevUnwatched = currentUnwatchedEvaling;\n    try {\n        currentWatchedEvaling = undefined;\n        currentUnwatchedEvaling = undefined;\n        return f.apply(this, Array.prototype.slice.call(arguments, 1));\n    }\n    finally {\n        currentWatchedEvaling = prevWatched;\n        currentUnwatchedEvaling = prevUnwatched;\n    }\n}\n\n// CONCATENATED MODULE: ./dist/core/lib/Async/Inject.js\n\n\n/** _Property decorator_, makes a property observable on every instance, with a read-only value shared across all instances taken from an (earlier OR later) call to `inject`, *until* the property is directly assigned to [requires ES5+ target] [decorator] */\nfunction injectable(target, key, descriptor) {\n    if (!descriptor)\n        descriptor = { enumerable: true };\n    // capture existing value (e.g. method on prototype)\n    var value = descriptor.value;\n    delete descriptor.value;\n    delete descriptor.writable;\n    // use a single observable per class to capture the last injected value\n    var injector = Observable_ObservableValue.fromValue(value);\n    descriptor.get = function () {\n        var _this = this;\n        unobserved(function () {\n            makePropertyObservable(_this, key, Observable_ObservableValue.fromValue(injector));\n        });\n        return this[key];\n    };\n    // setter just initializes an observable with given value\n    // (will ignore injection altogether)\n    descriptor.set = function (value) {\n        makePropertyObservable(this, key);\n        this[key] = value;\n    };\n    // store a reference to the observable injector value\n    descriptor.get[\"*injector\"] = injector;\n    return descriptor;\n}\n/** Set given injectable observable properties (decorated with `injectable`) on *all* instances of given class and derived classes to the given values, except for instances where the property has been overwritten directly; may be called multiple times even with the same properties to redefine their injected value; returns an object that contains the previous injected values (for e.g. overriding an injected function that calls into the previously injected function; when injecting into a derived class, these properties use accessors to return latest overridden injected values on base class(es) dynamically) */\nfunction inject(targetClass, spec) {\n    var result = {};\n    var _loop_1 = function () {\n        if (!Object.prototype.hasOwnProperty.call(spec, name))\n            return \"continue\";\n        // get the injector observable for the property on given prototype,\n        // add a value or getter on the result object that reflects the old OR\n        // overridden (observable) value\n        var getInjector = function (proto, d) {\n            if (!proto)\n                return undefined;\n            var desc = Object.getOwnPropertyDescriptor(proto, name);\n            if (!desc || !desc.get || !desc.get[\"*injector\"]) {\n                // recurse if not defined at this level\n                var getter_1 = function () { return getInjector(Object.getPrototypeOf(proto)); };\n                var injector_1 = getter_1();\n                if (d && injector_1) {\n                    // found the injector further down the prototype chain\n                    d.get = function () { return getter_1().getLastValue(); };\n                }\n                return injector_1;\n            }\n            else {\n                // found the injector observable\n                var injector_2 = desc.get[\"*injector\"];\n                if (d) {\n                    // store the last value\n                    d.value = injector_2.getLastValue();\n                }\n                return injector_2;\n            }\n        };\n        d = { enumerable: true, configurable: false };\n        injector = getInjector(targetClass.prototype, d);\n        if (!injector)\n            throw new TypeError(\"Not an injected property: \" + name);\n        // store getter or value on result object\n        Object.defineProperty(result, name, d);\n        // if injecting on derived class, use overriding injector instead\n        if (d.get) {\n            override = injectable(targetClass.prototype, name);\n            Object.defineProperty(targetClass.prototype, name, override);\n            injector = override.get[\"*injector\"];\n        }\n        // set the new value in the (new) injector observable\n        injector.value = spec[name];\n    };\n    var d, injector, override;\n    for (var name in spec) {\n        _loop_1();\n    }\n    return result;\n}\n\n// CONCATENATED MODULE: ./dist/core/lib/Async/index.js\nvar Async_namespaceObject = {};\n__webpack_require__.d(Async_namespaceObject, \"defer\", function() { return Defer_defer; });\n__webpack_require__.d(Async_namespaceObject, \"runYield\", function() { return runYield; });\n__webpack_require__.d(Async_namespaceObject, \"Signal\", function() { return Signal_Signal; });\n__webpack_require__.d(Async_namespaceObject, \"UnhandledException\", function() { return UnhandledException; });\n__webpack_require__.d(Async_namespaceObject, \"Promise\", function() { return Promise_Promise; });\n__webpack_require__.d(Async_namespaceObject, \"sleep\", function() { return sleep; });\n__webpack_require__.d(Async_namespaceObject, \"assertUnobserved\", function() { return assertUnobserved; });\n__webpack_require__.d(Async_namespaceObject, \"ObservableValue\", function() { return Observable_ObservableValue; });\n__webpack_require__.d(Async_namespaceObject, \"observe\", function() { return observe; });\n__webpack_require__.d(Async_namespaceObject, \"unobserved\", function() { return unobserved; });\n__webpack_require__.d(Async_namespaceObject, \"ObservableArray\", function() { return ObservableArray_ObservableArray; });\n__webpack_require__.d(Async_namespaceObject, \"observeArray\", function() { return observeArray; });\n__webpack_require__.d(Async_namespaceObject, \"ObservableObject\", function() { return ObservableObject_ObservableObject; });\n__webpack_require__.d(Async_namespaceObject, \"makeObjectObservable\", function() { return makeObjectObservable; });\n__webpack_require__.d(Async_namespaceObject, \"makePropertyObservable\", function() { return makePropertyObservable; });\n__webpack_require__.d(Async_namespaceObject, \"deleteObservableProperty\", function() { return deleteObservableProperty; });\n__webpack_require__.d(Async_namespaceObject, \"isObservableProperty\", function() { return isObservableProperty; });\n__webpack_require__.d(Async_namespaceObject, \"unobservable\", function() { return unobservable; });\n__webpack_require__.d(Async_namespaceObject, \"unobservable_memoize_get\", function() { return unobservable_memoize_get; });\n__webpack_require__.d(Async_namespaceObject, \"observable\", function() { return observable; });\n__webpack_require__.d(Async_namespaceObject, \"observable_string\", function() { return observable_string; });\n__webpack_require__.d(Async_namespaceObject, \"observable_number\", function() { return observable_number; });\n__webpack_require__.d(Async_namespaceObject, \"observable_shallow\", function() { return observable_shallow; });\n__webpack_require__.d(Async_namespaceObject, \"observable_not_null\", function() { return observable_not_null; });\n__webpack_require__.d(Async_namespaceObject, \"observable_nonNull\", function() { return observable_nonNull; });\n__webpack_require__.d(Async_namespaceObject, \"observable_seal\", function() { return observable_seal; });\n__webpack_require__.d(Async_namespaceObject, \"observable_freeze\", function() { return observable_freeze; });\n__webpack_require__.d(Async_namespaceObject, \"injectable\", function() { return injectable; });\n__webpack_require__.d(Async_namespaceObject, \"inject\", function() { return inject; });\n\n\n\n\n\n\n\n\n// CONCATENATED MODULE: ./dist/core/lib/Async.js\n\n\n/* harmony default export */ var Async_defaultExport = (Async_namespaceObject);\n\n// CONCATENATED MODULE: ./dist/dom/node_modules/@typescene/core/Async.js\n\n// CONCATENATED MODULE: ./dist/dom/lib/Async.js\nvar dom_lib_Async_namespaceObject = {};\n__webpack_require__.d(dom_lib_Async_namespaceObject, \"defer\", function() { return Defer_defer; });\n__webpack_require__.d(dom_lib_Async_namespaceObject, \"runYield\", function() { return runYield; });\n__webpack_require__.d(dom_lib_Async_namespaceObject, \"Signal\", function() { return Signal_Signal; });\n__webpack_require__.d(dom_lib_Async_namespaceObject, \"UnhandledException\", function() { return UnhandledException; });\n__webpack_require__.d(dom_lib_Async_namespaceObject, \"Promise\", function() { return Promise_Promise; });\n__webpack_require__.d(dom_lib_Async_namespaceObject, \"sleep\", function() { return sleep; });\n__webpack_require__.d(dom_lib_Async_namespaceObject, \"assertUnobserved\", function() { return assertUnobserved; });\n__webpack_require__.d(dom_lib_Async_namespaceObject, \"ObservableValue\", function() { return Observable_ObservableValue; });\n__webpack_require__.d(dom_lib_Async_namespaceObject, \"observe\", function() { return observe; });\n__webpack_require__.d(dom_lib_Async_namespaceObject, \"unobserved\", function() { return unobserved; });\n__webpack_require__.d(dom_lib_Async_namespaceObject, \"ObservableArray\", function() { return ObservableArray_ObservableArray; });\n__webpack_require__.d(dom_lib_Async_namespaceObject, \"observeArray\", function() { return observeArray; });\n__webpack_require__.d(dom_lib_Async_namespaceObject, \"ObservableObject\", function() { return ObservableObject_ObservableObject; });\n__webpack_require__.d(dom_lib_Async_namespaceObject, \"makeObjectObservable\", function() { return makeObjectObservable; });\n__webpack_require__.d(dom_lib_Async_namespaceObject, \"makePropertyObservable\", function() { return makePropertyObservable; });\n__webpack_require__.d(dom_lib_Async_namespaceObject, \"deleteObservableProperty\", function() { return deleteObservableProperty; });\n__webpack_require__.d(dom_lib_Async_namespaceObject, \"isObservableProperty\", function() { return isObservableProperty; });\n__webpack_require__.d(dom_lib_Async_namespaceObject, \"unobservable\", function() { return unobservable; });\n__webpack_require__.d(dom_lib_Async_namespaceObject, \"unobservable_memoize_get\", function() { return unobservable_memoize_get; });\n__webpack_require__.d(dom_lib_Async_namespaceObject, \"observable\", function() { return observable; });\n__webpack_require__.d(dom_lib_Async_namespaceObject, \"observable_string\", function() { return observable_string; });\n__webpack_require__.d(dom_lib_Async_namespaceObject, \"observable_number\", function() { return observable_number; });\n__webpack_require__.d(dom_lib_Async_namespaceObject, \"observable_shallow\", function() { return observable_shallow; });\n__webpack_require__.d(dom_lib_Async_namespaceObject, \"observable_not_null\", function() { return observable_not_null; });\n__webpack_require__.d(dom_lib_Async_namespaceObject, \"observable_nonNull\", function() { return observable_nonNull; });\n__webpack_require__.d(dom_lib_Async_namespaceObject, \"observable_seal\", function() { return observable_seal; });\n__webpack_require__.d(dom_lib_Async_namespaceObject, \"observable_freeze\", function() { return observable_freeze; });\n__webpack_require__.d(dom_lib_Async_namespaceObject, \"injectable\", function() { return injectable; });\n__webpack_require__.d(dom_lib_Async_namespaceObject, \"inject\", function() { return inject; });\n\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Style.js\n\n/** Next UID to be used */\nvar _nextUID = 0;\n/** Encapsulates CSS style properties, classes, and hidden/selected attributes; these styles are observed when applied to components on screen, by themselves or overridden using another Style instance (see `.override(...)`); properties are always applied in alphabetical order, i.e `backgroundColor` after `background`, `paddingTop` after `padding`, etc. */\nvar Style_Style = (function () {\n    /** Create a new instance with given styles; class name argument may contain multiple class names separated with spaces */\n    function Style(styles, className, hidden) {\n        /** Globally unique ID for this Style instance */\n        this.uid = \"S\" + _nextUID++;\n        this._keys = new Async_defaultExport.ObservableArray();\n        this._status = new Async_defaultExport.ObservableValue();\n        this._overrides = new Async_defaultExport.ObservableValue();\n        if (className !== undefined)\n            this.addClass.apply(this, className.split(/\\s+/));\n        if (hidden !== undefined)\n            hidden ? this.hide() : this.show();\n        if (styles)\n            this.set(styles);\n    }\n    /** Create a Style instance that only contains given class name(s); alias for new Style(undefined, className) */\n    Style.withClass = function (className) {\n        return new Style(undefined, className);\n    };\n    /** Add the given class name(s); returns this */\n    Style.prototype.addClass = function () {\n        var classNames = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            classNames[_i] = arguments[_i];\n        }\n        for (var _a = 0, classNames_1 = classNames; _a < classNames_1.length; _a++) {\n            var s = classNames_1[_a];\n            s = s.trim();\n            if (s)\n                this._setProperty(\".\" + s, true);\n        }\n        return this;\n    };\n    /** Remove the given class name(s), from this instance as well as any instances that this instance overrides; returns this */\n    Style.prototype.removeClass = function () {\n        var classNames = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            classNames[_i] = arguments[_i];\n        }\n        for (var _a = 0, classNames_2 = classNames; _a < classNames_2.length; _a++) {\n            var s = classNames_2[_a];\n            s = s.trim();\n            if (s)\n                this._setProperty(\".\" + s, false);\n        }\n        return this;\n    };\n    /** Remove (all) existing CSS class name(s) and use given class(es) (only on this Style instance, not on overriding or overridden styles); returns this */\n    Style.prototype.setClass = function () {\n        var _this = this;\n        var classNames = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            classNames[_i] = arguments[_i];\n        }\n        this._keys.forEach(function (name) {\n            if (name[0] === \".\")\n                _this._props[name] = false;\n        });\n        this.addClass.apply(this, classNames);\n        return this;\n    };\n    /** Returns the current CSS class name(s) stored in this instance (observable) */\n    Style.prototype.getClassName = function () {\n        return this._keys\n            .map(function (key) { return key[0] === \".\" ? \" \" + key.slice(1) : \"\"; })\n            .join(\"\").slice(1);\n    };\n    /** Returns value for given property; the property must be set explicitly on this Style instance or overriding Style instances */\n    Style.prototype.get = function (propertyName) {\n        var result = this._props && this._props[propertyName];\n        var overrides = this._overrides.value;\n        overrides && overrides.forEach(function (style) {\n            var r = style && style.get(propertyName);\n            if (r !== undefined)\n                result = r;\n        });\n        return result;\n    };\n    /** Add a drop shadow effect, with given depth factor (0-1); returns this */\n    Style.prototype.addShadowEffect = function (depth) {\n        this._setProperty(\":shadow\", depth);\n        return this;\n    };\n    Style.prototype.hide = function (hidden) {\n        if (hidden === void 0) { hidden = true; }\n        this._setProperty(\":hidden\", hidden);\n        return this;\n    };\n    /** Remove the \"hidden\" attribute; returns this */\n    Style.prototype.show = function () {\n        this._setProperty(\":hidden\", false);\n        return this;\n    };\n    /** Returns hidden state for this Style instance, true if explicitly hidden, false if explicity shown, undefined otherwise (observable) */\n    Style.prototype.isHidden = function () {\n        if (!this._props || !this._props[\":hidden\"])\n            this._setProperty(\":hidden\");\n        return this._props[\":hidden\"];\n    };\n    Style.prototype.select = function (selected) {\n        if (selected === void 0) { selected = true; }\n        this._setProperty(\":selected\", selected);\n        return this;\n    };\n    /** Remove the \"selected\" attribute; returns this */\n    Style.prototype.deselect = function () {\n        this._setProperty(\":selected\", false);\n        return this;\n    };\n    /** Returns selection state for this Style instance, true if explicitly selected, false if explicity deselected, undefined otherwise (observable) */\n    Style.prototype.isSelected = function () {\n        if (!this._props || !this._props[\":selected\"])\n            this._setProperty(\":selected\");\n        return this._props[\":selected\"];\n    };\n    Style.prototype.set = function (obj, value) {\n        if (typeof obj === \"string\") {\n            // set single property\n            this._setProperty(obj, value);\n        }\n        else if (obj instanceof Async_defaultExport.ObservableObject) {\n            // proxy all existing observable properties\n            for (var prop in obj) {\n                if (obj.hasObservableProperty(prop))\n                    this._setProperty(prop, Async_defaultExport.observe(function () { return obj[prop]; }));\n            }\n        }\n        else {\n            // copy all properties directly\n            for (var prop in obj) {\n                if (Object.prototype.hasOwnProperty.call(obj, prop))\n                    this._setProperty(prop, obj[prop]);\n            }\n        }\n        // update observable list of sorted properties\n        var sorted = this._keys;\n        if (sorted.length) {\n            var unsorted = Object.keys(this._props);\n            sorted.length = unsorted.length;\n            unsorted.sort().forEach(function (key, i) { sorted[i] = key; });\n        }\n        return this;\n    };\n    /** @internal Call given callback for each property that has been set on this Style instance, in alphabetical (ASCII) order, _plus_ properties \":hidden\", \":selected\" and \".classname\" properties if defined on this instance */\n    Style.prototype.forEachProperty = function (f) {\n        var _this = this;\n        this._keys.forEach(function (name) { f(name, _this._props[name]); });\n    };\n    /** Override styles and classes with those from given Style instance; returns this */\n    Style.prototype.override = function (style) {\n        var overrides = this._overrides.value ||\n            (this._overrides.value = new Async_defaultExport.ObservableArray());\n        if (style instanceof Async_defaultExport.ObservableValue) {\n            // add an observable value to the overrides list\n            overrides.push(Async_defaultExport.observe(function () {\n                var s = style.value;\n                if (s && !(s instanceof Style))\n                    s = Async_defaultExport.unobserved(function () { return new Style(s); });\n                return s;\n            }));\n        }\n        else if (style) {\n            // add a Style instance to the overrides list\n            if (!(style instanceof Style))\n                style = new Style(style);\n            else if (style === this)\n                throw new Error();\n            overrides.push(style);\n        }\n        return this;\n    };\n    /** Returns a list that consists of this Style instance itself, plus any recursively overriding Style instances in effect; except for instances without any non-empty properties or classes (observable) */\n    Style.prototype.getOverrides = function () {\n        var result = [];\n        var base = this;\n        (function addOverrides(s) {\n            if (!s)\n                return;\n            if (s._status.value >= (s === base ? 2 : 1))\n                result.push(s);\n            var overrides = s._overrides.value;\n            overrides && overrides.forEach(addOverrides);\n        })(this);\n        return result;\n    };\n    /** Helper method to set an observable property on `._props` to given value and set `._status` accordingly; creates the `._props` object, makes the property observable, and adds the property name to the `._keys` array if needed (but does NOT sort it) */\n    Style.prototype._setProperty = function (name, value) {\n        if (!this._props)\n            this._props = new Async_defaultExport.ObservableObject();\n        // make property observable and add to list of keys\n        if (!this._props.hasObservableProperty(name)) {\n            Async_defaultExport.makePropertyObservable(this._props, name);\n            this._keys.push(name);\n        }\n        // set value\n        this._props[name] = value;\n        // increase current status\n        var status = (value !== undefined && value !== \"\") ? 2 : 1;\n        if (!this._status.value || this._status.value < status)\n            this._status.value = status;\n    };\n    return Style;\n}());\n\n(function (Style) {\n    ;\n})(Style_Style || (Style_Style = {}));\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/ComponentSignal.js\nvar ComponentSignal___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n/** Signal that is emitted by a component instance as the result of a user action */\nvar ComponentSignal = (function (_super) {\n    ComponentSignal___extends(ComponentSignal, _super);\n    function ComponentSignal() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return ComponentSignal;\n}(Async_defaultExport.Signal));\n\n/** [implementation] \"Constructor\" wrapper for a UI signal handler */\nvar ComponentSignalHandler = (function () {\n    function ComponentSignalHandler(f) {\n        if (!this || !this.constructor ||\n            this.constructor !== ComponentSignalHandler &&\n                !(this.constructor.prototype instanceof ComponentSignalHandler))\n            throw new TypeError();\n        var result = f;\n        result.connectTo = function (signal) {\n            return signal.connect(this);\n        };\n        result.isEventHandler = true;\n        return result;\n    }\n    return ComponentSignalHandler;\n}());\n\n/** @internal Returns a new component signal class specific to a component, with given signal base class */\nfunction defineComponentSignal(base, component, properties) {\n    if (properties === void 0) { properties = {}; }\n    var sig = base.create();\n    for (var p in properties)\n        sig[p] = properties[p];\n    sig.component = component;\n    return sig;\n}\n/** Constructor for a component signal handler (no event data) */\nvar ActionHandler = (function (_super) {\n    ComponentSignal___extends(ActionHandler, _super);\n    function ActionHandler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return ActionHandler;\n}(ComponentSignalHandler));\n\n/** Signal that is emitted when a keyboard event occurs */\nvar KeyEventSignal = (function (_super) {\n    ComponentSignal___extends(KeyEventSignal, _super);\n    function KeyEventSignal() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return KeyEventSignal;\n}(ComponentSignal));\n\n/** Constructor for a keyboard event handler */\nvar KeyHandler = (function (_super) {\n    ComponentSignal___extends(KeyHandler, _super);\n    function KeyHandler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return KeyHandler;\n}(ComponentSignalHandler));\n\n/** Signal that is emitted when a mouse/pointer event occurs */\nvar PointerEventSignal = (function (_super) {\n    ComponentSignal___extends(PointerEventSignal, _super);\n    function PointerEventSignal() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return PointerEventSignal;\n}(ComponentSignal));\n\n/** Constructor for a mouse/pointer event handler */\nvar PointerHandler = (function (_super) {\n    ComponentSignal___extends(PointerHandler, _super);\n    function PointerHandler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return PointerHandler;\n}(ComponentSignalHandler));\n\n/** Signal that is emitted when a custom drag event occurs */\nvar DragEventSignal = (function (_super) {\n    ComponentSignal___extends(DragEventSignal, _super);\n    function DragEventSignal() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return DragEventSignal;\n}(ComponentSignal));\n\n/** Constructor for a drag event handler */\nvar DragHandler = (function (_super) {\n    ComponentSignal___extends(DragHandler, _super);\n    function DragHandler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return DragHandler;\n}(ComponentSignalHandler));\n\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Binding.js\nvar Binding___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n/** Represents a property binding, used with component factories to proxy values taken from the base component instance onto properties of its sub components */\nvar Binding_Binding = (function () {\n    /** Create a new binding based on the given property name/path (referring to the base component, on which .with or .initializeWith was called; resulting values can also be instances of ObservableValue or Promise), and optionally a transformation function, invoked each time the observed value changes (outside of any observable context, like `map` on `ObservableValue`, i.e. no further dependencies are recorded); if no path is specified, the name of the initializer property that contains this binding is used, if any */\n    function Binding(sourcePath, getTransform) {\n        if (typeof sourcePath === \"string\") {\n            sourcePath = String(sourcePath || \"\");\n            if (this._neg = sourcePath[0] === \"!\")\n                sourcePath = sourcePath.slice(1);\n            this._p = sourcePath.split(\".\");\n        }\n        this._fget = getTransform;\n    }\n    /** Construct an ObservableValue that is bound to the value on given component (used by factory initializer to apply binding) */\n    Binding.prototype.observeOn = function (component, name) {\n        var parts = this._p, neg = this._neg, fget = this._fget;\n        if (!parts)\n            parts = [name || \"\"];\n        var getter = neg ?\n            (function (f) { return function () { return !f(); }; })(makePathFinder(parts, component)) :\n            makePathFinder(parts, component);\n        return fget ?\n            Async_defaultExport.observe(getter).map(function (v) { return unpromise(fget(v, component)); }) :\n            Async_defaultExport.observe(function () { return unpromise(getter()); });\n    };\n    return Binding;\n}());\n\n/** Represents a two-way binding (`Binding` that also includes a setter on the proxy property) */\nvar TwoWayBinding = (function (_super) {\n    Binding___extends(TwoWayBinding, _super);\n    /** Create a new two-way binding based on the given property name/path (see `new Binding`), and optionally a transformation function, invoked each time a new value is being set (outside of any observable context); if no path is specified, the name of the initializer property that contains this binding is used, if any */\n    function TwoWayBinding(sourcePath, getTransform, setTransform) {\n        var _this = _super.call(this, sourcePath, getTransform) || this;\n        _this._fset = setTransform;\n        if (sourcePath && sourcePath.slice(-2) === \"()\")\n            throw new Error(\"Invalid binding: cannot assign to a method\");\n        return _this;\n    }\n    /** Make an ObservableValue that is bound to the value on given component (used by factory initializer to apply binding) */\n    TwoWayBinding.prototype.observeOn = function (component, name) {\n        var result = _super.prototype.observeOn.call(this, component, name);\n        var parts = this._p, neg = this._neg, fset = this._fset;\n        if (!parts)\n            parts = [name || \"\"];\n        var baseFinder = makePathFinder(parts.slice(0, -1), component);\n        var target = parts[parts.length - 1];\n        result.setter(function (value) {\n            var obj = baseFinder();\n            if (obj) {\n                if (fset)\n                    value = fset(neg ? !value : value, component);\n                else if (neg)\n                    value = !value;\n                obj[target] = value;\n            }\n        });\n        return result;\n    };\n    return TwoWayBinding;\n}(Binding_Binding));\n\n/** Represents an array property binding, used with component factories to proxy arrays taken from the base component instance onto array properties of its sub components; all arrays are _lazily bound_, i.e. elements remain undefined until their `length` property has been evaluated */\nvar Binding_ArrayBinding = (function (_super) {\n    Binding___extends(ArrayBinding, _super);\n    function ArrayBinding(sourcePath, getTransform, itemTransform, uniqueValues, flatten) {\n        var _this = _super.call(this, sourcePath, getTransform) || this;\n        _this._eltset = itemTransform;\n        _this._flatten = flatten;\n        _this._mapValues = uniqueValues;\n        return _this;\n    }\n    /** Make an ObservableValue that is bound to the value on given component (used by factory initializer to apply binding); wraps an observable array in an observable value; for better performance, use `.observeArrayOn(...)` directly (used by component factory initializer) */\n    ArrayBinding.prototype.observeOn = function (component, name) {\n        return Async_defaultExport.ObservableValue.fromValue(this.observeArrayOn(component, name));\n    };\n    /** Make an ObservableArray that is bound to the value on given component (used by factory initializer to apply binding); since accessing the bound value at time of binding may be premature, all array elements remain undefined _until_ the `length` property is accessed (e.g. from an observable context such as a component renderer) */\n    ArrayBinding.prototype.observeArrayOn = function (component, name) {\n        // create a lazily-initialized observable array\n        var result = Async_defaultExport.ObservableArray.fromObservableValue(_super.prototype.observeOn.call(this, component, name), true);\n        if (this._eltset) {\n            // additional transformation of values: use mapAsync[Values]\n            var setter_1 = this._eltset;\n            result = this._mapValues ?\n                result.mapAsyncValues(function (v) { return setter_1(v, component); }, undefined, true) :\n                result.mapAsync(function (v) { return setter_1(v, component); }, undefined, true);\n        }\n        if (this._flatten) {\n            // additional flattening required (transformation may return array)\n            result = result.flattenAsync(true, true);\n        }\n        return result;\n    };\n    return ArrayBinding;\n}(Binding_Binding));\n\nfunction bind(sourcePath, getTransform) {\n    return new Binding_Binding(sourcePath, getTransform);\n}\nfunction bind2(sourcePath, getTransform, setTransform) {\n    return new TwoWayBinding(sourcePath, getTransform, setTransform);\n}\n/** Create a new `ArrayBinding` for given property name/path on the base component, which should contain an array; the binding resolves to an observable array of instances of given `Component` class (with a constructor that takes one or two arguments: the original array element value, and optionally the base component reference); for use in a component initializer; uses `mapAsync` on the observable array by default: deleting a value in the middle of the array will trigger reinstantiation of all components after it; to use `mapAsyncValues` for better results with arrays of objects, set the `uniqueValues` argument to true; to create components asynchronously in batches, set the `batchSize` argument to a number; all arrays are _lazily bound_, i.e. elements remain undefined until their `length` property has been evaluated */\nfunction bindComponents(sourcePath, componentClass, uniqueValues, batchSize) {\n    if (batchSize === void 0) { batchSize = 0; }\n    var f = function (value, baseComponent) { return new componentClass(value, baseComponent); };\n    return new Binding_ArrayBinding(sourcePath, undefined, _getBatchTransformer(f, batchSize), uniqueValues);\n}\n/** @internal Helper function to generate a getter/transformation function that either returns a result right away or returns a promise that is resolved asynchronously based on given batch size */\nfunction _getBatchTransformer(f, batchSize) {\n    // create components straight away if no batch size specified\n    if (!batchSize)\n        return f;\n    // use a promise to create components in batches\n    var p;\n    var n = 0;\n    return function () {\n        var args = Array.prototype.slice.call(arguments);\n        var resolve = function () { return f.apply(undefined, args); };\n        if (n++ === batchSize) {\n            // another batch processed, delay further\n            p = p ? p.then(function () { return Async_defaultExport.sleep(0); }) : Async_defaultExport.sleep(0);\n            n = 1;\n        }\n        return p ? p.then(resolve) : resolve();\n    };\n}\n// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n// HELPER FUNCTIONS\n/** Helper function to unpack promises transparently */\nfunction unpromise(v) {\n    return (v && typeof v === \"object\" && typeof v.then === \"function\") ?\n        Async_defaultExport.unobserved(function () { return Async_defaultExport.ObservableValue.fromPromise(v); }) : v;\n}\n/** Helper function to make a getter for the given path segment \"...()\" on the result of a chained getter function */\nfunction makeFuncGetter(getter, s) {\n    s = s.slice(0, -2);\n    return function () {\n        var base = getter();\n        return (base && (typeof base[s] === \"function\")) ?\n            base[s]() : undefined;\n    };\n}\n/** Helper function to make a getter for a component by ID \"$(...)\" on the result of a chained getter function */\nfunction makeIDGetter(getter, s) {\n    s = s.slice(2, -1);\n    return function () {\n        var c = getter();\n        return c && c.getComponentById(s);\n    };\n}\n/** Helper function to create a function that returns the value of a property with given path segments on the given base component */\nfunction makePathFinder(parts, component) {\n    var f = function () { return component; };\n    return parts.reduce(function (f, s) {\n        // identity:\n        if (s === \"$\" || s === \"$()\")\n            return f;\n        // get component by ID\n        if (s[0] === \"$\" && s[1] === \"(\" && s.slice(-1) === \")\")\n            return makeIDGetter(f, s);\n        // getter call:\n        if (s.slice(-2) === \"()\")\n            return makeFuncGetter(f, s);\n        // property getter:\n        return function () { return (f() || {})[s]; };\n    }, f);\n}\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/TextLabelFactory.js\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** Shared factory implementation for a piece of text as a string and/or as (an observable value representing) a Label instance (or sub class); can be used in Component factory specs using UI.tl(...) or with backticks */\nvar TextLabelFactory_TextLabelFactory = (function () {\n    /** Create the text label factory using the given string, stringable (object with a `toString` method), or observable value, along with an optional array of (observable) substitution arguments or a function that returns such an array for a component to bind to, and a Label base class that is used if not overridden by string content prefix */\n    function TextLabelFactory(text, args, observeArgs, baseClass) {\n        this._value = text;\n        if (args)\n            this._args = args;\n        if (observeArgs)\n            this._observe = true;\n        if (baseClass)\n            this._baseClass = baseClass;\n    }\n    /** Get the (translated) encapsulated text as a string; adds a dependency on the observable value if called from an observable value getter; trims {...} prefix if present */\n    TextLabelFactory.prototype.toString = function () {\n        // return string (use ObservableValue:toString if needed)\n        if (typeof this._args === \"function\")\n            throw new Error(\"Cannot resolve bindings in text label\");\n        return this._toString(this._args).replace(/^\\{[^\\}]\\}/, \"\");\n    };\n    /** Get the encapsulated text wrapped in a new Label (or derived) instance, or an observable value representing the instance; uses {...} prefix to control component type and its properties; parameters are used by component factory to initialize bindings used in `tl` strings, if any */\n    TextLabelFactory.prototype.getComponent = function (baseComponent, propertyName) {\n        var _this = this;\n        var args = (typeof this._args === \"function\") ?\n            this._args(baseComponent, propertyName) : this._args;\n        if (this._observe) {\n            // map the observable value to a Label instance\n            var label;\n            return Async_defaultExport.observe(function () { return _this._toString(args); })\n                .map(function (text) { return (label = _this._createComponent(text, label)); });\n        }\n        else {\n            // just create and return the component itself\n            return this._createComponent(this._toString(args));\n        }\n    };\n    /** @internal Injectable method to translate given text (including substitution and pluralization placeholders); injected by App sub module to proxy the `culture` service */\n    TextLabelFactory.prototype[_a = \"@translateText\"] = function (text) { return text; };\n    /** @internal Injectable method to pick a plural form for given number; defaults to English (singular/plural) forms; injected by App sub module to proxy the `culture` service */\n    TextLabelFactory.prototype[_b = \"@pluralizeText\"] = function (n, forms) {\n        return (n > 1 || n < -1) ? (forms[1] || forms[0]) : forms[0];\n    };\n    /** Returns string value with specific substituted arguments */\n    TextLabelFactory.prototype._toString = function (args) {\n        var _this = this;\n        var val = String(this._value);\n        // find out where prefix ends, if any\n        var start = val[0] === \"{\" ? val.indexOf(\"}\") + 1 : 0;\n        if (start === val.length)\n            return val;\n        // translate text itself\n        var text = val.slice(start);\n        if (args && args.length && text === \"%{1}\") {\n            // shortcut: substitute first argument right away\n            return val.slice(0, start) + args[0];\n        }\n        text = this[\"@translateText\"](text);\n        // replace substitutions and put the string back together\n        return val.slice(0, start) + text.replace(/%\\{(\\d+)((?:\\|[^\\|\\}]*)+)?\\}/g, function (s, n, plu) {\n            // ignore substitution/pluralization placeholder if no argument\n            if (!args || args.length < n)\n                return s;\n            // get value and either pluralize or substitute\n            var val = args[parseInt(n, 10) - 1];\n            if (plu)\n                return _this[\"@pluralizeText\"](val, plu.slice(1).split(\"|\"));\n            else\n                return String(val);\n        });\n    };\n    /** Helper function to turn text into a component instance (possibly reusing given old Label instance) */\n    TextLabelFactory.prototype._createComponent = function (str, prev) {\n        var LabelClass = this._baseClass;\n        var icon, width;\n        var style;\n        var setStyle = function (key, value) {\n            if (!style)\n                style = new Style_Style();\n            style.set(key, value);\n        };\n        if (str[0] === \"{\") {\n            var idx = str.indexOf(\"}\");\n            if (idx > 0) {\n                // interpret flags to change label class or styles\n                var flags = str.slice(1, idx).split(\"|\");\n                str = str.slice(idx + 1);\n                flags.forEach(function (f) {\n                    switch (f) {\n                        case \"p\":\n                            LabelClass = Paragraph;\n                            break;\n                        case \"w\":\n                            LabelClass = WideLabel;\n                            break;\n                        case \"l\":\n                            LabelClass = Label_Label;\n                            break;\n                        case \"h1\":\n                            LabelClass = Heading1;\n                            break;\n                        case \"h2\":\n                            LabelClass = Heading2;\n                            break;\n                        case \"h3\":\n                            LabelClass = Heading3;\n                            break;\n                        case \"h4\":\n                            LabelClass = Heading4;\n                            break;\n                        case \"h5\":\n                            LabelClass = Heading5;\n                            break;\n                        case \"h6\":\n                            LabelClass = Heading6;\n                            break;\n                        case \"b\":\n                            setStyle(\"fontWeight\", \"bold\");\n                            break;\n                        case \"i\":\n                            setStyle(\"fontStyle\", \"italic\");\n                            break;\n                        case \"u\":\n                            setStyle(\"textDecoration\", \"underline\");\n                            break;\n                        case \"start\":\n                        case \"end\":\n                        case \"left\":\n                        case \"right\":\n                        case \"center\":\n                            setStyle(\"textAlign\", f);\n                            if (!LabelClass)\n                                LabelClass = Paragraph;\n                            break;\n                        default:\n                            if (/^l:[\\d\\.]+(\\%|[a-z]+)$/.test(f))\n                                width = f.slice(2);\n                            else if (/^#\\w+$/.test(f))\n                                setStyle(\"color\", f);\n                            else if (/^icon:/.test(f))\n                                icon = f.slice(5);\n                            else if (/^\\d+$/.test(f))\n                                setStyle(\"fontWeight\", f);\n                            else if (/^[\\d\\.]+(\\%|[a-z]+)$/.test(f))\n                                setStyle(\"fontSize\", f);\n                            else if (/^\\./.test(f))\n                                f.slice(1).split(\".\").forEach(function (s) {\n                                    return (style || (style = new Style_Style)).addClass(s);\n                                });\n                            else {\n                                var match = /^([\\w-]+)\\s*=\\s*(.*)$/.exec(f);\n                                if (match) {\n                                    var prop = match[1].replace(/-\\w/g, function (s) { return s[1].toUpperCase(); });\n                                    var val = match[2];\n                                    setStyle(prop, (val[0] === '\"') ?\n                                        JSON.parse(val) : val);\n                                }\n                            }\n                    }\n                });\n            }\n        }\n        // create or reuse Label instance\n        if (!LabelClass)\n            LabelClass = Label_Label;\n        var result = (prev instanceof LabelClass) ? prev : new LabelClass();\n        if (icon)\n            result.icon = icon;\n        if (style)\n            result.style.override(style);\n        if (width)\n            result.width = width;\n        result.text = str;\n        return result;\n    };\n    __decorate([\n        Async_defaultExport.injectable\n    ], TextLabelFactory.prototype, _a, null);\n    __decorate([\n        Async_defaultExport.injectable\n    ], TextLabelFactory.prototype, _b, null);\n    return TextLabelFactory;\n    var _a, _b;\n}());\n\n// implementation:\nfunction tl(strings) {\n    var values = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        values[_i - 1] = arguments[_i];\n    }\n    if (strings instanceof Array) {\n        if (strings.length === 1) {\n            // if given just a single text, use a shortcut here\n            return new TextLabelFactory_TextLabelFactory(strings[0]);\n        }\n        // map all function/binding values to observable values with getters\n        var hasBindings = false, hasObservables = false;\n        var args = values && values.map(function (v) {\n            if (typeof v === \"function\") {\n                // use given function as an observable getter\n                v = new Async_defaultExport.ObservableValue(v);\n                hasObservables = true;\n            }\n            else if (v instanceof Binding_Binding) {\n                // make sure to turn into observable later\n                hasBindings = true;\n            }\n            else if (v instanceof Async_defaultExport.ObservableValue) {\n                // remember to observe any other observables\n                hasObservables = true;\n            }\n            return v;\n        });\n        // substitute values with placeholders in the text\n        var text = strings.map(function (s, i) { return i ? i + \"}\" + s : s; }).join(\"%{\");\n        if (hasBindings) {\n            // pass a function that returns the substitution args, after binding\n            return new TextLabelFactory_TextLabelFactory(text, function (baseComponent, propName) {\n                return args.map(function (v) { return (v instanceof Binding_Binding) ?\n                    v.observeOn(baseComponent, propName) : v; });\n            }, true);\n        }\n        else {\n            // pass (observable) values directly\n            return new TextLabelFactory_TextLabelFactory(text, args, hasObservables);\n        }\n    }\n    else if (typeof strings === \"function\") {\n        // if given a getter function, map single observable\n        return new TextLabelFactory_TextLabelFactory(new Async_defaultExport.ObservableValue(strings), undefined, true, values[0]);\n    }\n    else if (strings instanceof Binding_Binding) {\n        // if given a single binding, create a function that returns\n        // the observable value that returns the final text\n        return new TextLabelFactory_TextLabelFactory(\"%{1}\", function (baseComponent, propName) { return [strings.observeOn(baseComponent, propName)]; }, true, values[0]);\n    }\n    else {\n        // if given just a single value, just use a single piece of text\n        return new TextLabelFactory_TextLabelFactory(strings, undefined, false, values[0]);\n    }\n}\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/ComponentFactory.js\nvar ComponentFactory___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\n\n/** Next factory UID */\nvar ComponentFactory__nextUID = 1;\nvar ComponentFactory_ComponentFactory;\n(function (ComponentFactory) {\n    /** Choices for the level at which components in (array) properties are expected to be; used by factory to expand/wrap initializer property values before appending as child nodes on a component decorated with `appendChildComponents`, or storing them in a property decorated with `applyComponentsArray` or `applyComponentRef` */\n    var CLevel;\n    (function (CLevel) {\n        CLevel[CLevel[\"Container\"] = 0] = \"Container\";\n        CLevel[CLevel[\"Block\"] = 1] = \"Block\";\n        CLevel[CLevel[\"ControlElement\"] = 2] = \"ControlElement\";\n        CLevel[CLevel[\"TableRow\"] = 3] = \"TableRow\";\n        CLevel[CLevel[\"TableHeader\"] = 4] = \"TableHeader\";\n    })(CLevel = ComponentFactory.CLevel || (ComponentFactory.CLevel = {}));\n    /** _Class decorator_ for a component class that expects child components (through `appendChild` method) of given type; the factory will then expand/wrap regular and observable objects, factories, classes, or components into the correct type; if `acceptFragments` is set, then components constructed from factories with the `isFragmentFactory` are passed in as-is; used on root component classes, should not need to be used in application code [decorator] */\n    function appendChildComponents(type, acceptFragments) {\n        return function (target) {\n            // store given type in flag property\n            target[\"@ComponentFactory.childType\"] = type;\n            if (acceptFragments) {\n                // set flag to also accept fragment components as-is\n                target[\"@ComponentFactory.acceptFragments\"] = true;\n            }\n        };\n    }\n    ComponentFactory.appendChildComponents = appendChildComponents;\n    /** _Property decorator_ for a property where values from an initializer spec should be applied as an (observable) array of components of given type (e.g. `Block`, `ControlElement`, `TableRow`); the factory will then expand/wrap regular and observable arrays of objects, factories, classes, or components into the correct type [decorator] */\n    function applyComponentsArray(type) {\n        return function (target, key) {\n            // store given type in flag property\n            target[\"@ComponentFactory.apply[]:\" + key] = type;\n        };\n    }\n    ComponentFactory.applyComponentsArray = applyComponentsArray;\n    /** _Property decorator_ for a property where values from an initializer spec should be applied as a reference to a component of given type (e.g. `Block`, `ControlElement`); the factory will then expand/wrap objects, factories, classes, and components into the correct type [decorator] */\n    function applyComponentRef(type) {\n        return function (target, key) {\n            // store given type in flag property\n            target[\"@ComponentFactory.apply:\" + key] = type;\n        };\n    }\n    ComponentFactory.applyComponentRef = applyComponentRef;\n    /** _Property decorator_ for a property for which values from an initializer spec should be applied asynchronously (using an `Async.defer(...)` call), instead of being set directly [decorator] */\n    function applyAsync(target, key) {\n        // set a flag property\n        target[\"@ComponentFactory.async:\" + key] = true;\n    }\n    ComponentFactory.applyAsync = applyAsync;\n    /** _Method decorator_ for the method that should be called to apply the value of an initializer spec property with the given property name; the method should always accept values as well as instances of `Async.ObservableValue` [decorator] */\n    function setterFor(initializerPropertyName) {\n        return function (target, key) {\n            // store method reference in flag property\n            target[\"@ComponentFactory.setter:\" + initializerPropertyName] =\n                target[key];\n        };\n    }\n    ComponentFactory.setterFor = setterFor;\n    /** @internal Initialize given component with properties from given spec, and for given base component, if any; returns the component itself */\n    function initializeWith(spec, base) {\n        if (base === void 0) { base = this; }\n        var component = this;\n        if (spec.id)\n            base[spec.id] = component;\n        var _loop_1 = function (key) {\n            var value = component[key];\n            if ((value instanceof Function) && (value.prototype instanceof Async_defaultExport.Signal)) {\n                // connect signal directly, or use string to find base method\n                t = typeof spec[key];\n                if (t === \"function\" || t === \"string\") {\n                    value.connect(spec[key], base);\n                }\n            }\n            else if (value instanceof Style_Style) {\n                // use style as override\n                component[key] = value.override((spec instanceof Async_defaultExport.ObservableObject) ?\n                    Async_defaultExport.observe(function () { return _getAsyncValue(key, spec[key], base); }) :\n                    _getAsyncValue(key, spec[key], base));\n            }\n            else {\n                var _set_1 = function (value, sync) {\n                    // check if decorated with applyAsync:\n                    if (!sync && component[\"@ComponentFactory.async:\" + key])\n                        return Async_defaultExport.defer(function () { return _set_1(value, true); });\n                    // convert arrays and references, if decorated with apply*\n                    var type = component[\"@ComponentFactory.apply[]:\" + key];\n                    if (type >= 0) {\n                        value = _transformFactoryArray(key, value, type, base, component instanceof TableRow_TableRow);\n                    }\n                    type = component[\"@ComponentFactory.apply:\" + key];\n                    if (type >= 0) {\n                        value = _transformObservableInitializer(key, value, type, base);\n                    }\n                    // check for a setter method\n                    if (component[\"@ComponentFactory.setter:\" + key]) {\n                        // invoke setter with (observable) value\n                        component[\"@ComponentFactory.setter:\" + key](value);\n                    }\n                    else {\n                        // assign (observable) value to component property\n                        component[key] = value;\n                    }\n                };\n                // take or observe value (or binding, or promise)\n                isObservable = (spec instanceof Async_defaultExport.ObservableObject) &&\n                    component.hasObservableProperty(key);\n                _set_1(isObservable ?\n                    Async_defaultExport.observe(function () { return _getAsyncValue(key, spec[key], base); }) :\n                    _getAsyncValue(key, spec[key], base));\n            }\n        };\n        var t, isObservable;\n        for (var key in spec) {\n            _loop_1(key);\n        }\n        return component;\n    }\n    ComponentFactory.initializeWith = initializeWith;\n    ;\n})(ComponentFactory_ComponentFactory || (ComponentFactory_ComponentFactory = {}));\n// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n// INTERNAL IMPLEMENTATION\n/** @internal Helper function to create a component factory for given target Component class using given factory spec */\nfunction makeFactory() {\n    var values = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        values[_i] = arguments[_i];\n    }\n    var FactoryComponent = this;\n    var InitializedComponent = (function (_super) {\n        ComponentFactory___extends(InitializedComponent, _super);\n        function InitializedComponent() {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var _this = _super.apply(this, args) || this;\n            // initialize properties, only if in highest-level constructor\n            // (i.e. not overridden by another component factory, or part of\n            // another component factory UNLESS extended into another class)\n            var C = _this.constructor;\n            if (C.isBaseComponent && C.FactoryComponent === FactoryComponent) {\n                // this is the base component, at the highest level\n                _this.initialize();\n            }\n            else if (!Object.prototype.hasOwnProperty.call(C.prototype, \"_factoryComponent\")) {\n                // this component class is extended into an application class\n                _this.initialize();\n            }\n            return _this;\n        }\n        InitializedComponent.override = function (overrideValues) {\n            values.push(overrideValues);\n        };\n        InitializedComponent.prototype.initialize = function (base) {\n            if (base === void 0) { base = this; }\n            if (_super.prototype.initialize.call(this, base)) {\n                for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n                    var spec = values_1[_i];\n                    if (spec && spec.constructor === Object) {\n                        // initialize with given properties\n                        this.initializeWith(spec, base);\n                    }\n                    else if (typeof spec === \"function\" &&\n                        !(spec.prototype instanceof Component_Component)) {\n                        // run given function\n                        spec(this, base);\n                    }\n                    else {\n                        // transform and append given child component\n                        var level = FactoryComponent[\"@ComponentFactory.childType\"];\n                        var frag = FactoryComponent[\"@ComponentFactory.acceptFragments\"];\n                        this.appendChild(_transformFactorySpec(\"child\", spec, level, base, false, frag));\n                    }\n                }\n                return true;\n            }\n            return false;\n        };\n        InitializedComponent.FactoryComponent = FactoryComponent;\n        InitializedComponent.componentFactoryId = \"F\" + ComponentFactory__nextUID++;\n        InitializedComponent.isComponentFactory = true;\n        InitializedComponent.isBaseComponent = true;\n        return InitializedComponent;\n    }(FactoryComponent));\n    // add a property in the prototype to identify this exact class as a factory\n    Object.defineProperty(InitializedComponent.prototype, \"_factoryComponent\", {\n        enumerable: false,\n        value: FactoryComponent\n    });\n    return InitializedComponent;\n}\n/** Helper function to resolve Promise or Binding, or just get value */\nfunction _getAsyncValue(key, value, base) {\n    if (value instanceof Binding_ArrayBinding) {\n        // apply array binding on base component\n        return value.observeArrayOn(base, key);\n    }\n    else if (value instanceof Binding_Binding) {\n        // apply binding on base component\n        return value.observeOn(base, key);\n    }\n    else if (value && typeof value === \"object\" &&\n        typeof value.then === \"function\") {\n        // convert promise to observable value\n        return Async_defaultExport.ObservableValue.fromPromise(value);\n    }\n    return value;\n}\n/** Helper function to transform a single component factory spec to a UI component, or an observable value (if given source is PromiseLike); either the object and property name must be specified, or the property name and value (if recursed) */\nfunction _transformFactorySpec(key, src, targetLevel, base, asTableCol, acceptFragments) {\n    // get value from property, resolve promises/bindings as observable values\n    var value = _getAsyncValue(key, src, base);\n    // recurse for observable values (and promises, bindings...)\n    if (value instanceof Async_defaultExport.ObservableValue)\n        return value.map(function (value) { return _transformFactorySpec(key, value, targetLevel, base, asTableCol); });\n    // use factories to instantiate nested elements\n    if (src && src.isComponentFactory) {\n        var F = src;\n        F.isBaseComponent = false;\n        src = new F();\n        src.initialize(base);\n        // return component without checking/wrapping if it is an accepted fragment\n        if (acceptFragments) {\n            for (var ref = F; ref; ref = ref.FactoryComponent)\n                if (ref.isFragmentFactory)\n                    return src;\n        }\n    }\n    // create valid Component\n    if (typeof src == \"string\" || typeof src == \"number\") {\n        if (!asTableCol)\n            src = new Label_Label(String(src));\n    }\n    else if (src instanceof Array) {\n        // create stack or (table) row containing given components\n        if (targetLevel === ComponentFactory_ComponentFactory.CLevel.TableRow)\n            src = new TableRow_TableRow(_transformFactoryArray(key, src, ComponentFactory_ComponentFactory.CLevel.ControlElement, base, true));\n        else if (targetLevel === ComponentFactory_ComponentFactory.CLevel.TableHeader)\n            src = new TableRow_TableHeader(_transformFactoryArray(key, src, ComponentFactory_ComponentFactory.CLevel.ControlElement, base, true));\n        else if (targetLevel === ComponentFactory_ComponentFactory.CLevel.ControlElement)\n            src = new ControlStack_ControlStack(_transformFactoryArray(key, src, ComponentFactory_ComponentFactory.CLevel.ControlElement, base));\n        else\n            src = new Row_Row(_transformFactoryArray(key, src, ComponentFactory_ComponentFactory.CLevel.ControlElement, base));\n    }\n    else if ((src instanceof Function) &&\n        (src.prototype instanceof Component_Component)) {\n        // instantiate given component class\n        src = new src();\n    }\n    else if (src instanceof TextLabelFactory_TextLabelFactory) {\n        // return (observable) component, or create Row or Container\n        src = src.getComponent(base, key);\n        if (targetLevel !== ComponentFactory_ComponentFactory.CLevel.ControlElement) {\n            src = new Row_Row([src]);\n            if (targetLevel !== ComponentFactory_ComponentFactory.CLevel.Block)\n                src = new Container_Container([src]);\n        }\n        return src;\n    }\n    // wrap if needed\n    if (targetLevel === ComponentFactory_ComponentFactory.CLevel.ControlElement) {\n        // wrap to class down to ControlElement\n        if (src instanceof Container_Container) {\n            var control = new ContainerControl_ContainerControl(src);\n            if (src.width !== \"auto\")\n                control.shrinkwrap = true;\n            return control;\n        }\n        if (src instanceof Block_Block && !asTableCol) {\n            var control = new BlockControl_BlockControl(src);\n            if (src.width !== \"auto\")\n                control.shrinkwrap = true;\n            return control;\n        }\n        return src;\n    }\n    else if (targetLevel === ComponentFactory_ComponentFactory.CLevel.Block) {\n        // wrap into Row, or class down to Row\n        if (src instanceof ControlElement_ControlElement)\n            return new Row_Row([src]);\n        if (src instanceof Container_Container)\n            return new ContainerBlock_ContainerBlock(src);\n        return src;\n    }\n    else if (targetLevel === ComponentFactory_ComponentFactory.CLevel.TableRow ||\n        targetLevel === ComponentFactory_ComponentFactory.CLevel.TableHeader) {\n        // wrap into table row\n        if ((src instanceof TableRow_TableRow) || (src instanceof TableRow_TableHeader))\n            return src;\n        if (src instanceof Container_Container)\n            src = new ContainerControl_ContainerControl(src);\n        if (src !== undefined)\n            return new TableRow_TableRow([src]);\n        return src;\n    }\n    else {\n        // wrap into (Row, and then) container\n        if (src instanceof ControlElement_ControlElement)\n            src = new Row_Row([src]);\n        if (src instanceof Block_Block) {\n            var block_1 = src;\n            src = new Container_Container([block_1]);\n            src.height = Async_defaultExport.observe(function () { return block_1.height; });\n            src.width = Async_defaultExport.observe(function () {\n                var w = block_1.width;\n                return (w !== \"auto\") ? w : \"\";\n            });\n        }\n        return src;\n    }\n}\n/** Helper function to transform an (observable) array of component factory specs */\nfunction _transformFactoryArray(key, src, targetLevel, base, asTableCol) {\n    if (src instanceof Binding_ArrayBinding) {\n        // use bound array directly for better performance\n        src = src.observeArrayOn(base, key);\n    }\n    else if (src instanceof Binding_Binding) {\n        // recurse for bindings\n        return src.observeOn(base, key).map(function (value) {\n            return _transformFactoryArray(key, value, targetLevel, base, asTableCol);\n        });\n    }\n    else if (src instanceof Async_defaultExport.ObservableValue) {\n        // recurse for observable values\n        return src.map(function (value) { return _transformFactoryArray(key, value, targetLevel, base, asTableCol); });\n    }\n    else if (typeof src === \"object\" &&\n        typeof src.then === \"function\") {\n        // recurse for promises of (observable) arrays\n        var obv = Async_defaultExport.ObservableValue.fromPromise(src.then(function (value) {\n            return _transformFactoryArray(key, value, targetLevel, base, asTableCol);\n        }));\n        // use an empty array (rather than undefined) initially,\n        // if promise was not already fulfilled\n        if (!obv.getLastValue())\n            obv.value = [];\n        return obv;\n    }\n    if (src instanceof Async_defaultExport.ObservableArray) {\n        // map observable array asynchronously and lazily\n        return src.mapAsync(function (v, i) { return _transformFactorySpec(key + \".\" + i, v, targetLevel, base, asTableCol); }, undefined, true);\n    }\n    else if (src instanceof Array) {\n        // create an observable array but map only once\n        var result = new Async_defaultExport.ObservableArray();\n        result.length = src.length;\n        src.forEach(function (v, i) {\n            result[i] = _transformFactorySpec(key + \".\" + i, v, targetLevel, base, asTableCol);\n        });\n        return result;\n    }\n    else {\n        // nothing to map, return an empty array\n        return new Async_defaultExport.ObservableArray();\n    }\n}\n/** Helper function to transform a component factory spec value */\nfunction _transformObservableInitializer(key, value, targetLevel, base) {\n    if (value instanceof Async_defaultExport.ObservableValue) {\n        // recurse for observable values\n        return value.map(function (v) { return _transformObservableInitializer(key, v, targetLevel, base); });\n    }\n    // otherwise transform spec now\n    return _transformFactorySpec(key, value, targetLevel, base);\n}\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/Component.js\nvar Component___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Component___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** Next component UID */\nvar Component__nextUID = 1;\n/** Next selection order number (incremented when an element is selected) */\nvar _selectionOrder = 1;\n/** Component base class to represent every part of the user interface, to be extended by application code (e.g. as a sub class of `Container` or another component class) or constructed from derived component classes (e.g. `Button`) */\nvar Component_Component = (function (_super) {\n    Component___extends(Component, _super);\n    /** Abstract constructor with any number of arguments */\n    function Component() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var _this = _super.call(this) || this;\n        /** Globally unique component identifier */\n        _this.uid = \"C\" + Component__nextUID++;\n        /** Signal emitted after updating DOM (render) */\n        _this.Rendered = _this.createComponentSignal();\n        /** Read-only reference to an instance of `Style`, encapsulating CSS styles and classes for this component; for extensible component classes, do not override this property but use static method `.addStyleOverride(...)` instead */\n        _this.style = _this[\"@overrideStyle\"](Style_Style.withClass(\"UI\"));\n        return _this;\n    }\n    // ^^^ copied from ComponentFactory below\n    /** Initialize this component, i.e. apply properties from component factories, if any; called automatically by the highest-level component factory constructor with the base component as argument (i.e. component on which `.with` was called), can be overridden to initialize other properties before those from the component factory (and invoke `super.initialize()` manually); returns true only if this component had not been initialized before */\n    Component.prototype.initialize = function (base) {\n        return this._initialized ? false : (this._initialized = true);\n    };\n    /** Returns a new component signal class specific to this component, with optional signal base class which must derive from ComponentSignal; can be used to define custom signals in a component constructor or public property initializer (or memoized get-accessor for lazy initialization); sets static property `ComponentSignal.component` of the derived signal class to the component instance, as well as any other static properties given */\n    Component.prototype.createComponentSignal = function (base, properties) {\n        if (properties === void 0) { properties = {}; }\n        return defineComponentSignal(base || ComponentSignal, this, properties);\n    };\n    // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n    // HIERARCHY METHODS\n    /** Add a child component to this component; only supported by components that actually contain other components (e.g. `Container`), throws an Error otherwise; returns this */\n    Component.prototype.appendChild = function (child) {\n        throw new Error(\"Not implemented\");\n    };\n    /** Returns an array of directly contained components (observable) */\n    Component.prototype.getChildren = function () {\n        return [];\n    };\n    /** Returns a list of currently selected directly contained components, in order of selection (observable) */\n    Component.prototype.getSelectedChildren = function () {\n        return this.getChildren().filter(function (c) { return c.selected; })\n            .sort(function (a, b) { return a._selectionOrder - b._selectionOrder; });\n    };\n    /** Returns the last selected directly contained component (observable); evaluated asynchronously if automatic selection management mode is `ItemClick` or `ItemFocus`, otherwise evaluated synchronously from current selection status of child components */\n    Component.prototype.getLastSelectedChild = function () {\n        return this._lastSelectionAsync ? this._lastSelectionAsync.value :\n            this.getSelectedChildren().pop();\n    };\n    Component.prototype.getComponentById = function (id, componentClass) {\n        var queue = this.getChildren();\n        while (queue.length) {\n            var c = queue.shift();\n            if (c && c.id === id &&\n                (!componentClass || c instanceof componentClass))\n                return c;\n            c && c.getChildren().forEach(function (d) { return queue.push(d); });\n        }\n        return undefined;\n    };\n    /** Returns all (recursive) child components that are an instance of given class (observable) */\n    Component.prototype.getComponentsByType = function (componentClass) {\n        var result = [];\n        this.getChildren().forEach(function (c) {\n            if (c instanceof componentClass)\n                result.push(c);\n            c && c.getComponentsByType(componentClass).forEach(function (r) { return result.push(r); });\n        });\n        return result;\n    };\n    /** Returns true if given component is a child component of this component or any of its child components (observable, but triggers re-evaluation upon every change in child [sub] components) */\n    Component.prototype.contains = function (component) {\n        var queue = this.getChildren();\n        while (queue.length) {\n            var c = queue.shift();\n            if (c === component)\n                return true;\n            c && c.getChildren().forEach(function (d) { return queue.push(d); });\n        }\n        return false;\n    };\n    /** Returns an object containing all current values of input elements (observable) */\n    Component.prototype.getFormValues = function (result) {\n        if (result === void 0) { result = {}; }\n        this.getChildren().forEach(function (v) { v.getFormValues(result); });\n        return result;\n    };\n    /** Set all input values by element name */\n    Component.prototype.setFormValues = function (values) {\n        this.getChildren().forEach(function (v) { v.setFormValues(values); });\n    };\n    Component.prototype.animate = function (animation, continuous, after) {\n        var anim = (typeof animation === \"string\") ?\n            this.animations && this.animations[animation] :\n            animation;\n        var control = anim ?\n            continuous ? anim.play(this) : anim.playOnce(this) :\n            undefined;\n        if (after)\n            control ? control.done.then(after) : Async_defaultExport.defer(after);\n        return control;\n    };\n    /** Wait for this component to be rendered and return a promise for its output (value of `.out`), unless the component is already rendered, in which case this method returns a resolved promise for the last rendered output; never forces the component to be rendered */\n    Component.prototype.getRenderedOutputAsync = function () {\n        var _this = this;\n        // use output property on current renderer\n        var result = this._renderer.output.getLastValue();\n        if (result) {\n            // return value as-is (not undefined)\n            return Async_defaultExport.Promise.resolve(result);\n        }\n        else {\n            // return a promise for the first non-undefined value\n            return new Async_defaultExport.Promise(function (r) {\n                var c = _this._renderer.Rendered.connect(function (out) {\n                    if (out)\n                        r(out), c.disconnect();\n                });\n            });\n        }\n    };\n    /** Returns the last rendered output for this component, if any (value of `.out`); does not trigger a render */\n    Component.prototype.getLastRenderedOutput = function () {\n        return this._renderer.output.getLastValue();\n    };\n    Object.defineProperty(Component.prototype, \"out\", {\n        /** Rendered output for this component (observable); retrieving this value triggers a render operation, if it was not already subscribed to, e.g. if the component is displayed on screen; the renderer is lazily constructed from the class reference injected into the `.Renderer` property */\n        get: function () {\n            return this._renderer.output.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Render this component synchronously, always updating any existing rendered output; this method should _not_ be used unless changes may have occurred outside of the observable context, otherwise read the value from `.out`, include it on a `Page`, or use the `.display()` method where available */\n    Component.prototype.render = function () {\n        this._renderer.output.update();\n        return this._renderer.output.getLastValue();\n    };\n    Object.defineProperty(Component.prototype, \"_renderer\", {\n        /** Current renderer instance, created upon access */\n        get: function () {\n            var _this = this;\n            if (typeof this.Renderer !== \"function\")\n                throw new TypeError(\"No renderer defined\");\n            // construct the renderer, forward its signal\n            var renderer = new this.Renderer(this);\n            renderer.beforeFirstRender = function () { _this.beforeFirstRender(renderer); };\n            renderer.Rendered.connect(this.Rendered);\n            return renderer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Method that is called immediately after the renderer for this component is constructed; override this method (and invoke `super.beforeFirstRender`) to be able to call or inject renderer methods before this component is first rendered */\n    Component.prototype.beforeFirstRender = function (renderer) {\n        this._watchFocusMode(renderer);\n        this._watchSelectionMode(renderer);\n    };\n    /** Helper method to watch and apply list focus mode on renderer instance */\n    Component.prototype._watchFocusMode = function (renderer) {\n        var _this = this;\n        var childConnections;\n        var subscribed;\n        var links;\n        renderer.watch(function () { return (_this.focusMode === Component.FocusMode.Items); }, function (t) {\n            if (!t && !childConnections)\n                return;\n            // remember old links, and connections to unsubscribe from\n            var oldChildConnections = childConnections;\n            var oldSubscribed = subscribed;\n            links = {};\n            // manage focus mode for all child components\n            subscribed = t && Async_defaultExport.observe(function () {\n                var oldConnections = childConnections;\n                childConnections = {};\n                var oldLinks = links;\n                var focusable;\n                var noAutoFocusChild = true;\n                var children = _this.getChildren();\n                // helper function to set one child to auto focus, rest to click\n                var setSingleAutoFocus = function (c) {\n                    c.focusMode = Component.FocusMode.Auto;\n                    // set siblings back to click\n                    children.forEach(function (sibling) {\n                        if (sibling !== c &&\n                            sibling.focusMode ===\n                                Component.FocusMode.Auto)\n                            sibling.focusMode =\n                                Component.FocusMode.Click;\n                    });\n                };\n                // keep track of all children (re-eval when list changes)\n                var prevLink;\n                children.forEach(function (c) {\n                    Async_defaultExport.unobserved(function () {\n                        // skip unfocusable components, remember first focusable,\n                        // set click as default\n                        if (c.focusMode === Component.FocusMode.None)\n                            return;\n                        if (c.focusMode === Component.FocusMode.Auto)\n                            noAutoFocusChild = false;\n                        else if ((!focusable ||\n                            !(focusable._selectionOrder > c._selectionOrder)) &&\n                            c.focusMode !== Component.FocusMode.Items)\n                            focusable = c;\n                        if (c.focusMode === undefined)\n                            c.focusMode = Component.FocusMode.Click;\n                        // maintain chain of components for moving up/down\n                        var link = oldLinks && oldLinks[c.uid] || { c: c };\n                        links[c.uid] = link;\n                        if (prevLink) {\n                            link.pv = prevLink.c;\n                            prevLink.nx = c;\n                        }\n                        prevLink = link;\n                        // keep connections for this component, if any\n                        if (oldConnections && oldConnections[c.uid]) {\n                            childConnections[c.uid] = oldConnections[c.uid];\n                            delete oldConnections[c.uid];\n                        }\n                        else {\n                            // connect to this child component's signals\n                            childConnections[c.uid] = [];\n                            childConnections[c.uid].push(c.FocusGained.connect(function () {\n                                // set to auto focus to enable tabbing\n                                setSingleAutoFocus(c);\n                            }), c.ArrowUpKeyPressed.connect(function (event) {\n                                // if possible, focus previous child\n                                if (link.pv) {\n                                    link.pv.hasFocus = true;\n                                    if (event.preventDefault)\n                                        event.preventDefault();\n                                }\n                            }), c.ArrowDownKeyPressed.connect(function (event) {\n                                // if possible, focus next child\n                                if (link.nx) {\n                                    link.nx.hasFocus = true;\n                                    if (event.preventDefault)\n                                        event.preventDefault();\n                                }\n                            }));\n                        }\n                    });\n                });\n                // watch single selected item and change its focus mode to auto\n                // wrap in static observable value to observe but not reevaluate\n                // (this is to catch situations where selection changed in code,\n                // not on focus/click, and user expects to tab (back) to newly\n                // selected item, not last one focused)\n                if (_this.selectionMode === Component.SelectionMode.ItemClick ||\n                    _this.selectionMode === Component.SelectionMode.ItemFocus) {\n                    Async_defaultExport.unobserved(function () {\n                        return Async_defaultExport.observe(function () { return _this.getLastSelectedChild(); })\n                            .map(function (sel) { return sel && setSingleAutoFocus(sel); });\n                    }).value;\n                }\n                // set first focusable component to auto if needed\n                focusable && noAutoFocusChild && Async_defaultExport.unobserved(function () {\n                    focusable.focusMode = Component.FocusMode.Auto;\n                });\n                // disconnect from old components\n                for (var id in oldConnections) {\n                    oldConnections[id].forEach(function (c) { return c.disconnect(); });\n                }\n            }).subscribe();\n            // disconnect old connections (after connecting new ones, to prevent\n            // unnecessary event connected state flip flopping)\n            oldSubscribed && oldSubscribed.clear();\n            for (var id in oldChildConnections)\n                oldChildConnections[id].forEach(function (c) { return c.disconnect(); });\n        });\n    };\n    /** Helper method to watch and apply selection mode on renderer instance */\n    Component.prototype._watchSelectionMode = function (renderer) {\n        var _this = this;\n        var connections = [];\n        var subscribed;\n        renderer.watch(function () { return _this.selectionMode; }, function (selectionMode) {\n            // remember connections to unsubscribe from\n            _this._lastSelectionAsync = undefined;\n            var oldConnections = connections.splice(0);\n            var oldSubscribed = subscribed;\n            // check what needs to be managed here (click/toggle/focus/items)\n            switch (selectionMode) {\n                // manual selection using click/touch or space bar:\n                case Component.SelectionMode.Click:\n                    var clickSelect = function () { _this.selected = true; };\n                    connections.push(_this.Clicked.connect(clickSelect), _this.SpaceBarPressed.connect(clickSelect));\n                    subscribed = undefined;\n                    break;\n                // manual toggle selection using click/touch or space bar:\n                case Component.SelectionMode.Toggle:\n                    var toggle_1 = function () { _this.selected = !_this.selected; };\n                    connections.push(_this.Clicked.connect(toggle_1), _this.SpaceBarPressed.connect(function (event) {\n                        toggle_1();\n                        event.preventDefault && event.preventDefault();\n                    }));\n                    subscribed = undefined;\n                    break;\n                // automatic selection on focus:\n                case Component.SelectionMode.Focus:\n                    var focusSelect = function () { _this.selected = true; };\n                    connections.push(_this.FocusGained.connect(focusSelect));\n                    subscribed = undefined;\n                    break;\n                // select one child element only, on click or focus\n                case Component.SelectionMode.ItemClick:\n                    var isClick = true;\n                case Component.SelectionMode.ItemFocus:\n                    subscribed = _this._observeSingleSelection(isClick ? Component.SelectionMode.Click :\n                        Component.SelectionMode.Focus)\n                        .subscribe(function (component) {\n                        if (_this._lastSelectionAsync)\n                            _this._lastSelectionAsync.value = component;\n                    });\n                    // initialize observable value with current selection\n                    _this._lastSelectionAsync =\n                        Async_defaultExport.ObservableValue.fromValue(subscribed.value);\n                    break;\n                // make child elements toggleable\n                case Component.SelectionMode.ItemToggle:\n                    subscribed = Async_defaultExport.observe(function () {\n                        // set selection mode to toggle for new components\n                        _this.getChildren().forEach(function (c) {\n                            if (c.selectionMode === undefined) {\n                                Async_defaultExport.unobserved(function () {\n                                    c.selectionMode = Component.SelectionMode.Toggle;\n                                });\n                            }\n                        });\n                    }).subscribe();\n                    break;\n            }\n            // disconnect old connections (after connecting new ones, to prevent\n            // unnecessary event connected state flip flopping)\n            oldConnections.forEach(function (c) { return c.disconnect(); });\n            if (oldSubscribed)\n                oldSubscribed.clear();\n        });\n    };\n    /** Helper method to observe selected child component(s), and deselect all except component selected latest; also overrides selection mode for components where this property is undefined; returns an observable for the single (last) selected component */\n    Component.prototype._observeSingleSelection = function (setSelectionMode) {\n        var _this = this;\n        return Async_defaultExport.observe(function () {\n            var lastSelection;\n            var lastSelectedNumber;\n            _this.getChildren().forEach(function (c) {\n                var isSelected = c.selected;\n                Async_defaultExport.unobserved(function () {\n                    if (c.selectionMode === undefined)\n                        c.selectionMode = setSelectionMode;\n                    if (isSelected) {\n                        // deselect component if selected earlier\n                        if (c._selectionOrder < lastSelectedNumber) {\n                            c.selected = false;\n                        }\n                        else {\n                            if (lastSelection) {\n                                // deselect component found earlier\n                                lastSelection.selected = false;\n                            }\n                            lastSelection = c;\n                            lastSelectedNumber = c._selectionOrder;\n                        }\n                    }\n                });\n            });\n            // return last selected component\n            return lastSelection;\n        });\n    };\n    // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n    // DIMENSIONS & STYLE\n    /** Add a new style override to this component class (and derived classes); does not have any effect on existing component instances, but changes to previously added style overrides are always observed; returns given style instance */\n    Component.addStyleOverride = function (style) {\n        var chain = Async_defaultExport.inject(this, {\n            \"@overrideStyle\": function (prev) {\n                return chain[\"@overrideStyle\"](prev).override(style);\n            }\n        });\n        return style;\n    };\n    /** @internal Adds overrides to the current base style for this component (injected using `addStyleOverride`, DO NOT use or override directly) */\n    Component.prototype[_a = \"@overrideStyle\"] = function (style) { return style; };\n    /** Returns the current dimensions for this component, in logical (CSS) pixel units; may return 0x0 if this component is not yet displayed on screen (i.e. use the `.Rendered` signal and/or a timeout to obtain accurate results) */\n    Component.prototype.getActualDimensions = function () {\n        // implemented by platform dependent code\n        return { width: 0, height: 0 };\n    };\n    Object.defineProperty(Component.prototype, \"height\", {\n        /** Overall target height of this component (CSS length; observable, directly modifies `.style` property, does _not_ retrieve actual component height, may be \"auto\") */\n        get: function () { return this.height || \"auto\"; },\n        set: function (h) {\n            if (h === \"auto\")\n                h = \"\";\n            this.style.set(\"height\", this.height = h);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Component.prototype, \"width\", {\n        /** Overall target width of this component (CSS length; observable, directly modifies `.style` property, does _not_ retrieve actual component width, may be \"auto\") */\n        get: function () { return this.width || \"auto\"; },\n        set: function (w) {\n            if (w === \"auto\")\n                w = \"\";\n            this.style.set(\"width\", this.width = w);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Component.prototype, \"shadowEffect\", {\n        /** Set to a number between 0 and 1 to add a drop shadow to this component (shadow \"depth\" of 1 creates the illusion of a component lifted off the canvas the furthest, 0 means no shadow at all; observable, directly adds shadow effect to `.style`) */\n        get: function () { return this.shadowEffect || 0; },\n        set: function (d) {\n            this.style.addShadowEffect(this.shadowEffect = d);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Override the drop shadow \"depth\" value while mouse cursor is hovering over this component, with given number between 0 and 1 */\n    Component.prototype.addShadowEffectOnHover = function (d) {\n        var _this = this;\n        // add an overriding observable for the shadow effect depth\n        var override = new Style_Style().addShadowEffect(d);\n        this.style.override(Async_defaultExport.observe(function () {\n            return _this.hoverState ? override : undefined;\n        }));\n    };\n    /** Override the drop shadow \"depth\" value while this component or a child component has input focus, with given number between 0 and 1 */\n    Component.prototype.addShadowEffectOnFocus = function (d) {\n        var _this = this;\n        // add an overriding observable for the shadow effect depth\n        var override = new Style_Style().addShadowEffect(d);\n        this.style.override(Async_defaultExport.observe(function () {\n            return _this.hasFocus ? override : undefined;\n        }));\n    };\n    Object.defineProperty(Component.prototype, \"hidden\", {\n        /** Set to true to hide this component (observable, directly modifies hidden state of `.style` and plays show/hide animations) */\n        get: function () { return this.hidden; },\n        set: function (yesno) {\n            var _this = this;\n            // complexity here is due to animation: the element is hidden only\n            // after the animation completes; while the Style object should still\n            // observe the source observable indirectly as well\n            var o;\n            var doHide = function (hide) {\n                if (!_this.getLastRenderedOutput()) {\n                    // if not rendered yet, do not animate\n                    if (o)\n                        o.value = hide;\n                    else\n                        _this.style.hide(hide);\n                }\n                else if (hide && !_this._hidden) {\n                    // animate, then hide\n                    _this.animate(\"hide\", false, function () {\n                        if (_this._hidden) {\n                            if (o)\n                                o.value = true;\n                            else\n                                _this.style.hide();\n                        }\n                    });\n                }\n                else if (!hide && _this._hidden) {\n                    // show and animate\n                    if (o)\n                        o.value = false;\n                    else\n                        _this.style.show();\n                    _this.animate(\"show\");\n                }\n                _this._hidden = !!hide;\n                return o;\n            };\n            if (yesno instanceof Async_defaultExport.ObservableValue) {\n                // use shadow observable that changes after animation\n                o = Async_defaultExport.ObservableValue.fromValue(this._hidden);\n                this.style.hide(Async_defaultExport.observe(function () { return !!yesno.value; })\n                    .map(doHide));\n            }\n            else {\n                // modify style directly\n                doHide(yesno);\n            }\n            this.hidden = yesno;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Component.prototype, \"selected\", {\n        /** Set to true to display this component in a selected state (observable, directly modifies selected state of `.style` and plays select/deselect animations) */\n        get: function () { return this.selected; },\n        set: function (yesno) {\n            var _this = this;\n            // complexity here is due to animation: the element is selected only\n            // after the animation completes; while the Style object should still\n            // observe the source observable indirectly as well\n            var o;\n            var doSelect = function (select) {\n                // check selection mode first, update selection order\n                if (select) {\n                    if (_this.selectionMode === Component.SelectionMode.None)\n                        throw new Error(\"This component cannot be selected\");\n                    _this._selectionOrder = _selectionOrder++;\n                }\n                if (!_this.getLastRenderedOutput()) {\n                    // if not rendered yet, do not animate\n                    if (o)\n                        o.value = select;\n                    else\n                        _this.style.select(select);\n                }\n                else if (!select && _this._selected) {\n                    // animate, then deselect\n                    _this.animate(\"deselect\", false, function () {\n                        if (!_this._selected) {\n                            if (o)\n                                o.value = false;\n                            else\n                                _this.style.deselect();\n                        }\n                    });\n                }\n                else if (select && !_this._selected) {\n                    // select and animate\n                    if (o)\n                        o.value = true;\n                    else\n                        _this.style.select();\n                    _this.animate(\"select\");\n                }\n                _this._selected = !!select;\n                return o;\n            };\n            if (yesno instanceof Async_defaultExport.ObservableValue) {\n                // use shadow observable that changes after animation\n                o = Async_defaultExport.ObservableValue.fromValue(this._selected);\n                this.style.select(Async_defaultExport.observe(function () { return !!yesno.value; })\n                    .map(doSelect));\n            }\n            else {\n                // modify style directly\n                doSelect(yesno);\n            }\n            this.selected = yesno;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Component.prototype, \"hasFocus\", {\n        /** True if this component _or_ a child component has input focus, false otherwise; set to true to focus the component itself, if and when available (throws an exception if this component is unable to receive input focus); set to false to remove focus from this component */\n        get: function () {\n            var _this = this;\n            if (this._liveFocus === undefined)\n                Async_defaultExport.unobserved(function () { return _this._connectFocus(); });\n            return this.hasFocus;\n        },\n        set: function (wantFocus) {\n            // connect to platform focus events\n            if (this._liveFocus === undefined)\n                this._connectFocus();\n            // blur or focus the component itself, if possible\n            if (!((wantFocus instanceof Async_defaultExport.ObservableValue) ?\n                wantFocus.value : wantFocus))\n                this[\"@blurLiveComponent\"]();\n            else if (!this._liveFocus) {\n                if (this.focusMode === Component.FocusMode.None)\n                    throw new Error(\"This component cannot be focused\");\n                else\n                    this[\"@focusLiveComponent\"]();\n            }\n            this.hasFocus = wantFocus;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @internal Method to retrieve the current focus state of a component (injected by platform specific code, if applicable) */\n    Component.prototype[_b = \"@getLiveComponentFocusState\"] = function () { return false; };\n    /** @internal Set input focus to this component (injected by platform specific code, if applicable) */\n    Component.prototype[_c = \"@focusLiveComponent\"] = function () { throw new TypeError(); };\n    /** @internal Remove input focus from this component (injected by platform specific code, if applicable) */\n    Component.prototype[_d = \"@blurLiveComponent\"] = function () { };\n    /** Connect Focus and Blur signal handlers to maintain `_liveFocus` and `hasFocus` */\n    Component.prototype._connectFocus = function () {\n        var _this = this;\n        this.hasFocus = this._liveFocus = this[\"@getLiveComponentFocusState\"]();\n        this.Focus.connect(function () {\n            _this._liveFocus = true;\n            _this.hasFocus = true;\n        });\n        this.Blur.connect(function () {\n            _this._liveFocus = false;\n            _this.hasFocus = false;\n        });\n    };\n    Object.defineProperty(Component.prototype, \"hoverState\", {\n        /** True if the mouse cursor is hovering over this component, false otherwise; evaluated lazily using `.MouseEnter` and `.MouseLeave`, value is `false` initially until first signal is emitted after this property has been read once */\n        get: function () {\n            var _this = this;\n            if (!this._liveHover) {\n                Async_defaultExport.unobserved(function () {\n                    _this._liveHover = Async_defaultExport.ObservableValue.fromValue(false);\n                    _this.MouseEnter.connect(function () { _this._liveHover.value = true; });\n                    _this.MouseLeave.connect(function () { _this._liveHover.value = false; });\n                });\n            }\n            return this._liveHover.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n    // EVENT SIGNALS\n    // Note: actual implementation is injected by platform dependent code\n    // (see createEventSignal)\n    /** @internal Method to create event signal for this component (injected by platform specific code) */\n    Component.prototype[_e = \"@createEventSignal\"] = function (id, signalClass, opt) {\n        throw new TypeError();\n    };\n    Object.defineProperty(Component.prototype, \"Click\", {\n        /** Signal emitted when this component _or_ a child component is clicked, touched, or otherwise activated; captured from containers down to contained components, not consumed */\n        get: function () {\n            return this[\"@createEventSignal\"](\"Click\", PointerEventSignal);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Component.prototype, \"Clicked\", {\n        /** Signal emitted asynchronously after this component _or_ a child component is clicked, touched, or otherwise activated; propagates from child components to parents, until a component consumes the event by connecting to this signal */\n        get: function () {\n            return this[\"@createEventSignal\"](\"Clicked\", PointerEventSignal);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Component.prototype, \"DoubleClick\", {\n        /** Signal emitted when this component _or_ a child component is double-clicked; captured from containers down to contained components, not consumed */\n        get: function () {\n            return this[\"@createEventSignal\"](\"DoubleClick\", PointerEventSignal);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Component.prototype, \"DoubleClicked\", {\n        /** Signal emitted asynchronously after this component _or_ a child component is double-clicked; propagates from child components to parents, until a component consumes the event by connecting to this signal */\n        get: function () {\n            return this[\"@createEventSignal\"](\"DoubleClicked\", PointerEventSignal);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Component.prototype, \"Press\", {\n        /** Signal emitted when a mouse button is pressed down, or a touch occurs, on this component _or_ a child component; captured from containers down to contained components, not consumed */\n        get: function () {\n            return this[\"@createEventSignal\"](\"Press\", PointerEventSignal);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Component.prototype, \"Pressed\", {\n        /** Signal emitted asynchronously after a mouse button is pressed down, or a touch occurs, on this component _or_ a child component; propagates from child components to parents, until a component consumes the event by connecting to this signal */\n        get: function () {\n            return this[\"@createEventSignal\"](\"Pressed\", PointerEventSignal);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Component.prototype, \"MouseEnter\", {\n        /** Signal emitted when the cursor begins to hover over this component; captured from containers down to contained components, not consumed */\n        get: function () {\n            return this[\"@createEventSignal\"](\"MouseEnter\", PointerEventSignal);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Component.prototype, \"MouseLeave\", {\n        /** Signal emitted when the cursor has left this component; captured from containers down to contained components, not consumed */\n        get: function () {\n            return this[\"@createEventSignal\"](\"MouseLeave\", PointerEventSignal);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Component.prototype, \"MouseContextMenu\", {\n        /** Signal emitted when a context menu is requested for this component or a child component (usually by right-clicking); captured from containers down to contained components, not consumed */\n        get: function () {\n            return this[\"@createEventSignal\"](\"MouseContextMenu\", PointerEventSignal);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Component.prototype, \"KeyDown\", {\n        /** Signal emitted when a key is pressed down (while this component _or_ a child component is focused); captured from containers down to contained components, not consumed */\n        get: function () {\n            return this[\"@createEventSignal\"](\"KeyDown\", KeyEventSignal);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Component.prototype, \"KeyPress\", {\n        /** Signal emitted after a key is pressed (while this component _or_ a child component is focused); captured from containers down to contained components, not consumed */\n        get: function () {\n            return this[\"@createEventSignal\"](\"KeyPress\", KeyEventSignal);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Component.prototype, \"Focus\", {\n        /** Signal emitted when this component _or_ a child component receives focus; captured from containers down to contained components, not consumed */\n        get: function () {\n            return this[\"@createEventSignal\"](\"Focus\", ComponentSignal);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Component.prototype, \"Blur\", {\n        /** Signal emitted when this component _or_ a child component loses focus; captured from containers down to contained components, not consumed */\n        get: function () {\n            return this[\"@createEventSignal\"](\"Blur\", ComponentSignal);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Component.prototype, \"FocusGained\", {\n        /** Signal emitted asynchronously after this component receives focus; propagates from child components to parents, until a component consumes the event by connecting to this signal */\n        get: function () {\n            return this[\"@createEventSignal\"](\"FocusGained\", ComponentSignal);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Component.prototype, \"FocusLost\", {\n        /** Signal emitted asynchronously after this component loses focus, and only if `.FocusGained` was emitted previously; propagates from child components to parents, not consumable */\n        get: function () {\n            return this[\"@createEventSignal\"](\"FocusLost\", ComponentSignal);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Component.prototype, \"DragStart\", {\n        /** Signal emitted when this component _or_ a child component commences a drag operation; captured from containers down to contained components, not consumed */\n        get: function () {\n            return this[\"@createEventSignal\"](\"DragStart\", DragEventSignal);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Component.prototype, \"DragEnter\", {\n        /** Signal emitted when a drag operation begins to hover over this component; captured from containers down to contained components, not consumable */\n        get: function () {\n            return this[\"@createEventSignal\"](\"DragEnter\", DragEventSignal);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Component.prototype, \"DragLeave\", {\n        /** Signal emitted when a drag operation has left this component; captured from containers down to contained components, not consumable */\n        get: function () {\n            return this[\"@createEventSignal\"](\"DragLeave\", DragEventSignal);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Component.prototype, \"DragDrop\", {\n        /** Signal emitted when this element or a child element is the target of a drop after a drag operation; captured from containers down to contained components, not consumed */\n        get: function () {\n            return this[\"@createEventSignal\"](\"DragDrop\", DragEventSignal);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n    // KEYPRESS EVENTS\n    /** Helper function to create a key event signal */\n    Component.prototype._makeKeyEvent = function (key) {\n        return this[\"@createEventSignal\"](\"FnKeyPressed\", KeyEventSignal, key);\n    };\n    Object.defineProperty(Component.prototype, \"EnterKeyPressed\", {\n        /** Signal emitted after the enter key is pressed (while focused); propagates from child components to parents, until a component consumes the event by connecting to this signal */\n        get: function () { return this._makeKeyEvent(13); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Component.prototype, \"SpaceBarPressed\", {\n        /** Signal emitted after the space bar is pressed (while focused); propagates from child components to parents, until a component consumes the event by connecting to this signal */\n        get: function () { return this._makeKeyEvent(32); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Component.prototype, \"BackspaceKeyPressed\", {\n        /** Signal emitted after the backspace key is pressed (while focused); propagates from child components to parents, until a component consumes the event by connecting to this signal */\n        get: function () { return this._makeKeyEvent(8); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Component.prototype, \"DeleteKeyPressed\", {\n        /** Signal emitted after the forward-delete key is pressed (while focused); propagates from child components to parents, until a component consumes the event by connecting to this signal */\n        get: function () { return this._makeKeyEvent(46); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Component.prototype, \"EscapeKeyPressed\", {\n        /** Signal emitted after the escape key is pressed (while focused); propagates from child components to parents, until a component consumes the event by connecting to this signal */\n        get: function () { return this._makeKeyEvent(27); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Component.prototype, \"ArrowLeftKeyPressed\", {\n        /** Signal emitted after the left arrow/d-pad key is pressed (while focused); propagates from child components to parents, until a component consumes the event by connecting to this signal */\n        get: function () { return this._makeKeyEvent(37); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Component.prototype, \"ArrowUpKeyPressed\", {\n        /** Signal emitted after the up arrow/d-pad key is pressed (while focused); propagates from child components to parents, until a component consumes the event by connecting to this signal */\n        get: function () { return this._makeKeyEvent(38); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Component.prototype, \"ArrowRightKeyPressed\", {\n        /** Signal emitted after the right arrow/d-pad key is pressed (while focused); propagates from child components to parents, until a component consumes the event by connecting to this signal */\n        get: function () { return this._makeKeyEvent(39); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Component.prototype, \"ArrowDownKeyPressed\", {\n        /** Signal emitted after the down arrow/d-pad key is pressed (while focused); propagates from child components to parents, until a component consumes the event by connecting to this signal */\n        get: function () { return this._makeKeyEvent(40); },\n        enumerable: true,\n        configurable: true\n    });\n    Component___decorate([\n        Async_defaultExport.observable\n    ], Component.prototype, \"displayOptions\", void 0);\n    Component___decorate([\n        Async_defaultExport.observable\n    ], Component.prototype, \"renderOptions\", void 0);\n    Component___decorate([\n        Async_defaultExport.observable\n    ], Component.prototype, \"flowDirection\", void 0);\n    Component___decorate([\n        Async_defaultExport.injectable\n    ], Component.prototype, \"Renderer\", void 0);\n    Component___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], Component.prototype, \"_renderer\", null);\n    Component___decorate([\n        Async_defaultExport.injectable\n    ], Component.prototype, _a, null);\n    Component___decorate([\n        Async_defaultExport.injectable\n    ], Component.prototype, \"getActualDimensions\", null);\n    Component___decorate([\n        Async_defaultExport.observable\n    ], Component.prototype, \"height\", null);\n    Component___decorate([\n        Async_defaultExport.observable\n    ], Component.prototype, \"width\", null);\n    Component___decorate([\n        Async_defaultExport.observable\n    ], Component.prototype, \"shadowEffect\", null);\n    Component___decorate([\n        ComponentFactory_ComponentFactory.setterFor(\"shadowEffectOnHover\")\n    ], Component.prototype, \"addShadowEffectOnHover\", null);\n    Component___decorate([\n        ComponentFactory_ComponentFactory.setterFor(\"shadowEffectOnFocus\")\n    ], Component.prototype, \"addShadowEffectOnFocus\", null);\n    Component___decorate([\n        Async_defaultExport.observable\n    ], Component.prototype, \"hidden\", null);\n    Component___decorate([\n        Async_defaultExport.observable\n    ], Component.prototype, \"selected\", null);\n    Component___decorate([\n        Async_defaultExport.observable\n    ], Component.prototype, \"selectionMode\", void 0);\n    Component___decorate([\n        Async_defaultExport.observable\n    ], Component.prototype, \"focusMode\", void 0);\n    Component___decorate([\n        Async_defaultExport.observable\n    ], Component.prototype, \"hasFocus\", null);\n    Component___decorate([\n        Async_defaultExport.injectable\n    ], Component.prototype, _b, null);\n    Component___decorate([\n        Async_defaultExport.injectable\n    ], Component.prototype, _c, null);\n    Component___decorate([\n        Async_defaultExport.injectable\n    ], Component.prototype, _d, null);\n    Component___decorate([\n        Async_defaultExport.observable\n    ], Component.prototype, \"hoverState\", null);\n    Component___decorate([\n        Async_defaultExport.injectable\n    ], Component.prototype, _e, null);\n    Component___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], Component.prototype, \"Click\", null);\n    Component___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], Component.prototype, \"Clicked\", null);\n    Component___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], Component.prototype, \"DoubleClick\", null);\n    Component___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], Component.prototype, \"DoubleClicked\", null);\n    Component___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], Component.prototype, \"Press\", null);\n    Component___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], Component.prototype, \"Pressed\", null);\n    Component___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], Component.prototype, \"MouseEnter\", null);\n    Component___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], Component.prototype, \"MouseLeave\", null);\n    Component___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], Component.prototype, \"MouseContextMenu\", null);\n    Component___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], Component.prototype, \"KeyDown\", null);\n    Component___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], Component.prototype, \"KeyPress\", null);\n    Component___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], Component.prototype, \"Focus\", null);\n    Component___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], Component.prototype, \"Blur\", null);\n    Component___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], Component.prototype, \"FocusGained\", null);\n    Component___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], Component.prototype, \"FocusLost\", null);\n    Component___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], Component.prototype, \"DragStart\", null);\n    Component___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], Component.prototype, \"DragEnter\", null);\n    Component___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], Component.prototype, \"DragLeave\", null);\n    Component___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], Component.prototype, \"DragDrop\", null);\n    Component___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], Component.prototype, \"EnterKeyPressed\", null);\n    Component___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], Component.prototype, \"SpaceBarPressed\", null);\n    Component___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], Component.prototype, \"BackspaceKeyPressed\", null);\n    Component___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], Component.prototype, \"DeleteKeyPressed\", null);\n    Component___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], Component.prototype, \"EscapeKeyPressed\", null);\n    Component___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], Component.prototype, \"ArrowLeftKeyPressed\", null);\n    Component___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], Component.prototype, \"ArrowUpKeyPressed\", null);\n    Component___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], Component.prototype, \"ArrowRightKeyPressed\", null);\n    Component___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], Component.prototype, \"ArrowDownKeyPressed\", null);\n    return Component;\n    var _a, _b, _c, _d, _e;\n}(Async_defaultExport.ObservableObject));\n\n// copy methods from ComponentFactory\nComponent_Component.with = makeFactory;\nComponent_Component.prototype.initializeWith = ComponentFactory_ComponentFactory.initializeWith;\n(function (Component) {\n    /** Options for automatic focus management */\n    var FocusMode;\n    (function (FocusMode) {\n        /** Unable to focus this component */\n        FocusMode[FocusMode[\"None\"] = 0] = \"None\";\n        /** Click or touch to focus */\n        FocusMode[FocusMode[\"Click\"] = 1] = \"Click\";\n        /** Click, touch, or use keyboard (tab key) to focus */\n        FocusMode[FocusMode[\"Auto\"] = 2] = \"Auto\";\n        /** Focus a child component on click, touch, or up/down arrow key press; child components with focus mode `None` are ignored */\n        FocusMode[FocusMode[\"Items\"] = 3] = \"Items\";\n    })(FocusMode = Component.FocusMode || (Component.FocusMode = {}));\n    /** Options for automatic selection management */\n    var SelectionMode;\n    (function (SelectionMode) {\n        /** Unable to select this component */\n        SelectionMode[SelectionMode[\"None\"] = 0] = \"None\";\n        /** Focus to select */\n        SelectionMode[SelectionMode[\"Focus\"] = 1] = \"Focus\";\n        /** Click or touch, or use space bar (while focused) to select */\n        SelectionMode[SelectionMode[\"Click\"] = 2] = \"Click\";\n        /** Click or touch, or use space bar (while focused) to toggle selection */\n        SelectionMode[SelectionMode[\"Toggle\"] = 3] = \"Toggle\";\n        /** Select _one_ child component on click or touch; set selection mode of child components to `Click` if undefined */\n        SelectionMode[SelectionMode[\"ItemClick\"] = 4] = \"ItemClick\";\n        /** Select _one_ child component on focus; set selection mode of child components to `Focus` if undefined; to be combined with focus mode `Items` for directional keyboard navigation */\n        SelectionMode[SelectionMode[\"ItemFocus\"] = 5] = \"ItemFocus\";\n        /** Toggle selection on child components on click or touch, or space bar (while focused): set selection mode of child components to `Toggle` if undefined */\n        SelectionMode[SelectionMode[\"ItemToggle\"] = 6] = \"ItemToggle\";\n    })(SelectionMode = Component.SelectionMode || (Component.SelectionMode = {}));\n})(Component_Component || (Component_Component = {}));\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/ComponentRenderer.js\nvar ComponentRenderer___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n/** Class that contains the code necessary to render a component; to retrieve rendering output, Component methods only use the `.output` property, which is an ObservableValue instance that is populated using the (protected) `.render` method */\nvar ComponentRenderer_ComponentRenderer = (function () {\n    /** Create a new renderer instance for given component */\n    function ComponentRenderer(component) {\n        var _this = this;\n        /** Signal that is emitted after updating `.output` (but not if undefined) and/or when the `updated` promise on the rendered output is resolved */\n        this.Rendered = Signal_Signal.create();\n        this.component = component;\n        // create observable value with a getter for rendered output\n        var rendered = false;\n        this.output = new Async_defaultExport.ObservableValue(function () {\n            if (!rendered) {\n                rendered = true;\n                if (_this.beforeFirstRender)\n                    Async_defaultExport.unobserved(_this.beforeFirstRender);\n            }\n            var result = _this.output.value = _this.render();\n            // add dependencies for all watchers\n            if (_this._watches)\n                _this._watches.forEach(function (f) { return f.value; });\n            // emit own signal, directly or asynchronously based on promise\n            if (result !== undefined) {\n                if (result.updated)\n                    result.updated.then(function () { _this.Rendered(result); });\n                else\n                    _this.Rendered(result);\n            }\n        });\n    }\n    /** Component renderer function; to be overridden, *must* be a pure function, based on the current `.component` and `.output` properties (otherwise *creating* or *setting* ObservableValue instances should be done within a function that is passed to `unobserved`) */\n    ComponentRenderer.prototype.render = function () { return this.output.value; };\n    /** Add a method that will be called (synchronously and asynchronously) from a new observable context, after previously added methods, immediately *after* the `.render` method has run once, along with an optional method that will be called (synchronously, unobserved) with the result of the first method; i.e. observable values used in the first method will be subscribed to while the output is subscribed to, but changes to these values will never trigger re-rendering the entire component -- instead, the second function is invoked; useful for partially updating existing output using a subset of component properties; should be called _before_ rendering takes place */\n    ComponentRenderer.prototype.watch = function (getter, map) {\n        var _this = this;\n        if (!this._watches)\n            this._watches = [];\n        this._watches.push(map ?\n            Async_defaultExport.observe(function () {\n                // call getter (observed) and forward result (unobserved)\n                Async_defaultExport.unobserved(map.bind(_this, getter.call(_this)));\n            }) :\n            Async_defaultExport.observe(function () {\n                // just call getter (observed), don't care about result\n                getter.call(_this);\n            }));\n    };\n    return ComponentRenderer;\n}());\n\n(function (ComponentRenderer) {\n    /** Encapsulates output for a rendered component; class type parameters indicate the type of component rendered, and the output type (e.g. HTMLElement) */\n    var Output = (function () {\n        /** Create a new instance for given component, with given element (should not be undefined) */\n        function Output(component, element, context) {\n            /** Flag that can be used for duck typing */\n            this.isComponentOutput = true;\n            this.component = component;\n            this.element = element;\n            this[\"@context\"] = context;\n        }\n        return Output;\n    }());\n    ComponentRenderer.Output = Output;\n})(ComponentRenderer_ComponentRenderer || (ComponentRenderer_ComponentRenderer = {}));\n/** Constructor for a component render event handler */\nvar ComponentRenderHandler = (function (_super) {\n    ComponentRenderer___extends(ComponentRenderHandler, _super);\n    function ComponentRenderHandler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return ComponentRenderHandler;\n}(ComponentSignalHandler));\n\n/** _Class decorator_, maps the decorated `ComponentRenderer` class to a `Component` class as its primary renderer; the renderer class constructor must have a single argument, being the component to be rendered; overrides previously mapped renderer entirely, to extend super class renderer functionality inject a class that extends the previous renderer class [decorator] */\nfunction mapComponentRenderer(componentClass) {\n    return function (target) {\n        Async_defaultExport.inject(componentClass, { Renderer: target });\n    };\n}\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/Containers/Container.js\nvar Container___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Container___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** Represents a container with vertically stacked blocks */\nvar Container_Container = (function (_super) {\n    Container___extends(Container, _super);\n    /** Create a container with given content, if any */\n    function Container(content) {\n        if (content === void 0) { content = []; }\n        var _this = _super.call(this) || this;\n        _this.content = content;\n        // containers are not focusable by default:\n        _this.focusMode = Component_Component.FocusMode.None;\n        return _this;\n    }\n    Object.defineProperty(Container.prototype, \"scrolledToTop\", {\n        /** Flag that becomes true when the container content is scrolled all the way to the top (observable); scroll position is continuously monitored after this value is read once */\n        get: function () {\n            if (!this._scrolledToTop)\n                this._monitorPlatformScroll();\n            return this._scrolledToTop.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Container.prototype, \"scrolledToBottom\", {\n        /** Flag that becomes true when the container content is scrolled all the way to the bottom, or to the threshold defined by `.scrollBottomThreshold` (observable); scroll position is continuously monitored after this value is read once */\n        get: function () {\n            if (!this._scrolledToBottom)\n                this._monitorPlatformScroll();\n            return this._scrolledToBottom.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Container.prototype, \"scrolledToLeft\", {\n        /** Flag that becomes true when the container content is scrolled all the way to the left (observable); scroll position is continuously monitored after this value is read once */\n        get: function () {\n            if (!this._scrolledToLeft)\n                this._monitorPlatformScroll();\n            return this._scrolledToLeft.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Container.prototype, \"scrolledToRight\", {\n        /** Flag that becomes true when the container content is scrolled all the way to the right (observable); scroll position is continuously monitored after this value is read once */\n        get: function () {\n            if (!this._scrolledToRight)\n                this._monitorPlatformScroll();\n            return this._scrolledToRight.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Container.prototype, \"ScrolledUp\", {\n        /** Signal emitted when the container content is scrolled up (i.e. content moves down relative to the viewable area of the container), only once on first scroll or after changing direction; scroll position is continuously monitored only after this signal is connected to */\n        get: function () {\n            if (!this._scrolledToTop)\n                this._monitorPlatformScroll();\n            return this.createComponentSignal();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Container.prototype, \"ScrolledDown\", {\n        /** Signal emitted when the container content is scrolled down (i.e. content moves up relative to the viewable area of the container), only once on first scroll or after changing direction; scroll position is continuously monitored only after this signal is connected to */\n        get: function () {\n            if (!this._scrolledToTop)\n                this._monitorPlatformScroll();\n            return this.createComponentSignal();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Returns true if this container contains a List component without items, optionally of given type (observable if used in getter); useful as a shortcut in a getter for .hidden on a \"blank-slate\" block */\n    Container.prototype.hasEmptyList = function (listComponentClass) {\n        if (listComponentClass === void 0) { listComponentClass = List_List; }\n        return this.getComponentsByType(listComponentClass)\n            .some(function (l) { return !(l.items && l.items.length); });\n    };\n    /** Append a block to this container; returns this */\n    Container.prototype.appendChild = function (block) {\n        this.content.push(block);\n        return this;\n    };\n    /** Returns an array of directly contained components (observable) */\n    Container.prototype.getChildren = function () {\n        return this.content.filter(function (c) { return (c instanceof Component_Component); });\n    };\n    /** @internal Monitor scroll position to keep _scrolledToTop and _scrolledToBottom updated */\n    Container.prototype._monitorPlatformScroll = function () {\n        var _this = this;\n        Async_defaultExport.unobserved(function () {\n            _this._scrolledToTop = new Async_defaultExport.ObservableValue();\n            _this._scrolledToBottom = new Async_defaultExport.ObservableValue();\n            _this._scrolledToLeft = new Async_defaultExport.ObservableValue();\n            _this._scrolledToRight = new Async_defaultExport.ObservableValue();\n            var oldTop, wasUp = false, wasDown = false;\n            var atTop, atBottom;\n            var atLeft, atRight;\n            _this[\"@monitorPlatformScroll\"](function (t, b, l, r) {\n                // emit signal for scroll direction if needed\n                if (t > oldTop && !wasDown) {\n                    wasDown = true, wasUp = false;\n                    _this.ScrolledDown();\n                }\n                else if (t < oldTop && !wasUp) {\n                    wasUp = true, wasDown = false;\n                    _this.ScrolledUp();\n                }\n                oldTop = t;\n                // set observable top flag only if changed\n                var tThr = _this.scrollTopThreshold || 0;\n                if (t <= tThr && !atTop)\n                    _this._scrolledToTop.value = atTop = true;\n                else if (t > tThr && atTop !== false)\n                    _this._scrolledToTop.value = atTop = false;\n                // set observable bottom flag only if changed\n                var bThr = _this.scrollBottomThreshold || 0;\n                if (b <= bThr && !atBottom)\n                    _this._scrolledToBottom.value = atBottom = true;\n                else if (b > bThr && atBottom !== false)\n                    _this._scrolledToBottom.value = atBottom = false;\n                // set observable left flag only if changed\n                if (l <= 0 && !atLeft)\n                    _this._scrolledToLeft.value = atLeft = true;\n                else if (l > 0 && atLeft !== false)\n                    _this._scrolledToLeft.value = atLeft = false;\n                // set observable right flag only if changed\n                if (r <= 0 && !atRight)\n                    _this._scrolledToRight.value = atRight = true;\n                else if (r > 0 && atRight !== false)\n                    _this._scrolledToRight.value = atRight = false;\n            });\n        });\n    };\n    /** @internal Register callback to be called with current and following vertical scroll positions; injected by platform renderer */\n    Container.prototype[_a = \"@monitorPlatformScroll\"] = function (callback) {\n        // do nothing if not injected\n    };\n    Container___decorate([\n        ComponentFactory_ComponentFactory.applyComponentsArray(ComponentFactory_ComponentFactory.CLevel.Block),\n        Async_defaultExport.observable_not_null\n    ], Container.prototype, \"content\", void 0);\n    Container___decorate([\n        Async_defaultExport.observable\n    ], Container.prototype, \"vertAlign\", void 0);\n    Container___decorate([\n        Async_defaultExport.observable\n    ], Container.prototype, \"horzAlign\", void 0);\n    Container___decorate([\n        Async_defaultExport.observable_string\n    ], Container.prototype, \"maxContentWidth\", void 0);\n    Container___decorate([\n        Async_defaultExport.observable\n    ], Container.prototype, \"scrollable\", void 0);\n    Container___decorate([\n        Async_defaultExport.observable\n    ], Container.prototype, \"scrolledToTop\", null);\n    Container___decorate([\n        Async_defaultExport.observable\n    ], Container.prototype, \"scrolledToBottom\", null);\n    Container___decorate([\n        Async_defaultExport.observable\n    ], Container.prototype, \"scrolledToLeft\", null);\n    Container___decorate([\n        Async_defaultExport.observable\n    ], Container.prototype, \"scrolledToRight\", null);\n    Container___decorate([\n        Async_defaultExport.observable\n    ], Container.prototype, \"scrollBottomThreshold\", void 0);\n    Container___decorate([\n        Async_defaultExport.observable\n    ], Container.prototype, \"scrollTopThreshold\", void 0);\n    Container___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], Container.prototype, \"ScrolledUp\", null);\n    Container___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], Container.prototype, \"ScrolledDown\", null);\n    Container___decorate([\n        Async_defaultExport.observable\n    ], Container.prototype, \"displayOptions\", void 0);\n    Container___decorate([\n        Async_defaultExport.injectable\n    ], Container.prototype, _a, null);\n    Container = Container___decorate([\n        ComponentFactory_ComponentFactory.appendChildComponents(ComponentFactory_ComponentFactory.CLevel.Block)\n    ], Container);\n    return Container;\n    var _a;\n}(Component_Component));\n\n/** Represents a container with blocks that are laid out horizontally (just like text), automatically spanning multiple rows if necessary */\nvar FlowContainer = (function (_super) {\n    Container___extends(FlowContainer, _super);\n    function FlowContainer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return FlowContainer;\n}(Container_Container));\n\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Drag.js\nvar Drag___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n/** Current drag operation(s) */\nvar instances = [];\n/** Represents a drag operation (created by static .start(...) method) */\nvar Drag_Drag = (function () {\n    function Drag() {\n        /** Event payload data for this operation (sealed observable object) */\n        this.detail = {\n            id: undefined, data: undefined\n        };\n        /** Signal emitted when the drag operation completes successfully */\n        this.Dropped = Signal_Signal.create();\n        /** Signal emitted when the drag operation is canceled */\n        this.Canceled = Signal_Signal.create();\n    }\n    /** Returns a list of current drag operations (for forwards compatibility, supporting multi touch); use this while handling drag events, e.g. get/set .detail with custom data, or observe coordinates) */\n    Drag.getCurrentInstances = function () {\n        return instances.slice();\n    };\n    /** Start tracking mouse movement based on given event (with initial screen coordinates); creates a new instance of a platform specific class derived from Drag with given payload data; Drop targets may listen for drag events (enter/leave/drop), and use information from the data object to respond */\n    Drag.start = function (event, data) {\n        var result = new Drag.BaseClass(event);\n        if (data)\n            result.detail.data = data;\n        instances.push(result);\n        return result;\n    };\n    /** Stop this drag operation, emits the `.Canceled` signal; throws an exception if this operation was already canceled or dropped */\n    Drag.prototype.cancel = function () {\n        var _this = this;\n        if (!instances.some(function (o) { return o === _this; }))\n            throw new Error(\"Drag operation already stopped\");\n        instances = instances.filter(function (o) { return o !== _this; });\n        this.Canceled(this);\n    };\n    /** Accept the current drop target (i.e. perform the drop, called automatically based on input events, but can be called manually as well), emits the `.Dropped` signal; throws an exception if this operation was already canceled or dropped */\n    Drag.prototype.drop = function () {\n        var _this = this;\n        if (!instances.some(function (o) { return o === _this; }))\n            throw new Error(\"Drag operation already stopped\");\n        instances = instances.filter(function (o) { return o !== _this; });\n        this.Dropped(this);\n    };\n    Drag___decorate([\n        Async_defaultExport.observable_seal\n    ], Drag.prototype, \"detail\", void 0);\n    return Drag;\n}());\n\n(function (Drag) {\n    ;\n})(Drag_Drag || (Drag_Drag = {}));\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Screen.js\n\n\n/** Methods for managing the available (fixed) screen space in the application viewport */\nvar Screen_Screen;\n(function (Screen) {\n    /** Display given view in the foreground, replacing the current page or adding to it (or to a new blank page, if none was displayed); returns a promise that is fulfilled after the component is rendered */\n    function displayAsync(view) {\n        if (view instanceof Page_Page) {\n            // display given page\n            return view.displayAsync();\n        }\n        else {\n            // create blank page if none displayed\n            var page = Page_Page.getCurrentPage() || new Page_Page();\n            // remember the current page, to be able to remove this component\n            // (and remove component from another page if needed)\n            var result = view.getRenderedOutputAsync().then(function (out) {\n                var prev = out[\"@Screen.page\"];\n                if (prev && prev !== page)\n                    Screen.remove(view);\n                out[\"@Screen.page\"] = page;\n            });\n            // add component as content, move to back if already added\n            var content = page.content;\n            for (var i = 0; i < content.length; i++) {\n                if (content[i] === view)\n                    content.splice(i--, 1);\n            }\n            page.content.push(view);\n            return page.displayAsync().then(function () { return result; });\n        }\n    }\n    Screen.displayAsync = displayAsync;\n    /** Returns true if given Page is currently displayed, or given Component is displayed _directly_ on the current page (i.e. not as a child component) */\n    function isDisplayed(view) {\n        if (view instanceof Page_Page) {\n            return Page_Page.getCurrentPage() === view;\n        }\n        else {\n            var page = Page_Page.getCurrentPage();\n            return page && page.contains(view);\n        }\n    }\n    Screen.isDisplayed = isDisplayed;\n    function remove(view) {\n        if (view instanceof Page_Page) {\n            // remove given page\n            if (Page_Page.getCurrentPage() === view)\n                view.remove();\n        }\n        else {\n            // remove given component from the page it belongs to\n            var out = view.getLastRenderedOutput();\n            var page = out && out[\"@Screen.page\"];\n            if (page) {\n                var content = page.content;\n                for (var i = 0; i < content.length; i++) {\n                    if (content[i] === view)\n                        content.splice(i--, 1);\n                }\n                out[\"@Screen.page\"] = undefined;\n            }\n        }\n    }\n    Screen.remove = remove;\n    /** Promise that resolves to true when ready to display the UI, after all static resources have been loaded */\n    Screen.ready = new Async_defaultExport.Promise(function (resolve) {\n        Screen.resolveReady = resolve;\n    });\n    /** Viewport dimensions (sealed observable object) */\n    Screen.dimensions = Async_defaultExport.observe(Object.seal({\n        width: NaN,\n        height: NaN,\n        get isLandscape() {\n            return this.width > this.height;\n        },\n        get isNarrow() {\n            return this.width < Screen.NARROW_WIDTH;\n        },\n        get isSmall() {\n            return this.width < Screen.SMALL_WIDTH;\n        },\n        get isWide() {\n            return this.width > Screen.WIDE_WIDTH;\n        },\n        get isExtraWide() {\n            return this.width > Screen.EXTRAWIDE_WIDTH;\n        }\n    }));\n    /** \"Narrow\" horizontal root width in logical pixels, default 550 */\n    Screen.NARROW_WIDTH = 550;\n    /** \"Small\" horizontal root width in logical pixels, default 720 */\n    Screen.SMALL_WIDTH = 720;\n    /** \"Wide\" horizontal root width in logical pixels, default 960 */\n    Screen.WIDE_WIDTH = 960;\n    /** \"Extra wide\" horizontal root width in logical pixels, default 1200 */\n    Screen.EXTRAWIDE_WIDTH = 1200;\n})(Screen_Screen || (Screen_Screen = {}));\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Page.js\nvar Page___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Page___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n/** Next page UID */\nvar Page__nextUID = 1;\n/** References the currently displayed page */\nvar Page_current = new Async_defaultExport.ObservableValue();\n/** Represents a page to be displayed on screen */\nvar Page_Page = (function () {\n    /** Create a page with given content, if any */\n    function Page(content) {\n        if (content === void 0) { content = []; }\n        /** Globally unique page identifier */\n        this.uid = \"PG\" + Page__nextUID++;\n        /** Signal that is emitted after this page is displayed on screen */\n        this.Displayed = Signal_Signal.create();\n        /** Signal that is emitted after this page has been removed from the screen */\n        this.Removed = Signal_Signal.create();\n        /** Signal that is emitted after the content of this page has been (re-) rendered, e.g. when a component is added or removed (but not when one of the components itself is re-rendered due to changes in its own sub content, use the `Component#Rendered` signal for that) */\n        // NOTE: emitted by page renderer after updating content, not here!\n        this.Rendered = Signal_Signal.create();\n        /** Signal that is emitted when a key is being pressed on the keyboard, while this page is displayed in the foreground */\n        this.KeyDown = Signal_Signal.create();\n        this.content = content;\n    }\n    /** Returns the page currently displayed on screen, if any (observable) */\n    Page.getCurrentPage = function () {\n        return Page_current.value;\n    };\n    /** Returns a new Page class with a constructor that creates instances of given component classes and appends them to the page content array */\n    Page.withContent = function () {\n        var componentClasses = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            componentClasses[_i] = arguments[_i];\n        }\n        return (function (_super) {\n            Page___extends(PageWithContent, _super);\n            function PageWithContent() {\n                var _this = _super.call(this) || this;\n                componentClasses.forEach(function (c) {\n                    _this.content.push(new c());\n                });\n                return _this;\n            }\n            return PageWithContent;\n        }(Page));\n    };\n    Page.prototype.getComponentById = function (id, componentClass) {\n        for (var _i = 0, _a = this.content; _i < _a.length; _i++) {\n            var c = _a[_i];\n            var match = c && c.getComponentById(id, componentClass);\n            if (match)\n                return match;\n        }\n        return undefined;\n    };\n    /** Returns all (recursive) child elements that are an instance of given class (observable) */\n    Page.prototype.getComponentsByType = function (componentClass) {\n        var result = [];\n        this.content.forEach(function (c) {\n            if (c instanceof componentClass)\n                result.push(c);\n            c && c.getComponentsByType(componentClass)\n                .forEach(function (r) { return result.push(r); });\n        });\n        return result;\n    };\n    /** Returns true if given component is a child component of this page or any of its child components (observable, but triggers re-evaluation upon every change in child [sub] components) */\n    Page.prototype.contains = function (component) {\n        return this.content.some(function (c) { return !!c && c.contains(component); });\n    };\n    /** Invoke the `onEsc` handler of the component closest to the foreground that defines it (usually a modal dialog container in the foreground); returns true if handler was called, otherwise does nothing and returns false */\n    Page.prototype.handleEsc = function () {\n        for (var i = this.content.length - 1; i >= 0; i--) {\n            var component = this.content[i];\n            if (component) {\n                var options = component.displayOptions;\n                if (options && (typeof options.onEsc === \"function\")) {\n                    options.onEsc.call(undefined);\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    /** Scroll the page and all parent components of given component, such that the entire component becomes visible */\n    Page.prototype.scrollTo = function (component) {\n        this._renderer.scrollTo(component);\n    };\n    /** Display this page on screen; also re-enables the page if input was blocked; replaces the currently displaying page on screen, which is removed automatically, but the result may be an empty screen if this page has no content; always waits for `Screen.ready`; returns a promise that is fulfilled when the components on this page have been rendered */\n    Page.prototype.displayAsync = function () {\n        var _this = this;\n        return new Async_defaultExport.Promise(function (resolve) {\n            var displayed = Page_current.value;\n            if (_this === displayed) {\n                // this page is already displayed (or now displaying)\n                resolve(undefined);\n                return;\n            }\n            // remove current page and unblock input if needed\n            displayed && displayed.remove();\n            if (_this._disabled) {\n                _this._renderer.enableInput();\n                _this._disabled = false;\n            }\n            Page_current.value = _this;\n            // subscribe to an observable that depends on all page content\n            var screenIsReady = Async_defaultExport.observe(Screen_Screen.ready);\n            var resolved = false;\n            _this._sub = Async_defaultExport.observe(function () {\n                if (screenIsReady.value) {\n                    _this._renderer.updateAsync().then(function () {\n                        // resolve and emit if rendered for the first time\n                        if (!resolved) {\n                            resolve(undefined);\n                            _this.Displayed();\n                        }\n                    });\n                }\n            }).subscribe();\n        });\n    };\n    /** Remove this page from the screen, if currently displayed; returns this */\n    Page.prototype.remove = function () {\n        if (this._sub) {\n            // unsubscribe from content components (deferred, to allow\n            // re-connection by another page immediately)\n            var sub = this._sub;\n            Async_defaultExport.defer(function () { return sub.clear(); });\n            this._sub = undefined;\n        }\n        if (Page_current.value === this) {\n            Page_current.value = undefined;\n            this._renderer.remove();\n            this.Removed();\n        }\n        return this;\n    };\n    /** Block all input events on this page, until given promise is resolved, or until page is re-displayed */\n    Page.prototype.disable = function (promise) {\n        var _this = this;\n        if (this._disabled || !this._sub)\n            return;\n        this._renderer.disableInput();\n        this._disabled = true;\n        if (promise) {\n            promise.then(function () {\n                if (_this._disabled && _this._sub)\n                    _this._renderer.enableInput();\n            });\n        }\n    };\n    Object.defineProperty(Page.prototype, \"_renderer\", {\n        /** @internal The current page renderer instance */\n        get: function () {\n            // create renderer (once) and forward KeyDown signal\n            var result = new this.Renderer(this);\n            result.KeyDown.connect(this.KeyDown);\n            return result;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Page___decorate([\n        Async_defaultExport.observable_not_null\n    ], Page.prototype, \"content\", void 0);\n    Page___decorate([\n        Async_defaultExport.observable\n    ], Page.prototype, \"flowDirection\", void 0);\n    Page___decorate([\n        Async_defaultExport.injectable\n    ], Page.prototype, \"Renderer\", void 0);\n    Page___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], Page.prototype, \"_renderer\", null);\n    return Page;\n}());\n\n/** @internal Platform dependent page rendering/display implementation */\nvar Page_PageRenderer = (function () {\n    /** Create the renderer for given page */\n    function PageRenderer(page) {\n        /** Signal that should be emitted when a key is being pressed on the keyboard, while the rendered page is displayed in the foreground */\n        this.KeyDown = Signal_Signal.create();\n        this.page = page;\n    }\n    return PageRenderer;\n}());\n\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Menu.js\n/** Contains methods for displaying dropdown menus and context menus */\nvar Menu;\n(function (Menu) {\n    /** Display a modal context menu; returns a Promise that resolves to the index(base 1)/key of the selected menu item, or is rejected if the user cancels the context menu */\n    function displayContextMenu(options, event) {\n        /* implemented by platform dependent code */\n        throw new Error();\n    }\n    Menu.displayContextMenu = displayContextMenu;\n    /** Display a modal dropdown menu below the given component (or above, depending on available screen space); returns a Promise that resolves to the index(base 1)/key of the selected menu item, or is rejected if the user cancels the context menu */\n    function displayDropdown(options, component) {\n        /* implemented by platform dependent code */\n        throw new Error();\n    }\n    Menu.displayDropdown = displayDropdown;\n    /** Dismiss the menu currently on screen, if any */\n    function dismiss() {\n        /* implemented by platform dependent code */\n    }\n    Menu.dismiss = dismiss;\n})(Menu || (Menu = {}));\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/Controls/ControlElement.js\nvar ControlElement___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar ControlElement___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n/** UI control element base class */\nvar ControlElement_ControlElement = (function (_super) {\n    ControlElement___extends(ControlElement, _super);\n    function ControlElement() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /** Width (CSS length), default \"auto\" (observed) */\n        _this.width = \"auto\";\n        /** Set to true to shrink this element to use as little horizontal space as possible in a row; set to false to expand (observed) */\n        _this.shrinkwrap = false;\n        /** Set to true to automatically break text across lines (observed) */\n        _this.wrapText = false;\n        return _this;\n    }\n    ControlElement___decorate([\n        Async_defaultExport.observable_string\n    ], ControlElement.prototype, \"width\", void 0);\n    ControlElement___decorate([\n        Async_defaultExport.observable\n    ], ControlElement.prototype, \"shrinkwrap\", void 0);\n    ControlElement___decorate([\n        Async_defaultExport.observable\n    ], ControlElement.prototype, \"wrapText\", void 0);\n    return ControlElement;\n}(Component_Component));\n\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/Controls/Button.js\nvar Button___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Button___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n\n/** Represents a button control */\nvar Button_Button = (function (_super) {\n    Button___extends(Button, _super);\n    /** Create a button control element */\n    function Button(label, icon) {\n        if (label === void 0) { label = \"\"; }\n        var _this = _super.call(this) || this;\n        /** Set to false to expand horizontally within row (observed) */\n        _this.shrinkwrap = true;\n        /** Encapsulation of button element style (observed) */\n        _this.style_button = new Style_Style();\n        /** Signal emitted when a dropdown option has been selected */\n        _this.DropdownClicked = _this.createComponentSignal(Button.DropdownClickSignal);\n        _this.label = label;\n        _this.icon = icon;\n        // connect to Click signal to show dropdown and/or activate target\n        _this.Click.connect(function () {\n            if (_this.dropdown && _this.dropdown.length) {\n                // create menu and display, then emit signal on selection\n                Menu.displayDropdown(_this.dropdown, _this)\n                    .then(function (choice) { return _this.DropdownClicked(choice); });\n            }\n            else if (_this.target) {\n                // activate given target\n                new Button.Activation().activate(_this.target);\n            }\n        });\n        return _this;\n    }\n    /** Initialize a button control factory with given label and handler */\n    Button.withLabel = function (label, clickedHandler) {\n        return this.with({ label: label, Clicked: clickedHandler });\n    };\n    /** Initialize a button control factory with given icon and handler */\n    Button.withIcon = function (icon, clickedHandler) {\n        return this.with({ label: \"\", icon: icon, Clicked: clickedHandler });\n    };\n    Button___decorate([\n        Async_defaultExport.observable_string\n    ], Button.prototype, \"label\", void 0);\n    Button___decorate([\n        Async_defaultExport.observable\n    ], Button.prototype, \"icon\", void 0);\n    Button___decorate([\n        Async_defaultExport.observable\n    ], Button.prototype, \"iconAfter\", void 0);\n    Button___decorate([\n        Async_defaultExport.observable\n    ], Button.prototype, \"remGutter\", void 0);\n    Button___decorate([\n        Async_defaultExport.observable_string\n    ], Button.prototype, \"badge\", void 0);\n    Button___decorate([\n        Async_defaultExport.observable_string\n    ], Button.prototype, \"tooltipText\", void 0);\n    Button___decorate([\n        Async_defaultExport.observable\n    ], Button.prototype, \"disabled\", void 0);\n    Button___decorate([\n        Async_defaultExport.observable\n    ], Button.prototype, \"primary\", void 0);\n    Button___decorate([\n        Async_defaultExport.observable\n    ], Button.prototype, \"dropdown\", void 0);\n    Button___decorate([\n        Async_defaultExport.observable\n    ], Button.prototype, \"target\", void 0);\n    Button___decorate([\n        Async_defaultExport.observable_not_null\n    ], Button.prototype, \"style_button\", void 0);\n    return Button;\n}(ControlElement_ControlElement));\n\n(function (Button) {\n    /** Signal that is emitted when a dropdown item has been selected */\n    var DropdownClickSignal = (function (_super) {\n        Button___extends(DropdownClickSignal, _super);\n        function DropdownClickSignal() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        return DropdownClickSignal;\n    }(ComponentSignal));\n    Button.DropdownClickSignal = DropdownClickSignal;\n    /** Contains injectable method for activating targets; instantiated by `Button` */\n    var Activation = (function () {\n        function Activation() {\n        }\n        /** Injectable method to activate given target (e.g. URL, or Activity instance or class); default ony handles URLs, `Application` instance injects more functionality here */\n        Activation.prototype.activate = function (target) { };\n        Button___decorate([\n            Async_defaultExport.injectable\n        ], Activation.prototype, \"activate\", null);\n        return Activation;\n    }());\n    Button.Activation = Activation;\n})(Button_Button || (Button_Button = {}));\n/** Constructor for a button dropdown click event handler */\nvar ButtonDropdownClickHandler = (function (_super) {\n    Button___extends(ButtonDropdownClickHandler, _super);\n    function ButtonDropdownClickHandler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return ButtonDropdownClickHandler;\n}(ComponentSignalHandler));\n\n/** Primary button control (shortcut for setting `.primary` on regular `Button` class) */\nvar PrimaryButton = (function (_super) {\n    Button___extends(PrimaryButton, _super);\n    function PrimaryButton() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.primary = true;\n        return _this;\n    }\n    return PrimaryButton;\n}(Button_Button));\n\n/** Button that switches between selected (active) and deselected (inactive) when clicked (shortcut for setting `toggleMode` on regular `Button` class) */\nvar Button_ToggleButton = (function (_super) {\n    Button___extends(ToggleButton, _super);\n    function ToggleButton(label, icon) {\n        if (label === void 0) { label = \"\"; }\n        var _this = _super.call(this, label, icon) || this;\n        _this.selectionMode = Component_Component.SelectionMode.Toggle;\n        return _this;\n    }\n    return ToggleButton;\n}(Button_Button));\n\n/** Link-styled button control (\"btn-link\" class) */\nvar LinkButton = (function (_super) {\n    Button___extends(LinkButton, _super);\n    function LinkButton() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return LinkButton;\n}(Button_Button));\n\n/** Button control that is not decorated as a button */\nvar TextButton = (function (_super) {\n    Button___extends(TextButton, _super);\n    function TextButton() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return TextButton;\n}(Button_Button));\n\n/** Round button control (e.g. with an icon) */\nvar RoundButton = (function (_super) {\n    Button___extends(RoundButton, _super);\n    function RoundButton() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return RoundButton;\n}(Button_Button));\n\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/Containers/DialogContainer.js\nvar DialogContainer___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar DialogContainer___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n\n\n// TextButton is needed directly in static init of TopCloseButton:\n\n/** Represents a modal dialog container */\nvar DialogContainer_DialogContainer = (function (_super) {\n    DialogContainer___extends(DialogContainer, _super);\n    /** Create a new modal dialog with given content, if any */\n    function DialogContainer(content, width) {\n        if (width === void 0) { width = \"27rem\"; }\n        var _this = _super.call(this, content) || this;\n        /** Signal emitted by the `.open` method before displaying the dialog; if any handler throws an error then the dialog will not open */\n        _this.Opening = _this.createComponentSignal();\n        /** Signal emitted when user clicks outside dialog, presses esc or clicks DialogContainer.TopCloseButton; if any handler throws an error then the dialog will not close */\n        _this.Closing = _this.createComponentSignal();\n        /** Signal emitted when this dialog has been closed */\n        _this.Closed = _this.createComponentSignal();\n        /** @internal True if a drag handle has been (un)set explicitly */\n        _this._dragHandleSet = false;\n        _this.width = width;\n        // set default display options\n        _this.displayOptions = {\n            modal: true,\n            shade: true,\n            modalHorzAlign: \"center\",\n            outerMargin: \".5rem\",\n            onEsc: function () {\n                Async_defaultExport.Promise.all(new _this.Closing({}).emit().results)\n                    .then(function () { return _this.close(); });\n            }\n        };\n        // add default animations\n        if (!_this.animations)\n            _this.animations = {};\n        _this.animations.appear = DialogContainer.APPEAR_ANIMATION;\n        _this.animations.disappear = DialogContainer.DISAPPEAR_ANIMATION;\n        // set header as drag handle if none set explicitly\n        _this.Rendered.connect(function () {\n            if (!_this._dragHandleSet && _this.header)\n                Async_defaultExport.unobserved(function () { _this.setDragHandle(_this.header); });\n        });\n        return _this;\n    }\n    /** Show the dialog on screen (in front of other components on the current page, if any), asynchronously after emitting the `.Opening` signal; returns a promise that is fulfilled after the dialog has been rendered */\n    DialogContainer.prototype.openAsync = function () {\n        var _this = this;\n        return Async_defaultExport.Promise.all(new this.Opening({}).results)\n            .then(function () { return Screen_Screen.displayAsync(_this); });\n    };\n    /** Remove the dialog from screen (does not emit or wait for `.Closing` signal, only emits `.Closed`); returns this */\n    DialogContainer.prototype.close = function () {\n        Screen_Screen.remove(this);\n        this.Closed();\n        return this;\n    };\n    /** Use given component as a drag handle for this dialog (and releases handle currently in use; defaults to .header) */\n    DialogContainer.prototype.setDragHandle = function (handle) {\n        var _this = this;\n        this._dragHandleSet = true;\n        if (this._dragHandleConnection)\n            this._dragHandleConnection.disconnect();\n        // listen to mouse down and start drag, then pick up container\n        if (handle) {\n            this._dragHandleConnection = handle.Pressed.connect(function (event) {\n                if (!event.button)\n                    Drag_Drag.start(event).pickUp(_this);\n            });\n        }\n    };\n    /** Returns an array of directly contained components (observable) */\n    DialogContainer.prototype.getChildren = function () {\n        var result = _super.prototype.getChildren.call(this);\n        if (this.header instanceof Component_Component)\n            result.unshift(this.header);\n        if (this.footer instanceof Component_Component)\n            result.push(this.footer);\n        return result;\n    };\n    DialogContainer___decorate([\n        ComponentFactory_ComponentFactory.applyComponentRef(ComponentFactory_ComponentFactory.CLevel.Block),\n        Async_defaultExport.observable\n    ], DialogContainer.prototype, \"header\", void 0);\n    DialogContainer___decorate([\n        ComponentFactory_ComponentFactory.applyComponentRef(ComponentFactory_ComponentFactory.CLevel.Block),\n        Async_defaultExport.observable\n    ], DialogContainer.prototype, \"footer\", void 0);\n    return DialogContainer;\n}(Container_Container));\n\n(function (DialogContainer) {\n    /** Predefined modal close button (\"X\") control, based on `TextButton` */\n    var TopCloseButton = (function (_super) {\n        DialogContainer___extends(TopCloseButton, _super);\n        /** Create a modal close button (\"X\") control */\n        function TopCloseButton() {\n            var _this = _super.call(this) || this;\n            _this.label = \"\\u00D7\";\n            _this.tooltipText = \"Close\";\n            _this.Click.connect(function () {\n                var page = Page_Page.getCurrentPage();\n                page && page.handleEsc();\n            });\n            return _this;\n        }\n        return TopCloseButton;\n    }(TextButton));\n    DialogContainer.TopCloseButton = TopCloseButton;\n})(DialogContainer_DialogContainer || (DialogContainer_DialogContainer = {}));\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/Containers/DrawerContainer.js\nvar DrawerContainer___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n/** Represents a modal container displayed on the side of the screen */\nvar DrawerContainer = (function (_super) {\n    DrawerContainer___extends(DrawerContainer, _super);\n    /** Create a drawer component with given content, if any */\n    function DrawerContainer(content, width) {\n        var _this = _super.call(this, content) || this;\n        if (width)\n            _this.width = width;\n        // amend alignment and margin\n        _this.displayOptions.modalHorzAlign = \"left\";\n        _this.displayOptions.outerMargin = \"1.5rem\";\n        // amend default animations\n        if (!_this.animations)\n            _this.animations = {};\n        _this.animations.appear = DrawerContainer.APPEAR_ANIMATION;\n        _this.animations.disappear = DrawerContainer.DISAPPEAR_ANIMATION;\n        return _this;\n    }\n    return DrawerContainer;\n}(DialogContainer_DialogContainer));\n\n/** Represents a modal container displayed on the right hand side of the screen (i.e. DrawerContainer with different alignment and animations) */\nvar OppositeDrawerContainer = (function (_super) {\n    DrawerContainer___extends(OppositeDrawerContainer, _super);\n    /** Create a drawer component with given content, if any */\n    function OppositeDrawerContainer(content, width) {\n        var _this = _super.call(this, content, width) || this;\n        // amend alignment\n        _this.displayOptions.modalHorzAlign = \"right\";\n        // amend default animations\n        if (!_this.animations)\n            _this.animations = {};\n        _this.animations.appear = OppositeDrawerContainer.APPEAR_ANIMATION;\n        _this.animations.disappear = OppositeDrawerContainer.DISAPPEAR_ANIMATION;\n        return _this;\n    }\n    return OppositeDrawerContainer;\n}(DrawerContainer));\n\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/Containers/LayoutContainer.js\nvar LayoutContainer___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar LayoutContainer___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** Represents a container with sub containers on up to four sides, and a main area with vertically stacked blocks */\nvar LayoutContainer_LayoutContainer = (function (_super) {\n    LayoutContainer___extends(LayoutContainer, _super);\n    function LayoutContainer() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /** Set to true to make content within container scrollable; defaults to true for `LayoutContainer` (observed) */\n        _this.scrollable = true;\n        return _this;\n    }\n    /** Returns an array of directly contained components (observable) */\n    LayoutContainer.prototype.getChildren = function () {\n        var result = _super.prototype.getChildren.call(this);\n        if (this.header instanceof Component_Component)\n            result.push(this.header);\n        if (this.footer instanceof Component_Component)\n            result.push(this.footer);\n        if (this.insideGutter instanceof Component_Component)\n            result.push(this.insideGutter);\n        if (this.outsideGutter instanceof Component_Component)\n            result.push(this.outsideGutter);\n        return result;\n    };\n    /** Default inside gutter width, used when inside gutter container has no defined width (CSS value, initially 18rem) */\n    LayoutContainer.INSIDE_GUTTER_WIDTH = \"18rem\";\n    /** Default outside gutter width, used when outside gutter container has no defined width (CSS value, initially 22rem) */\n    LayoutContainer.OUTSIDE_GUTTER_WIDTH = \"22rem\";\n    /** Default header height, used when header container has no defined height (CSS value, initially 4rem) */\n    LayoutContainer.HEADER_HEIGHT = \"4rem\";\n    /** Default footer height, used when footer container has no defined height (CSS value, initially 2rem) */\n    LayoutContainer.FOOTER_HEIGHT = \"2rem\";\n    LayoutContainer___decorate([\n        ComponentFactory_ComponentFactory.applyComponentRef(ComponentFactory_ComponentFactory.CLevel.Container),\n        Async_defaultExport.observable\n    ], LayoutContainer.prototype, \"header\", void 0);\n    LayoutContainer___decorate([\n        ComponentFactory_ComponentFactory.applyComponentRef(ComponentFactory_ComponentFactory.CLevel.Container),\n        Async_defaultExport.observable\n    ], LayoutContainer.prototype, \"footer\", void 0);\n    LayoutContainer___decorate([\n        ComponentFactory_ComponentFactory.applyComponentRef(ComponentFactory_ComponentFactory.CLevel.Container),\n        Async_defaultExport.observable\n    ], LayoutContainer.prototype, \"insideGutter\", void 0);\n    LayoutContainer___decorate([\n        ComponentFactory_ComponentFactory.applyComponentRef(ComponentFactory_ComponentFactory.CLevel.Container),\n        Async_defaultExport.observable\n    ], LayoutContainer.prototype, \"outsideGutter\", void 0);\n    LayoutContainer___decorate([\n        Async_defaultExport.observable\n    ], LayoutContainer.prototype, \"scrollable\", void 0);\n    return LayoutContainer;\n}(Container_Container));\n\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/Blocks/Block.js\nvar Block___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Block___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n/** Block base class: full-width block component */\nvar Block_Block = (function (_super) {\n    Block___extends(Block, _super);\n    /** Create a new empty block component */\n    function Block() {\n        return _super.call(this) || this;\n        // nothing here\n    }\n    Block___decorate([\n        Async_defaultExport.observable\n    ], Block.prototype, \"overlayPosition\", void 0);\n    return Block;\n}(Component_Component));\n\n(function (Block) {\n    /** Overlay positioning options */\n    var OverlayPosition;\n    (function (OverlayPosition) {\n        /** Top (full width) */\n        OverlayPosition[OverlayPosition[\"Top\"] = 0] = \"Top\";\n        /** Top left corner */\n        OverlayPosition[OverlayPosition[\"TopLeft\"] = 1] = \"TopLeft\";\n        /** Top right corner */\n        OverlayPosition[OverlayPosition[\"TopRight\"] = 2] = \"TopRight\";\n        /** Top inside corner (left for default ltr mode) */\n        OverlayPosition[OverlayPosition[\"TopStart\"] = 3] = \"TopStart\";\n        /** Top outside corner (right for default ltr mode) */\n        OverlayPosition[OverlayPosition[\"TopEnd\"] = 4] = \"TopEnd\";\n        /** Bottom (full width) */\n        OverlayPosition[OverlayPosition[\"Bottom\"] = 5] = \"Bottom\";\n        /** Bottom left corner */\n        OverlayPosition[OverlayPosition[\"BottomLeft\"] = 6] = \"BottomLeft\";\n        /** Bottom right corner */\n        OverlayPosition[OverlayPosition[\"BottomRight\"] = 7] = \"BottomRight\";\n        /** Bottom inside corner (left for default ltr mode) */\n        OverlayPosition[OverlayPosition[\"BottomStart\"] = 8] = \"BottomStart\";\n        /** Bottom outside corner (right for default ltr mode) */\n        OverlayPosition[OverlayPosition[\"BottomEnd\"] = 9] = \"BottomEnd\";\n    })(OverlayPosition = Block.OverlayPosition || (Block.OverlayPosition = {}));\n    ;\n})(Block_Block || (Block_Block = {}));\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/Blocks/Card.js\nvar Card___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Card___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** Represents a card block containing a header, content, and a footer */\nvar Card_Card = (function (_super) {\n    Card___extends(Card, _super);\n    /** Create a card block with given content, if any */\n    function Card(content) {\n        if (content === void 0) { content = []; }\n        var _this = _super.call(this) || this;\n        _this.content = content;\n        return _this;\n    }\n    /** Append a block to this component */\n    Card.prototype.appendChild = function (block) {\n        this.content.push(block);\n        return this;\n    };\n    /** Returns an array of directly contained components (observable) */\n    Card.prototype.getChildren = function () {\n        var result = this.content.filter(function (c) { return (c instanceof Component_Component); });\n        if (this.header instanceof Component_Component)\n            result.unshift(this.header);\n        if (this.footer instanceof Component_Component)\n            result.push(this.footer);\n        return result;\n    };\n    Card___decorate([\n        ComponentFactory_ComponentFactory.applyComponentRef(ComponentFactory_ComponentFactory.CLevel.Block),\n        Async_defaultExport.observable\n    ], Card.prototype, \"header\", void 0);\n    Card___decorate([\n        ComponentFactory_ComponentFactory.applyComponentRef(ComponentFactory_ComponentFactory.CLevel.Block),\n        Async_defaultExport.observable\n    ], Card.prototype, \"footer\", void 0);\n    Card___decorate([\n        ComponentFactory_ComponentFactory.applyComponentsArray(ComponentFactory_ComponentFactory.CLevel.Block),\n        Async_defaultExport.observable_not_null\n    ], Card.prototype, \"content\", void 0);\n    Card = Card___decorate([\n        ComponentFactory_ComponentFactory.appendChildComponents(ComponentFactory_ComponentFactory.CLevel.Block)\n    ], Card);\n    return Card;\n}(Block_Block));\n\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/Blocks/ContainerBlock.js\nvar ContainerBlock___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar ContainerBlock___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** Represents a block with an embedded sub container within its margins/padding */\nvar ContainerBlock_ContainerBlock = (function (_super) {\n    ContainerBlock___extends(ContainerBlock, _super);\n    /** Create a container block component with given container, if any */\n    function ContainerBlock(container) {\n        var _this = _super.call(this) || this;\n        if (container)\n            _this.container = container;\n        // apply automatic height to start with\n        _this.style.set(\"height\", Async_defaultExport.observe(function () { return _this.height; }));\n        return _this;\n    }\n    Object.defineProperty(ContainerBlock.prototype, \"container\", {\n        /** Container element (created if not set, never undefined; observed) */\n        get: function () {\n            // get underlying property or create a new container\n            return this.container || (this.container = Async_defaultExport.unobserved(function () { return new Container_Container(); }));\n        },\n        set: function (c) {\n            // set underlying property\n            this.container = c;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ContainerBlock.prototype, \"height\", {\n        /** Overall target height of this component (CSS length; observable, directly modifies `.style` property, does _not_ retrieve actual component height, may be \"auto\"); if a height has not been set explicitly, or is set to \"auto\", then the value is taken from the height of the container; for `LayoutContainer`, a value of \"100%\" is used if the container's height is also \"auto\" */\n        get: function () {\n            var result = this.height;\n            if (!result) {\n                // while no height set, observe container height and type\n                result = this.container && this.container.height || \"auto\";\n                if ((this.container instanceof LayoutContainer_LayoutContainer) &&\n                    result === \"auto\")\n                    result = \"100%\";\n            }\n            return result;\n        },\n        set: function (h) {\n            var _this = this;\n            if (h === \"auto\")\n                h = \"\";\n            this.style.set(\"height\", h ? h : Async_defaultExport.observe(function () { return _this.height; }));\n            this.height = h;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Set the container for this component (overwrites existing value, if any); returns this */\n    ContainerBlock.prototype.appendChild = function (c) {\n        this.container = c;\n        return this;\n    };\n    /** Returns an array of directly contained components (observable) */\n    ContainerBlock.prototype.getChildren = function () {\n        return [this.container];\n    };\n    ContainerBlock___decorate([\n        ComponentFactory_ComponentFactory.applyComponentRef(ComponentFactory_ComponentFactory.CLevel.Container),\n        Async_defaultExport.observable\n    ], ContainerBlock.prototype, \"container\", null);\n    ContainerBlock___decorate([\n        Async_defaultExport.observable\n    ], ContainerBlock.prototype, \"height\", null);\n    ContainerBlock = ContainerBlock___decorate([\n        ComponentFactory_ComponentFactory.appendChildComponents(ComponentFactory_ComponentFactory.CLevel.Container)\n    ], ContainerBlock);\n    return ContainerBlock;\n}(Block_Block));\n\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/Blocks/Divider.js\nvar Divider___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Divider___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n/** Represents a divider block element (horizontal line placed between blocks) */\nvar Divider_Divider = (function (_super) {\n    Divider___extends(Divider, _super);\n    /** Create a new divider with given (optional) properties */\n    function Divider(color, thickness, margin, insetStart, insetEnd) {\n        var _this = _super.call(this) || this;\n        if (color)\n            _this.color = color;\n        if (thickness)\n            _this.thickness = thickness;\n        if (margin)\n            _this.margin = margin;\n        if (insetStart)\n            _this.insetStart = insetStart;\n        if (insetEnd)\n            _this.insetEnd = insetEnd;\n        // make sure this component cannot be focused (e.g. in a List)\n        _this.focusMode = Component_Component.FocusMode.None;\n        return _this;\n    }\n    Divider___decorate([\n        Async_defaultExport.observable_string\n    ], Divider.prototype, \"color\", void 0);\n    Divider___decorate([\n        Async_defaultExport.observable_string\n    ], Divider.prototype, \"thickness\", void 0);\n    Divider___decorate([\n        Async_defaultExport.observable_string\n    ], Divider.prototype, \"margin\", void 0);\n    Divider___decorate([\n        Async_defaultExport.observable_string\n    ], Divider.prototype, \"insetStart\", void 0);\n    Divider___decorate([\n        Async_defaultExport.observable_string\n    ], Divider.prototype, \"insetEnd\", void 0);\n    return Divider;\n}(Block_Block));\n\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/Blocks/List.js\nvar List___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar List___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n\n/** Represents a list of blocks */\nvar List_List = (function (_super) {\n    List___extends(List, _super);\n    /** Create a list component with given items */\n    function List(items) {\n        if (items === void 0) { items = []; }\n        var _this = _super.call(this) || this;\n        /** Signal emitted when the list selection changes, while displayed on screen */\n        _this.SelectionChange = _this.createComponentSignal(List_1.SelectionSignal);\n        _this._dividers = {};\n        _this.items = items.slice();\n        return _this;\n    }\n    List_1 = List;\n    /** Method that is called immediately after the renderer for this list is constructed; adds observers for item selection */\n    List.prototype.beforeFirstRender = function (renderer) {\n        var _this = this;\n        _super.prototype.beforeFirstRender.call(this, renderer);\n        // emit SelectionChange if selection changes (based on list of child\n        // components and their selection status)\n        var lastIndex = -1, lastItem;\n        renderer.watch(function () {\n            var item = _this.getLastSelectedChild();\n            var index = item ? _this.items.indexOf(item) : -1;\n            if (index < 0)\n                item = undefined;\n            return { index: index, item: item };\n        }, function (change) {\n            if (lastIndex !== change.index || lastItem !== change.item) {\n                _this.SelectionChange(change);\n                lastIndex = change.index;\n                lastItem = change.item;\n            }\n            // update selected index asynchronously\n            _this.selectedIndex = change.index;\n        });\n        // watch selectedIndex, update selection asynchronously if needed\n        // (e.g. if selectedIndex is set to an observable using a binding)\n        renderer.watch(function () { return _this.selectedIndex; }, function (i) {\n            if (i !== _this.selectedIndex)\n                return; // avoid race/loop\n            var item = (i >= 0 && i < _this.items.length) ?\n                _this.items[i] : undefined;\n            if (item)\n                item.selected = true;\n            else\n                _this.deselectAll();\n        });\n    };\n    Object.defineProperty(List.prototype, \"selectedIndex\", {\n        /** Current (last) selected item index (base 0), or -1 if no item is selected (observed) */\n        get: function () {\n            // return last selected index (manually, async from beforeFirstRender,\n            // or return the observable value given to setter below)\n            return this.selectedIndex;\n        },\n        set: function (i) {\n            var value;\n            if ((i instanceof Async_defaultExport.ObservableValue)) {\n                this._observableSelectedIndex = i;\n                this.selectedIndex = i;\n                value = i.value;\n                if (value === undefined)\n                    return;\n            }\n            else {\n                // update underlying value or set observable value\n                if (this._observableSelectedIndex) {\n                    if (this._observableSelectedIndex.writable)\n                        this._observableSelectedIndex.value = i;\n                }\n                else {\n                    // no observable bound, just set own value\n                    this.selectedIndex = i;\n                }\n                value = i;\n            }\n            // use -1 for any other invalid value\n            if (value < 0 || value >= this.items.length || !this.items[value])\n                value = -1;\n            // select given item synchronously\n            this.selectItem(value >= 0 ? this.items[value] : undefined);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Deselect all items currently in this list */\n    List.prototype.deselectAll = function () {\n        this.items.forEach(function (c) { if (c)\n            c.selected = false; });\n    };\n    /** Select given item (block), and immediately deselect others if `.selectionMode` is `ItemClick` or `ItemFocus`; does _not_ check if the item is included in `.items` at all for performance reasons */\n    List.prototype.selectItem = function (item) {\n        // select given item\n        if (item)\n            item.selected = true;\n        // check if need to deselect others (do not wait for async)\n        if (this.selectionMode === Component_Component.SelectionMode.ItemClick ||\n            this.selectionMode === Component_Component.SelectionMode.ItemFocus) {\n            for (var j = this.items.length - 1; j >= 0; j--)\n                if (this.items[j] && this.items[j] !== item)\n                    this.items[j].selected = false;\n        }\n    };\n    /** Append a block to this list */\n    List.prototype.appendChild = function (block) {\n        this.items.push(block);\n        return this;\n    };\n    /** Returns an array of directly contained components (observable) */\n    List.prototype.getChildren = function () {\n        var _this = this;\n        var result = [];\n        var dividers = {};\n        this.items.forEach(function (item) {\n            if (!item)\n                return;\n            // add a divider if needed (not before first item)\n            if (_this.divider && result.length) {\n                var divider = dividers[item.uid] =\n                    _this._dividers[item.uid] ||\n                        Async_defaultExport.unobserved(function () { return ComponentFactory_ComponentFactory.initializeWith\n                            .call(new Divider_Divider(), _this.divider); });\n                result.push(divider);\n            }\n            // add the item itself\n            result.push(item);\n        });\n        this._dividers = dividers;\n        return result;\n    };\n    /** Returns an object containing all current values of input elements (observable) */\n    List.prototype.getFormValues = function (result) {\n        if (result === void 0) { result = {}; }\n        if (this.name)\n            result[this.name] = this.items\n                .mapAsyncValues(function (item) { return Async_defaultExport.observe(function () { return item.getFormValues(); }); });\n        else\n            _super.prototype.getFormValues.call(this, result);\n        return result;\n    };\n    /** Set all input values by element name */\n    List.prototype.setFormValues = function (values) {\n        var _this = this;\n        if (this.name) {\n            values && values[this.name] && this.items.forEach(function (item, i) {\n                item && item.setFormValues(values[_this.name][i]);\n            });\n        }\n        else\n            _super.prototype.setFormValues.call(this, values);\n    };\n    List___decorate([\n        ComponentFactory_ComponentFactory.applyComponentsArray(ComponentFactory_ComponentFactory.CLevel.Block),\n        Async_defaultExport.observable_not_null\n    ], List.prototype, \"items\", void 0);\n    List___decorate([\n        ComponentFactory_ComponentFactory.applyAsync,\n        Async_defaultExport.observable\n    ], List.prototype, \"selectedIndex\", null);\n    List___decorate([\n        Async_defaultExport.observable\n    ], List.prototype, \"divider\", void 0);\n    List___decorate([\n        Async_defaultExport.observable\n    ], List.prototype, \"name\", void 0);\n    List = List_1 = List___decorate([\n        ComponentFactory_ComponentFactory.appendChildComponents(ComponentFactory_ComponentFactory.CLevel.Block)\n    ], List);\n    return List;\n    var List_1;\n}(Block_Block));\n\n(function (List) {\n    /** Signal that is emitted when a list selection event occurs */\n    var SelectionSignal = (function (_super) {\n        List___extends(SelectionSignal, _super);\n        function SelectionSignal() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        return SelectionSignal;\n    }(ComponentSignal));\n    List.SelectionSignal = SelectionSignal;\n})(List_List || (List_List = {}));\n/** Constructor for a list selection event handler */\nvar ListSelectionHandler = (function (_super) {\n    List___extends(ListSelectionHandler, _super);\n    function ListSelectionHandler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return ListSelectionHandler;\n}(ComponentSignalHandler));\n\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/Blocks/TreeList.js\nvar TreeList___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar TreeList___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n/** Represents a hierarchical list of blocks */\nvar TreeList_TreeList = (function (_super) {\n    TreeList___extends(TreeList, _super);\n    /** Create a tree list component with given items */\n    function TreeList(items) {\n        if (items === void 0) { items = []; }\n        var _this = _super.call(this) || this;\n        /** Signal emitted when the list selection changes, while displayed on screen */\n        _this.SelectionChange = _this.createComponentSignal(TreeList_1.SelectionSignal);\n        /** Signal emitted when a tree list item is collapsed, while displayed on screen */\n        _this.ItemCollapsed = _this.createComponentSignal(TreeList_1.FoldSignal);\n        /** Signal emitted when a tree list item is expanded, while displayed on screen */\n        _this.ItemExpanded = _this.createComponentSignal(TreeList_1.FoldSignal);\n        _this.items = items.slice();\n        return _this;\n    }\n    TreeList_1 = TreeList;\n    /** Method that is called immediately after the renderer for this list is constructed; adds observers for item selection */\n    TreeList.prototype.beforeFirstRender = function (renderer) {\n        var _this = this;\n        _super.prototype.beforeFirstRender.call(this, renderer);\n        // create an observable flattened array with all open items\n        this._flattened = recurse(function () { return _this.items; }).flattenAsync(true);\n        function recurse(f) {\n            return Async_defaultExport.observeArray(f).mapAsyncValues(function (b) {\n                if (b instanceof Block_Block) {\n                    var sub = recurse(function () { return b.treeListItems; });\n                    return Async_defaultExport.observe(function () {\n                        return (!b.collapsed &&\n                            b.treeListItems) ?\n                            [b, sub] :\n                            b;\n                    });\n                }\n                return undefined;\n            });\n        }\n        // keep track of expanded and collapsed items\n        var count = 0;\n        var items = {};\n        var expanded = {};\n        var visible = {};\n        var trackItems = Async_defaultExport.observe(function () {\n            count++;\n            _this._flattened && _this._flattened.forEach(function (b) {\n                if (b) {\n                    items[b.uid] = b;\n                    var wasVisible = visible[b.uid];\n                    visible[b.uid] = count;\n                    if (!b.collapsed && b.treeListItems) {\n                        // set marker to current count, or 0 if new\n                        var wasExpanded = expanded[b.uid] > 0;\n                        expanded[b.uid] = (wasExpanded || !wasVisible) ?\n                            count : 0;\n                    }\n                }\n            });\n            return count;\n        });\n        renderer.watch(function () { return trackItems.value; }, function (c) {\n            if (c !== count)\n                return; // overtaken\n            // find newly expanded items and newly collapsed visible items\n            for (var uid in visible) {\n                if (visible[uid] < c) {\n                    // no longer visible, forget about this item\n                    delete items[uid];\n                    delete visible[uid];\n                    delete expanded[uid];\n                }\n                else if (expanded[uid] === 0) {\n                    // newly expanded (while already visible)\n                    expanded[uid] = c;\n                    _this.ItemExpanded({ item: items[uid] });\n                }\n                else if (expanded[uid] < c) {\n                    // no longer expanded but still visible\n                    _this.ItemCollapsed({ item: items[uid] });\n                    delete expanded[uid];\n                }\n            }\n        });\n        // emit SelectionChange if selection changes (based on list of child\n        // components and their selection status)\n        var lastItem;\n        renderer.watch(function () { return _this.getLastSelectedChild(); }, function (item) {\n            if (!item || item.selected) {\n                if (item !== lastItem) {\n                    lastItem = item;\n                    _this.SelectionChange({\n                        item: item,\n                        key: item && item.key\n                    });\n                }\n            }\n        });\n    };\n    /** Select given item (block), and immediately deselect others if `.selectionMode` is `ItemClick` or `ItemFocus`; does _not_ check if the item is included in `.items` at all for performance reasons */\n    TreeList.prototype.selectItem = function (item) {\n        // select given item\n        if (item)\n            item.selected = true;\n        // check if need to deselect others (do not wait for async)\n        if (this.selectionMode === Component_Component.SelectionMode.ItemClick ||\n            this.selectionMode === Component_Component.SelectionMode.ItemFocus) {\n            this._flattened && this._flattened.slice().forEach(function (b) {\n                if (b && b !== item)\n                    b.selected = false;\n            });\n        }\n    };\n    Object.defineProperty(TreeList.prototype, \"selectedKey\", {\n        /** Key (string value) of selected item, if any (observable); see `TreeList.BlockItem/key`; if set to a string value, all items in the hierarchy will be checked for a matching key, and selected or deselected; for selected items, parent items will be expanded automatically; input focus will be removed from deselected items as well, but selected items are not focused automatically */\n        get: function () {\n            // find selected item and return its key, if any\n            var item = this.getLastSelectedChild();\n            return item ? item.key : undefined;\n        },\n        set: function (key) {\n            var _this = this;\n            // use an object to compare against instead of undefined,\n            // so that none will match\n            if (key === undefined)\n                key = {};\n            // clear previous observable, do not keep looking for old key\n            this._selectedKeySetter && this._selectedKeySetter.clear();\n            // recurse over *all* items and select or deselect\n            var hasUndefined = false;\n            function recurse(list) {\n                var didSelect = false;\n                list.forEach(function (block) {\n                    if (!block) {\n                        hasUndefined = true;\n                        return;\n                    }\n                    // deselect or select and focus/blur if possible\n                    var doSelect = (block.key === key);\n                    if (doSelect)\n                        didSelect = true;\n                    if (doSelect !== (block.selected || false)) {\n                        Async_defaultExport.unobserved(function () {\n                            block.selected = doSelect;\n                            if (!doSelect &&\n                                block.focusMode !== Component_Component.FocusMode.None)\n                                block.hasFocus = false;\n                        });\n                    }\n                    if (block.treeListItems && block.treeListItems.length &&\n                        recurse(block.treeListItems)) {\n                        didSelect = true;\n                        // expand parent items of matching items\n                        Async_defaultExport.unobserved(function () { block.collapsed = false; });\n                    }\n                });\n                return didSelect;\n            }\n            // keep watch on undefined items\n            var watcher = this._selectedKeySetter = Async_defaultExport.observe(function () { return recurse(_this.items); })\n                .subscribe(function (didSelect) {\n                if (didSelect || !hasUndefined) {\n                    // clear observable, do not keep looking\n                    watcher.clear();\n                }\n                else if (!didSelect) {\n                    // keep looking until another item has been selected\n                    hasUndefined = false;\n                    _this.SelectionChange.connectOnce(function () {\n                        watcher.clear();\n                    });\n                }\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Append a tree list block to this list */\n    TreeList.prototype.appendChild = function (block) {\n        this.items.push(block);\n        return this;\n    };\n    /** Returns an array of directly contained components (observable); i.e. a flattened list of all _visible_ tree list items */\n    TreeList.prototype.getChildren = function () {\n        return this._flattened ? this._flattened.slice() : [];\n    };\n    TreeList___decorate([\n        ComponentFactory_ComponentFactory.applyComponentsArray(ComponentFactory_ComponentFactory.CLevel.Block),\n        Async_defaultExport.observable_not_null\n    ], TreeList.prototype, \"items\", void 0);\n    TreeList = TreeList_1 = TreeList___decorate([\n        ComponentFactory_ComponentFactory.appendChildComponents(ComponentFactory_ComponentFactory.CLevel.Block)\n    ], TreeList);\n    return TreeList;\n    var TreeList_1;\n}(Block_Block));\n\n(function (TreeList) {\n    /** Signal that is emitted when a tree list selection event occurs */\n    var SelectionSignal = (function (_super) {\n        TreeList___extends(SelectionSignal, _super);\n        function SelectionSignal() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        return SelectionSignal;\n    }(ComponentSignal));\n    TreeList.SelectionSignal = SelectionSignal;\n    /** Signal that is emitted when a tree list item is collapsed or expanded */\n    var FoldSignal = (function (_super) {\n        TreeList___extends(FoldSignal, _super);\n        function FoldSignal() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        return FoldSignal;\n    }(ComponentSignal));\n    TreeList.FoldSignal = FoldSignal;\n})(TreeList_TreeList || (TreeList_TreeList = {}));\n/** Constructor for a tree list selection event handler */\nvar TreeListSelectionHandler = (function (_super) {\n    TreeList___extends(TreeListSelectionHandler, _super);\n    function TreeListSelectionHandler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return TreeListSelectionHandler;\n}(ComponentSignalHandler));\n\n/** Constructor for a tree list fold (collapse/expand) event handler */\nvar TreeListFoldHandler = (function (_super) {\n    TreeList___extends(TreeListFoldHandler, _super);\n    function TreeListFoldHandler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return TreeListFoldHandler;\n}(ComponentSignalHandler));\n\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/Blocks/Row.js\nvar Row___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Row___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** Represents a row containing control elements placed horizontally */\nvar Row_Row = (function (_super) {\n    Row___extends(Row, _super);\n    /** Create a row block with given content, if any */\n    function Row(content) {\n        if (content === void 0) { content = []; }\n        var _this = _super.call(this) || this;\n        _this.content = content;\n        return _this;\n    }\n    /** Append a control element to this row */\n    Row.prototype.appendChild = function (controlElement) {\n        this.content.push(controlElement);\n        return this;\n    };\n    /** Returns an array of directly contained components (observable) */\n    Row.prototype.getChildren = function () {\n        return this.content.filter(function (c) { return (c instanceof Component_Component); });\n    };\n    Row___decorate([\n        ComponentFactory_ComponentFactory.applyComponentsArray(ComponentFactory_ComponentFactory.CLevel.ControlElement),\n        Async_defaultExport.observable_not_null\n    ], Row.prototype, \"content\", void 0);\n    Row___decorate([\n        Async_defaultExport.observable_string\n    ], Row.prototype, \"spacing\", void 0);\n    Row___decorate([\n        Async_defaultExport.observable_string\n    ], Row.prototype, \"verticalSpacing\", void 0);\n    Row___decorate([\n        Async_defaultExport.observable\n    ], Row.prototype, \"horzAlign\", void 0);\n    Row = Row___decorate([\n        ComponentFactory_ComponentFactory.appendChildComponents(ComponentFactory_ComponentFactory.CLevel.ControlElement)\n    ], Row);\n    return Row;\n}(Block_Block));\n\n/** Represents a row containing control elements placed horizontally, with spacing set to `0` (no margin) */\nvar CloseRow = (function (_super) {\n    Row___extends(CloseRow, _super);\n    function CloseRow() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.spacing = \"0\";\n        _this.verticalSpacing = \"0\";\n        return _this;\n    }\n    return CloseRow;\n}(Row_Row));\n\n/** A row element with components aligned to the opposite side (\"end\" alignment, i.e. right-aligned for left-to-right languages) */\nvar OppositeRow = (function (_super) {\n    Row___extends(OppositeRow, _super);\n    function OppositeRow() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /** Horizontal positioning of content within the outer boundaries of the row (observed), set to \"end\" for `OppositeRow` instances */\n        _this.horzAlign = \"end\";\n        return _this;\n    }\n    return OppositeRow;\n}(Row_Row));\n\n/** A row element with components aligned in the center */\nvar CenterRow = (function (_super) {\n    Row___extends(CenterRow, _super);\n    function CenterRow() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /** Horizontal positioning of content within the outer boundaries of the row (observed), set to \"center\" for `CenterRow` instances */\n        _this.horzAlign = \"center\";\n        return _this;\n    }\n    return CenterRow;\n}(Row_Row));\n\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/Blocks/TreeListRow.js\nvar TreeListRow___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar TreeListRow___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** Represents a tree list row, with an optional list of sub rows; implements the `TreeList.BlockItem` interface */\nvar TreeListRow_TreeListRow = (function (_super) {\n    TreeListRow___extends(TreeListRow, _super);\n    /** Creates a new tree list row for given item data, with given open/closed icon names and measurements; set the `batchSize` argument to a value greater than 0 to create child rows in batches for faster initial rendering */\n    function TreeListRow(itemData, openIcon, closedIcon, remGutter, height, batchSize) {\n        if (remGutter === void 0) { remGutter = TreeListRow.REM_GUTTER; }\n        if (height === void 0) { height = TreeListRow.HEIGHT; }\n        var _this = _super.call(this) || this;\n        /** True if this row is collapsed (defaults to true; observable) */\n        _this.collapsed = true;\n        if (!itemData)\n            throw new Error();\n        _this.itemData = itemData;\n        _this.openIcon = openIcon;\n        _this.closedIcon = closedIcon;\n        _this.remGutter = remGutter;\n        _this.height = height;\n        if (itemData.autoExpand)\n            _this.collapsed = false;\n        // populate list and content with observables\n        _this.treeListItems = _this._getTreeListItems(batchSize);\n        _this.initializeWith({\n            content: Async_defaultExport.observe(function () { return _this._getContentSpec(); })\n        });\n        // add event handlers\n        _this.Clicked.connect(function () {\n            // open on click (outside toggle icon)\n            if (_this.collapsed && _this.itemData && _this.itemData.items)\n                _this.collapsed = false;\n        });\n        _this.ArrowLeftKeyPressed.connect(function () {\n            // on left arrow press, close and then move up\n            if (_this.collapsed && _this.treeListRowParent &&\n                _this.treeListRowParent.focusMode !== Component_Component.FocusMode.None)\n                _this.treeListRowParent.hasFocus = true;\n            else\n                _this.collapsed = true;\n        });\n        _this.ArrowRightKeyPressed.connect(function () {\n            // on right arrow press, open and then move down\n            if (_this.collapsed) {\n                if (_this.itemData && _this.itemData.items)\n                    _this.collapsed = false;\n            }\n            else if (_this.treeListItems.length > 0 &&\n                _this.treeListItems[0].focusMode !== Component_Component.FocusMode.None) {\n                _this.treeListItems[0].hasFocus = true;\n            }\n        });\n        return _this;\n    }\n    /** Create an _array_ of tree list row components from the given array of tree item data objects, with given icons and measurements */\n    TreeListRow.arrayFromItems = function (itemData, openIcon, closedIcon, remGutter, height) {\n        return itemData.map(function (item) {\n            return new TreeListRow(item, openIcon, closedIcon, remGutter, height);\n        });\n    };\n    /** Create a new `ArrayBinding` for given property name/path on the base component, which should contain an array of unique tree item data objects; the binding resolves to an observable array of `TreeListRow` instances; for use in a component initializer; set the `batchSize` argument to a value greater than 0 to create rows in batches for faster initial rendering */\n    TreeListRow.arrayFromBinding = function (sourcePath, openIcon, closedIcon, remGutter, height, batchSize) {\n        var f = function (v) { return new TreeListRow(v, openIcon, closedIcon, remGutter, height, batchSize); };\n        return new Binding_ArrayBinding(sourcePath, undefined, _getBatchTransformer(f, batchSize), true);\n    };\n    Object.defineProperty(TreeListRow.prototype, \"key\", {\n        /** Item key for this row (read-only, taken directly from the `itemData` object; observable) */\n        get: function () {\n            return this.itemData ? this.itemData.key : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Generate the content factory initializer spec for this row (used as an observable getter) */\n    TreeListRow.prototype._getContentSpec = function () {\n        var _this = this;\n        if (!this.itemData)\n            return [];\n        // figure out the indentation of this row\n        if (!this._indent) {\n            this._indent = 1;\n            var parent = this.treeListRowParent;\n            while (parent) {\n                if (parent._indent) {\n                    this._indent += parent._indent;\n                    break;\n                }\n                this._indent++;\n                parent = parent.treeListRowParent;\n            }\n        }\n        // get all observable values first\n        var items = this.itemData.items;\n        var remGutter = this.remGutter;\n        var icon = this.itemData.icon, name = this.itemData.name;\n        var content = this.itemData.content;\n        // return a full factory initializer spec\n        return Async_defaultExport.unobserved(function () {\n            // insert a spacer of the correct width, and the icons\n            var result = _this._contentSpec || (_this._contentSpec = []);\n            result.length = 0;\n            var indent = _this._indent || 1;\n            indent = indent - (indent * .5) + (items ? 0 : 1);\n            var spacer = _this._contentSpecSpacer || new Spacer();\n            spacer.width = (indent * remGutter).toFixed(4) + \"rem\";\n            spacer.shrinkwrap = true;\n            result.push(spacer);\n            _this._contentSpecSpacer = spacer;\n            if (items) {\n                var toggle = _this._contentSpecToggleIcon || new Icon_Icon();\n                toggle.icon = Async_defaultExport.observe(function () {\n                    return (_this.collapsed ? _this.closedIcon : _this.openIcon);\n                });\n                toggle.width = remGutter + \"rem\";\n                result.push(toggle);\n                if (!_this._contentSpecToggleIcon) {\n                    _this._contentSpecToggleIcon = toggle;\n                    toggle.Clicked.connect(function () {\n                        _this.collapsed = !_this.collapsed;\n                    });\n                }\n            }\n            if (icon) {\n                result.push(Icon_Icon.with({ icon: icon, width: remGutter + \"rem\" }));\n            }\n            // add further content, or just a label with the item name\n            if (content) {\n                // join with content initializer spec array\n                result.push.apply(result, content);\n            }\n            else if (name !== undefined) {\n                // use a WideLabel instance\n                var label = _this._contentSpecLabel || new WideLabel();\n                label.text = name;\n                result.push(label);\n                _this._contentSpecLabel = label;\n            }\n            return result;\n        });\n    };\n    /** Generate the observable array that contains `TreeListRow` instances for child items */\n    TreeListRow.prototype._getTreeListItems = function (batchSize) {\n        var _this = this;\n        var f = _getBatchTransformer(function (item) {\n            var row = new TreeListRow(item, _this.openIcon, _this.closedIcon, _this.remGutter, _this.height, batchSize);\n            row.treeListRowParent = _this;\n            return row;\n        }, batchSize);\n        return Async_defaultExport.observeArray(function () { return _this.itemData && _this.itemData.items; })\n            .mapAsyncValues(function (v) {\n            // transform item data to a row (or observe the resulting promise)\n            var row = f(v);\n            return row.then ? Async_defaultExport.observe(row) : row;\n        });\n    };\n    /** Default height for new instances (CSS length, initially 1.75em) */\n    TreeListRow.HEIGHT = \"1.75em\";\n    /** Default gutter width for new instances (CSS length in rem units, initially 1.5) */\n    TreeListRow.REM_GUTTER = 1.5;\n    TreeListRow___decorate([\n        Async_defaultExport.observable_shallow\n    ], TreeListRow.prototype, \"itemData\", void 0);\n    TreeListRow___decorate([\n        Async_defaultExport.observable\n    ], TreeListRow.prototype, \"remGutter\", void 0);\n    TreeListRow___decorate([\n        Async_defaultExport.observable_string\n    ], TreeListRow.prototype, \"openIcon\", void 0);\n    TreeListRow___decorate([\n        Async_defaultExport.observable_string\n    ], TreeListRow.prototype, \"closedIcon\", void 0);\n    TreeListRow___decorate([\n        Async_defaultExport.observable\n    ], TreeListRow.prototype, \"collapsed\", void 0);\n    return TreeListRow;\n}(CloseRow));\n\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/Blocks/NavList.js\nvar NavList___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar NavList___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n/** Represents a list of tabs or links */\nvar NavList_NavList = (function (_super) {\n    NavList___extends(NavList, _super);\n    /** Create a navigation list component */\n    function NavList(navItems, type, selectedIndex) {\n        if (navItems === void 0) { navItems = []; }\n        if (selectedIndex === void 0) { selectedIndex = -1; }\n        var _this = _super.call(this) || this;\n        /** Type of nav: tabs or pills, inline or stacked; default tabs (observed) */\n        _this.type = NavList.Type.Tabs;\n        /** Signal emitted when the selected nav item changes, while displayed on screen */\n        _this.NavChange = _this.createComponentSignal(NavList.SelectionSignal);\n        /** Container block that contains the container for currently selected item, if any */\n        _this._containerBlock = new ContainerBlock_ContainerBlock();\n        /** Activation instance, with injected methods */\n        _this._activation = new NavList.Activation();\n        _this.navItems = navItems;\n        if (type !== undefined)\n            _this.type = type;\n        _this.selectedIndex = selectedIndex;\n        return _this;\n    }\n    /** Method that is called immediately after the renderer for this component is constructed; adds observers for nav item selection */\n    NavList.prototype.beforeFirstRender = function (renderer) {\n        var _this = this;\n        _super.prototype.beforeFirstRender.call(this, renderer);\n        // watch for changes to selected item\n        renderer.watch(function () {\n            var index = _this.selectedIndex;\n            var item = (index >= 0 && index < _this.navItems.length) ?\n                _this.navItems[index] : undefined;\n            // find (or possibly create) container\n            var container = item && item.container;\n            if (container &&\n                container.isComponentFactory) {\n                // keep current container if possible, otherwise create\n                container =\n                    (container.componentFactoryId ===\n                        _this._factoryUID) ?\n                        _this._containerBlock.container :\n                        Async_defaultExport.unobserved(function () { return new container(); });\n                _this._factoryUID =\n                    container.componentFactoryId;\n            }\n            else {\n                // reset stored factory UID if not created from factory\n                _this._factoryUID = undefined;\n            }\n            return {\n                index: item ? index : -1,\n                key: item && item.key,\n                container: container\n            };\n        }, function (change) {\n            // set current container as container block content\n            _this._containerBlock.container = change.container;\n            // emit change signal\n            _this.NavChange(change);\n        });\n        // watch for targets activated externally (e.g. URL, activities)\n        renderer.watch(function () {\n            var selectedIndex = _this.selectedIndex;\n            _this.navItems.forEach(function (item, index) {\n                if (index !== selectedIndex &&\n                    _this._activation.isActive(item.target)) {\n                    // select item activated externally\n                    Async_defaultExport.unobserved(function () {\n                        _this.selectedIndex = index;\n                    });\n                }\n            });\n        });\n    };\n    Object.defineProperty(NavList.prototype, \"selectedIndex\", {\n        /** Index of selected nav item (base 0), or -1 if no selection (observed); does not automatically activate nav item targets; to do so, use the `.activate(...)` function instead */\n        get: function () {\n            // return last selected index (manually, async from beforeFirstRender,\n            // or return the observable value given to setter below)\n            return this.selectedIndex;\n        },\n        set: function (i) {\n            var value;\n            if ((i instanceof Async_defaultExport.ObservableValue)) {\n                this._observableSelectedIndex = i;\n                this.selectedIndex = i;\n            }\n            else {\n                // use -1 for any other invalid value\n                if (i < 0 || i >= this.navItems.length || !this.navItems[i])\n                    i = -1;\n                // update underlying value or set observable value\n                if (this._observableSelectedIndex) {\n                    if (this._observableSelectedIndex.writable)\n                        this._observableSelectedIndex.value = i;\n                }\n                else {\n                    // no observable bound, just set own value\n                    this.selectedIndex = i;\n                }\n                value = i;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NavList.prototype, \"selectedKey\", {\n        /** Key (string value) of selected item, if any (read-only, observable) */\n        get: function () {\n            // find selected item and return its key, if any\n            var index = this.selectedIndex;\n            var item = (index >= 0 && index < this.navItems.length) ?\n                this.navItems[index] : undefined;\n            return item ? item.key : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Select nav item by index or key, display associated container if any, and/or start associated activity if any; returns this */\n    NavList.prototype.activate = function (selection) {\n        var index = (typeof selection === \"string\") ?\n            this.navItems.reduce(function (v, item, i) {\n                return item.key == selection ? i : v;\n            }, -1) :\n            selection;\n        var item = (index >= 0 && index < this.navItems.length) ?\n            this.navItems[index] : undefined;\n        if (!item) {\n            // no active selection\n            this.selectedIndex = -1;\n        }\n        else {\n            // set selected index\n            this.selectedIndex = index;\n            // activate item using Application instance\n            if (item.target)\n                this._activation.activate(item.target);\n        }\n        return this;\n    };\n    /** Returns an array of directly contained components (observable) */\n    NavList.prototype.getChildren = function () {\n        return this._containerBlock.container ? [this._containerBlock] : [];\n    };\n    NavList___decorate([\n        Async_defaultExport.observable_not_null\n    ], NavList.prototype, \"navItems\", void 0);\n    NavList___decorate([\n        Async_defaultExport.observable\n    ], NavList.prototype, \"remGutter\", void 0);\n    NavList___decorate([\n        ComponentFactory_ComponentFactory.applyAsync,\n        Async_defaultExport.observable\n    ], NavList.prototype, \"selectedIndex\", null);\n    NavList___decorate([\n        Async_defaultExport.observable\n    ], NavList.prototype, \"type\", void 0);\n    NavList___decorate([\n        Async_defaultExport.observable\n    ], NavList.prototype, \"justified\", void 0);\n    NavList___decorate([\n        ComponentFactory_ComponentFactory.applyAsync,\n        ComponentFactory_ComponentFactory.setterFor(\"activate\")\n    ], NavList.prototype, \"activate\", null);\n    return NavList;\n}(Block_Block));\n\n(function (NavList) {\n    /** Contains injectable methods for activating targets and querying activation state; instantiated by `NavList` */\n    var Activation = (function () {\n        function Activation() {\n        }\n        /** Injectable method to activate given target (e.g. URL, or Activity instance or class); default ony handles URLs, `Application` instance injects more functionality here */\n        Activation.prototype.activate = function (target) { };\n        /** Injectable method that returns true (observable) if and when given target matches the current target, i.e. URL/path matches, or activity/class matches current activity or one of its parent activities; this method is called from within an observable context to be able to observe changes to target states */\n        Activation.prototype.isActive = function (target) { return false; };\n        NavList___decorate([\n            Async_defaultExport.injectable\n        ], Activation.prototype, \"activate\", null);\n        NavList___decorate([\n            Async_defaultExport.injectable\n        ], Activation.prototype, \"isActive\", null);\n        return Activation;\n    }());\n    NavList.Activation = Activation;\n    ;\n    /** NavList display type */\n    var Type;\n    (function (Type) {\n        /** Display as a row of tabs */\n        Type[Type[\"Tabs\"] = 0] = \"Tabs\";\n        /** Display as a row of pills */\n        Type[Type[\"Pills\"] = 1] = \"Pills\";\n        /** Display as a list of pills */\n        Type[Type[\"StackedPills\"] = 2] = \"StackedPills\";\n    })(Type = NavList.Type || (NavList.Type = {}));\n    ;\n    /** Signal that is emitted when a navlist's selection changes */\n    var SelectionSignal = (function (_super) {\n        NavList___extends(SelectionSignal, _super);\n        function SelectionSignal() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        return SelectionSignal;\n    }(ComponentSignal));\n    NavList.SelectionSignal = SelectionSignal;\n})(NavList_NavList || (NavList_NavList = {}));\n/** Constructor for a navlist selection event handler */\nvar NavListSelectionHandler = (function (_super) {\n    NavList___extends(NavListSelectionHandler, _super);\n    function NavListSelectionHandler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return NavListSelectionHandler;\n}(ComponentSignalHandler));\n\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/Blocks/TableRow.js\nvar TableRow___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar TableRow___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** Represents a row within a `Table` component */\nvar TableRow_TableRow = (function (_super) {\n    TableRow___extends(TableRow, _super);\n    /** Create a table row with given columns, if any */\n    function TableRow(columns, widths, styles) {\n        if (columns === void 0) { columns = []; }\n        if (widths === void 0) { widths = []; }\n        if (styles === void 0) { styles = []; }\n        var _this = _super.call(this) || this;\n        /** Row index (base 0) the last time this row was rendered, or -1 (observable) */\n        _this.rowIndex = -1;\n        _this.columns = columns;\n        _this.widths = widths;\n        _this.styles = styles;\n        return _this;\n    }\n    /** Append a table cell to this row */\n    TableRow.prototype.appendChild = function (cell) {\n        this.columns.push(cell);\n        return this;\n    };\n    /** Returns an array of directly contained components */\n    TableRow.prototype.getChildren = function () {\n        return this.columns.filter(function (v) { return (v instanceof Component_Component); });\n    };\n    TableRow___decorate([\n        ComponentFactory_ComponentFactory.applyComponentsArray(ComponentFactory_ComponentFactory.CLevel.ControlElement),\n        Async_defaultExport.observable_not_null\n    ], TableRow.prototype, \"columns\", void 0);\n    TableRow___decorate([\n        Async_defaultExport.observable_not_null\n    ], TableRow.prototype, \"widths\", void 0);\n    TableRow___decorate([\n        Async_defaultExport.observable_not_null\n    ], TableRow.prototype, \"styles\", void 0);\n    TableRow___decorate([\n        Async_defaultExport.observable\n    ], TableRow.prototype, \"rowIndex\", void 0);\n    return TableRow;\n}(Block_Block));\n\n/** A table header at the top of a table */\nvar TableRow_TableHeader = (function (_super) {\n    TableRow___extends(TableHeader, _super);\n    function TableHeader() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /** Automatic selection management mode: table header rows are not selectable */\n        _this.selectionMode = Component_Component.SelectionMode.None;\n        /** Automatic focus management mode: table header rows are not focusable */\n        _this.focusMode = Component_Component.FocusMode.None;\n        return _this;\n        // implemented by platform specific renderer\n    }\n    return TableHeader;\n}(TableRow_TableRow));\n\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/Blocks/Table.js\nvar Table___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Table___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n/** Represents a table block component */\nvar Table_Table = (function (_super) {\n    Table___extends(Table, _super);\n    /** Create a table with given header and rows, if any */\n    function Table(headerColumns, widths, rows) {\n        if (rows === void 0) { rows = []; }\n        var _this = _super.call(this) || this;\n        _this.header = new TableRow_TableHeader(headerColumns, widths);\n        _this.rows = rows;\n        return _this;\n    }\n    /** Append a row to this table */\n    Table.prototype.appendChild = function (tableRow) {\n        this.rows.push(tableRow);\n        return this;\n    };\n    /** Returns an array of directly contained components (observable) */\n    Table.prototype.getChildren = function () {\n        var results = this.rows.filter(function (c) { return (c instanceof Component_Component); });\n        if (this.header)\n            results.unshift(this.header);\n        return results;\n    };\n    /** Returns an object containing all current values of input elements (observable) */\n    Table.prototype.getFormValues = function (result) {\n        if (result === void 0) { result = {}; }\n        if (this.name)\n            result[this.name] = this.rows\n                .mapAsyncValues(function (item) { return Async_defaultExport.observe(function () { return item.getFormValues(); }); });\n        else\n            _super.prototype.getFormValues.call(this, result);\n        return result;\n    };\n    /** Set all input values by element name */\n    Table.prototype.setFormValues = function (values) {\n        var _this = this;\n        if (this.name && values && values[this.name]) {\n            this.rows.forEach(function (row, i) {\n                row && row.setFormValues(values[_this.name][i]);\n            });\n        }\n        else\n            _super.prototype.setFormValues.call(this, values);\n    };\n    Table___decorate([\n        ComponentFactory_ComponentFactory.applyComponentRef(ComponentFactory_ComponentFactory.CLevel.TableHeader),\n        Async_defaultExport.observable\n    ], Table.prototype, \"header\", void 0);\n    Table___decorate([\n        ComponentFactory_ComponentFactory.applyComponentsArray(ComponentFactory_ComponentFactory.CLevel.TableRow),\n        Async_defaultExport.observable_not_null\n    ], Table.prototype, \"rows\", void 0);\n    Table___decorate([\n        Async_defaultExport.observable\n    ], Table.prototype, \"name\", void 0);\n    Table = Table___decorate([\n        ComponentFactory_ComponentFactory.appendChildComponents(ComponentFactory_ComponentFactory.CLevel.TableRow)\n    ], Table);\n    return Table;\n}(Block_Block));\n\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/Controls/BlockControl.js\nvar BlockControl___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar BlockControl___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** Represents a control element that contains a block */\nvar BlockControl_BlockControl = (function (_super) {\n    BlockControl___extends(BlockControl, _super);\n    /** Create a new block control element containing the given block, if any */\n    function BlockControl(block) {\n        var _this = _super.call(this) || this;\n        _this.block = block;\n        // apply automatic width to start with\n        _this.style.set(\"width\", Async_defaultExport.observe(function () { return _this.width; }));\n        return _this;\n    }\n    Object.defineProperty(BlockControl.prototype, \"width\", {\n        /** Overall target width of this component (CSS length; observable, directly modifies `.style` property, does _not_ retrieve actual component height, may be \"auto\"); if a width has not been set explicitly, or is set to \"auto\", then the value is taken from the width of the container */\n        get: function () {\n            // while no width set, observe container width\n            return this.width ||\n                this.block && this.block.width ||\n                \"auto\";\n        },\n        set: function (w) {\n            var _this = this;\n            if (w === \"auto\")\n                w = \"\";\n            this.style.set(\"width\", w ? w : Async_defaultExport.observe(function () { return _this.width; }));\n            this.width = w;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Set the block for this component (overwrites existing value, if any); returns this */\n    BlockControl.prototype.appendChild = function (c) {\n        this.block = c;\n        return this;\n    };\n    /** Returns an array of directly contained components (observable) */\n    BlockControl.prototype.getChildren = function () {\n        return (this.block instanceof Component_Component) ?\n            [this.block] : [];\n    };\n    BlockControl___decorate([\n        ComponentFactory_ComponentFactory.applyComponentRef(ComponentFactory_ComponentFactory.CLevel.Block),\n        Async_defaultExport.observable\n    ], BlockControl.prototype, \"block\", void 0);\n    BlockControl___decorate([\n        Async_defaultExport.observable\n    ], BlockControl.prototype, \"width\", null);\n    BlockControl = BlockControl___decorate([\n        ComponentFactory_ComponentFactory.appendChildComponents(ComponentFactory_ComponentFactory.CLevel.Block)\n    ], BlockControl);\n    return BlockControl;\n}(ControlElement_ControlElement));\n\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/Controls/ButtonGroup.js\nvar ButtonGroup___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar ButtonGroup___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** Represents a button group (toggle, tab, or toolbar) control */\nvar ButtonGroup_ButtonGroup = (function (_super) {\n    ButtonGroup___extends(ButtonGroup, _super);\n    /** Create a button group element */\n    function ButtonGroup(buttons) {\n        if (buttons === void 0) { buttons = []; }\n        var _this = _super.call(this) || this;\n        /** Set to false to expand horizontally within row (observed) */\n        _this.shrinkwrap = true;\n        _this.buttons = buttons;\n        return _this;\n    }\n    /** Method that is called immediately after the renderer for this button group is constructed; adds observers for button activation */\n    ButtonGroup.prototype.beforeFirstRender = function (renderer) {\n        var _this = this;\n        _super.prototype.beforeFirstRender.call(this, renderer);\n        renderer.watch(function () { return _this.getLastSelectedChild(); }, function (button) {\n            _this.selectedIndex = button ?\n                _this.buttons.indexOf(button) : -1;\n        });\n        renderer.watch(function () { return _this.selectedIndex; }, function (i) {\n            if (_this.selectedIndex === i && _this.buttons[i])\n                _this.buttons[i].selected = true;\n            else\n                _this.buttons.forEach(function (b) { return b && (b.selected = false); });\n        });\n    };\n    Object.defineProperty(ButtonGroup.prototype, \"selectedIndex\", {\n        /** Currently selected button index (base 0) or -1 if no selection (observed) */\n        get: function () {\n            // return last selected index (manually, async from beforeFirstRender,\n            // or return the observable value given to setter below)\n            return this.selectedIndex;\n        },\n        set: function (i) {\n            var value;\n            if ((i instanceof Async_defaultExport.ObservableValue)) {\n                this._observableSelectedIndex = i;\n                this.selectedIndex = i;\n                value = i.value;\n                if (value === undefined)\n                    return;\n            }\n            else {\n                // update underlying value or set observable value\n                if (this._observableSelectedIndex) {\n                    if (this._observableSelectedIndex.writable)\n                        this._observableSelectedIndex.value = i;\n                }\n                else {\n                    // no observable bound, just set own value\n                    this.selectedIndex = i;\n                }\n                value = i;\n            }\n            // use -1 for any other invalid value\n            if (value < 0 || value >= this.buttons.length || !this.buttons[value])\n                value = -1;\n            // select given button synchronously\n            var button = value >= 0 ? this.buttons[value] : undefined;\n            if (button)\n                button.selected = true;\n            // check if need to deselect others (do not wait for async)\n            if (this.selectionMode === Component_Component.SelectionMode.ItemClick ||\n                this.selectionMode === Component_Component.SelectionMode.ItemFocus) {\n                for (var j = this.buttons.length - 1; j >= 0; j--)\n                    if (this.buttons[j] && this.buttons[j] !== button)\n                        this.buttons[j].selected = false;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Append a button to this group; returns this */\n    ButtonGroup.prototype.appendChild = function (button) {\n        this.buttons.push(button);\n        return this;\n    };\n    /** Returns an array of directly contained components (observable) */\n    ButtonGroup.prototype.getChildren = function () {\n        return this.buttons.filter(function (b) { return (b instanceof Component_Component); });\n    };\n    ButtonGroup___decorate([\n        ComponentFactory_ComponentFactory.applyComponentsArray(ComponentFactory_ComponentFactory.CLevel.ControlElement),\n        Async_defaultExport.observable_not_null\n    ], ButtonGroup.prototype, \"buttons\", void 0);\n    ButtonGroup___decorate([\n        Async_defaultExport.observable\n    ], ButtonGroup.prototype, \"vertical\", void 0);\n    ButtonGroup___decorate([\n        ComponentFactory_ComponentFactory.applyAsync,\n        Async_defaultExport.observable\n    ], ButtonGroup.prototype, \"selectedIndex\", null);\n    ButtonGroup = ButtonGroup___decorate([\n        ComponentFactory_ComponentFactory.appendChildComponents(ComponentFactory_ComponentFactory.CLevel.ControlElement)\n    ], ButtonGroup);\n    return ButtonGroup;\n}(ControlElement_ControlElement));\n\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/Controls/ContainerControl.js\nvar ContainerControl___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar ContainerControl___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n/** Represents a control element that contains a container */\nvar ContainerControl_ContainerControl = (function (_super) {\n    ContainerControl___extends(ContainerControl, _super);\n    /** Create a container control element that contains the given container, if any */\n    function ContainerControl(container) {\n        var _this = _super.call(this) || this;\n        if (container)\n            _this.container = container;\n        // apply automatic height and width to start with\n        _this.style.set(\"height\", Async_defaultExport.observe(function () { return _this.height; }));\n        _this.style.set(\"width\", Async_defaultExport.observe(function () { return _this.width; }));\n        return _this;\n    }\n    Object.defineProperty(ContainerControl.prototype, \"container\", {\n        /** Container element (created if not set, never undefined; observed); if set to a container (other than LayoutContainer) with maxContentWidth other than auto, and this control's width is set to auto, this control will shrinkwrap to the same width as the container */\n        get: function () {\n            // get underlying property or create a new container\n            return this.container || (this.container = Async_defaultExport.unobserved(function () { return new Container_Container(); }));\n        },\n        set: function (c) {\n            // set underlying property\n            this.container = c;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ContainerControl.prototype, \"height\", {\n        /** Overall target height of this component (CSS length; observable, directly modifies `.style` property, does _not_ retrieve actual component height, may be \"auto\"); if a height has not been set explicitly, or is set to \"auto\", then the value is taken from the height of the container; for `LayoutContainer`, a value of \"100%\" is used if the container's height is also \"auto\" */\n        get: function () {\n            var result = this.height;\n            if (!result) {\n                // while no height set, observe container height and type\n                result = this.container && this.container.height || \"auto\";\n                if ((this.container instanceof LayoutContainer_LayoutContainer) &&\n                    result === \"auto\")\n                    result = \"100%\";\n            }\n            return result;\n        },\n        set: function (h) {\n            var _this = this;\n            if (h === \"auto\")\n                h = \"\";\n            this.style.set(\"height\", h ? h : Async_defaultExport.observe(function () { return _this.height; }));\n            this.height = h;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ContainerControl.prototype, \"width\", {\n        /** Overall target width of this component (CSS length; observable, directly modifies `.style` property, does _not_ retrieve actual component height, may be \"auto\"); if a width has not been set explicitly, or is set to \"auto\", then the value is taken from the width of the container */\n        get: function () {\n            // while no width set, observe container width\n            return this.width ||\n                this.container && this.container.width ||\n                \"auto\";\n        },\n        set: function (w) {\n            var _this = this;\n            if (w === \"auto\")\n                w = \"\";\n            this.style.set(\"width\", w ? w : Async_defaultExport.observe(function () { return _this.width; }));\n            this.width = w;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Set the container for this component (overwrites existing value, if any); returns this */\n    ContainerControl.prototype.appendChild = function (c) {\n        this.container = c;\n        return this;\n    };\n    /** Returns an array of directly contained components (observable) */\n    ContainerControl.prototype.getChildren = function () {\n        return (this.container instanceof Component_Component) ?\n            [this.container] : [];\n    };\n    ContainerControl___decorate([\n        ComponentFactory_ComponentFactory.applyComponentRef(ComponentFactory_ComponentFactory.CLevel.Container),\n        Async_defaultExport.observable\n    ], ContainerControl.prototype, \"container\", null);\n    ContainerControl___decorate([\n        Async_defaultExport.observable\n    ], ContainerControl.prototype, \"height\", null);\n    ContainerControl___decorate([\n        Async_defaultExport.observable\n    ], ContainerControl.prototype, \"width\", null);\n    ContainerControl = ContainerControl___decorate([\n        ComponentFactory_ComponentFactory.appendChildComponents(ComponentFactory_ComponentFactory.CLevel.Container)\n    ], ContainerControl);\n    return ContainerControl;\n}(ControlElement_ControlElement));\n\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/Controls/ControlStack.js\nvar ControlStack___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar ControlStack___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** Represents a stack control containing control elements with equal widths placed from top to bottom */\nvar ControlStack_ControlStack = (function (_super) {\n    ControlStack___extends(ControlStack, _super);\n    /** Create a stack element with given content, if any */\n    function ControlStack(content) {\n        if (content === void 0) { content = []; }\n        var _this = _super.call(this) || this;\n        /** Set to true to shrink this component horizontally such that it occupies as little space as possible; set to false to expand horizontally within row (observed); note that shrinkwrapping a control stack with non-shrinkwrapped controls may lead to unexpected results; by default, this component observes child components and is only shrinkwrapped if all child components are shrinkwrapped */\n        _this.shrinkwrap = Async_defaultExport.observe(function () { return _this.getChildren()\n            .every(function (c) { return ((c instanceof ControlElement_ControlElement) && c.shrinkwrap); }); });\n        _this.content = content;\n        return _this;\n    }\n    /** Append a control to this stack; returns this */\n    ControlStack.prototype.appendChild = function (control) {\n        this.content.push(control);\n        return this;\n    };\n    /** Returns an array of directly contained components (observable) */\n    ControlStack.prototype.getChildren = function () {\n        return this.content.filter(function (c) { return (c instanceof Component_Component); });\n    };\n    ControlStack___decorate([\n        ComponentFactory_ComponentFactory.applyComponentsArray(ComponentFactory_ComponentFactory.CLevel.ControlElement),\n        Async_defaultExport.observable_not_null\n    ], ControlStack.prototype, \"content\", void 0);\n    ControlStack___decorate([\n        Async_defaultExport.observable_string\n    ], ControlStack.prototype, \"spacing\", void 0);\n    ControlStack___decorate([\n        Async_defaultExport.observable\n    ], ControlStack.prototype, \"horzAlign\", void 0);\n    ControlStack = ControlStack___decorate([\n        ComponentFactory_ComponentFactory.appendChildComponents(ComponentFactory_ComponentFactory.CLevel.ControlElement)\n    ], ControlStack);\n    return ControlStack;\n}(ControlElement_ControlElement));\n\n/** Represents a stack containing control elements with equal width placed from top to bottom, with spacing set to 0 (no margin) */\nvar CloseControlStack = (function (_super) {\n    ControlStack___extends(CloseControlStack, _super);\n    function CloseControlStack() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.spacing = \"0\";\n        return _this;\n    }\n    return CloseControlStack;\n}(ControlStack_ControlStack));\n\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/Controls/Icon.js\nvar Icon___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Icon___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n/** Represents an icon control (horizontally centered) */\nvar Icon_Icon = (function (_super) {\n    Icon___extends(Icon, _super);\n    /** Create an icon element */\n    function Icon(icon) {\n        var _this = _super.call(this) || this;\n        /** Set to false to expand horizontally within row (observed) */\n        _this.shrinkwrap = true;\n        _this.icon = icon || \"\";\n        return _this;\n    }\n    /** Initialize an icon control with given icon name */\n    Icon.withIcon = function (icon) {\n        return this.with({ icon: icon });\n    };\n    Icon___decorate([\n        Async_defaultExport.observable_string\n    ], Icon.prototype, \"icon\", void 0);\n    Icon___decorate([\n        Async_defaultExport.observable_string\n    ], Icon.prototype, \"tooltipText\", void 0);\n    return Icon;\n}(ControlElement_ControlElement));\n\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/Controls/Image.js\nvar Image___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Image___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n/** Represents an image control */\nvar Image_Image = (function (_super) {\n    Image___extends(Image, _super);\n    /** Create an image element */\n    function Image(imageUrl) {\n        if (imageUrl === void 0) { imageUrl = \"\"; }\n        var _this = _super.call(this) || this;\n        /** Set to false to expand horizontally within row (observed) */\n        _this.shrinkwrap = true;\n        /** Encapsulation of image element style (observed) */\n        _this.style_img = new Style_Style();\n        /** True if a load error occurred (observable) */\n        _this.hasError = false;\n        /** Promise that resolves when the image is loaded, or if an error occurred (see .hasError) */\n        _this.ready = new Async_defaultExport.Promise(function (resolve) {\n            _this.resolveReady = resolve;\n        });\n        _this.imageUrl = imageUrl;\n        return _this;\n    }\n    /** Initialize an image control with given URL */\n    Image.withUrl = function (imageUrl) {\n        return this.with({ imageUrl: imageUrl });\n    };\n    Image___decorate([\n        Async_defaultExport.observable_string\n    ], Image.prototype, \"imageUrl\", void 0);\n    Image___decorate([\n        Async_defaultExport.observable_string\n    ], Image.prototype, \"tooltipText\", void 0);\n    Image___decorate([\n        Async_defaultExport.observable_not_null\n    ], Image.prototype, \"style_img\", void 0);\n    Image___decorate([\n        Async_defaultExport.observable\n    ], Image.prototype, \"hasError\", void 0);\n    return Image;\n}(ControlElement_ControlElement));\n\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/Controls/Label.js\nvar Label___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Label___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n/** Represents a minimal text control with icon and badge */\nvar Label_Label = (function (_super) {\n    Label___extends(Label, _super);\n    /** Create a label element */\n    function Label(text, icon, remGutter, badge) {\n        if (text === void 0) { text = \"\"; }\n        var _this = _super.call(this) || this;\n        /** Set to false to expand horizontally within row (default true; observed) */\n        _this.shrinkwrap = true;\n        _this.text = text;\n        _this.icon = icon;\n        _this.badge = badge;\n        if (remGutter !== undefined)\n            _this.remGutter = remGutter;\n        // set focus mode so label is not focusable by default\n        _this.focusMode = Component_Component.FocusMode.None;\n        return _this;\n    }\n    /** Initialize a text control factory with given text and style */\n    Label.withText = function (text, style) {\n        return this.with({ text: text, style: style });\n    };\n    Label___decorate([\n        Async_defaultExport.observable_string\n    ], Label.prototype, \"text\", void 0);\n    Label___decorate([\n        Async_defaultExport.observable_string\n    ], Label.prototype, \"textBefore\", void 0);\n    Label___decorate([\n        Async_defaultExport.observable_string\n    ], Label.prototype, \"textAfter\", void 0);\n    Label___decorate([\n        Async_defaultExport.observable\n    ], Label.prototype, \"icon\", void 0);\n    Label___decorate([\n        Async_defaultExport.observable\n    ], Label.prototype, \"remGutter\", void 0);\n    Label___decorate([\n        Async_defaultExport.observable_string\n    ], Label.prototype, \"badge\", void 0);\n    Label___decorate([\n        Async_defaultExport.observable_string\n    ], Label.prototype, \"tooltipText\", void 0);\n    return Label;\n}(ControlElement_ControlElement));\n\n// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n/** Stretched label control: a label that expands horizontally, while not breaking across lines (uses ellipsis if available) */\nvar WideLabel = (function (_super) {\n    Label___extends(WideLabel, _super);\n    function WideLabel() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /** Set to true to shrink horizontally (default false; observed) */\n        _this.shrinkwrap = false;\n        return _this;\n    }\n    return WideLabel;\n}(Label_Label));\n\n/** Paragraph control: a label that expands horizontally, with text that breaks automatically across lines, and added line spacing for enhanced readability */\nvar Paragraph = (function (_super) {\n    Label___extends(Paragraph, _super);\n    function Paragraph() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /** Set to true to shrink horizontally (default false; observed) */\n        _this.shrinkwrap = false;\n        /** Automatically break text across lines (default true, observed) */\n        _this.wrapText = true;\n        return _this;\n    }\n    return Paragraph;\n}(Label_Label));\n\n/** H1 label control */\nvar Heading1 = (function (_super) {\n    Label___extends(Heading1, _super);\n    function Heading1() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return Heading1;\n}(Label_Label));\n\n/** H2 label control */\nvar Heading2 = (function (_super) {\n    Label___extends(Heading2, _super);\n    function Heading2() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return Heading2;\n}(Label_Label));\n\n/** H3 label control */\nvar Heading3 = (function (_super) {\n    Label___extends(Heading3, _super);\n    function Heading3() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return Heading3;\n}(Label_Label));\n\n/** H4 label control */\nvar Heading4 = (function (_super) {\n    Label___extends(Heading4, _super);\n    function Heading4() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return Heading4;\n}(Label_Label));\n\n/** H5 label control */\nvar Heading5 = (function (_super) {\n    Label___extends(Heading5, _super);\n    function Heading5() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return Heading5;\n}(Label_Label));\n\n/** H6 label control */\nvar Heading6 = (function (_super) {\n    Label___extends(Heading6, _super);\n    function Heading6() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return Heading6;\n}(Label_Label));\n\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/Controls/ProgressBar.js\nvar ProgressBar___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar ProgressBar___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n/** Represents a progress bar control (full width by default) */\nvar ProgressBar_ProgressBar = (function (_super) {\n    ProgressBar___extends(ProgressBar, _super);\n    /** Create a progress bar control element */\n    function ProgressBar(progress) {\n        if (progress === void 0) { progress = 0; }\n        var _this = _super.call(this) || this;\n        /** Encapsulation of inner bar style (observed) */\n        _this.style_bar = new Style_Style();\n        _this.progress = progress;\n        return _this;\n    }\n    /** Initialize a progress bar control factory with given progress value (0-1) */\n    ProgressBar.withProgress = function (progress) {\n        return this.with({ progress: progress });\n    };\n    ProgressBar___decorate([\n        Async_defaultExport.observable_number\n    ], ProgressBar.prototype, \"progress\", void 0);\n    ProgressBar___decorate([\n        Async_defaultExport.observable_string\n    ], ProgressBar.prototype, \"tooltipText\", void 0);\n    ProgressBar___decorate([\n        Async_defaultExport.observable_not_null\n    ], ProgressBar.prototype, \"style_bar\", void 0);\n    return ProgressBar;\n}(ControlElement_ControlElement));\n\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/Controls/Spacer.js\nvar Spacer___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n/** Represents an empty control element to take up horizontal space within a row */\nvar Spacer = (function (_super) {\n    Spacer___extends(Spacer, _super);\n    /** Create a spacer element with given height (default 1px) */\n    function Spacer(height) {\n        if (height === void 0) { height = \"1px\"; }\n        var _this = _super.call(this) || this;\n        _this.height = height;\n        return _this;\n    }\n    /** Initialize a spacer control factory with given size (CSS lengths); also sets `.shrinkwrap` to true if a width is given */\n    Spacer.withSize = function (width, height) {\n        return this.with(width ?\n            { width: width, height: height, shrinkwrap: true } :\n            { height: height });\n    };\n    return Spacer;\n}(ControlElement_ControlElement));\n\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/Controls/InputControls/InputControl.js\nvar InputControl___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar InputControl___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** Input field control base class (abstract) */\nvar InputControl_InputControl = (function (_super) {\n    InputControl___extends(InputControl, _super);\n    function InputControl() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /** Encapsulation of label element style (observed) */\n        _this.style_label = new Style_Style();\n        /** Encapsulation of input element style (observed) */\n        _this.style_input = new Style_Style();\n        return _this;\n    }\n    Object.defineProperty(InputControl.prototype, \"ValueChange\", {\n        /** Signal emitted when the input value is committed (on change); captured from containers down to contained components, not consumed */\n        get: function () {\n            return this[\"@createEventSignal\"](\"ValueChange\", ComponentSignal);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(InputControl.prototype, \"ValueInput\", {\n        /** Signal emitted immediately before the input value changes (on input); captured from containers down to contained components, not consumed */\n        get: function () {\n            return this[\"@createEventSignal\"](\"ValueInput\", ComponentSignal);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    InputControl___decorate([\n        Async_defaultExport.observable_string\n    ], InputControl.prototype, \"name\", void 0);\n    InputControl___decorate([\n        Async_defaultExport.observable_string\n    ], InputControl.prototype, \"label\", void 0);\n    InputControl___decorate([\n        Async_defaultExport.observable_string\n    ], InputControl.prototype, \"tooltipText\", void 0);\n    InputControl___decorate([\n        Async_defaultExport.observable\n    ], InputControl.prototype, \"disabled\", void 0);\n    InputControl___decorate([\n        Async_defaultExport.observable_not_null\n    ], InputControl.prototype, \"style_label\", void 0);\n    InputControl___decorate([\n        Async_defaultExport.observable_not_null\n    ], InputControl.prototype, \"style_input\", void 0);\n    InputControl___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], InputControl.prototype, \"ValueChange\", null);\n    InputControl___decorate([\n        Async_defaultExport.unobservable_memoize_get\n    ], InputControl.prototype, \"ValueInput\", null);\n    return InputControl;\n}(ControlElement_ControlElement));\n\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/Controls/InputControls/Checkbox.js\nvar Checkbox___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Checkbox___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n/** Represents a single checkbox or radio button control */\nvar Checkbox_Checkbox = (function (_super) {\n    Checkbox___extends(Checkbox, _super);\n    /** Create a checkbox element */\n    function Checkbox(name, label, type, checked) {\n        if (name === void 0) { name = \"checkbox\"; }\n        if (type === void 0) { type = Checkbox.Type.Checkbox; }\n        if (checked === void 0) { checked = false; }\n        var _this = _super.call(this) || this;\n        /** Text value used when selected (observed), defaults to \"checked\" */\n        _this.value = \"checked\";\n        /** Set to false to expand horizontally within row (observed) */\n        _this.shrinkwrap = true;\n        /** Encapsulation of inner text element style (observed) */\n        _this.style_text = new Style_Style();\n        _this.label = label;\n        _this.name = name;\n        _this.type = type;\n        _this.checked = checked;\n        return _this;\n    }\n    /** Initialize a checkbox control factory with given values */\n    Checkbox.withName = function (name, label, checked, value) {\n        return this.with({ name: name, label: label, checked: checked, value: value });\n    };\n    /** Initialize a radio button control factory with given values */\n    Checkbox.withRadioName = function (name, label, checked, value) {\n        return this.with({\n            name: name, label: label, checked: checked, value: value,\n            type: Checkbox.Type.Radio\n        });\n    };\n    /** Returns an object containing all current values of input elements (observable) */\n    Checkbox.prototype.getFormValues = function (result) {\n        if (result === void 0) { result = {}; }\n        if (this.name && (this.checked || !this.type))\n            result[this.name] = this.checked ?\n                (this.value !== undefined ? this.value : \"checked\") :\n                undefined;\n        return result;\n    };\n    /** Sets all input values by element name */\n    Checkbox.prototype.setFormValues = function (values) {\n        if (this.name && values &&\n            Object.prototype.hasOwnProperty.call(values, this.name))\n            this.checked = this.type ?\n                (this.value !== undefined ?\n                    values[this.name] === this.value :\n                    !!values[this.name]) :\n                !!values[this.name];\n    };\n    Checkbox___decorate([\n        Async_defaultExport.observable\n    ], Checkbox.prototype, \"type\", void 0);\n    Checkbox___decorate([\n        Async_defaultExport.observable\n    ], Checkbox.prototype, \"value\", void 0);\n    Checkbox___decorate([\n        Async_defaultExport.observable\n    ], Checkbox.prototype, \"checked\", void 0);\n    Checkbox___decorate([\n        Async_defaultExport.observable_not_null\n    ], Checkbox.prototype, \"style_text\", void 0);\n    return Checkbox;\n}(InputControl_InputControl));\n\n(function (Checkbox) {\n    var Type;\n    (function (Type) {\n        Type[Type[\"Checkbox\"] = 0] = \"Checkbox\";\n        Type[Type[\"Radio\"] = 1] = \"Radio\";\n    })(Type = Checkbox.Type || (Checkbox.Type = {}));\n    ;\n})(Checkbox_Checkbox || (Checkbox_Checkbox = {}));\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/Controls/InputControls/SelectField.js\nvar SelectField___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar SelectField___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n/** Represents a native dropdown selection field control */\nvar SelectField_SelectField = (function (_super) {\n    SelectField___extends(SelectField, _super);\n    /** Create a select field element */\n    function SelectField(name, label, options) {\n        if (name === void 0) { name = \"select\"; }\n        var _this = _super.call(this) || this;\n        _this.label = label;\n        _this.options = options || [];\n        _this.name = name;\n        return _this;\n    }\n    /** Initialize a select field control factory with given name, label, and options */\n    SelectField.withOptions = function (name, label, options) {\n        if (options === void 0) { options = []; }\n        return this.with({ name: name, label: label, options: options });\n    };\n    /** Returns an object containing all current values of input elements (observable) */\n    SelectField.prototype.getFormValues = function (result) {\n        if (result === void 0) { result = {}; }\n        if (this.name)\n            result[this.name] = this.value;\n        return result;\n    };\n    /** Sets all input values by element name */\n    SelectField.prototype.setFormValues = function (values) {\n        if (this.name && values &&\n            Object.prototype.hasOwnProperty.call(values, this.name))\n            this.value = values[this.name];\n    };\n    SelectField___decorate([\n        Async_defaultExport.observable_not_null\n    ], SelectField.prototype, \"options\", void 0);\n    SelectField___decorate([\n        Async_defaultExport.observable\n    ], SelectField.prototype, \"value\", void 0);\n    return SelectField;\n}(InputControl_InputControl));\n\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/Controls/InputControls/TextField.js\nvar TextField___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar TextField___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n/** Represents a single- or multi-line text input field control */\nvar TextField_TextField = (function (_super) {\n    TextField___extends(TextField, _super);\n    /** Create a text field */\n    function TextField(name, label, textareaLines) {\n        if (name === void 0) { name = \"text\"; }\n        if (textareaLines === void 0) { textareaLines = 0; }\n        var _this = _super.call(this) || this;\n        /** Text field type (text, password, number, etc.; observed) */\n        _this.type = TextField.Type.Text;\n        _this.label = label;\n        _this.name = name;\n        _this.textareaLines = textareaLines;\n        return _this;\n    }\n    /** Initialize a text field control factory with given name, label, and placeholder */\n    TextField.withName = function (name, label, placeholderText) {\n        return this.with({ name: name, label: label, placeholderText: placeholderText });\n    };\n    /** Select (a part of) the text in this text field, returns this */\n    TextField.prototype.selectText = function (start, end) { return this; };\n    /** Returns an object containing all current values of input elements (observable) */\n    TextField.prototype.getFormValues = function (result) {\n        if (result === void 0) { result = {}; }\n        if (this.name)\n            result[this.name] = this.value;\n        return result;\n    };\n    /** Sets all input values by element name */\n    TextField.prototype.setFormValues = function (values) {\n        if (this.name && values &&\n            Object.prototype.hasOwnProperty.call(values, this.name))\n            this.value = values[this.name];\n    };\n    TextField___decorate([\n        Async_defaultExport.observable\n    ], TextField.prototype, \"type\", void 0);\n    TextField___decorate([\n        Async_defaultExport.observable_string\n    ], TextField.prototype, \"value\", void 0);\n    TextField___decorate([\n        Async_defaultExport.observable_string\n    ], TextField.prototype, \"placeholderText\", void 0);\n    TextField___decorate([\n        Async_defaultExport.observable_string\n    ], TextField.prototype, \"immediateValueUpdate\", void 0);\n    TextField___decorate([\n        Async_defaultExport.injectable\n    ], TextField.prototype, \"selectText\", null);\n    return TextField;\n}(InputControl_InputControl));\n\n(function (TextField) {\n    /** Text field type options (e.g. Text, Password, Email etc.) */\n    var Type;\n    (function (Type) {\n        Type[Type[\"Text\"] = 0] = \"Text\";\n        Type[Type[\"Password\"] = 1] = \"Password\";\n        Type[Type[\"DateTime\"] = 2] = \"DateTime\";\n        Type[Type[\"Date\"] = 3] = \"Date\";\n        Type[Type[\"Month\"] = 4] = \"Month\";\n        Type[Type[\"Time\"] = 5] = \"Time\";\n        Type[Type[\"Week\"] = 6] = \"Week\";\n        Type[Type[\"Number\"] = 7] = \"Number\";\n        Type[Type[\"Email\"] = 8] = \"Email\";\n        Type[Type[\"Url\"] = 9] = \"Url\";\n        Type[Type[\"Search\"] = 10] = \"Search\";\n        Type[Type[\"Tel\"] = 11] = \"Tel\";\n        Type[Type[\"Color\"] = 12] = \"Color\";\n    })(Type = TextField.Type || (TextField.Type = {}));\n    ;\n})(TextField_TextField || (TextField_TextField = {}));\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Components/index.js\n// base classes:\n\n\n\n\n\n// containers:\n\n\n\n\n// blocks:\n\n\n\n\n\n\n\n\n\n\n\n// controls:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/Animation.js\n/** Current unique ID, appended to name */\nvar _uid = 0;\n/** Current status: all enabled or disabled */\nvar _enabled = true;\n/** Represents a UI component animation */\nvar Animation = (function () {\n    function Animation(name) {\n        /** Total duration in milliseconds of (the looping segment of) this animation, set by implementation */\n        this.duration = 0;\n        this.name = name;\n        this.id = String(name).replace(/\\W/g, \"_\") + \"__\" + _uid++;\n    }\n    Animation.enableAll = function () { _enabled = true; };\n    Animation.disableAll = function () { _enabled = false; };\n    Object.defineProperty(Animation, \"isEnabled\", {\n        get: function () { return _enabled; },\n        enumerable: true,\n        configurable: true\n    });\n    /** Play the animation once for the entire duration, and then stop it */\n    Animation.prototype.playOnce = function (component) {\n        var anim = this.play(component);\n        anim.done.then(function () { return anim.stop(); });\n        return anim;\n    };\n    return Animation;\n}());\n\n\n// CONCATENATED MODULE: ./dist/core/lib/UI/index.js\nvar UI_namespaceObject = {};\n__webpack_require__.d(UI_namespaceObject, \"Style\", function() { return Style_Style; });\n__webpack_require__.d(UI_namespaceObject, \"Page\", function() { return Page_Page; });\n__webpack_require__.d(UI_namespaceObject, \"PageRenderer\", function() { return Page_PageRenderer; });\n__webpack_require__.d(UI_namespaceObject, \"Screen\", function() { return Screen_Screen; });\n__webpack_require__.d(UI_namespaceObject, \"Binding\", function() { return Binding_Binding; });\n__webpack_require__.d(UI_namespaceObject, \"TwoWayBinding\", function() { return TwoWayBinding; });\n__webpack_require__.d(UI_namespaceObject, \"ArrayBinding\", function() { return Binding_ArrayBinding; });\n__webpack_require__.d(UI_namespaceObject, \"bind\", function() { return bind; });\n__webpack_require__.d(UI_namespaceObject, \"bind2\", function() { return bind2; });\n__webpack_require__.d(UI_namespaceObject, \"bindComponents\", function() { return bindComponents; });\n__webpack_require__.d(UI_namespaceObject, \"_getBatchTransformer\", function() { return _getBatchTransformer; });\n__webpack_require__.d(UI_namespaceObject, \"Animation\", function() { return Animation; });\n__webpack_require__.d(UI_namespaceObject, \"Drag\", function() { return Drag_Drag; });\n__webpack_require__.d(UI_namespaceObject, \"Menu\", function() { return Menu; });\n__webpack_require__.d(UI_namespaceObject, \"Component\", function() { return Component_Component; });\n__webpack_require__.d(UI_namespaceObject, \"ComponentSignal\", function() { return ComponentSignal; });\n__webpack_require__.d(UI_namespaceObject, \"ComponentSignalHandler\", function() { return ComponentSignalHandler; });\n__webpack_require__.d(UI_namespaceObject, \"defineComponentSignal\", function() { return defineComponentSignal; });\n__webpack_require__.d(UI_namespaceObject, \"ActionHandler\", function() { return ActionHandler; });\n__webpack_require__.d(UI_namespaceObject, \"KeyEventSignal\", function() { return KeyEventSignal; });\n__webpack_require__.d(UI_namespaceObject, \"KeyHandler\", function() { return KeyHandler; });\n__webpack_require__.d(UI_namespaceObject, \"PointerEventSignal\", function() { return PointerEventSignal; });\n__webpack_require__.d(UI_namespaceObject, \"PointerHandler\", function() { return PointerHandler; });\n__webpack_require__.d(UI_namespaceObject, \"DragEventSignal\", function() { return DragEventSignal; });\n__webpack_require__.d(UI_namespaceObject, \"DragHandler\", function() { return DragHandler; });\n__webpack_require__.d(UI_namespaceObject, \"ComponentFactory\", function() { return ComponentFactory_ComponentFactory; });\n__webpack_require__.d(UI_namespaceObject, \"makeFactory\", function() { return makeFactory; });\n__webpack_require__.d(UI_namespaceObject, \"ComponentRenderer\", function() { return ComponentRenderer_ComponentRenderer; });\n__webpack_require__.d(UI_namespaceObject, \"ComponentRenderHandler\", function() { return ComponentRenderHandler; });\n__webpack_require__.d(UI_namespaceObject, \"mapComponentRenderer\", function() { return mapComponentRenderer; });\n__webpack_require__.d(UI_namespaceObject, \"TextLabelFactory\", function() { return TextLabelFactory_TextLabelFactory; });\n__webpack_require__.d(UI_namespaceObject, \"tl\", function() { return tl; });\n__webpack_require__.d(UI_namespaceObject, \"Container\", function() { return Container_Container; });\n__webpack_require__.d(UI_namespaceObject, \"FlowContainer\", function() { return FlowContainer; });\n__webpack_require__.d(UI_namespaceObject, \"DialogContainer\", function() { return DialogContainer_DialogContainer; });\n__webpack_require__.d(UI_namespaceObject, \"DrawerContainer\", function() { return DrawerContainer; });\n__webpack_require__.d(UI_namespaceObject, \"OppositeDrawerContainer\", function() { return OppositeDrawerContainer; });\n__webpack_require__.d(UI_namespaceObject, \"LayoutContainer\", function() { return LayoutContainer_LayoutContainer; });\n__webpack_require__.d(UI_namespaceObject, \"Block\", function() { return Block_Block; });\n__webpack_require__.d(UI_namespaceObject, \"Card\", function() { return Card_Card; });\n__webpack_require__.d(UI_namespaceObject, \"ContainerBlock\", function() { return ContainerBlock_ContainerBlock; });\n__webpack_require__.d(UI_namespaceObject, \"Divider\", function() { return Divider_Divider; });\n__webpack_require__.d(UI_namespaceObject, \"List\", function() { return List_List; });\n__webpack_require__.d(UI_namespaceObject, \"ListSelectionHandler\", function() { return ListSelectionHandler; });\n__webpack_require__.d(UI_namespaceObject, \"TreeList\", function() { return TreeList_TreeList; });\n__webpack_require__.d(UI_namespaceObject, \"TreeListSelectionHandler\", function() { return TreeListSelectionHandler; });\n__webpack_require__.d(UI_namespaceObject, \"TreeListFoldHandler\", function() { return TreeListFoldHandler; });\n__webpack_require__.d(UI_namespaceObject, \"TreeListRow\", function() { return TreeListRow_TreeListRow; });\n__webpack_require__.d(UI_namespaceObject, \"NavList\", function() { return NavList_NavList; });\n__webpack_require__.d(UI_namespaceObject, \"NavListSelectionHandler\", function() { return NavListSelectionHandler; });\n__webpack_require__.d(UI_namespaceObject, \"Row\", function() { return Row_Row; });\n__webpack_require__.d(UI_namespaceObject, \"CloseRow\", function() { return CloseRow; });\n__webpack_require__.d(UI_namespaceObject, \"OppositeRow\", function() { return OppositeRow; });\n__webpack_require__.d(UI_namespaceObject, \"CenterRow\", function() { return CenterRow; });\n__webpack_require__.d(UI_namespaceObject, \"Table\", function() { return Table_Table; });\n__webpack_require__.d(UI_namespaceObject, \"TableRow\", function() { return TableRow_TableRow; });\n__webpack_require__.d(UI_namespaceObject, \"TableHeader\", function() { return TableRow_TableHeader; });\n__webpack_require__.d(UI_namespaceObject, \"ControlElement\", function() { return ControlElement_ControlElement; });\n__webpack_require__.d(UI_namespaceObject, \"BlockControl\", function() { return BlockControl_BlockControl; });\n__webpack_require__.d(UI_namespaceObject, \"Button\", function() { return Button_Button; });\n__webpack_require__.d(UI_namespaceObject, \"ButtonDropdownClickHandler\", function() { return ButtonDropdownClickHandler; });\n__webpack_require__.d(UI_namespaceObject, \"PrimaryButton\", function() { return PrimaryButton; });\n__webpack_require__.d(UI_namespaceObject, \"ToggleButton\", function() { return Button_ToggleButton; });\n__webpack_require__.d(UI_namespaceObject, \"LinkButton\", function() { return LinkButton; });\n__webpack_require__.d(UI_namespaceObject, \"TextButton\", function() { return TextButton; });\n__webpack_require__.d(UI_namespaceObject, \"RoundButton\", function() { return RoundButton; });\n__webpack_require__.d(UI_namespaceObject, \"ButtonGroup\", function() { return ButtonGroup_ButtonGroup; });\n__webpack_require__.d(UI_namespaceObject, \"ContainerControl\", function() { return ContainerControl_ContainerControl; });\n__webpack_require__.d(UI_namespaceObject, \"ControlStack\", function() { return ControlStack_ControlStack; });\n__webpack_require__.d(UI_namespaceObject, \"CloseControlStack\", function() { return CloseControlStack; });\n__webpack_require__.d(UI_namespaceObject, \"Icon\", function() { return Icon_Icon; });\n__webpack_require__.d(UI_namespaceObject, \"Image\", function() { return Image_Image; });\n__webpack_require__.d(UI_namespaceObject, \"Label\", function() { return Label_Label; });\n__webpack_require__.d(UI_namespaceObject, \"WideLabel\", function() { return WideLabel; });\n__webpack_require__.d(UI_namespaceObject, \"Paragraph\", function() { return Paragraph; });\n__webpack_require__.d(UI_namespaceObject, \"Heading1\", function() { return Heading1; });\n__webpack_require__.d(UI_namespaceObject, \"Heading2\", function() { return Heading2; });\n__webpack_require__.d(UI_namespaceObject, \"Heading3\", function() { return Heading3; });\n__webpack_require__.d(UI_namespaceObject, \"Heading4\", function() { return Heading4; });\n__webpack_require__.d(UI_namespaceObject, \"Heading5\", function() { return Heading5; });\n__webpack_require__.d(UI_namespaceObject, \"Heading6\", function() { return Heading6; });\n__webpack_require__.d(UI_namespaceObject, \"ProgressBar\", function() { return ProgressBar_ProgressBar; });\n__webpack_require__.d(UI_namespaceObject, \"Spacer\", function() { return Spacer; });\n__webpack_require__.d(UI_namespaceObject, \"InputControl\", function() { return InputControl_InputControl; });\n__webpack_require__.d(UI_namespaceObject, \"Checkbox\", function() { return Checkbox_Checkbox; });\n__webpack_require__.d(UI_namespaceObject, \"SelectField\", function() { return SelectField_SelectField; });\n__webpack_require__.d(UI_namespaceObject, \"TextField\", function() { return TextField_TextField; });\n\n\n\n\n\n\n\n\n\n// CONCATENATED MODULE: ./dist/core/lib/UI.js\nvar lib_UI_namespaceObject = {};\n__webpack_require__.d(lib_UI_namespaceObject, \"default\", function() { return UI_defaultExport; });\n__webpack_require__.d(lib_UI_namespaceObject, \"Style\", function() { return Style_Style; });\n__webpack_require__.d(lib_UI_namespaceObject, \"Page\", function() { return Page_Page; });\n__webpack_require__.d(lib_UI_namespaceObject, \"PageRenderer\", function() { return Page_PageRenderer; });\n__webpack_require__.d(lib_UI_namespaceObject, \"Screen\", function() { return Screen_Screen; });\n__webpack_require__.d(lib_UI_namespaceObject, \"Binding\", function() { return Binding_Binding; });\n__webpack_require__.d(lib_UI_namespaceObject, \"TwoWayBinding\", function() { return TwoWayBinding; });\n__webpack_require__.d(lib_UI_namespaceObject, \"ArrayBinding\", function() { return Binding_ArrayBinding; });\n__webpack_require__.d(lib_UI_namespaceObject, \"bind\", function() { return bind; });\n__webpack_require__.d(lib_UI_namespaceObject, \"bind2\", function() { return bind2; });\n__webpack_require__.d(lib_UI_namespaceObject, \"bindComponents\", function() { return bindComponents; });\n__webpack_require__.d(lib_UI_namespaceObject, \"_getBatchTransformer\", function() { return _getBatchTransformer; });\n__webpack_require__.d(lib_UI_namespaceObject, \"Animation\", function() { return Animation; });\n__webpack_require__.d(lib_UI_namespaceObject, \"Drag\", function() { return Drag_Drag; });\n__webpack_require__.d(lib_UI_namespaceObject, \"Menu\", function() { return Menu; });\n__webpack_require__.d(lib_UI_namespaceObject, \"Component\", function() { return Component_Component; });\n__webpack_require__.d(lib_UI_namespaceObject, \"ComponentSignal\", function() { return ComponentSignal; });\n__webpack_require__.d(lib_UI_namespaceObject, \"ComponentSignalHandler\", function() { return ComponentSignalHandler; });\n__webpack_require__.d(lib_UI_namespaceObject, \"defineComponentSignal\", function() { return defineComponentSignal; });\n__webpack_require__.d(lib_UI_namespaceObject, \"ActionHandler\", function() { return ActionHandler; });\n__webpack_require__.d(lib_UI_namespaceObject, \"KeyEventSignal\", function() { return KeyEventSignal; });\n__webpack_require__.d(lib_UI_namespaceObject, \"KeyHandler\", function() { return KeyHandler; });\n__webpack_require__.d(lib_UI_namespaceObject, \"PointerEventSignal\", function() { return PointerEventSignal; });\n__webpack_require__.d(lib_UI_namespaceObject, \"PointerHandler\", function() { return PointerHandler; });\n__webpack_require__.d(lib_UI_namespaceObject, \"DragEventSignal\", function() { return DragEventSignal; });\n__webpack_require__.d(lib_UI_namespaceObject, \"DragHandler\", function() { return DragHandler; });\n__webpack_require__.d(lib_UI_namespaceObject, \"ComponentFactory\", function() { return ComponentFactory_ComponentFactory; });\n__webpack_require__.d(lib_UI_namespaceObject, \"makeFactory\", function() { return makeFactory; });\n__webpack_require__.d(lib_UI_namespaceObject, \"ComponentRenderer\", function() { return ComponentRenderer_ComponentRenderer; });\n__webpack_require__.d(lib_UI_namespaceObject, \"ComponentRenderHandler\", function() { return ComponentRenderHandler; });\n__webpack_require__.d(lib_UI_namespaceObject, \"mapComponentRenderer\", function() { return mapComponentRenderer; });\n__webpack_require__.d(lib_UI_namespaceObject, \"TextLabelFactory\", function() { return TextLabelFactory_TextLabelFactory; });\n__webpack_require__.d(lib_UI_namespaceObject, \"tl\", function() { return tl; });\n__webpack_require__.d(lib_UI_namespaceObject, \"Container\", function() { return Container_Container; });\n__webpack_require__.d(lib_UI_namespaceObject, \"FlowContainer\", function() { return FlowContainer; });\n__webpack_require__.d(lib_UI_namespaceObject, \"DialogContainer\", function() { return DialogContainer_DialogContainer; });\n__webpack_require__.d(lib_UI_namespaceObject, \"DrawerContainer\", function() { return DrawerContainer; });\n__webpack_require__.d(lib_UI_namespaceObject, \"OppositeDrawerContainer\", function() { return OppositeDrawerContainer; });\n__webpack_require__.d(lib_UI_namespaceObject, \"LayoutContainer\", function() { return LayoutContainer_LayoutContainer; });\n__webpack_require__.d(lib_UI_namespaceObject, \"Block\", function() { return Block_Block; });\n__webpack_require__.d(lib_UI_namespaceObject, \"Card\", function() { return Card_Card; });\n__webpack_require__.d(lib_UI_namespaceObject, \"ContainerBlock\", function() { return ContainerBlock_ContainerBlock; });\n__webpack_require__.d(lib_UI_namespaceObject, \"Divider\", function() { return Divider_Divider; });\n__webpack_require__.d(lib_UI_namespaceObject, \"List\", function() { return List_List; });\n__webpack_require__.d(lib_UI_namespaceObject, \"ListSelectionHandler\", function() { return ListSelectionHandler; });\n__webpack_require__.d(lib_UI_namespaceObject, \"TreeList\", function() { return TreeList_TreeList; });\n__webpack_require__.d(lib_UI_namespaceObject, \"TreeListSelectionHandler\", function() { return TreeListSelectionHandler; });\n__webpack_require__.d(lib_UI_namespaceObject, \"TreeListFoldHandler\", function() { return TreeListFoldHandler; });\n__webpack_require__.d(lib_UI_namespaceObject, \"TreeListRow\", function() { return TreeListRow_TreeListRow; });\n__webpack_require__.d(lib_UI_namespaceObject, \"NavList\", function() { return NavList_NavList; });\n__webpack_require__.d(lib_UI_namespaceObject, \"NavListSelectionHandler\", function() { return NavListSelectionHandler; });\n__webpack_require__.d(lib_UI_namespaceObject, \"Row\", function() { return Row_Row; });\n__webpack_require__.d(lib_UI_namespaceObject, \"CloseRow\", function() { return CloseRow; });\n__webpack_require__.d(lib_UI_namespaceObject, \"OppositeRow\", function() { return OppositeRow; });\n__webpack_require__.d(lib_UI_namespaceObject, \"CenterRow\", function() { return CenterRow; });\n__webpack_require__.d(lib_UI_namespaceObject, \"Table\", function() { return Table_Table; });\n__webpack_require__.d(lib_UI_namespaceObject, \"TableRow\", function() { return TableRow_TableRow; });\n__webpack_require__.d(lib_UI_namespaceObject, \"TableHeader\", function() { return TableRow_TableHeader; });\n__webpack_require__.d(lib_UI_namespaceObject, \"ControlElement\", function() { return ControlElement_ControlElement; });\n__webpack_require__.d(lib_UI_namespaceObject, \"BlockControl\", function() { return BlockControl_BlockControl; });\n__webpack_require__.d(lib_UI_namespaceObject, \"Button\", function() { return Button_Button; });\n__webpack_require__.d(lib_UI_namespaceObject, \"ButtonDropdownClickHandler\", function() { return ButtonDropdownClickHandler; });\n__webpack_require__.d(lib_UI_namespaceObject, \"PrimaryButton\", function() { return PrimaryButton; });\n__webpack_require__.d(lib_UI_namespaceObject, \"ToggleButton\", function() { return Button_ToggleButton; });\n__webpack_require__.d(lib_UI_namespaceObject, \"LinkButton\", function() { return LinkButton; });\n__webpack_require__.d(lib_UI_namespaceObject, \"TextButton\", function() { return TextButton; });\n__webpack_require__.d(lib_UI_namespaceObject, \"RoundButton\", function() { return RoundButton; });\n__webpack_require__.d(lib_UI_namespaceObject, \"ButtonGroup\", function() { return ButtonGroup_ButtonGroup; });\n__webpack_require__.d(lib_UI_namespaceObject, \"ContainerControl\", function() { return ContainerControl_ContainerControl; });\n__webpack_require__.d(lib_UI_namespaceObject, \"ControlStack\", function() { return ControlStack_ControlStack; });\n__webpack_require__.d(lib_UI_namespaceObject, \"CloseControlStack\", function() { return CloseControlStack; });\n__webpack_require__.d(lib_UI_namespaceObject, \"Icon\", function() { return Icon_Icon; });\n__webpack_require__.d(lib_UI_namespaceObject, \"Image\", function() { return Image_Image; });\n__webpack_require__.d(lib_UI_namespaceObject, \"Label\", function() { return Label_Label; });\n__webpack_require__.d(lib_UI_namespaceObject, \"WideLabel\", function() { return WideLabel; });\n__webpack_require__.d(lib_UI_namespaceObject, \"Paragraph\", function() { return Paragraph; });\n__webpack_require__.d(lib_UI_namespaceObject, \"Heading1\", function() { return Heading1; });\n__webpack_require__.d(lib_UI_namespaceObject, \"Heading2\", function() { return Heading2; });\n__webpack_require__.d(lib_UI_namespaceObject, \"Heading3\", function() { return Heading3; });\n__webpack_require__.d(lib_UI_namespaceObject, \"Heading4\", function() { return Heading4; });\n__webpack_require__.d(lib_UI_namespaceObject, \"Heading5\", function() { return Heading5; });\n__webpack_require__.d(lib_UI_namespaceObject, \"Heading6\", function() { return Heading6; });\n__webpack_require__.d(lib_UI_namespaceObject, \"ProgressBar\", function() { return ProgressBar_ProgressBar; });\n__webpack_require__.d(lib_UI_namespaceObject, \"Spacer\", function() { return Spacer; });\n__webpack_require__.d(lib_UI_namespaceObject, \"InputControl\", function() { return InputControl_InputControl; });\n__webpack_require__.d(lib_UI_namespaceObject, \"Checkbox\", function() { return Checkbox_Checkbox; });\n__webpack_require__.d(lib_UI_namespaceObject, \"SelectField\", function() { return SelectField_SelectField; });\n__webpack_require__.d(lib_UI_namespaceObject, \"TextField\", function() { return TextField_TextField; });\n\n\n/* harmony default export */ var UI_defaultExport = (UI_namespaceObject);\n\n// CONCATENATED MODULE: ./dist/dom/node_modules/@typescene/core/UI.js\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/DOM/Stylesheet.js\n\n\n/** Last selection class set, default blank */\nvar _selectionClass = \"\";\n/** Unique random identifier for this runtime instance of the library, used as an identifier on page root elements */\nvar uid = \"__a\" + Math.random().toFixed(8).replace(/\\D/, \"\");\n/** Represents a (live updating) style sheet, with an optional base class name; the style sheet consists of one or more CSS selectors that each contain a reference to a `Style` instance */\nvar Stylesheet_Stylesheet = (function () {\n    /** Create a new style sheet, with given base class name(s) (optional) and given selectors and styles; selectors may be written as `\"@... { selector }\"` for e.g. @keyframe and @media nested at-rules; also, `.~~` will be replaced with the full base class name and `.~` with the final part, or if not included then the base class name will be prepended */\n    function Stylesheet(baseClassName, sheet) {\n        this._keys = new ObservableArray_ObservableArray();\n        this._disabled = new Observable_ObservableValue();\n        this.baseClassName = baseClassName;\n        this._selectors = new ObservableObject_ObservableObject();\n        if (sheet) {\n            for (var key in sheet) {\n                if (sheet[key] &&\n                    Object.prototype.hasOwnProperty.call(sheet, key))\n                    this.define(key, sheet[key]);\n            }\n        }\n    }\n    /** Returns true if the pseudo-luminance of given color (in hex format `#112233` or `#123` or rgb format `rgb(255, 255, 255)` or hsl format `hsl(255, 0%, 0%)`) is greater than 55%; can be used e.g. to decide on a contrasting text color for a given background color */\n    Stylesheet.isBrightColor = function (color) {\n        color = String(color);\n        if (color[0] === \"#\") {\n            if (color.length === 4) {\n                color = \"#\" + color[1] + color[1] +\n                    color[2] + color[2] +\n                    color[3] + color[3];\n            }\n            var r = parseInt(color.slice(1, 3), 16);\n            var g = parseInt(color.slice(3, 5), 16);\n            var b = parseInt(color.slice(5, 7), 16);\n            return (0.3 * r + 0.6 * g + 0.1 * b) > 140;\n        }\n        else if (color.slice(0, 4) === \"rgb(\") {\n            var v = color.slice(4).split(\",\").map(parseFloat);\n            return (0.3 * v[0] + 0.6 * v[1] + 0.1 * v[2]) > 140;\n        }\n        else if (color.slice(0, 4) === \"hsl(\") {\n            var lum = parseFloat(color.slice(4).split(\",\")[2]);\n            return lum > 55;\n        }\n        else\n            return false;\n    };\n    /** Returns a color in hex format (e.g. `#112233`) that lies between given colors (in hex format `#112233` or `#123` or rgb format `rgb(255, 255, 255)`) at given point (0-1, with 0 being the same as the first color, 1 being the same as the second color, and 0.5 being an equal mix) */\n    Stylesheet.mixColors = function (color1, color2, p) {\n        function parse(color) {\n            color = String(color);\n            if (color[0] === \"#\") {\n                if (color.length === 4) {\n                    color = \"#\" + color[1] + color[1] +\n                        color[2] + color[2] +\n                        color[3] + color[3];\n                }\n                return [\n                    parseInt(color.slice(1, 3), 16),\n                    parseInt(color.slice(3, 5), 16),\n                    parseInt(color.slice(5, 7), 16)\n                ];\n            }\n            else if (color.slice(0, 4) === \"rgb(\") {\n                return color.slice(4).split(\",\").map(parseFloat);\n            }\n            else\n                return [0, 0, 0];\n        }\n        var q = 1 - p;\n        var c1 = parse(color1);\n        var c2 = parse(color2);\n        var c = [\n            q * c1[0] + p * c2[0],\n            q * c1[1] + p * c2[1],\n            q * c1[2] + p * c2[2]\n        ];\n        var hex2 = function (n) { return (n < 16 ? \"0\" : \"\") + Math.floor(n).toString(16); };\n        return \"#\" + hex2(c[0]) + hex2(c[1]) + hex2(c[2]);\n    };\n    /** Disable all style rules in one go without removing them (use `.enable()` to reverse the effect); returns this */\n    Stylesheet.prototype.disable = function () {\n        this._disabled.value = true;\n        return this;\n    };\n    /** Re-enable all style rules (after using `.disable()` to disable them); returns this */\n    Stylesheet.prototype.enable = function () {\n        this._disabled.value = false;\n        return this;\n    };\n    /** Returns a list of selectors defined in this style sheet (observable) */\n    Stylesheet.prototype.listSelectors = function () {\n        return this._keys.slice(0);\n    };\n    Stylesheet.prototype.define = function (selector, style) {\n        if (!this._selectors.hasObservableProperty(selector)) {\n            // make property observable and set style\n            makePropertyObservable(this._selectors, selector);\n            this._keys.push(selector);\n            this._selectors[selector] = (style instanceof Style_Style) ?\n                style : new Style_Style(style);\n        }\n        else if (style) {\n            // create a new Style instance to combine old and new styles\n            this._selectors[selector] = new Style_Style()\n                .override(this._selectors[selector])\n                .override(style);\n        }\n        return this;\n    };\n    /** Remove defined styles for given selector or pattern; returns this */\n    Stylesheet.prototype.remove = function (selector) {\n        var _this = this;\n        if (selector instanceof RegExp) {\n            // remove all matching selectors\n            this._keys.forEach(function (key) {\n                if (selector.test(key))\n                    _this._selectors[key] = undefined;\n            });\n        }\n        else {\n            // remove selector directly\n            this._selectors[String(selector)] = undefined;\n        }\n        return this;\n    };\n    /** Invoke given function for each selector of this style sheet, including instance identifier class and base class (except for keyframe selectors), if any, and the referenced `Style` instance, if any; to be used in an observable context to watch for changes*/\n    Stylesheet.prototype.forEach = function (callback) {\n        var _this = this;\n        if (this._disabled.value)\n            return;\n        var base = (this.baseClassName || \"\");\n        if (base)\n            base = \".\" + base.trim().replace(/\\s+/, \".\");\n        var baseLast = base.replace(/.*(\\.[^\\.]+)$/, \"$1\");\n        var uidSel = \"#\" + uid + \" \";\n        var kf = /^@keyframes/;\n        this._keys.forEach(function (key) {\n            if (_this._selectors[key]) {\n                var selector;\n                if (!kf.test(key)) {\n                    // add base class where necessary\n                    selector = key.split(/\\s*,\\s*/g).map(function (k) {\n                        // check for .~ and/or @...{ block }\n                        if (k.indexOf(\".~\") >= 0)\n                            return k.replace(/\\.\\~\\~/g, base)\n                                .replace(/\\.\\~/g, baseLast)\n                                .replace(/^((?:[^\\{]*\\{\\s*)?)/, \"$1\" + uidSel);\n                        else\n                            return k.replace(/^((?:[^\\{]*\\{\\s*)?)/, \"$1\" + uidSel + (base && base + \" \"));\n                    }).join(\", \");\n                }\n                else {\n                    // keep keyframe percentage/from/to as is\n                    selector = key;\n                }\n                // pass callback the augmented selector and Style\n                callback(selector, _this._selectors[key]);\n            }\n        });\n    };\n    return Stylesheet;\n}());\n\n/** Define global CSS styles from given style sheet, in the context of the current runtime instance; if the `liveUpdate` argument is set to true, changes to the style sheet and any of its observable properties are observed and reflected in the DOM asynchronously (and the `.disable` method can be used to remove the stylesheet from the DOM temporarily or permanently) */\nfunction applyStylesheet(sheet, liveUpdate) {\n    var styleElt = document.createElement(\"style\");\n    if (!(sheet instanceof Stylesheet_Stylesheet))\n        sheet = new Stylesheet_Stylesheet(undefined, sheet);\n    // helper function to return combined CSS text for all selectors\n    function getCSSText() {\n        var result = \"\";\n        var lastBlockID;\n        sheet.forEach(function (key, style) {\n            var text;\n            if (style) {\n                // get CSS text from style instance\n                var instances = style.getOverrides();\n                text = \"\";\n                instances.forEach(function (s) {\n                    s.forEachProperty(function (key, value) {\n                        if (key[0] !== \".\" && key[0] !== \":\") {\n                            key = key.replace(/([A-Z])/g, \"-$1\").toLowerCase()\n                                .replace(/^(webkit|o|ms|moz)-/, \"-$1-\");\n                            for (var _i = 0, _a = String(value).split(\"||\").reverse(); _i < _a.length; _i++) {\n                                var str = _a[_i];\n                                text += key + \": \" + str + \"; \";\n                            }\n                        }\n                        else if (key === \":shadow\") {\n                            // add box shadow for given depth factor\n                            var boxShadow = getBoxShadowText(Number(value));\n                            text += \"box-shadow: \" + boxShadow + \"; \";\n                        }\n                    });\n                });\n                if (text)\n                    text = \" {\" + text.slice(0, -2) + \"}\";\n            }\n            else {\n                // use key as entire CSS text\n                text = key, key = \"\";\n            }\n            // append selector and CSS text, if any\n            if (text) {\n                var blockMatch = key.match(/^(.*)\\{\\s*(.*)\\s*\\}\\s*$/);\n                if (blockMatch) {\n                    var blockID = blockMatch[1].trim();\n                    if (lastBlockID !== blockID) {\n                        // insert text within defined @...{ block }\n                        result += blockID + \" { \" +\n                            blockMatch[2] + text + \"}\\n\";\n                    }\n                    else {\n                        // append text to same block\n                        result = result.slice(0, -2) + \"\\n\" +\n                            blockMatch[2] + text + \"}\\n\";\n                    }\n                    lastBlockID = blockID;\n                }\n                else {\n                    // insert text after selector\n                    result += key + text + \"\\n\";\n                    lastBlockID = undefined;\n                }\n            }\n        });\n        return result;\n    }\n    if (liveUpdate) {\n        // keep the <style> element updated\n        observe(getCSSText).subscribe(function (text) {\n            styleElt.textContent = text;\n            document.head.appendChild(styleElt);\n        });\n    }\n    else {\n        // insert the <style> element only once\n        styleElt.textContent = getCSSText();\n        document.head.appendChild(styleElt);\n    }\n}\n/** Helper function to apply Style properties to given DOM element; returns the Style object (does not observe styles directly, but can be used in an observable getter, e.g. using `ComponentRenderer#watch` to reapply styles when they change) */\nfunction applyStyleTo(style, element) {\n    if (element instanceof HTMLElement) {\n        // get a list of all overrides recursively\n        var instances = style.getOverrides();\n        var overridesStr = instances.map(function (s) { return s.uid; }).join(\"|\");\n        // clear style if any changes occurred since styles were last applied\n        var lastOverridesStr = (styleElementMap ? styleElementMap.get(element) :\n            element.getAttribute(\"data-ui-style-map\")) || \"\";\n        if (lastOverridesStr !== overridesStr && element.style.length) {\n            var props = [];\n            for (var i = element.style.length - 1; i >= 0; i--)\n                props.push(element.style.item(i));\n            for (i = props.length - 1; i >= 0; i--)\n                element.style.removeProperty(props[i]);\n        }\n        // combine sorted overridden styles\n        var classNames = {};\n        var isHidden = false, isSelected = false;\n        instances.forEach(function (style) {\n            if (!style)\n                return;\n            style.forEachProperty(function (name, value) {\n                if (name === \":hidden\") {\n                    // set hidden status if true or false\n                    if (value !== undefined)\n                        isHidden = !!value;\n                }\n                else if (name === \":selected\") {\n                    // set selection status if true or false\n                    if (value !== undefined) {\n                        isSelected = !!value;\n                        if (_selectionClass) {\n                            // also add/remove selection class\n                            classNames[\".\" + _selectionClass] = value;\n                        }\n                    }\n                }\n                else if (name === \":shadow\") {\n                    // add box shadow for given depth factor\n                    element.style.boxShadow =\n                        getBoxShadowText(Number(value));\n                }\n                else if (name[0] === \".\") {\n                    // add class name (still prefixed with dot)\n                    classNames[name] = value;\n                }\n                else {\n                    // set style property using DOM directly\n                    for (var _i = 0, _a = String(value).split(\"||\").reverse(); _i < _a.length; _i++) {\n                        var str = _a[_i];\n                        element.style[name] = str;\n                    }\n                }\n            });\n        });\n        // collate and set class name\n        var className = \"\";\n        for (var key in classNames) {\n            if (key[0] === \".\" && classNames[key])\n                className += \" \" + key.slice(1);\n        }\n        className = className.slice(1) +\n            ((isSelected && _selectionClass) ? \" \" + _selectionClass : \"\");\n        if (className || element.className)\n            element.className = className;\n        // hide or show the element\n        if (isHidden)\n            element.setAttribute(\"hidden\", \"hidden\");\n        else\n            element.removeAttribute(\"hidden\");\n        // select or deselect the element\n        if (isSelected)\n            element.setAttribute(\"selected\", \"selected\");\n        else\n            element.removeAttribute(\"selected\");\n    }\n}\n/** Get boxShadow property for given shadow height (0-1) */\nfunction getBoxShadowText(d) {\n    d = Math.min(1, Math.max(0, d));\n    return \"0 0 \" + d * 2 + \"rem \" + d * -.25 + \"rem rgba(0,0,0,\" + (d * d * .1 + d * .08) + \"),\" +\n        (\"0 \" + d * .85 + \"rem \" + d * 1 + \"rem \" + d * -.25 + \"rem rgba(0,0,0,\" + (d * .15 + .1) + \"),\") +\n        (\"0 \" + (d * d * .5 + d * .6) + \"rem \" + d * 1 + \"rem \" + d * -1 + \"rem rgba(0,0,0,.4),\") +\n        (\"0 \" + d * d * 1.5 + \"rem \" + d * 3 + \"rem \" + d * -1 + \"rem rgba(0,0,0,.3),\") +\n        (\"0 \" + d * d * 3 + \"rem \" + d * 2.5 + \"rem \" + d * -2 + \"rem rgba(0,0,0,.3)\");\n}\n/** Set the global root-em unit size in pixels or using a CSS value string; the `rem` unit size is defined at the HTML level and should be set to `16px` on all browsers, however some CSS frameworks (e.g. Bootstrap 3) modify this unit; use this method to override the `rem` unit size again */\nfunction setCSSRemSize(px) {\n    var strPx = (typeof px === \"string\") ? px : (px + \"px\");\n    var elt = document.createElement(\"style\");\n    elt.textContent = \"html { font-size: \" + strPx + \" }\";\n    document.head.appendChild(elt);\n}\n/** Set the class name globally applied to selected items (in addition to the `selected` DOM attribute), i.e. those items selected using `Style.select` */\nfunction setSelectionClass(className) {\n    _selectionClass = String(className || \"\");\n}\n/** Get the class name globally applied to selected items (if any) */\nfunction getSelectionClass() {\n    return _selectionClass;\n}\n/** Load external stylesheet(s) by URL; returns a promise that resolves after the style sheet(s) have been applied OR after a 1 second wait (e.g. when offline or browser does not support this function) */\nfunction loadExternalCSS() {\n    var urls = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        urls[_i] = arguments[_i];\n    }\n    return Promise_Promise.race([\n        Promise_Promise.sleep(1000),\n        Promise_Promise.all(urls.map(function (url) {\n            return new Promise_Promise(function (resolve, reject) {\n                // dynamically create link element\n                var linkElt = document.createElement(\"link\");\n                linkElt.addEventListener(\"load\", function () { resolve(); });\n                linkElt.addEventListener(\"error\", function () { reject(new Error()); });\n                // set attributes and append to head\n                linkElt.setAttribute('rel', 'stylesheet');\n                linkElt.setAttribute('type', 'text/css');\n                linkElt.setAttribute('href', url);\n                document.getElementsByTagName('head').item(0)\n                    .appendChild(linkElt);\n            });\n        }))\n    ]);\n}\n/** Weak map (if available) of elements and the Style UIDs that have been applied to them */\nvar styleElementMap = (typeof WeakMap !== \"undefined\") ?\n    new WeakMap() : undefined;\n;\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/DOM/styles/reboot.js\n\n\n\n/* harmony default export */ var reboot_defaultExport = (new Stylesheet_Stylesheet(\"\", {\n    \".__page_wrapper\": {\n        fontFamily: observe(function () { return Styles_Styles.font.family; }),\n        fontSize: observe(function () { return Styles_Styles.size.text; })\n    },\n    \"h1,h2,h3,h4,h5,h6\": {\n        fontFamily: \"inherit\",\n        fontWeight: \"500\",\n        lineHeight: \"1.1em\"\n    },\n    \"h1\": { fontSize: \"2.5rem\" },\n    \"h2\": { fontSize: \"2rem\" },\n    \"h3\": { fontSize: \"1.75rem\" },\n    \"h4\": { fontSize: \"1.5rem\" },\n    \"h5\": { fontSize: \"1.25rem\" },\n    \"h6\": { fontSize: \"1rem\" },\n    \"button,input,select,textarea,label\": {\n        fontFamily: \"inherit\",\n        fontSize: \"1em\",\n        color: \"inherit\",\n        lineHeight: \"normal\",\n        margin: \"0\",\n        padding: \"0\",\n        border: \"none\",\n        outline: \"0\",\n        background: \"transparent\",\n        overflow: \"auto\",\n        touchAction: \"manipulation\"\n    },\n    \"button\": { overflow: \"visible\" },\n    \"input\": { overflow: \"visible\" },\n    \"textarea\": { resize: \"vertical\" },\n    \"a\": {\n        backgroundColor: \"transparent\",\n        cursor: \"pointer\",\n        touchAction: \"manipulation\",\n        textDecoration: \"none\"\n    },\n    \"a:hover\": {\n        outlineWidth: \"0\",\n        textDecoration: \"underline\"\n    },\n    \"a:active\": { outlineWidth: \"0\" },\n    \"img\": { borderStyle: \"none\" }\n}));\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/DOM/styles/controls.js\n\n\n\n/* harmony default export */ var controls_defaultExport = (new Stylesheet_Stylesheet(\"\", {\n    // plain links:\n    \"a\": { color: observe(function () { return Styles_Styles.color.linkText; }) },\n    \"a:active\": { color: observe(function () { return Styles_Styles.color.linkVisitedText; }) },\n    \"a:visited\": { color: observe(function () { return Styles_Styles.color.linkVisitedText; }) },\n    // form labels and checkboxes/radios:\n    \".form-control-label\": {\n        display: \"block\",\n        paddingBottom: \".25rem\"\n    },\n    \".form-check-label\": {\n        marginRight: \"-.5rem !important\",\n    },\n    \".form-check-label > *\": {\n        display: \"inline-block\",\n        cursor: \"pointer\",\n        lineHeight: \"1.4rem\",\n        marginRight: \".5rem\"\n    },\n    \".form-check-input\": {\n        position: \"relative\",\n        top: \".1em\"\n    },\n    // text/select input:\n    \".form-control\": {\n        borderWidth: observe(function () { return Styles_Styles.size.controlBorderWidth; }),\n        borderStyle: \"solid\",\n        borderColor: observe(function () { return Styles_Styles.color.controlBase; }),\n        background: observe(function () { return Styles_Styles.color.background; }),\n        color: observe(function () { return Styles_Styles.color.text; }),\n        padding: \"0 .6rem\",\n        height: \"2.25rem\",\n        borderRadius: observe(function () { return Styles_Styles.size.inputBorderRadius; })\n    },\n    \".form-control:focus\": {\n        borderColor: observe(function () { return Styles_Styles.color.controlFocus; })\n    },\n    \"textarea.form-control\": {\n        padding: \".6rem\",\n        height: \"auto\"\n    },\n    // buttons:\n    \".btn\": {\n        padding: \".4rem .75rem\",\n        margin: \"-.25rem 0\",\n        minWidth: \"6rem\",\n        borderRadius: observe(function () { return Styles_Styles.size.buttonBorderRadius; }),\n        cursor: \"pointer\"\n    },\n    \".btn:focus\": {\n        outlineWidth: \"0\"\n    },\n    \".btn[disabled]\": {\n        cursor: \"default\",\n        opacity: \".5\"\n    },\n    \".btn-group .btn\": {\n        minWidth: \"2rem\"\n    },\n    \".btn-group-vertical .btn\": {\n        display: \"block\"\n    },\n    \".btn-group .btn:not(:first-child)\": {\n        borderTopLeftRadius: \"0\",\n        borderBottomLeftRadius: \"0\"\n    },\n    \".btn-group .btn:not(:last-child)\": {\n        borderTopRightRadius: \"0\",\n        borderBottomRightRadius: \"0\"\n    },\n    \".btn-group-vertical .btn:not(:first-child)\": {\n        borderTopLeftRadius: \"0\",\n        borderTopRightRadius: \"0\",\n        marginTop: \"0\"\n    },\n    \".btn-group-vertical .btn:not(:last-child)\": {\n        borderBottomLeftRadius: \"0\",\n        borderBottomRightRadius: \"0\",\n        marginBottom: \"0\"\n    },\n    // - primary button:\n    \".btn-primary\": {\n        background: observe(function () { return Styles_Styles.color.primary; }),\n        color: observe(function () { return Styles_Styles.color.primaryText; }),\n        borderWidth: observe(function () { return Styles_Styles.size.controlBorderWidth; }),\n        borderStyle: \"solid\",\n        borderColor: observe(function () { return Styles_Styles.color.primary; })\n    },\n    \".btn-primary:hover\": { borderColor: observe(function () { return Styles_Styles.color.primaryDark; }) },\n    \".btn-primary:focus\": { borderColor: observe(function () { return Styles_Styles.color.primaryDark; }) },\n    \".btn-primary:active,.btn-primary.active\": {\n        background: observe(function () { return Styles_Styles.color.background; }),\n        borderColor: observe(function () { return Styles_Styles.color.primary; }),\n        color: observe(function () { return Styles_Styles.color.text; })\n    },\n    // - secondary (default) button:\n    \".btn-secondary\": {\n        background: observe(function () { return Styles_Styles.color.controlBase; }),\n        color: observe(function () { return Styles_Styles.color.controlBaseText; }),\n        borderWidth: observe(function () { return Styles_Styles.size.controlBorderWidth; }),\n        borderStyle: \"solid\",\n        borderColor: observe(function () { return Styles_Styles.color.controlBase; })\n    },\n    \".btn-secondary:hover\": { borderColor: observe(function () { return Styles_Styles.color.controlFocus; }) },\n    \".btn-secondary:focus\": { borderColor: observe(function () { return Styles_Styles.color.controlFocus; }) },\n    \".btn-secondary:active,.btn-secondary.active\": {\n        background: observe(function () { return Styles_Styles.color.controlFocus; }),\n        borderColor: observe(function () { return Styles_Styles.color.controlFocus; }),\n        color: observe(function () { return Styles_Styles.color.controlFocusText; })\n    },\n    // - link button:\n    \".btn-link\": {\n        color: observe(function () { return Styles_Styles.color.linkText; }),\n        borderWidth: observe(function () { return Styles_Styles.size.controlBorderWidth; }),\n        borderStyle: \"solid\",\n        borderColor: \"transparent\"\n    },\n    \".btn-link:hover\": {\n        textDecoration: \"underline\"\n    },\n    \".btn-link:focus\": {\n        borderColor: observe(function () { return Styles_Styles.color.controlBase; })\n    },\n    \".btn-link:active,.btn-link.active\": {\n        borderColor: observe(function () { return Styles_Styles.color.controlBase; })\n    },\n    // tables:\n    \".table\": {\n        borderCollapse: \"collapse\",\n        background: observe(function () { return Styles_Styles.color.background; }),\n        color: observe(function () { return Styles_Styles.color.text; })\n    },\n    \".table thead th\": {\n        fontWeight: \"bold\",\n        borderBottomWidth: \"2px\",\n        borderBottomStyle: \"solid\",\n        borderBottomColor: observe(function () { return Styles_Styles.color.divider; })\n    },\n    \".table th\": {\n        fontWeight: \"bold\",\n        borderTopWidth: \"1px\",\n        borderTopStyle: \"solid\",\n        borderTopColor: observe(function () { return Styles_Styles.color.divider; })\n    },\n    \".table td\": {\n        borderTopWidth: \"1px\",\n        borderTopStyle: \"solid\",\n        borderTopColor: observe(function () { return Styles_Styles.color.divider; })\n    },\n    // badges:\n    \".badge\": {\n        display: \"inline-block\",\n        padding: \".25em .4em\",\n        fontSize: \".8em\",\n        lineHeight: \"1\",\n        whiteSpace: \"nowrap\",\n        verticalAlign: \"baseline\",\n        borderRadius: observe(function () { return Styles_Styles.size.badgeBorderRadius; }),\n        background: observe(function () { return Styles_Styles.color.text; }),\n        color: observe(function () { return Styles_Styles.color.background; })\n    },\n    \".badge:empty\": {\n        display: \"none\"\n    },\n    // cards:\n    \".card\": {\n        background: observe(function () { return Styles_Styles.color.background; }),\n        color: observe(function () { return Styles_Styles.color.text; }),\n        borderWidth: \"1px\",\n        borderStyle: \"solid\",\n        borderColor: observe(function () { return Styles_Styles.color.divider; }),\n        borderRadius: observe(function () { return Styles_Styles.size.cardBorderRadius; })\n    },\n    \".card-header\": {\n        background: observe(function () { return Styles_Styles.color.primary; }),\n        color: observe(function () { return Styles_Styles.color.primaryText; })\n    },\n    \".card-footer\": {\n        background: observe(function () { return Styles_Styles.color.primary; }),\n        color: observe(function () { return Styles_Styles.color.primaryText; })\n    },\n    // dropdowns (menus):\n    \".dropdown-menu\": {\n        display: \"block\",\n        listStyle: \"none\",\n        padding: \".2rem 0\",\n        background: observe(function () { return Styles_Styles.color.background; }),\n        minWidth: \"12rem\",\n        textAlign: \"start || left\"\n    },\n    \".dropdown-divider\": {\n        listStyle: \"none\",\n        height: \"1px\",\n        margin: \".5rem 0\",\n        padding: \"0\",\n        background: observe(function () { return Styles_Styles.color.divider; })\n    },\n    \".dropdown-item\": {\n        display: \"block\",\n        listStyle: \"none\",\n        margin: \"0\",\n        padding: \"0 1rem\",\n        whiteSpace: \"nowrap\",\n        lineHeight: \"2.5em\",\n        color: observe(function () { return Styles_Styles.color.text; })\n    },\n    \".dropdown-item:hover\": {\n        background: observe(function () { return Styles_Styles.color.text; }),\n        color: observe(function () { return Styles_Styles.color.background; }),\n        textDecoration: \"none\",\n    },\n    \".dropdown-item:active\": {\n        background: observe(function () { return Styles_Styles.color.text; }),\n        color: observe(function () { return Styles_Styles.color.background; })\n    },\n    \".dropdown-item:focus\": {\n        outlineWidth: \"2px\",\n        outlineStyle: \"solid\",\n        outlineColor: observe(function () { return Styles_Styles.color.text; })\n    },\n    \".dropdown-item[disabled]\": {\n        opacity: \".5\"\n    },\n    // nav:\n    \".nav\": {\n        listStyle: \"none\",\n        margin: \"0\",\n        padding: \"0\"\n    },\n    \".nav-item\": {\n        display: \"inline-block\",\n        listStyle: \"none\",\n        margin: \"0\",\n        marginRight: \".25rem\",\n        padding: \"0\"\n    },\n    // - pills:\n    \".nav-pills .nav-link\": {\n        display: \"block\",\n        padding: \".5rem 1rem\",\n        minWidth: \"5rem\",\n        textAlign: \"center\",\n        color: \"inherit\",\n        borderRadius: observe(function () { return Styles_Styles.size.buttonBorderRadius; })\n    },\n    \".nav-pills .nav-link:hover\": {\n        textDecoration: \"none\",\n        background: observe(function () { return Styles_Styles.color.controlBase; }),\n        color: observe(function () { return Styles_Styles.color.controlBaseText; })\n    },\n    \".nav-pills .nav-link.active\": {\n        background: observe(function () { return Styles_Styles.color.primary; }),\n        color: observe(function () { return Styles_Styles.color.primaryText; })\n    },\n    \".nav-pills.nav-stacked .nav-item\": {\n        display: \"block\",\n        margin: \"0\"\n    },\n    // - tabs:\n    \".nav-tabs\": {\n        borderBottomWidth: observe(function () { return Styles_Styles.size.controlBorderWidth; }),\n        borderBottomStyle: \"solid\",\n        borderBottomColor: observe(function () { return Styles_Styles.color.divider; })\n    },\n    \".nav-tabs .nav-link\": {\n        display: \"inline-block\",\n        padding: \".5rem\",\n        minWidth: \"5rem\",\n        textAlign: \"center\",\n        borderTopLeftRadius: observe(function () { return Styles_Styles.size.buttonBorderRadius; }),\n        borderTopRightRadius: observe(function () { return Styles_Styles.size.buttonBorderRadius; }),\n        textDecoration: \"none\"\n    },\n    \".nav-tabs .nav-link:hover\": {\n        textDecoration: \"none\",\n        background: observe(function () { return Styles_Styles.color.controlBase; }),\n        color: observe(function () { return Styles_Styles.color.controlBaseText; })\n    },\n    \".nav-tabs .nav-link.active\": {\n        marginBottom: \"-4px\",\n        borderBottomStyle: \"solid\",\n        borderBottomWidth: \"4px\",\n        borderBottomColor: observe(function () { return Styles_Styles.color.primary; })\n    }\n}));\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/DOM/Styles.js\n\n\n\n\n/** A set of predefined styles and style sheets that are used by specific components; these may be modified to apply a \"theme\", which will generally update all styles in the DOM asynchronously; _however_, styles defined here are subject to change for now and it is not guaranteed that selectors and class names will continue to exist across versions */\nvar Styles_Styles;\n(function (Styles) {\n    /** Groups basic component style sheet definitions together, indexed by class name (e.g. \"UI-Container\") */\n    Styles.components = {};\n    /** Contains basic font settings that are applied globally for this instance; to disable, either set value(s) to `inherit`, or disable `cssReset` altogether */\n    Styles.font = observe({\n        /** Base font family (defaults to system font stack) */\n        family: \"-apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Oxygen-Sans, Ubuntu, \\\"Helvetica Neue\\\", Arial, sans-serif\"\n    });\n    /** Contains basic measurements that determine the sizing of text and certain components; custom observable properties can be added here if required */\n    Styles.size = observe({\n        /** Base font size used for main application layout and dialogs/drawers (defaults to `1rem`) */\n        text: \"1rem\",\n        /** Paragraph label line height (defaults to `1.65em`) */\n        paragraphLineHeight: \"1.65em\",\n        /** Default space around control elements (defaults to `1rem`) */\n        controlSpacing: \"1rem\",\n        /** Outline width of focused selected list elements (defaults to `0`, because background and text coloring is applied instead) */\n        listSelectionFocusOutline: \"0\",\n        /** Default border radius of all dialogs (defaults to `.25rem`) */\n        dialogBorderRadius: \".25rem\",\n        /** Default border radius of card components (defaults to `.25rem`) */\n        cardBorderRadius: \".25rem\",\n        /** Default border radius of badge elements (defaults to `.25rem`) */\n        badgeBorderRadius: \".25rem\",\n        /** Default border radius of all buttons (defaults to `0`) */\n        buttonBorderRadius: \"0\",\n        /** Default border radius of text/select input elements (defaults to `0`) */\n        inputBorderRadius: \"0\",\n        /** Default border width of all controls (e.g. buttons, input elements, defaults to `2px`) */\n        controlBorderWidth: \"2px\"\n    });\n    /** Contains an observable color scheme based on the color wheel, with a selection of primary and accent colors; custom observable properties can be added here if required */\n    Styles.color = observe({\n        /** Darkest black that matches the color scheme */\n        black: \"#000000\",\n        /** Lightest white that matches the color scheme */\n        white: \"#ffffff\",\n        /** Darker gray color that matches the color scheme */\n        darkerGray: \"#333333\",\n        /** Dark to mid-gray color that matches the color scheme */\n        darkGray: \"#777777\",\n        /** Light gray color that matches the color scheme */\n        lightGray: \"#dddddd\",\n        /** Blueish (silver) dark to mid-gray color that matches the color scheme */\n        slate: \"#667788\",\n        /** Blueish (silver) light gray color that matches the color scheme */\n        lightSlate: \"#c0c8d0\",\n        /** Bright red color that matches the color scheme */\n        red: \"#ee3333\",\n        /** Bright orange color that matches the color scheme */\n        orange: \"#ee9922\",\n        /** Bright yellow color that matches the color scheme */\n        yellow: \"#ddcc33\",\n        /** Bright lime green color that matches the color scheme */\n        lime: \"#99bb33\",\n        /** Bright green color that matches the color scheme */\n        green: \"#44aa44\",\n        /** Bright turquoise color that matches the color scheme */\n        turquoise: \"#33aaaa\",\n        /** Bright cyan color that matches the color scheme */\n        cyan: \"#33bbbb\",\n        /** Bright blue color that matches the color scheme */\n        blue: \"#3355aa\",\n        /** Bright violet color that matches the color scheme */\n        violet: \"#5533aa\",\n        /** Bright purple color that matches the color scheme */\n        purple: \"#8833aa\",\n        /** Bright magenta color that matches the color scheme */\n        magenta: \"#dd4488\",\n        /** Background color for main application layout and dialogs/drawers, defaults to pure white */\n        background: \"#ffffff\",\n        /** Text color for main application layout and dialogs/drawers (defaults to 80% opaque black) */\n        text: \"rgba(0,0,0,.8)\",\n        /** Faded text color used for smaller text before/after label text (defaults to 45% opaque black) */\n        textFaded: \"rgba(0,0,0,.45)\",\n        /** Default divider color (defaults to 20% opaque black) */\n        divider: \"rgba(0,0,0,.2)\",\n        /** Primary highlight color (defaults to `.blue`), usually a bright color for e.g. heading row backgrounds; set this property to change all primary* properties, _or_ set those directly as well */\n        get primary() { return this.primary || this.blue; },\n        set primary(v) { this.primary = v; },\n        /** Text color to be used on top of primary-colored backgrounds */\n        get primaryText() {\n            return this.primaryText ||\n                (Stylesheet_Stylesheet.isBrightColor(this.primary) ?\n                    Stylesheet_Stylesheet.mixColors(this.primary, \"#000000\", .8) :\n                    \"#ffffff\");\n        },\n        set primaryText(v) { this.primaryText = v; },\n        /** Darker shade of the primary color */\n        get primaryDark() {\n            return this.primaryDark ||\n                Stylesheet_Stylesheet.mixColors(this.primary, \"#000000\", .2);\n        },\n        set primaryDark(v) { this.primaryDark = v; },\n        /** Lighter shade of the primary color */\n        get primaryLight() {\n            return this.primaryLight ||\n                Stylesheet_Stylesheet.mixColors(this.primary, \"#ffffff\", .2);\n        },\n        set primaryLight(v) { this.primaryLight = v; },\n        /** Accent color (defaults to `.violet`), denotes interactive elements, usually a bright color for e.g. backgrounds of buttons that should stand out; set this property to change `.accentText` as well, _or_ set that directly to override the accent text color */\n        get accent() { return this.accent || this.violet; },\n        set accent(v) { this.accent = v; },\n        /** Text color to be used on top of accent-colored backgrounds */\n        get accentText() {\n            return this.accentText ||\n                (Stylesheet_Stylesheet.isBrightColor(this.accent) ?\n                    Stylesheet_Stylesheet.mixColors(this.accent, \"#000000\", .8) :\n                    \"#ffffff\");\n        },\n        set accentText(v) { this.accentText = v; },\n        /** Darker shade of the accent color */\n        get accentDark() {\n            return this.accentDark ||\n                Stylesheet_Stylesheet.mixColors(this.accent, \"#000000\", .2);\n        },\n        set accentDark(v) { this.accentDark = v; },\n        /** Lighter shade of the accent color */\n        get accentLight() {\n            return this.accentLight ||\n                Stylesheet_Stylesheet.mixColors(this.accent, \"#ffffff\", .2);\n        },\n        set accentLight(v) { this.accentLight = v; },\n        /** Link text color (defaults to `.blue`); set this property to change `.linkVisitedText` as well, _or_ set that directly to override the visited link text color */\n        get linkText() { return this.linkText || this.blue; },\n        set linkText(v) { this.linkText = v; },\n        /** Visited link text color (defaults to a darker version of link text) */\n        get linkVisitedText() {\n            return this.linkVisitedText ||\n                Stylesheet_Stylesheet.mixColors(this.linkText, \"#000000\", .35);\n        },\n        set linkVisitedText(v) { this.linkVisitedText = v; },\n        /** Title bar block color (defaults to `.darkerGray`); set this property to change `.titleBarText` as well, _or_ set that directly to override the title bar text color */\n        get titleBarBackground() { return this.titleBarBackground || this.darkerGray; },\n        set titleBarBackground(v) { this.titleBarBackground = v; },\n        /** Text color to be used on top of title bar blocks */\n        get titleBarText() {\n            return this.titleBarText ||\n                (Stylesheet_Stylesheet.isBrightColor(this.titleBarBackground) ?\n                    Stylesheet_Stylesheet.mixColors(this.titleBarBackground, \"#000000\", .8) :\n                    \"#ffffff\");\n        },\n        set titleBarText(v) { this.titleBarText = v; },\n        /** Selected but non-focused list item block color (defaults to `.darkGray`); set this property to change `.listSelectionText` as well, _or_ set that directly to override the selected list item text color */\n        get listSelectionBackground() { return this.listSelectionBackground || this.darkGray; },\n        set listSelectionBackground(v) { this.listSelectionBackground = v; },\n        /** Text color to be used on top of selected but non-focused list items */\n        get listSelectionText() {\n            return this.listSelectionText ||\n                (Stylesheet_Stylesheet.isBrightColor(this.listSelectionBackground) ?\n                    Stylesheet_Stylesheet.mixColors(this.listSelectionBackground, \"#000000\", .8) :\n                    \"#ffffff\");\n        },\n        set listSelectionText(v) { this.listSelectionText = v; },\n        /** Selected focused list item block color (defaults to darker version of `.listSelectionBackground`); set this property to change `.listSelectionFocusText` as well, _or_ set that directly to override the selected list item text color */\n        get listSelectionFocusBackground() {\n            return this.listSelectionFocusBackground ||\n                Stylesheet_Stylesheet.mixColors(this.listSelectionBackground, \"#000000\", .35);\n        },\n        set listSelectionFocusBackground(v) { this.listSelectionFocusBackground = v; },\n        /** Text color to be used on top of selected focused list items */\n        get listSelectionFocusText() {\n            return this.listSelectionFocusText ||\n                (Stylesheet_Stylesheet.isBrightColor(this.listSelectionFocusBackground) ?\n                    Stylesheet_Stylesheet.mixColors(this.listSelectionFocusBackground, \"#000000\", .8) :\n                    \"#ffffff\");\n        },\n        set listSelectionFocusText(v) { this.listSelectionFocusText = v; },\n        /** Control base color (defaults to `.lightGray`); set this property to change `.controlBaseText` as well, _or_ set that directly to override the control base text color */\n        get controlBase() { return this.controlBase || this.lightGray; },\n        set controlBase(v) { this.controlBase = v; },\n        /** Text color to be used for controls in base color */\n        get controlBaseText() {\n            return this.controlBaseText ||\n                (Stylesheet_Stylesheet.isBrightColor(this.controlBase) ?\n                    Stylesheet_Stylesheet.mixColors(this.controlBase, \"#000000\", .8) :\n                    \"#ffffff\");\n        },\n        set controlBaseText(v) { this.controlBaseText = v; },\n        /** Control focus color (defaults to a darker or lighter version of `.controlBase` depending on its lightness); set this property to change `.controlFocusText` as well, _or_ set that directly to override the text color for controls in focus color */\n        get controlFocus() {\n            return this.controlFocus ||\n                (Stylesheet_Stylesheet.isBrightColor(this.controlBase) ?\n                    Stylesheet_Stylesheet.mixColors(this.controlBase, \"#000000\", .5) :\n                    Stylesheet_Stylesheet.mixColors(this.controlBase, \"#ffffff\", .5));\n        },\n        set controlFocus(v) { this.controlFocus = v; },\n        /** Text color to be used for controls in focus color */\n        get controlFocusText() {\n            return this.controlFocusText ||\n                (Stylesheet_Stylesheet.isBrightColor(this.controlFocus) ?\n                    Stylesheet_Stylesheet.mixColors(this.controlFocus, \"#000000\", .8) :\n                    \"#ffffff\");\n        },\n        set controlFocusText(v) { this.controlFocusText = v; }\n    });\n    /** CSS reboot stylesheet that defines basic styles for common HTML elements (except those already overridden by `Component` renderers), _enabled by default_: applied as a live stylesheet at the page level for this instance; can be modified to adjust or add CSS reset styles, or disabled using the `.disable()` method if an external CSS reset stylesheet is already loaded */\n    Styles.rebootStyles = reboot_defaultExport;\n    /** Basic control theme stylesheet that uses colors from the `.color` object, _enabled by default_: applied as a live stylesheet at the page level for this instance; can be modified to adjust or add CSS reset styles, or disabled using the `.disable()` method if external CSS styles are already loaded */\n    Styles.controlStyles = controls_defaultExport;\n    /** @internal Add a component style sheet to `.components` and apply it to the DOM (using `new Stylesheet(...)` and `.applyStylesheet(...)`) */\n    function define(className, subStyles) {\n        var sheet = new Stylesheet_Stylesheet(className, subStyles);\n        Styles.components[className.replace(/.*\\s/, \"\")] = sheet;\n        applyStylesheet(sheet, true);\n    }\n    Styles.define = define;\n})(Styles_Styles || (Styles_Styles = {}));\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/DOM/DOMPageOptions.js\n/** Options that control page rendering */\nvar PAGE_OPTIONS = {\n    baseZIndex: 1000,\n    shadeTransition: 200,\n    shadeOpacity: .2,\n    shadeColor: \"#000\"\n};\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/UpdateContext.js\n\n\n\n/** Time (ms) to wait before animating appearance of sub-subcomponents */\nvar SUBCOMPONENT_ANIM_CUTOFF_MS = 2000;\n/** Max number of child components to animate */\nvar MAX_N_COMPONENT_ANIM = 100;\n/** @internal Represents the DOM updater context; stored in the component render output object, or in the rendering context owning scope (e.g. page renderer) */\nvar UpdateContext_UpdateContext = (function () {\n    /** Create a new updater context for given HTML parent element */\n    function UpdateContext(root) {\n        /** @internal Update sequence number */\n        this._updateID = 0;\n        if (!root)\n            throw new Error();\n        this.root = root;\n    }\n    /** Update the root element with given content (DOM nodes, render output, or components, which are rendered asynchronously); if the last argument is a string, it is used to select a different DOM node from the `elements` object of all render output instances (e.g. wrapper elements); returns a promise that is resolved when the DOM elements have actually been updated (although sub components may still not have been fully rendered) */\n    UpdateContext.prototype.updateAsync = function (content, useWrapper, animatePositionMS) {\n        var _this = this;\n        var components = this.components = [];\n        var nodes = this.nodes = [];\n        var id = ++this._updateID;\n        this._nAnim = 0;\n        // find Nodes for all given elements\n        var deferRender;\n        var seen = {};\n        for (var i = content.length - 1; i >= 0; i--) {\n            var item = content[i];\n            if (item) {\n                if (item instanceof Component_Component) {\n                    // remember this component, and prepare async rendering\n                    if (seen[item.uid])\n                        continue;\n                    components[i] = item;\n                    seen[item.uid] = true;\n                    var defer = this._renderComponent(item, nodes, i);\n                    if (defer) {\n                        if (!deferRender)\n                            deferRender = [];\n                        deferRender.push(defer);\n                    }\n                }\n                else if (item.isComponentOutput) {\n                    // remember owning component, and store output element\n                    var component = item.component;\n                    if (seen[component.uid])\n                        continue;\n                    seen[component.uid] = true;\n                    components[i] = component;\n                    nodes[i] = useWrapper && item.wrapper ||\n                        item.element;\n                }\n                else if (item instanceof Node) {\n                    // store given DOM node directly\n                    nodes[i] = item;\n                }\n            }\n        }\n        // schedule deferred rendering for components that are not rendered yet\n        if (deferRender) {\n            for (var deferIdx = deferRender.length - 1; deferIdx >= 0; deferIdx--) {\n                Defer_defer(deferRender[deferIdx]);\n            }\n        }\n        // return a Promise that resolves when child nodes have been updated\n        return new Promise_Promise(function (resolve) {\n            Defer_defer(function () {\n                resolve(true);\n                // run update (i.e. add/change/remove child nodes), if no other\n                // update was scheduled in the meantime\n                if (_this._updateID === id)\n                    _this._updateChildNodes(animatePositionMS);\n            });\n        });\n    };\n    /** @internal Acquire the rendered DOM node for given content, and place it in given array at given index; returns a function to be deferred if given component is not rendered yet */\n    UpdateContext.prototype._renderComponent = function (component, nodes, i) {\n        var _this = this;\n        if (component.getLastRenderedOutput() ||\n            component.renderOptions &&\n                component.renderOptions.synchronous) {\n            // store existing output element right away, or force sync render\n            var out = component.out;\n            nodes[i] = out && out.element;\n            return undefined;\n        }\n        else {\n            // store placeholder first, then resolve asynchronously\n            var placeholder = document.createComment(\"placeholder\");\n            nodes[i] = placeholder;\n            // depend on a dummy observable, to make sure the original\n            // .out depends on the nested component's .out eventually;\n            // but do not re-render (because the value remains undefined)\n            var o = unobserved(function () { return new Observable_ObservableValue(); });\n            o.value;\n            // return a callback to render asynchronously\n            return function () {\n                // change getter to add dependencies to existing observable\n                o.getter(function () {\n                    var out = component.out;\n                    var elt = out && out.element;\n                    if (placeholder.parentNode) {\n                        // placeholder is already in place\n                        placeholder.parentNode.replaceChild(elt, placeholder);\n                        unobserved(function () { _this._animateAppear(component); });\n                    }\n                    else {\n                        // rendered before placeholder was added\n                        nodes[i] = elt;\n                    }\n                }).update();\n            };\n        }\n    };\n    /** @internal Update child nodes */\n    UpdateContext.prototype._updateChildNodes = function (animatePositionMS) {\n        this._animateChildComponents(animatePositionMS);\n        // replace existing elements first\n        var nNodes = this.nodes.length;\n        var root = this.root, current = root.firstChild;\n        for (var i = 0; i < nNodes && current; i++) {\n            // skip over unmanaged nodes\n            if (current.hasAttribute &&\n                current.hasAttribute(UpdateContext.UNMANAGED_FLAG)) {\n                current = current.nextSibling;\n                i--;\n                continue;\n            }\n            // replace with target node\n            var node = this.nodes[i];\n            if (!node)\n                node = document.createComment(\"placeholder\");\n            node.removeAttribute &&\n                node.removeAttribute(UpdateContext.UNMANAGED_FLAG);\n            var next = current.nextSibling;\n            if (current !== node)\n                root.replaceChild(node, current);\n            if (next === node)\n                next = next.nextSibling;\n            current = next;\n        }\n        // delete trailing existing elements\n        while (current) {\n            var next = current.nextSibling;\n            if (!current.hasAttribute ||\n                !current.hasAttribute(UpdateContext.UNMANAGED_FLAG))\n                root.removeChild(current);\n            current = next;\n        }\n        // add new elements if needed\n        for (; i < nNodes; i++) {\n            var node = this.nodes[i];\n            if (!node)\n                node = document.createComment(\"placeholder\");\n            root.appendChild(node);\n        }\n        if (animatePositionMS > 0)\n            this._animateChildPositions(animatePositionMS);\n    };\n    /** @internal Animate differences with last update (appear/disappear) */\n    UpdateContext.prototype._animateChildComponents = function (animatePositionMS) {\n        var _this = this;\n        // find appearing and disappearing components using old arrays\n        var oldComponents = this._oldComponents;\n        var oldNodes = this._oldNodes;\n        this._oldComponents = this.components;\n        this._oldNodes = this.nodes;\n        this._timestamp = Date.now();\n        // if animating positions, get current coordinates first\n        if (animatePositionMS > 0)\n            this._saveChildPositions();\n        // animate appearances and disappearances\n        if (Animation.isEnabled) {\n            var cutoffTime = Date.now() - SUBCOMPONENT_ANIM_CUTOFF_MS;\n            for (var _i = 0, _a = this.components; _i < _a.length; _i++) {\n                var c = _a[_i];\n                // animate all items that were not there before\n                if (c && (!oldComponents ||\n                    !oldComponents.some(function (oldc) { return oldc === c; }))) {\n                    this._animateAppear(c);\n                    // animate existing sub components, if added >2s ago\n                    var nestedOut = c.getLastRenderedOutput();\n                    if (nestedOut) {\n                        if (nestedOut &&\n                            (nestedOut[\"@context\"] instanceof UpdateContext) &&\n                            nestedOut[\"@context\"]._timestamp < cutoffTime &&\n                            nestedOut[\"@context\"].components) {\n                            nestedOut[\"@context\"].components.forEach(function (nC) { _this._animateAppear(nC); });\n                        }\n                    }\n                }\n                if (this._nAnim > MAX_N_COMPONENT_ANIM)\n                    break;\n            }\n            if (oldComponents) {\n                var _loop_1 = function () {\n                    // animate and flag all items that are not there anymore\n                    c = oldComponents[i];\n                    if (c && c.animations && c.animations.disappear) {\n                        removeElement = oldNodes && oldNodes[i];\n                        if (removeElement && removeElement.nodeType === 1 &&\n                            !this_1.components.some(function (newc) { return newc === c; })) {\n                            var elt_1 = removeElement;\n                            elt_1.setAttribute(UpdateContext.UNMANAGED_FLAG, \"true\");\n                            this_1._nAnim++;\n                            playing = c.animations.disappear.playOnce(c);\n                            // apply component style manually here, since output\n                            // is no longer watched!\n                            lastOut = c.getLastRenderedOutput();\n                            cElt = lastOut && lastOut.element;\n                            cElt && applyStyleTo(c.style, cElt);\n                            // when done, check if not re-appeared, and remove\n                            playing.done.then(function () {\n                                if (elt_1.parentNode === _this.root &&\n                                    elt_1.hasAttribute(UpdateContext.UNMANAGED_FLAG)) {\n                                    if (animatePositionMS > 0)\n                                        _this._saveChildPositions();\n                                    _this.root.removeChild(elt_1);\n                                    if (animatePositionMS > 0)\n                                        _this._animateChildPositions(animatePositionMS);\n                                }\n                            });\n                        }\n                    }\n                    if (this_1._nAnim > MAX_N_COMPONENT_ANIM)\n                        return \"break\";\n                };\n                var this_1 = this, c, removeElement, playing, lastOut, cElt;\n                for (var i = 0, len = oldComponents.length; i < len; i++) {\n                    var state_1 = _loop_1();\n                    if (state_1 === \"break\")\n                        break;\n                }\n            }\n        }\n    };\n    /** @internal Helper function that plays the \"appear\" animation for given component, if any */\n    UpdateContext.prototype._animateAppear = function (component) {\n        this._nAnim++;\n        if (Animation.isEnabled &&\n            component && component.animations &&\n            component.animations.appear)\n            component.animations.appear.playOnce(component);\n    };\n    /** @internal Helper function to save current child positions, to be used by `_animateChildPositions` */\n    UpdateContext.prototype._saveChildPositions = function () {\n        var _this = this;\n        var oldXPos = this._oldXPos = {};\n        var oldYPos = this._oldYPos = {};\n        this.components.forEach(function (c, i) {\n            var elt = _this.nodes[i];\n            if (c && elt && elt.nodeType == 1) {\n                var rect = elt.getBoundingClientRect();\n                if (!rect || !rect.width || !rect.height)\n                    return;\n                oldXPos[c.uid] = rect.left;\n                oldYPos[c.uid] = rect.top;\n            }\n        });\n    };\n    /** @internal Animate position differences with last update (translate) */\n    UpdateContext.prototype._animateChildPositions = function (animatePositionsMS) {\n        var _this = this;\n        if (!this._oldXPos)\n            return;\n        var callbacks = [];\n        this.components.forEach(function (c, i) {\n            var elt = _this.nodes[i];\n            if (c && elt && elt.nodeType == 1 &&\n                _this._oldXPos[c.uid] >= 0) {\n                // calculate difference with old position before update\n                var rect = elt.getBoundingClientRect();\n                var diffX = _this._oldXPos[c.uid] - rect.left;\n                var diffY = _this._oldYPos[c.uid] - rect.top;\n                if (diffX || diffY) {\n                    elt.style.transition = \"\";\n                    elt.style.transform =\n                        \"translateX(\" + diffX + \"px) translateY(\" + diffY + \"px)\";\n                    callbacks.push(function () {\n                        elt.style.transition = \"transform \" +\n                            animatePositionsMS + \"ms ease\";\n                        elt.style.transform = \"translateX(0) translateY(0)\";\n                    });\n                }\n            }\n        });\n        // animate transition now\n        if (callbacks.length)\n            setTimeout(function () { return callbacks.forEach(function (f) { return f(); }); }, 0);\n        delete this._oldXPos;\n        delete this._oldYPos;\n    };\n    /** @internal DOM attribute used to signal that an element is managed outside the update context, and should be left alone while updating the parent element (e.g. elements being removed, or the modal shade element) */\n    UpdateContext.UNMANAGED_FLAG = \"render-unmanaged\";\n    return UpdateContext;\n}());\n\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/Renderers/Blocks/Block.js\nvar Blocks_Block___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Blocks_Block___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** Base class name used for CSS style sheet */\nvar CSS_CLASS = \"UI-Block\";\n/** @internal DOM-specific component renderer */\nvar Block_Renderer = (function (_super) {\n    Blocks_Block___extends(Renderer, _super);\n    /** Instantiate the renderer for given component */\n    function Renderer(component, tagName) {\n        if (tagName === void 0) { tagName = \"div\"; }\n        var _this = _super.call(this, component) || this;\n        // initialize main DOM element(s)\n        _this.element = document.createElement(tagName);\n        // create the element update context\n        _this.context = new UpdateContext_UpdateContext(_this.element);\n        // add watchers for component properties\n        var positionStyle;\n        _this.watch(function () { return applyStyleTo(component.style, _this.element); });\n        _this.watch(function () { return component.focusMode; }, function (focusMode) {\n            if (focusMode === Component_Component.FocusMode.Auto) {\n                // make element focusable through the DOM\n                _this.element.tabIndex = 0;\n            }\n            else if (focusMode === Component_Component.FocusMode.Click) {\n                // make element focusable manually\n                _this.element.tabIndex = -1;\n            }\n            else {\n                // make element no longer focusable in the DOM directly\n                _this.element.removeAttribute(\"tabIndex\");\n            }\n        });\n        _this.watch(function () {\n            // get overlay position and translate ltr/rtl mode values\n            var pos = component.overlayPosition;\n            if (component.flowDirection === \"rtl\") {\n                if (pos === Block_Block.OverlayPosition.TopStart)\n                    return Block_Block.OverlayPosition.TopRight;\n                if (pos === Block_Block.OverlayPosition.TopEnd)\n                    return Block_Block.OverlayPosition.TopLeft;\n                if (pos === Block_Block.OverlayPosition.BottomStart)\n                    return Block_Block.OverlayPosition.BottomRight;\n                if (pos === Block_Block.OverlayPosition.BottomEnd)\n                    return Block_Block.OverlayPosition.BottomLeft;\n            }\n            else {\n                if (pos === Block_Block.OverlayPosition.TopStart)\n                    return Block_Block.OverlayPosition.TopLeft;\n                if (pos === Block_Block.OverlayPosition.TopEnd)\n                    return Block_Block.OverlayPosition.TopRight;\n                if (pos === Block_Block.OverlayPosition.BottomStart)\n                    return Block_Block.OverlayPosition.BottomLeft;\n                if (pos === Block_Block.OverlayPosition.BottomEnd)\n                    return Block_Block.OverlayPosition.BottomRight;\n            }\n            return pos;\n        }, function (pos) {\n            if (pos === undefined) {\n                // clear positioning styles if needed\n                positionStyle && positionStyle.set({\n                    position: \"\", top: \"\", left: \"\",\n                    bottom: \"\", right: \"\",\n                    marginTop: \"\", marginBottom: \"\",\n                    marginLeft: \"\", marginRight: \"\"\n                });\n                return;\n            }\n            if (!positionStyle) {\n                // override styles with positioning styles\n                component.style.override(positionStyle = new Style_Style());\n            }\n            // apply positioning styles (absolute position)\n            var top = \"auto\", bottom = \"auto\", left = \"auto\", right = \"auto\";\n            var marginLeft = \"\", marginRight = \"\";\n            switch (pos) {\n                case Block_Block.OverlayPosition.TopLeft:\n                    marginRight = \"auto\";\n                    top = left = \"0\";\n                    break;\n                case Block_Block.OverlayPosition.TopRight:\n                    marginLeft = \"auto\";\n                    top = right = \"0\";\n                    break;\n                case Block_Block.OverlayPosition.Top:\n                    marginLeft = marginRight = \"auto\";\n                    top = left = right = \"0\";\n                    break;\n                case Block_Block.OverlayPosition.BottomLeft:\n                    marginRight = \"auto\";\n                    bottom = left = \"0\";\n                    break;\n                case Block_Block.OverlayPosition.BottomRight:\n                    marginLeft = \"auto\";\n                    bottom = right = \"0\";\n                    break;\n                case Block_Block.OverlayPosition.Bottom:\n                    marginLeft = marginRight = \"auto\";\n                    bottom = left = right = \"0\";\n                    break;\n            }\n            positionStyle.set({\n                position: \"absolute\",\n                top: top, left: left, bottom: bottom, right: right,\n                marginLeft: marginLeft, marginRight: marginRight\n            });\n        });\n        return _this;\n    }\n    /** Generate rendered component output */\n    Renderer.prototype.render = function () {\n        // get or create the current output object\n        var out = _super.prototype.render.call(this) || new ComponentRenderer_ComponentRenderer.Output(this.component, this.element, this.context);\n        // set or update flow direction mode on context and element\n        this.context.flowDirection = this.component.flowDirection;\n        if (this.component.flowDirection) {\n            this.element.dir = this.component.flowDirection;\n        }\n        return out;\n    };\n    Renderer = Blocks_Block___decorate([\n        mapComponentRenderer(Block_Block)\n    ], Renderer);\n    return Renderer;\n}(ComponentRenderer_ComponentRenderer));\n\n// Add logic for focusing and blurring block components\ninject(Block_Block, {\n    \"@focusLiveComponent\": function () {\n        focus(this);\n    },\n    \"@blurLiveComponent\": function () {\n        blur(this);\n    }\n});\n// Add style override and apply style sheet\nBlock_Block.addStyleOverride(Style_Style.withClass(CSS_CLASS));\nStyles_Styles.define(CSS_CLASS, {\n    \".~~\": {\n        cursor: \"default\",\n        lineHeight: \"normal\",\n        display: \"block\",\n        position: \"relative\",\n        textAlign: \"start || left\",\n        margin: \"auto\",\n        transition: \"box-shadow 100ms ease\"\n    }\n});\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/DOM/DOMBlock.js\nvar DOMBlock___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar DOMBlock___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n/** Base class name used for CSS style sheet */\nvar DOMBlock_CSS_CLASS = \"UI-DOMBlock\";\n/** Platform specific Block base class: full-width horizontal block containing DOM element(s) */\nvar DOMBlock_DOMBlock = (function (_super) {\n    DOMBlock___extends(DOMBlock, _super);\n    function DOMBlock() {\n        var elts = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            elts[_i] = arguments[_i];\n        }\n        var _this = _super.call(this) || this;\n        // lift all child nodes from a document fragment\n        if (elts && elts[0] && elts[0].nodeType === 11) {\n            var current = elts[0].firstChild;\n            var nodes = [];\n            while (current) {\n                nodes.push(current);\n                current = current.nextSibling;\n            }\n            _this.nodes = nodes;\n        }\n        else {\n            // just copy array of nodes\n            _this.nodes = elts;\n        }\n        return _this;\n    }\n    DOMBlock___decorate([\n        observable_not_null\n    ], DOMBlock.prototype, \"nodes\", void 0);\n    return DOMBlock;\n}(Block_Block));\n\n/** @internal DOM-specific component renderer */\nvar DOMBlock_Renderer = (function (_super) {\n    DOMBlock___extends(Renderer, _super);\n    function Renderer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /** Generate rendered component output */\n    Renderer.prototype.render = function () {\n        // get or create the current output object\n        var out = _super.prototype.render.call(this);\n        // add all DOM nodes\n        out.updated = this.context.updateAsync(this.component.nodes);\n        return out;\n    };\n    Renderer = DOMBlock___decorate([\n        mapComponentRenderer(DOMBlock_DOMBlock)\n    ], Renderer);\n    return Renderer;\n}(Block_Renderer));\n\nDOMBlock_DOMBlock.addStyleOverride(Style_Style.withClass(DOMBlock_CSS_CLASS));\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/DOM/DOMAnimation.js\nvar DOMAnimation___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n/** Represents a CSS keyframe animation */\nvar DOMAnimation_DOMAnimation = (function (_super) {\n    DOMAnimation___extends(DOMAnimation, _super);\n    /** Get an animation with given keyframes and given playback options ready for use */\n    function DOMAnimation(name, keyframes, options) {\n        if (keyframes === void 0) { keyframes = []; }\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, name) || this;\n        _this._options = options;\n        // declare all keyframes in the animation\n        _this._keyframesID = options._keyframes || _this.id;\n        if (!options._keyframes) {\n            // get style sheet with all keyframes\n            var sheet = new Stylesheet_Stylesheet();\n            keyframes.forEach(function (frame, i) {\n                var t = frame.t;\n                if (t === undefined)\n                    t = i / (keyframes.length - 1 || 1);\n                var perc = (Math.round(t * 1000) / 10) + \"%\";\n                var style = (frame.style instanceof Style_Style) ?\n                    frame.style : new Style_Style(frame.style);\n                sheet.define(\"@keyframes \" + _this.id + \"{\" + perc + \"}\", style);\n            });\n            applyStylesheet(sheet);\n        }\n        // declare the animation itself\n        var duration = 350, delay = 0, count = \"1\";\n        if (options.duration >= 0)\n            duration = options.duration;\n        if (options.delay >= 0)\n            delay = options.delay;\n        if (options.count === Infinity)\n            count = \"infinite\";\n        else if (options.count !== undefined)\n            count = String(options.count);\n        var cssText = _this._keyframesID + \" \" +\n            (options.specDuration >= 0 ? options.specDuration : duration) + \"ms \" +\n            delay + \"ms \" +\n            count + \" \" +\n            (options.direction || \"normal\") +\n            (options.ease ? \" ease\" : \"\") + \" forwards\";\n        applyStylesheet(new Stylesheet_Stylesheet(_this.id, {\n            \".~_playing\": {\n                animation: cssText,\n                webkitAnimation: cssText\n            }\n        }));\n        _this.duration = duration + delay;\n        _this._playingCSSText = cssText;\n        return _this;\n    }\n    /** Create a combined animation out of given key frame animations */\n    DOMAnimation.together = function () {\n        var animations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            animations[_i] = arguments[_i];\n        }\n        // find maximum duration from given animations, combine CSS\n        var duration = 0, cssTexts = [];\n        animations.forEach(function (a) {\n            cssTexts.push(a._playingCSSText);\n            if (a.duration > duration)\n                duration = a.duration;\n        });\n        var combinedCSSText = cssTexts.join(\", \");\n        // create a combined Animation class\n        var CombinedAnimation = (function (_super) {\n            DOMAnimation___extends(class_1, _super);\n            function class_1(name) {\n                var _this = _super.call(this, name) || this;\n                _this.duration = duration;\n                // define CSS class with combined CSS\n                var s = new Stylesheet_Stylesheet(_this.id, {\n                    \".~_playing\": {\n                        animation: combinedCSSText,\n                        webkitAnimation: combinedCSSText\n                    }\n                });\n                applyStylesheet(s);\n                return _this;\n            }\n            class_1.prototype.play = function (c) {\n                // reuse keyframe animation play method\n                return DOMAnimation.prototype.play.call(this, c);\n            };\n            return class_1;\n        }(Animation));\n        // return a singleton instance\n        return new CombinedAnimation(animations.map(function (a) { return (a && a.name); }).join(\"_and_\"));\n    };\n    /** Clone the animation with the same keyframes but with extra options */\n    DOMAnimation.prototype.clone = function (options) {\n        var clonedOptions = {\n            duration: options.duration >= 0 ?\n                options.duration : this._options.duration,\n            delay: options.delay >= 0 ?\n                options.delay : this._options.delay,\n            count: options.count >= 0 ?\n                options.count : this._options.count,\n            direction: options.direction ?\n                options.direction : this._options.direction,\n            ease: options.ease !== undefined ?\n                options.ease : this._options.ease,\n            _keyframes: this._keyframesID\n        };\n        return new DOMAnimation(this.name, undefined, clonedOptions);\n    };\n    /** Combine this animation with given key frame animations; this does *not* work for animations that use the same CSS property, such as `transform` (rotate, scale, translate...) */\n    DOMAnimation.prototype.togetherWith = function () {\n        var animations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            animations[_i] = arguments[_i];\n        }\n        return DOMAnimation.together.apply(DOMAnimation, [this].concat(animations));\n    };\n    /** Clone this animation and override timings */\n    DOMAnimation.prototype.withTiming = function (msDuration, msDelay) {\n        return this.clone({ duration: msDuration, delay: msDelay });\n    };\n    /** Clone this animation and specify to be played in reverse */\n    DOMAnimation.prototype.reverse = function () {\n        return this.clone({\n            direction: (this._options.direction &&\n                this._options.direction === \"reverse\") ?\n                \"normal\" : \"reverse\"\n        });\n    };\n    /** Play the animation once on given component */\n    DOMAnimation.prototype.play = function (component) {\n        var _this = this;\n        var control = { animation: this };\n        if (!Animation.isEnabled) {\n            // do not start, return bogus object\n            control.done = Promise_Promise.resolve(control);\n            control.stop = function () { };\n        }\n        else {\n            // start the animation\n            component.style.addClass(this.id + \"_playing\");\n            // this is technically not correct but good enough in most cases\n            // where the animation is triggered on an existing element, and\n            // avoids complicated event setup:\n            control.done = sleep(this.duration, control);\n            control.stop = function () {\n                component.style.removeClass(_this.id + \"_playing\");\n            };\n        }\n        return control;\n    };\n    return DOMAnimation;\n}(Animation));\n\n(function (DOMAnimation) {\n    var fadeIn = new DOMAnimation(\"fadeIn\", [\n        { style: { opacity: \"0\" } },\n        { style: { opacity: \"1\" } }\n    ]);\n    var fadeOut = fadeIn.reverse();\n    var slideInUp = new DOMAnimation(\"slideInUp\", [\n        { style: { transform: \"translateY(100%)\" } },\n        { style: { transform: \"translateY(0)\" } }\n    ]);\n    var fadeInUp = new DOMAnimation(\"fadeInUp\", [\n        { style: { opacity: \"0\", transform: \"translateY(50%)\" } },\n        { style: { opacity: \"1\", transform: \"translateY(0)\" } }\n    ]);\n    var slideOutDown = slideInUp.reverse();\n    var fadeOutDown = fadeInUp.reverse();\n    var slideInDown = new DOMAnimation(\"slideInDown\", [\n        { style: { transform: \"translateY(-100%)\" } },\n        { style: { transform: \"translateY(0)\" } }\n    ]);\n    var fadeInDown = new DOMAnimation(\"fadeInDown\", [\n        { style: { opacity: \"0\", transform: \"translateY(-50%)\" } },\n        { style: { opacity: \"1\", transform: \"translateY(0)\" } }\n    ]);\n    var slideOutUp = slideInDown.reverse();\n    var fadeOutUp = fadeInDown.reverse();\n    var slideInLeft = new DOMAnimation(\"slideInLeft\", [\n        { style: { transform: \"translateX(100%)\" } },\n        { style: { transform: \"translateX(0)\" } }\n    ]);\n    var fadeInLeft = new DOMAnimation(\"fadeInLeft\", [\n        { style: { opacity: \"0\", transform: \"translateX(50%)\" } },\n        { style: { opacity: \"1\", transform: \"translateX(0)\" } }\n    ]);\n    var slideOutRight = slideInLeft.reverse();\n    var fadeOutRight = fadeInLeft.reverse();\n    var slideInRight = new DOMAnimation(\"slideInRight\", [\n        { style: { transform: \"translateX(-100%)\" } },\n        { style: { transform: \"translateX(0)\" } }\n    ]);\n    var fadeInRight = new DOMAnimation(\"fadeInRight\", [\n        { style: { opacity: \"0\", transform: \"translateX(-50%)\" } },\n        { style: { opacity: \"1\", transform: \"translateX(0)\" } }\n    ]);\n    var slideOutLeft = slideInRight.reverse();\n    var fadeOutLeft = fadeInRight.reverse();\n    var scaleIn = new DOMAnimation(\"scaleIn\", [\n        { style: { transform: \"scale(0)\" } },\n        { style: { transform: \"scale(1)\" } }\n    ]);\n    var scaleOut = scaleIn.reverse();\n    var scaleInOver = new DOMAnimation(\"scaleInOver\", [\n        { style: { transform: \"scale(0)\" } },\n        { style: { transform: \"scale(1.15)\" }, t: .5 },\n        { style: { transform: \"scale(.95)\" }, t: .8 },\n        { style: { transform: \"scale(1)\" } }\n    ]);\n    var scaleOutOver = scaleInOver.reverse();\n    var turnInX = new DOMAnimation(\"turnInX\", [\n        { style: { transform: \"perspective(1000px) rotateX(90deg)\" } },\n        { style: { transform: \"perspective(1000px)\" } }\n    ]);\n    var turnOutX = new DOMAnimation(\"turnOutX\", [\n        { style: { transform: \"perspective(1000px)\" } },\n        { style: { transform: \"perspective(1000px) rotateX(90deg)\" } }\n    ]);\n    var turnInY = new DOMAnimation(\"turnInY\", [\n        { style: { transform: \"perspective(1000px) rotateY(90deg)\" } },\n        { style: { transform: \"perspective(1000px)\" } }\n    ]);\n    var turnOutY = new DOMAnimation(\"turnOutY\", [\n        { style: { transform: \"perspective(1000px)\" } },\n        { style: { transform: \"perspective(1000px) rotateY(90deg)\" } }\n    ]);\n    var growMaxHeight = new DOMAnimation(\"growMaxHeight\", [\n        { style: { maxHeight: \"0\", animationTimingFunction: \"cubic-bezier(0.5, 0, 1, 0.5)\" } },\n        { style: { maxHeight: \"5000px\", animationTimingFunction: \"cubic-bezier(0.5, 0, 1, 0.5)\" } }\n    ], { duration: 800 });\n    var shrinkMaxHeight = new DOMAnimation(\"shrinkMaxHeight\", [\n        { style: { maxHeight: \"5000px\", animationTimingFunction: \"cubic-bezier(0, 0.5, 0.5, 1)\" } },\n        { style: { maxHeight: \"0\", animationTimingFunction: \"cubic-bezier(0, 0.5, 0.5, 1)\" } },\n    ], { duration: 800 });\n    var growMaxWidth = new DOMAnimation(\"growMaxWidth\", [\n        { style: { maxWidth: \"0\", animationTimingFunction: \"cubic-bezier(0.5, 0, 1, 0.5)\" } },\n        { style: { maxWidth: \"5000px\", animationTimingFunction: \"cubic-bezier(0.5, 0, 1, 0.5)\" } }\n    ], { duration: 800 });\n    var shrinkMaxWidth = new DOMAnimation(\"shrinkMaxWidth\", [\n        { style: { maxWidth: \"5000px\", animationTimingFunction: \"cubic-bezier(0, 0.5, 0.5, 1)\" } },\n        { style: { maxWidth: \"0\", animationTimingFunction: \"cubic-bezier(0, 0.5, 0.5, 1)\" } },\n    ], { duration: 800 });\n    var highlightYellow = new DOMAnimation(\"highlightYellow\", [\n        { style: { background: \"#ffc\" } },\n        { style: { background: \"#ffa\" } },\n        { style: { background: \"transparent\" } }\n    ]);\n    var jumpOut = new DOMAnimation(\"jumpOut\", [\n        { style: { transform: \"scale(.9)\" } },\n        { style: { transform: \"scale(1.2)\" } },\n        { style: { transform: \"scale(.9)\" }, t: .9 },\n        { style: { transform: \"scale(1)\" } }\n    ]);\n    var jumpIn = new DOMAnimation(\"jumpIn\", [\n        { style: { transform: \"scale(1.05)\" } },\n        { style: { transform: \"scale(.9)\" } },\n        { style: { transform: \"scale(1.05)\" }, t: .9 },\n        { style: { transform: \"scale(1)\" } }\n    ]);\n    /** List of basic animations [implementation] */\n    DOMAnimation.basic = {\n        in: {\n            fade: fadeIn,\n            fadeUp: fadeInUp,\n            fadeDown: fadeInDown,\n            fadeLeft: fadeInLeft,\n            fadeRight: fadeInRight,\n            slideUp: slideInUp,\n            slideDown: slideInDown,\n            slideLeft: slideInLeft,\n            slideRight: slideInRight,\n            scale: scaleIn,\n            scaleOver: scaleInOver,\n            turnX: turnInX,\n            turnY: turnInY,\n            maxHeight: growMaxHeight,\n            maxWidth: growMaxWidth\n        },\n        out: {\n            fade: fadeOut,\n            fadeUp: fadeOutUp,\n            fadeDown: fadeOutDown,\n            fadeLeft: fadeOutLeft,\n            fadeRight: fadeOutRight,\n            slideUp: slideOutUp,\n            slideDown: slideOutDown,\n            slideLeft: slideOutLeft,\n            slideRight: slideOutRight,\n            scale: scaleOut,\n            scaleOver: scaleOutOver,\n            turnX: turnOutX,\n            turnY: turnOutY,\n            maxHeight: shrinkMaxHeight,\n            maxWidth: shrinkMaxWidth,\n        },\n        highlight: {\n            yellow: highlightYellow,\n            jumpOut: jumpOut, jumpIn: jumpIn\n        }\n    };\n})(DOMAnimation_DOMAnimation || (DOMAnimation_DOMAnimation = {}));\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/DOM/main.js\n\n\n\n\n/** @internal Create a <div> element with given class name and node */\nfunction main_div(className, node) {\n    var result = document.createElement(\"div\");\n    if (className)\n        result.className = className;\n    if (node)\n        result.appendChild(node);\n    return result;\n}\n/** Returns true if given component contains given DOM node */\nfunction contains(component, node) {\n    // only return true if component output DOM element is equal to the\n    // given DOM element, or logically contains it\n    var out = component.getLastRenderedOutput();\n    return !!(out && out.element && (node === out.element ||\n        node.compareDocumentPosition(out.element) & 8));\n}\n// wait for load event, or 1s after DOMContentLoaded (wait for CSS to load\n// to avoid flash of unstyled content-- but not too long), or resolve right\n// away if everything is already loaded:\nwindow.addEventListener(\"load\", function () { Screen_Screen.resolveReady(true); });\ndocument.addEventListener(\"DOMContentLoaded\", function (event) {\n    sleep(1000).then(function () { Screen_Screen.resolveReady(true); });\n});\nif (document.readyState === \"complete\")\n    Screen_Screen.resolveReady(true);\n// apply CSS reset\nScreen_Screen.ready.then(function () {\n    applyStylesheet({\n        \"[hidden]\": { display: \"none !important\" },\n        \"*\": { boxSizing: \"border-box\" }\n    });\n    applyStylesheet(Styles_Styles.rebootStyles, true);\n    applyStylesheet(Styles_Styles.controlStyles, true);\n});\n// listen for changes in window size:\nvar deferredDimensionsUpdate;\nwindow.addEventListener(\"resize\", function () {\n    if (!deferredDimensionsUpdate) {\n        deferredDimensionsUpdate = setTimeout(function () {\n            deferredDimensionsUpdate = undefined;\n            updateDimensions();\n        }, 50);\n    }\n});\nfunction updateDimensions() {\n    // write to `.dimensions` properties, ignore readonly modifier\n    var width = window.innerWidth;\n    var height = window.innerHeight;\n    if (width && height) {\n        Screen_Screen.dimensions.width = width;\n        Screen_Screen.dimensions.height = height;\n        return true;\n    }\n}\nfunction startUpdateDimensions() {\n    if (!updateDimensions())\n        setTimeout(startUpdateDimensions, 200);\n}\nstartUpdateDimensions();\n// Inject element measurement function into Component class\ninject(Component_Component, {\n    getActualDimensions: function () {\n        var out = this.getLastRenderedOutput();\n        var elt = out && out.element;\n        if (elt) {\n            // take current height & width from actual component\n            return {\n                height: elt.offsetHeight,\n                width: elt.offsetWidth\n            };\n        }\n        else {\n            // return 0x0 since nothing is visible\n            return { height: 0, width: 0 };\n        }\n    }\n});\n// CustomEvent polyfill (source: MDN)\n(function () {\n    try {\n        new CustomEvent(\"test\");\n    }\n    catch (all) {\n        var C = function (event, params) {\n            params = params || { bubbles: false, cancelable: false, detail: undefined };\n            var evt = document.createEvent('CustomEvent');\n            evt.initCustomEvent(event, !!params.bubbles, !!params.cancelable, params.detail);\n            return evt;\n        };\n        window[\"CustomEvent\"] = C;\n        C.prototype = window.Event.prototype;\n    }\n})();\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/DOM/Focus.js\n\n\n\n// Inject focus state logic\ninject(Component_Component, {\n    \"@getLiveComponentFocusState\": function () {\n        var focused = document.activeElement;\n        return !!(focused && contains(this, focused));\n    }\n});\n/** Element to focus as soon as it becomes available (see `focus(...)`) */\nvar toFocusASAP;\n/** Try to focus given component, its live element (from rendered output), or the first focusable element within given component, as soon as it becomes available */\nfunction focus(component) {\n    component.getRenderedOutputAsync().then(function (out) {\n        if (!out.element)\n            return;\n        // check which element to set focus to\n        var focusable;\n        if (out.element.hasAttribute &&\n            out.element.hasAttribute(\"tabindex\")) {\n            // use element itself\n            focusable = out.element;\n        }\n        else if (out.liveElement) {\n            // use live element from output\n            focusable = out.liveElement;\n        }\n        else {\n            // find focusable elements (not hidden and parent(s) not hidden)\n            var elts = out.element.querySelectorAll(\"[tabindex],a[href],input:not([disabled]),\" +\n                \"button:not([disabled]),textarea:not([disabled]),\" +\n                \"select:not([disabled])\");\n            for (var _i = 0, elts_1 = elts; _i < elts_1.length; _i++) {\n                var element = elts_1[_i];\n                if (!element)\n                    continue;\n                var hidden = false, cur = element;\n                while (cur && !hidden) {\n                    if (cur.hasAttribute && cur.hasAttribute(\"hidden\"))\n                        hidden = true;\n                    cur = cur.parentElement;\n                }\n                if (!hidden) {\n                    focusable = cur;\n                    break;\n                }\n            }\n        }\n        // focus the (first focusable) element found\n        if (focusable) {\n            toFocusASAP = focusable;\n            var tries = 0;\n            var doFocus_1 = function () {\n                if (toFocusASAP !== focusable)\n                    return;\n                if (toFocusASAP && document.activeElement !== toFocusASAP) {\n                    // try to focus the element and keep checking back\n                    toFocusASAP.focus();\n                    if (tries++ < 10)\n                        window.setTimeout(doFocus_1, tries * 2);\n                }\n                else {\n                    // managed to focus the element, forget about it:\n                    toFocusASAP = undefined;\n                }\n            };\n            doFocus_1();\n        }\n    });\n}\n/** Remove focus from given component, or the currently focused element */\nfunction blur(component) {\n    var focused = document.activeElement;\n    if (focused) {\n        // do not blur if not contained by given component\n        if (component && !contains(component, focused))\n            return;\n        // blur the currently focused element\n        focused && focused.blur && focused.blur();\n    }\n}\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/DOM/index.js\nvar DOM_namespaceObject = {};\n__webpack_require__.d(DOM_namespaceObject, \"uid\", function() { return uid; });\n__webpack_require__.d(DOM_namespaceObject, \"Stylesheet\", function() { return Stylesheet_Stylesheet; });\n__webpack_require__.d(DOM_namespaceObject, \"applyStylesheet\", function() { return applyStylesheet; });\n__webpack_require__.d(DOM_namespaceObject, \"applyStyleTo\", function() { return applyStyleTo; });\n__webpack_require__.d(DOM_namespaceObject, \"setCSSRemSize\", function() { return setCSSRemSize; });\n__webpack_require__.d(DOM_namespaceObject, \"setSelectionClass\", function() { return setSelectionClass; });\n__webpack_require__.d(DOM_namespaceObject, \"getSelectionClass\", function() { return getSelectionClass; });\n__webpack_require__.d(DOM_namespaceObject, \"loadExternalCSS\", function() { return loadExternalCSS; });\n__webpack_require__.d(DOM_namespaceObject, \"Styles\", function() { return Styles_Styles; });\n__webpack_require__.d(DOM_namespaceObject, \"PAGE_OPTIONS\", function() { return PAGE_OPTIONS; });\n__webpack_require__.d(DOM_namespaceObject, \"DOMBlock\", function() { return DOMBlock_DOMBlock; });\n__webpack_require__.d(DOM_namespaceObject, \"Renderer\", function() { return DOMBlock_Renderer; });\n__webpack_require__.d(DOM_namespaceObject, \"DOMAnimation\", function() { return DOMAnimation_DOMAnimation; });\n__webpack_require__.d(DOM_namespaceObject, \"focus\", function() { return focus; });\n__webpack_require__.d(DOM_namespaceObject, \"blur\", function() { return blur; });\n__webpack_require__.d(DOM_namespaceObject, \"div\", function() { return main_div; });\n__webpack_require__.d(DOM_namespaceObject, \"contains\", function() { return contains; });\n\n\n\n\n\n\n\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/Drag.js\nvar Drag___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n/** The distance to move before the `.moved` promise gets resolved */\nvar PX_MOVE_THRESHOLD = 4;\n/** The pace (ms) at which mouse move events take effect */\nvar MOUSE_MOVE_PACE = 20;\n/** Represents a drag operation in the DOM context */\nvar Drag_DOMDrag = (function (_super) {\n    Drag___extends(DOMDrag, _super);\n    /** Initialize the operation and start tracking mouse movement, sends drag start event to given target DOM element; starts sending drag enter and drag leave events as well */\n    function DOMDrag(event /* TODO: | TouchEvent */) {\n        var _this = _super.call(this) || this;\n        // shadow properties for x and y\n        _this._curX = new Observable_ObservableValue();\n        _this._curY = new Observable_ObservableValue();\n        _this._curX.value = _this._origX = event.clientX;\n        _this._curY.value = _this._origY = event.clientY;\n        var target = event.currentTarget;\n        if (!target)\n            throw new TypeError();\n        target.setCapture && target.setCapture();\n        _this._origTarget = target;\n        _this.moved = new Promise_Promise(function (resolve) {\n            _this._moved_resolve = resolve;\n        });\n        // this function is overridden when constraining movement\n        _this._setCoords = function (x, y) {\n            _this._curX.value = x;\n            _this._curY.value = y;\n        };\n        // this function is overridden when picking up an element\n        _this._getTarget = function (x, y) { return document.elementFromPoint(x, y); };\n        // send event to top level element to wake up listeners\n        var uiDragStart = new CustomEvent(\"uidragstart\", { bubbles: true, cancelable: true, detail: _this.detail });\n        if (target.dispatchEvent(uiDragStart))\n            addListeners();\n        else\n            _this.cancel();\n        return _this;\n    }\n    Object.defineProperty(DOMDrag.prototype, \"x\", {\n        /** Current viewport X coordinate (read-only observable, constrained) */\n        get: function () { return this._curX.value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DOMDrag.prototype, \"y\", {\n        /** Current viewport Y coordinate (read-only observable, constrained) */\n        get: function () { return this._curY.value; },\n        enumerable: true,\n        configurable: true\n    });\n    /** Constrain effective drag coordinates on (original) X and/or Y axis of the viewport, and/or contrain to stay within given element on screen (calling this method twice does not constrain further, but the constraints are replaced) */\n    DOMDrag.prototype.constrain = function (constrainX, constrainY, component) {\n        var _this = this;\n        // find the element to constrain to\n        var baseElt = this._currentTarget || this._origTarget;\n        var constrainElt;\n        if (component) {\n            var out = component.getLastRenderedOutput();\n            if (out && out.element) {\n                constrainElt = baseElt = out.element;\n            }\n        }\n        var origRect = baseElt.getBoundingClientRect ?\n            baseElt.getBoundingClientRect() : { left: 0, top: 0 };\n        var baseX = (this._curX.value - origRect.left) + (baseElt.scrollLeft || 0);\n        var baseY = (this._curY.value - origRect.top) + (baseElt.scrollTop || 0);\n        this._setCoords = function (x, y) {\n            var currentRect = baseElt.getBoundingClientRect();\n            // constrain on X and/or Y axis\n            if (constrainX)\n                x = (baseX - baseElt.scrollLeft) + currentRect.left;\n            if (constrainY)\n                y = (baseY - baseElt.scrollTop) + currentRect.top;\n            // constrain to element on screen\n            if (constrainElt) {\n                if (x < currentRect.left)\n                    x = currentRect.left;\n                if (x > currentRect.right)\n                    x = currentRect.right;\n                if (y < currentRect.top)\n                    y = currentRect.top;\n                if (y > currentRect.bottom)\n                    y = currentRect.bottom;\n            }\n            _this._curX.value = x < 0 ? 0 : x;\n            _this._curY.value = y < 0 ? 0 : y;\n        };\n        // constrain coordinates now\n        this._setCoords(this._curX.value, this._curY.value);\n    };\n    /** Make given component follow the mouse cursor while dragging; if the component does not contain a fixed-position element, the element style will be changed to use fixed absolute positioning, and a placholder will be inserted instead */\n    DOMDrag.prototype.pickUp = function (component, removeWhenDone) {\n        var _this = this;\n        var element;\n        if (component) {\n            var out = component.getLastRenderedOutput();\n            if (out)\n                element = out.element;\n        }\n        if (!element)\n            throw new TypeError();\n        if (!element.parentNode)\n            return;\n        // override component style to move it around\n        var override = component[\"@_DOMDrag_Override\"];\n        if (!override) {\n            override = component[\"@_DOMDrag_Override\"] = new Style_Style({\n                position: \"fixed\",\n                bottom: \"auto\", right: \"auto\"\n            });\n            component.style.override(override);\n        }\n        // figure out (and fix) the element's position\n        var rect = element.getBoundingClientRect();\n        var oX = this._curX.value - rect.left;\n        var oY = this._curY.value - rect.top;\n        var placeholder = document.getElementById(\"__drag_placeholder_\" + component.uid);\n        if (!placeholder) {\n            placeholder = main_div(\"__drag_placeholder\");\n            placeholder.id = \"__drag_placeholder_\" + component.uid;\n            placeholder.style.fontSize = \"0\";\n            placeholder.style.lineHeight = \"0\";\n            placeholder.style.height = rect.height + \"px\";\n            placeholder.style.width = rect.width + \"px\";\n            placeholder.style.margin = element.style.margin;\n            element.parentNode.insertBefore(placeholder, element);\n        }\n        override.set({ left: oX + \"px\", top: oY + \"px\" });\n        // move element while dragging\n        observe(function () { return ({\n            left: (_this._curX.value - oX) + \"px\",\n            top: (_this._curY.value - oY) + \"px\"\n        }); }).subscribe(function (style) {\n            override.set(style);\n        });\n        // look \"through\" element when checking on target\n        this._getTarget = function (x, y) {\n            element.setAttribute(\"hidden\", \"hidden\");\n            var result = document.elementFromPoint(x, y);\n            element.removeAttribute(\"hidden\");\n            return result;\n        };\n        // remove element when done\n        if (removeWhenDone) {\n            var removeElts = function () { return element.parentNode &&\n                element.parentNode.removeChild(element) &&\n                placeholder.parentNode.removeChild(placeholder); };\n            this.Dropped.connect(removeElts);\n            this.Canceled.connect(removeElts);\n        }\n    };\n    /** Stop the current drag operation */\n    DOMDrag.prototype.cancel = function () {\n        this._origTarget.releaseCapture &&\n            this._origTarget.releaseCapture();\n        _super.prototype.cancel.call(this);\n        // also send (bubbling!) uidragleave for symmetry\n        var uiDragLeave = new CustomEvent(\"uidragleave\", { bubbles: true, detail: this.detail });\n        this._currentTarget && this._currentTarget.dispatchEvent(uiDragLeave);\n        // remove mouse listeners if not dragging anymore\n        if (!Drag_Drag.getCurrentInstances().length)\n            removeListeners();\n    };\n    /** Accept the current drop target (i.e. perform the drop, primarily called automatically by mouseup handler but can be called manually); sends drop event to drop target element */\n    DOMDrag.prototype.drop = function () {\n        this._origTarget.releaseCapture &&\n            this._origTarget.releaseCapture();\n        // send event to drop target to confirm\n        var uiDragDrop = new CustomEvent(\"uidragdrop\", { bubbles: true, cancelable: true, detail: this.detail });\n        var canceled = !(this._currentTarget &&\n            this._currentTarget.dispatchEvent(uiDragDrop));\n        if (canceled) {\n            this.cancel();\n            return;\n        }\n        _super.prototype.drop.call(this);\n        // also send (bubbling!) uidragleave for symmetry\n        var uiDragLeave = new CustomEvent(\"uidragleave\", { bubbles: true, detail: this.detail });\n        this._currentTarget && this._currentTarget.dispatchEvent(uiDragLeave);\n        // remove mouse listeners if not dragging anymore\n        if (!Drag_Drag.getCurrentInstances().length)\n            removeListeners();\n    };\n    /** Update mouse cursor screen coordinates (primarily called by mousemove handler); returns true if an element was scrolled - meaning update should be called again after a short time */\n    DOMDrag.prototype.update = function (x, y) {\n        var _this = this;\n        var oldX = this._curX.value;\n        var oldY = this._curY.value;\n        this._setCoords(x, y);\n        var newX = this._curX.value, newY = this._curY.value;\n        // get target element and scroll if needed\n        var target = this._getTarget(newX, newY);\n        var cur = target;\n        var scrolled = false;\n        while (cur && !scrolled) {\n            var curStyle;\n            if (cur.nodeType == 1 &&\n                (curStyle = window.getComputedStyle(cur)) &&\n                curStyle.getPropertyValue(\"overflow\") !== \"hidden\") {\n                var rect = cur.getBoundingClientRect();\n                if (newX < rect.left + 32 && cur.scrollLeft > 0) {\n                    cur.scrollLeft = Math.max(0, cur.scrollLeft - 8);\n                    scrolled = true;\n                }\n                if (newY < rect.top + 32 && cur.scrollTop > 0) {\n                    cur.scrollTop = Math.max(0, cur.scrollTop - 8);\n                    scrolled = true;\n                }\n                if (newX > rect.right - 32 &&\n                    cur.scrollLeft < cur.scrollWidth - cur.clientWidth) {\n                    cur.scrollLeft = cur.scrollLeft + 8;\n                    scrolled = true;\n                }\n                if (newY > rect.bottom - 32 &&\n                    cur.scrollTop < cur.scrollHeight - cur.clientHeight) {\n                    cur.scrollTop = cur.scrollTop + 8;\n                    scrolled = true;\n                }\n            }\n            cur = cur.parentNode;\n        }\n        if (scrolled) {\n            // might have scrolled to a new (child) target\n            target = this._getTarget(newX, newY);\n        }\n        if (oldX !== newX || oldY !== newY) {\n            // check if only now moving far enough\n            if (!this._moved &&\n                (Math.abs(newX - this._origX) > PX_MOVE_THRESHOLD ||\n                    Math.abs(this._origY - newY) > PX_MOVE_THRESHOLD)) {\n                this._moved = true;\n                this._moved_resolve(this);\n            }\n            // inform old and new potential drop target(s)\n            var oldTarget = this._currentTarget;\n            this._currentTarget = target;\n            if (this._currentTarget && this._currentTarget !== oldTarget) {\n                // find old drop targets that do not contain new drop target\n                var leftTargets = [];\n                while (oldTarget) {\n                    // stop if the old target contains the new target\n                    if (target.compareDocumentPosition(oldTarget) & 8)\n                        break;\n                    // otherwise send a non-bubbling \"leave\" event (in reverse)\n                    leftTargets.unshift(oldTarget);\n                    // go up to parent element\n                    do {\n                        oldTarget = oldTarget.parentNode;\n                    } while (oldTarget && !oldTarget.dispatchEvent);\n                }\n                leftTargets.forEach(function (elt) {\n                    elt.dispatchEvent(new CustomEvent(\"uidragleave\", { detail: _this.detail }));\n                });\n                // oldTarget is now the closest old parent, or null;\n                // find new drop targets (child elements, up to shared parent)\n                var enteredTargets = [];\n                while (target && target !== oldTarget) {\n                    // send a non-bubbling \"enter\" event (in reverse)\n                    enteredTargets.unshift(target);\n                    // go up to parent element\n                    do {\n                        target = target.parentNode;\n                    } while (target && !target.dispatchEvent);\n                }\n                enteredTargets.forEach(function (elt) {\n                    elt.dispatchEvent(new CustomEvent(\"uidragenter\", { detail: _this.detail }));\n                });\n            }\n        }\n        return scrolled;\n    };\n    return DOMDrag;\n}(Drag_Drag));\n// use this class as the primary Drag class:\nDrag_Drag.BaseClass = Drag_DOMDrag;\n// mousemove pacer timer (fires only after delay to improve performance)\nvar mouseMovePacer;\nvar lastMouseMove;\n// mousemove event handler, updates current drag coordinates\nfunction onMouseMove(event) {\n    function doUpdate() {\n        if (lastMouseMove) {\n            var x = lastMouseMove.clientX;\n            var y = lastMouseMove.clientY;\n            try {\n                Drag_Drag.getCurrentInstances().forEach(function (drag) {\n                    drag.update(x, y);\n                });\n            }\n            finally {\n                runYield();\n            }\n        }\n    }\n    // pace updates, except for first one to avoid delay\n    var firstUpdate = !lastMouseMove;\n    lastMouseMove = event;\n    if (firstUpdate) {\n        doUpdate();\n    }\n    else if (!mouseMovePacer) {\n        mouseMovePacer = window.setTimeout(function () {\n            var scrolled = doUpdate();\n            mouseMovePacer = undefined;\n            if (scrolled)\n                onMouseMove(lastMouseMove);\n        }, MOUSE_MOVE_PACE);\n    }\n}\n// mouseup handler to capture drop events\nfunction onMouseUp() {\n    Drag_Drag.getCurrentInstances().forEach(function (d) { return d.drop(); });\n    runYield();\n}\n// if mouse moves out of the window while dragging, cancel drag\nfunction onMouseOut(event) {\n    var movedTo = event.relatedTarget;\n    if (!movedTo || movedTo.nodeName == \"HTML\")\n        Drag_Drag.getCurrentInstances().forEach(function (d) { return d.cancel(); });\n}\n// cancel drag when esc key is pressed\nfunction onKeyDown(event) {\n    if (event.keyCode == 27) {\n        Drag_Drag.getCurrentInstances().forEach(function (d) { return d.cancel(); });\n    }\n}\n// cancel text selection\nvar old_onSelectStart;\n// helper used to remove event listeners and pacer timer\nfunction removeListeners() {\n    document.removeEventListener(\"mousemove\", onMouseMove);\n    document.removeEventListener(\"mouseup\", onMouseUp);\n    document.removeEventListener(\"mouseout\", onMouseOut);\n    document.removeEventListener(\"keydown\", onKeyDown);\n    document.onselectstart = old_onSelectStart;\n    mouseMovePacer && window.clearTimeout(mouseMovePacer);\n    mouseMovePacer = undefined;\n    lastMouseMove = undefined;\n}\n// helper used to add event listeners when actually dragging\nfunction addListeners() {\n    document.addEventListener(\"mousemove\", onMouseMove);\n    document.addEventListener(\"mouseup\", onMouseUp);\n    document.addEventListener(\"mouseout\", onMouseOut);\n    document.addEventListener(\"keydown\", onKeyDown);\n    old_onSelectStart = document.onselectstart;\n    document.onselectstart = function () { return false; };\n}\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/PageRenderer.js\nvar PageRenderer___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar PageRenderer___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** Contains functionality for rendering a page to the DOM; implementation of the PageRenderer class, used by Page to perform platform dependent tasks */\nvar PageRenderer_DOMPageRenderer = (function (_super) {\n    PageRenderer___extends(DOMPageRenderer, _super);\n    function DOMPageRenderer() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /** @internal Bound keydown event handler (on the window) */\n        _this._onKeydown = function (event) {\n            if (_this._onEvent(event) !== false) {\n                _this.KeyDown(event);\n                // invoke top component's onEsc handler when escape is pressed\n                if (event.keyCode === 27)\n                    _this.page.handleEsc();\n            }\n        };\n        /** @internal Bound event handler (on the window) */\n        _this._onEvent = function (event) {\n            if (_this._isBlocked) {\n                event.preventDefault();\n                event.stopImmediatePropagation();\n                return false;\n            }\n        };\n        return _this;\n    }\n    Object.defineProperty(DOMPageRenderer.prototype, \"domUpdater\", {\n        /** DOM update context for the rendered page (memoized) */\n        get: function () {\n            // create the page root element\n            var root = main_div(\"__page\");\n            root.id = uid;\n            root.style.position = \"absolute\";\n            root.style.zIndex = String(PAGE_OPTIONS.baseZIndex);\n            // create the update context for the page root element\n            return new UpdateContext_UpdateContext(root);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Render and show the page (within an observable getter); returns a promise that is resolved when all content has been rendered */\n    DOMPageRenderer.prototype.updateAsync = function () {\n        var _this = this;\n        // attach keydown handler to the window\n        window.removeEventListener(\"keydown\", this._onKeydown);\n        window.addEventListener(\"keydown\", this._onKeydown);\n        // reset wrapper references\n        this._shadedWrapper = undefined;\n        this._modalWrapper = undefined;\n        // take flow direction from screen if not defined on page\n        if (!this.page.flowDirection && Screen_Screen.defaultFlowDirection) {\n            unobserved(function () {\n                _this.page.flowDirection = Screen_Screen.defaultFlowDirection;\n            });\n        }\n        // render all content into DOM nodes\n        var content = [];\n        var components = this.page.content.slice();\n        components.forEach(function (c) {\n            // copy ltr/rtl flow direction if set at page level\n            if (c && _this.page.flowDirection) {\n                unobserved(function () {\n                    c.flowDirection = _this.page.flowDirection;\n                });\n            }\n            // render component synchronously\n            var out = c && c.out;\n            var element = out && out.element;\n            if (element instanceof HTMLElement) {\n                // update existing wrapper element, or create one\n                var wrapper = out.wrapper;\n                if (!wrapper || wrapper.className !== \"__page_wrapper\")\n                    wrapper = out.wrapper = _this._createWrapper();\n                _this._updateWrapper(element, wrapper, c[\"displayOptions\"], c.style, c instanceof Container_Container);\n                // add the rendered output instance to the list\n                content.push(out);\n            }\n            else {\n                // use a placeholder to stop elements from shifting around\n                content.push(document.createComment(\"placeholder\"));\n                return;\n            }\n        });\n        // append the page element to the document body, if needed\n        var updater = this.domUpdater;\n        if (!updater.root.parentNode)\n            document.body.appendChild(this.domUpdater.root);\n        // add all content to the page element (using generated wrappers)\n        return updater.updateAsync(content, true).then(function () {\n            _this.page.Rendered();\n            _this._moveShadeElement();\n            // remove focus from elements in front of this modal\n            if (_this._modalWrapper && document.activeElement &&\n                document.activeElement.compareDocumentPosition(_this._modalWrapper) & 4)\n                blur();\n        });\n    };\n    /** Remove the rendered page from the screen */\n    DOMPageRenderer.prototype.remove = function () {\n        // remove the page element itself\n        var root = this.domUpdater.root;\n        if (root.parentNode)\n            root.parentNode.removeChild(root);\n        // remove keydown window event handler\n        window.removeEventListener(\"keydown\", this._onKeydown, true);\n        // clean up references\n        delete this._topOptions;\n        delete this._shadedWrapper;\n    };\n    /** Block all input */\n    DOMPageRenderer.prototype.disableInput = function () {\n        // unfocus and set flag\n        blur();\n        this._isBlocked = true;\n        // add blocking event handlers on the window (on capture)\n        window.addEventListener(\"mousedown\", this._onEvent, true);\n        window.addEventListener(\"focus\", this._onEvent, true);\n        window.addEventListener(\"input\", this._onEvent, true);\n        window.addEventListener(\"selectstart\", this._onEvent, true);\n        // add overlay element to wrap over existing content\n        if (!this._blockElement) {\n            var blocker = this._blockElement = main_div(\"__page_block\");\n            blocker.style.position = \"fixed\";\n            blocker.style.top = \"0\";\n            blocker.style.bottom = \"0\";\n            blocker.style.left = \"0\";\n            blocker.style.right = \"0\";\n            blocker.style.cursor = \"wait\";\n            blocker.style.zIndex = \"1000000000\";\n            blocker.style.background = \"rgba(0,0,0,0)\"; // for IE\n        }\n        document.body.appendChild(this._blockElement);\n    };\n    /** Unblock all input */\n    DOMPageRenderer.prototype.enableInput = function () {\n        this._isBlocked = false;\n        // remove overlay element\n        if (this._blockElement && this._blockElement.parentNode)\n            this._blockElement.parentNode.removeChild(this._blockElement);\n        // remove blocking event handlers on the window\n        window.removeEventListener(\"mousedown\", this._onEvent, true);\n        window.removeEventListener(\"focus\", this._onEvent, true);\n        window.removeEventListener(\"input\", this._onEvent, true);\n        window.removeEventListener(\"selectstart\", this._onEvent, true);\n    };\n    /** Scroll to given component */\n    DOMPageRenderer.prototype.scrollTo = function (component) {\n        component.getRenderedOutputAsync().then(function (out) {\n            var elt = out && out.element;\n            if (!elt)\n                return;\n            // go through all parent elements to scroll them\n            var topOffset = elt.offsetTop;\n            var itemHeight = elt.offsetHeight;\n            while (elt.offsetParent) {\n                var parentElt = elt.offsetParent;\n                if (parentElt.scrollTop + parentElt.offsetHeight <\n                    topOffset + itemHeight) {\n                    // scroll down to bottom of selected element\n                    parentElt.scrollTop =\n                        topOffset + itemHeight - parentElt.offsetHeight;\n                }\n                if (parentElt.scrollTop > topOffset) {\n                    // scroll up to top of selected element\n                    parentElt.scrollTop = topOffset;\n                }\n                topOffset += parentElt.offsetTop - parentElt.scrollTop;\n                elt = parentElt;\n            }\n        });\n    };\n    /** @internal Create an empty shaded backdrop element */\n    DOMPageRenderer.prototype._createShadeElement = function () {\n        var shader = this._shadeElement = main_div(\"__page_backdropshader\");\n        shader.style.position = \"fixed\";\n        shader.style.left = \"0\";\n        shader.style.right = \"0\";\n        shader.style.top = \"0\";\n        shader.style.bottom = \"0\";\n        shader.style.outline = \"0\";\n        shader.style.zIndex = String(PAGE_OPTIONS.baseZIndex);\n        shader.style.background = PAGE_OPTIONS.shadeColor;\n        shader.style.transition = \"opacity \" +\n            PAGE_OPTIONS.shadeTransition + \"ms ease\";\n        shader.style.opacity = \"0\"; // initial\n        shader.setAttribute(UpdateContext_UpdateContext.UNMANAGED_FLAG, \"true\");\n        shader.tabIndex = -1;\n        return shader;\n    };\n    /** @internal Move, remove, or insert the modal backdrop shade */\n    DOMPageRenderer.prototype._moveShadeElement = function () {\n        var _this = this;\n        var root = this.domUpdater.root;\n        if (this._shadedWrapper) {\n            if (!this._shadeElement)\n                this._createShadeElement();\n            var shadeElement = this._shadeElement;\n            var shadedWrapper = this._shadedWrapper;\n            root.insertBefore(shadeElement, this._shadedWrapper);\n            setTimeout(function () {\n                if (_this._shadeElement === shadeElement &&\n                    _this._shadedWrapper === shadedWrapper)\n                    shadeElement.style.opacity =\n                        String(PAGE_OPTIONS.shadeOpacity);\n            }, 0);\n        }\n        else if (this._shadeElement) {\n            // transition and remove the currently displayed shade element\n            var shader_1 = this._shadeElement;\n            shader_1.style.opacity = \"0\";\n            setTimeout(function () {\n                if (shader_1.parentNode && !_this._shadedWrapper)\n                    root.removeChild(shader_1);\n            }, PAGE_OPTIONS.shadeTransition);\n        }\n    };\n    /** @internal Create an empty wrapper element for a component */\n    DOMPageRenderer.prototype._createWrapper = function () {\n        var _this = this;\n        var wrapper = main_div(\"__page_wrapper\");\n        wrapper.style.overflow = \"auto\";\n        wrapper.style.position = \"fixed\";\n        // disallow focus if behind modal shader\n        wrapper.addEventListener(\"focus\", function (event) {\n            if (_this._shadeElement) {\n                var cur = wrapper;\n                while (cur && cur.nextSibling) {\n                    cur = cur.nextSibling;\n                    if (cur === _this._shadeElement) {\n                        event.preventDefault();\n                        _this._shadeElement.focus();\n                        break;\n                    }\n                }\n            }\n        }, true);\n        // make sure IE also listens to clicks in the transparent area:\n        wrapper.style.background = \"rgba(0,0,0,0)\";\n        return wrapper;\n    };\n    /** @internal Position given DOM element inside of its page wrapper */\n    DOMPageRenderer.prototype._updateWrapper = function (element, wrapper, options, style, zeroFontSize) {\n        this._topOptions = options;\n        // fix font size for container wrappers\n        if (zeroFontSize) {\n            wrapper.style.lineHeight = \"0\";\n            wrapper.style.fontSize = \"0\";\n        }\n        else {\n            wrapper.style.lineHeight = \"\";\n            wrapper.style.fontSize = \"\";\n        }\n        // set z-index to follow content order or stay on top\n        wrapper.style.zIndex = String(PAGE_OPTIONS.baseZIndex +\n            ((options && options.stayOnTop) ? 1000 : 0));\n        // use \"dir\" attribute if flow direction set\n        if (options && options.flowDirection)\n            wrapper.dir = options.flowDirection;\n        // remember to insert the backdrop shade here if needed\n        if (options && options.shade)\n            this._shadedWrapper = wrapper;\n        // use .displayOptions to figure out positioning\n        var cell;\n        if (options && (options.modal)) {\n            // remember to remove focus later if needed\n            this._modalWrapper = wrapper;\n            // position the element inside a full-screen table cell\n            wrapper.style.top = \"0\";\n            wrapper.style.bottom = \"0\";\n            wrapper.style.left = \"0\";\n            wrapper.style.right = \"0\";\n            if (!wrapper.firstChild || wrapper.firstChild === element) {\n                // create the layout wrapper cell first\n                cell = main_div(\"__page_layoutcell\");\n                cell.style.display = \"table-cell\";\n                cell.style.boxSizing = \"border-box\";\n                cell.style.position = \"relative\";\n                cell.style.height = \"100vh\";\n                cell.style.width = \"100vw\";\n                cell.style.overflow = \"hidden\";\n                cell.appendChild(element);\n                wrapper.appendChild(cell);\n                // remove all other elements\n                while (cell.previousSibling)\n                    wrapper.removeChild(cell.previousSibling);\n            }\n            else {\n                // assume that the first child is the cell\n                cell = wrapper.firstChild;\n                cell.appendChild(element);\n                // remove all other elements\n                while (element.previousSibling)\n                    cell.removeChild(element.previousSibling);\n            }\n            // align horizontally and vertically\n            cell.style.textAlign = options.modalHorzAlign || \"center\";\n            cell.style.verticalAlign = options.modalVertAlign || \"middle\";\n            cell.style.paddingTop = options.modalVertAlign === \"top\" ?\n                (options.alignMargin || \"0\") :\n                (options.modalVertAlign && options.outerMargin || \"0\");\n            cell.style.paddingBottom = options.modalVertAlign === \"bottom\" ?\n                (options.alignMargin || \"0\") :\n                (options.modalVertAlign && options.outerMargin || \"0\");\n            var isLeftAligned = options.modalHorzAlign === \"left\" ||\n                options.modalHorzAlign === \"start\";\n            var paddingLeft = isLeftAligned ?\n                (options.alignMargin || \"0\") :\n                (options.modalHorzAlign && options.outerMargin || \"0\");\n            var isRightAligned = options.modalHorzAlign === \"right\" ||\n                options.modalHorzAlign === \"end\";\n            var paddingRight = isRightAligned ?\n                (options.alignMargin || \"0\") :\n                (options.modalHorzAlign && options.outerMargin || \"0\");\n            // flip left/right padding for right-to-left flow\n            if (options.flowDirection === \"rtl\" &&\n                (options.modalHorzAlign === \"start\" ||\n                    options.modalHorzAlign === \"end\")) {\n                cell.style.paddingLeft = paddingRight;\n                cell.style.paddingRight = paddingLeft;\n            }\n            else {\n                cell.style.paddingLeft = paddingLeft;\n                cell.style.paddingRight = paddingRight;\n            }\n        }\n        else {\n            // insert element directly into the wrapper, clear other nodes\n            if (wrapper.firstChild !== element || wrapper.lastChild !== element) {\n                wrapper.appendChild(element);\n                while (element.previousSibling)\n                    wrapper.removeChild(element.previousSibling);\n            }\n            // fix absolutely positioned elements with a \"bottom\" property\n            // to the bottom of the screen ONLY, otherwise to the top ONLY\n            var position, bottom;\n            if (style) {\n                position = style.get(\"position\");\n                bottom = style.get(\"bottom\");\n            }\n            else {\n                position = element.style.position;\n                bottom = element.style.position;\n            }\n            if (position === \"absolute\" || position === \"fixed\") {\n                wrapper.style.overflow = \"\";\n                var margin = options && options.alignMargin || \"0\";\n                if (bottom && bottom !== \"auto\") {\n                    wrapper.style.top = \"auto\";\n                    wrapper.style.bottom = margin;\n                    wrapper.style.left = margin;\n                    wrapper.style.right = margin;\n                }\n                else {\n                    wrapper.style.bottom = \"auto\";\n                    wrapper.style.top = margin;\n                    wrapper.style.left = margin;\n                    wrapper.style.right = margin;\n                }\n            }\n            else {\n                // if positioned relative/static, use full-screen wrapper\n                var margin = options && options.outerMargin || \"0\";\n                wrapper.style.top = margin;\n                wrapper.style.bottom = margin;\n                wrapper.style.left = margin;\n                wrapper.style.right = margin;\n            }\n        }\n        // press outside the element invokes onEsc handler\n        wrapper.onmousedown = function (event) {\n            if ((options && (typeof options.onEsc === \"function\")) &&\n                (event.target === wrapper || event.target === cell)) {\n                options.onEsc.call(undefined);\n            }\n        };\n    };\n    PageRenderer___decorate([\n        unobservable_memoize_get\n    ], DOMPageRenderer.prototype, \"domUpdater\", null);\n    return DOMPageRenderer;\n}(Page_PageRenderer));\n// inject this renderer into Page itself\ninject(Page_Page, { Renderer: PageRenderer_DOMPageRenderer });\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/Renderers/Containers/Container.js\nvar Containers_Container___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Containers_Container___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** Base class name used for CSS style sheet */\nvar Container_CSS_CLASS = \"UI-Container\";\n/** @internal DOM-specific component renderer */\nvar Container_Renderer = (function (_super) {\n    Containers_Container___extends(Renderer, _super);\n    /** Instantiate the renderer for given component */\n    function Renderer(component, noScroll) {\n        var _this = _super.call(this, component) || this;\n        // initialize main DOM element(s)\n        _this.cellWrapper = main_div(Container_CSS_CLASS + \"_layoutcell\");\n        _this.mainWrapper = main_div(Container_CSS_CLASS + \"_main\", _this.cellWrapper);\n        _this.element = main_div(undefined, _this.mainWrapper);\n        // create the element update context\n        _this.context = new UpdateContext_UpdateContext(_this.cellWrapper);\n        // add watchers for component properties\n        _this.watch(function () { return applyStyleTo(component.style, _this.element); });\n        _this.watch(function () {\n            // set max content width\n            _this.mainWrapper.style.maxWidth = component.maxContentWidth;\n            // set vertical alignment\n            _this.cellWrapper.style.verticalAlign = component.vertAlign || \"top\";\n            // set horizontal alignment\n            var horzAlign = component.horzAlign;\n            if (component.flowDirection === \"rtl\") {\n                if (horzAlign === \"start\")\n                    horzAlign = \"right\";\n                else if (horzAlign === \"end\")\n                    horzAlign = \"left\";\n            }\n            else if (horzAlign === \"start\")\n                horzAlign = \"left\";\n            else if (horzAlign === \"end\")\n                horzAlign = \"right\";\n            if (horzAlign === \"left\") {\n                _this.mainWrapper.style.marginLeft = \"0\";\n                _this.mainWrapper.style.marginRight = \"auto\";\n            }\n            else if (horzAlign === \"right\") {\n                _this.mainWrapper.style.marginLeft = \"auto\";\n                _this.mainWrapper.style.marginRight = \"0\";\n            }\n            else {\n                _this.mainWrapper.style.marginLeft = \"\";\n                _this.mainWrapper.style.marginRight = \"\";\n            }\n            // do not fix table width if outer width is \"auto\"\n            if (component.style.get(\"width\") === \"auto\") {\n                _this.mainWrapper.style.tableLayout = \"auto\";\n                _this.mainWrapper.style.width = \"auto\";\n            }\n            else {\n                _this.mainWrapper.style.tableLayout = \"fixed\";\n                _this.mainWrapper.style.width = \"100%\";\n            }\n        });\n        // add watcher for scrollable (undesired for e.g. LayoutContainer)\n        if (!noScroll) {\n            _this.watch(function () { return component.scrollable; }, function (scrollable) {\n                // set overflow to scroll or hide overflowing content\n                component.style.set({\n                    overflow: scrollable ? \"auto\" : \"hidden\"\n                });\n            });\n        }\n        return _this;\n    }\n    /** Generate rendered component output */\n    Renderer.prototype.render = function (noUpdate) {\n        var component = this.component;\n        // get or create the current output object\n        var out = _super.prototype.render.call(this) || new ComponentRenderer_ComponentRenderer.Output(component, this.element, this.context);\n        // set or update flow direction mode on context and element\n        this.context.flowDirection = this.component.flowDirection;\n        if (this.component.flowDirection) {\n            this.element.dir = this.component.flowDirection;\n        }\n        // add all components\n        if (!noUpdate)\n            out.updated = this.context.updateAsync(component.content);\n        // focus first element if initializer had \"focusFirst\" set\n        if (component.focusFirst) {\n            focus(component);\n            delete component.focusFirst;\n        }\n        return out;\n    };\n    Renderer = Containers_Container___decorate([\n        mapComponentRenderer(Container_Container)\n    ], Renderer);\n    return Renderer;\n}(ComponentRenderer_ComponentRenderer));\n\n// inject scroll monitor method\ninject(Container_Container, {\n    \"@monitorPlatformScroll\": function (callback) {\n        this.getRenderedOutputAsync().then(function (out) {\n            var elt = out.element;\n            if (elt && elt.nodeType === 1) {\n                // use _scroll element for layout containers\n                var scrollElt = elt.getElementsByClassName(\"UI-LayoutContainer_scroll\");\n                if (scrollElt.length)\n                    elt = scrollElt[0];\n                // run the callback on scroll, resize, and first update\n                var doCallback_1 = function () {\n                    var t = elt.scrollTop;\n                    var b = elt.scrollHeight - (t + elt.clientHeight);\n                    var l = elt.scrollLeft;\n                    var r = elt.scrollWidth - (l + elt.clientWidth);\n                    callback(t, b, l, r);\n                };\n                elt.onscroll = doCallback_1;\n                window.addEventListener(\"resize\", doCallback_1);\n                out.updated && out.updated.then(function () {\n                    return sleep(10).then(doCallback_1);\n                });\n                doCallback_1();\n            }\n        });\n    }\n});\n// Add style override and apply style sheet\nContainer_Container.addStyleOverride(Style_Style.withClass(Container_CSS_CLASS));\nFlowContainer.addStyleOverride(Style_Style.withClass(Container_CSS_CLASS + \" \" + Container_CSS_CLASS + \"-Flow\"));\nStyles_Styles.define(Container_CSS_CLASS, {\n    \".~~\": {\n        cursor: \"default\",\n        display: \"inline-block\",\n        position: \"relative\",\n        top: \"0\", bottom: \"0\",\n        left: \"0\", right: \"0\",\n        height: \"100%\",\n        width: \"100%\",\n        textAlign: \"center\",\n        margin: \"0 auto\",\n        overflow: \"hidden\",\n        transition: \"box-shadow 100ms ease\",\n        fontSize: observe(function () { return Styles_Styles.size.text; })\n    },\n    \".~_main\": {\n        position: \"relative\",\n        display: \"table\",\n        borderSpacing: \"0\",\n        height: \"100%\",\n        margin: \"0 auto\"\n    },\n    \".~_layoutcell\": {\n        display: \"table-cell\",\n        height: \"100%\"\n    },\n    \".~-Flow > .~_main > .~_layoutcell > .UI-Block\": {\n        display: \"inline-block\",\n        verticalAlign: \"top\"\n    }\n});\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/Renderers/Containers/DialogContainer.js\nvar Containers_DialogContainer___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Containers_DialogContainer___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n/** Base class name used for CSS style sheet */\nvar DialogContainer_CSS_CLASS = \"UI-DialogContainer\";\n/** @internal DOM-specific component renderer */\nvar DialogContainer_Renderer = (function (_super) {\n    Containers_DialogContainer___extends(Renderer, _super);\n    /** Instantiate the renderer for given component */\n    function Renderer(component) {\n        var _this = _super.call(this, component) || this;\n        // add watcher for width to set max width instead\n        _this.watch(function () { return component.width; }, function (w) {\n            component.style.set({\n                width: w === \"auto\" ? \"auto\" : \"100%\",\n                maxWidth: w === \"auto\" ? \"none\" : w\n            });\n        });\n        return _this;\n    }\n    /** Generate rendered component output */\n    Renderer.prototype.render = function () {\n        // get or create the current output object\n        var out = _super.prototype.render.call(this, true);\n        var component = this.component;\n        // render header block and create wrapper if needed\n        var content = [];\n        if (component.header) {\n            // fix vertical spacing for a more \"native\" look if none set\n            var headerRow = component.header;\n            if (headerRow instanceof Row_Row && !headerRow.verticalSpacing) {\n                unobserved(function () {\n                    headerRow.verticalSpacing = \".65rem\";\n                });\n            }\n            // copy ltr/rtl flow direction if set at component level\n            if (component.flowDirection) {\n                unobserved(function () {\n                    headerRow.flowDirection = component.flowDirection;\n                });\n            }\n            // render header synchronously\n            var out_1 = headerRow.out;\n            var className = DialogContainer_CSS_CLASS + \"_header\";\n            if (out_1 && (!out_1.wrapper || out_1.wrapper.firstChild !== out_1.element ||\n                out_1.wrapper.className !== className)) {\n                var w = out_1.wrapper = main_div(className, out_1.element);\n                w.onselectstart = function (e) { return e.preventDefault(); };\n                w.onmousedown = function (e) { return component.header && component.header.Pressed(e); };\n            }\n            content.push(out_1);\n        }\n        // render content blocks and remove wrappers if needed\n        component.content.forEach(function (c) {\n            // copy ltr/rtl flow direction if set at component level\n            if (c && component.flowDirection) {\n                unobserved(function () {\n                    c.flowDirection = component.flowDirection;\n                });\n            }\n            // render content synchronously\n            var out = c && c.out;\n            if (out)\n                delete out.wrapper;\n            content.push(out);\n        });\n        // render footer block and create wrapper if needed\n        if (component.footer) {\n            // copy ltr/rtl flow direction if set at component level\n            if (component.flowDirection) {\n                unobserved(function () {\n                    component.footer.flowDirection = component.flowDirection;\n                });\n            }\n            // render footer synchronously\n            var out_2 = component.footer.out;\n            var className = DialogContainer_CSS_CLASS + \"_footer\";\n            if (out_2 && (!out_2.wrapper || out_2.wrapper.firstChild !== out_2.element ||\n                out_2.wrapper.className !== className))\n                out_2.wrapper = main_div(className, out_2.element);\n            content.push(out_2);\n        }\n        // add all sub blocks output\n        out.updated = this.context.updateAsync(content, true);\n        return out;\n    };\n    Renderer = Containers_DialogContainer___decorate([\n        mapComponentRenderer(DialogContainer_DialogContainer)\n    ], Renderer);\n    return Renderer;\n}(Container_Renderer));\n\n// Set default animations\nDialogContainer_DialogContainer.APPEAR_ANIMATION = DOMAnimation_DOMAnimation.basic.in.fadeUp.withTiming(200);\nDialogContainer_DialogContainer.DISAPPEAR_ANIMATION = DOMAnimation_DOMAnimation.basic.out.fade.withTiming(200);\n// Add style override for DialogContainer and TopCloseButton\nDialogContainer_DialogContainer.addStyleOverride(Style_Style.withClass(DialogContainer_CSS_CLASS));\nDialogContainer_DialogContainer.TopCloseButton.addStyleOverride(Style_Style.withClass(DialogContainer_CSS_CLASS + \"_topclosebutton\"));\n// Apply style sheet\nStyles_Styles.define(\"UI-Container \" + DialogContainer_CSS_CLASS, {\n    \".~~\": new Style_Style()\n        .addShadowEffect(.75)\n        .set({\n        height: \"auto\",\n        background: observe(function () { return Styles_Styles.color.background; }),\n        color: observe(function () { return Styles_Styles.color.text; }),\n        borderRadius: observe(function () { return Styles_Styles.size.dialogBorderRadius; })\n    }),\n    \".~_header\": {\n        overflow: \"hidden\"\n    },\n    \".~_footer\": {\n        overflow: \"hidden\"\n    },\n    \".~_topclosebutton\": {\n        lineHeight: \"0\"\n    },\n    \".~_topclosebutton.UI-TextButton.UI-Button > button[type]\": {\n        fontSize: \"1.5em\",\n        height: \"auto\",\n        lineHeight: \"1.1rem\",\n        fontFamily: \"initial\",\n        top: \"-.1em\"\n    }\n});\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/Renderers/Containers/DrawerContainer.js\n\n\n\n/** Base class name used for CSS style sheet */\nvar DrawerContainer_CSS_CLASS = \"UI-DrawerContainer\";\n// set default animations\nDrawerContainer.APPEAR_ANIMATION =\n    DOMAnimation_DOMAnimation.basic.in.fadeRight.withTiming(300);\nDrawerContainer.DISAPPEAR_ANIMATION =\n    DOMAnimation_DOMAnimation.basic.out.fadeLeft.withTiming(300);\nOppositeDrawerContainer.APPEAR_ANIMATION =\n    DOMAnimation_DOMAnimation.basic.in.fadeLeft.withTiming(300);\nOppositeDrawerContainer.DISAPPEAR_ANIMATION =\n    DOMAnimation_DOMAnimation.basic.out.fadeRight.withTiming(300);\n// Add style override and apply style sheet\nDrawerContainer.addStyleOverride(Style_Style.withClass(DrawerContainer_CSS_CLASS));\nStyles_Styles.define(\"UI-Container \" + DrawerContainer_CSS_CLASS, {\n    \".~~\": new Style_Style()\n        .addShadowEffect(1)\n        .set({ height: \"100vh\" })\n});\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/Renderers/Containers/LayoutContainer.js\nvar Containers_LayoutContainer___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Containers_LayoutContainer___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n/** Base class name used for CSS style sheet */\nvar LayoutContainer_CSS_CLASS = \"UI-LayoutContainer\";\n/** @internal DOM-specific component renderer */\nvar LayoutContainer_Renderer = (function (_super) {\n    Containers_LayoutContainer___extends(Renderer, _super);\n    /** Instantiate the renderer for given component */\n    function Renderer(component) {\n        var _this = \n        // instantiate container renderer, forget about scrolling\n        _super.call(this, component, true) || this;\n        // create the outer element update context, to be updated with all\n        // containers, and the center wrapper element\n        _this.element.removeChild(_this.element.firstChild);\n        _this.scrollWrapper = main_div(LayoutContainer_CSS_CLASS + \"_scroll\", _this.mainWrapper);\n        _this.outerContext = new UpdateContext_UpdateContext(_this.element);\n        // add watcher for scrollable (overridden)\n        _this.watch(function () { return !!component.scrollable; }, function (scrollable) {\n            // set overflow to scroll or hide overflowing center content\n            _this.scrollWrapper.style.overflow = scrollable ? \"auto\" : \"hidden\";\n        });\n        return _this;\n    }\n    /** Generate rendered component output */\n    Renderer.prototype.render = function () {\n        // get or create the current output object, render main context\n        var out = _super.prototype.render.call(this);\n        var content = [this.scrollWrapper];\n        var component = this.component;\n        var flowDirection = component.flowDirection;\n        var isRTL = flowDirection === \"rtl\";\n        // helper to render and wrap side container\n        function renderSideContainer(c, className, before, above) {\n            // copy ltr/rtl flow direction if set at component level\n            if (c && flowDirection) {\n                unobserved(function () {\n                    c.flowDirection = component.flowDirection;\n                });\n            }\n            // render container synchronously\n            var out = c && c.out;\n            if (out && !(c.hidden)) {\n                if (!out.wrapper || out.wrapper.firstChild !== out.element ||\n                    out.wrapper.className !== className) {\n                    out.wrapper = main_div(className, out.element);\n                    out.wrapper.style.zIndex = PAGE_OPTIONS.baseZIndex\n                        + (above ? 1 : 0);\n                }\n                before ? content.unshift(out) : content.push(out);\n                return out.wrapper;\n            }\n        }\n        // render left gutter container and find its width\n        var leftComponent = isRTL ?\n            component.outsideGutter : component.insideGutter;\n        var leftWrapper = renderSideContainer(leftComponent, LayoutContainer_CSS_CLASS + \"_left\", !isRTL);\n        var leftWidth = leftWrapper && leftComponent.width;\n        leftWidth = leftWidth === \"auto\" ?\n            (isRTL ? LayoutContainer_LayoutContainer.OUTSIDE_GUTTER_WIDTH :\n                LayoutContainer_LayoutContainer.INSIDE_GUTTER_WIDTH) :\n            (leftWidth || \"\");\n        // render right gutter container and find its width\n        var rightComponent = isRTL ?\n            component.insideGutter : component.outsideGutter;\n        var rightWrapper = renderSideContainer(rightComponent, LayoutContainer_CSS_CLASS + \"_right\", isRTL);\n        var rightWidth = rightWrapper && rightComponent.width;\n        rightWidth = rightWidth === \"auto\" ?\n            (isRTL ? LayoutContainer_LayoutContainer.INSIDE_GUTTER_WIDTH :\n                LayoutContainer_LayoutContainer.OUTSIDE_GUTTER_WIDTH) :\n            (rightWidth || \"\");\n        // render header container and find its height\n        var headerWrapper = renderSideContainer(component.header, LayoutContainer_CSS_CLASS + \"_header\", true, true);\n        var headerHeight = headerWrapper && component.header.height;\n        headerHeight = headerHeight === \"auto\" ?\n            LayoutContainer_LayoutContainer.HEADER_HEIGHT : (headerHeight || \"\");\n        // render footer container and find its height\n        var footerWrapper = renderSideContainer(component.footer, LayoutContainer_CSS_CLASS + \"_footer\", false, true);\n        var footerHeight = footerWrapper && component.footer.height;\n        footerHeight = footerHeight === \"auto\" ?\n            LayoutContainer_LayoutContainer.FOOTER_HEIGHT : (footerHeight || \"\");\n        // adjust positions of all wrappers\n        this.scrollWrapper.style.top = headerHeight;\n        this.scrollWrapper.style.bottom = footerHeight;\n        this.scrollWrapper.style.left = leftWidth;\n        this.scrollWrapper.style.right = rightWidth;\n        if (leftWrapper) {\n            leftWrapper.style.top = headerHeight;\n            leftWrapper.style.bottom = footerHeight;\n            leftWrapper.style.width = leftWidth;\n        }\n        if (rightWrapper) {\n            rightWrapper.style.top = headerHeight;\n            rightWrapper.style.bottom = footerHeight;\n            rightWrapper.style.width = rightWidth;\n        }\n        if (headerWrapper) {\n            headerWrapper.style.height = headerHeight;\n        }\n        if (footerWrapper) {\n            footerWrapper.style.height = footerHeight;\n        }\n        // add all sub blocks of output\n        this.outerContext.updateAsync(content, true);\n        return out;\n    };\n    Renderer = Containers_LayoutContainer___decorate([\n        mapComponentRenderer(LayoutContainer_LayoutContainer)\n    ], Renderer);\n    return Renderer;\n}(Container_Renderer));\n\n// Add style override and apply style sheet\nLayoutContainer_LayoutContainer.addStyleOverride(Style_Style.withClass(LayoutContainer_CSS_CLASS));\nStyles_Styles.define(\"UI-Container \" + LayoutContainer_CSS_CLASS, {\n    \".~~\": {\n        display: \"block\"\n    },\n    \".~_scroll\": {\n        position: \"absolute\",\n        top: \"0\", left: \"0\",\n        bottom: \"0\", right: \"0\"\n    },\n    \".~_header\": {\n        position: \"absolute\",\n        top: \"0\", left: \"0\", right: \"0\"\n    },\n    \".~_footer\": {\n        position: \"absolute\",\n        bottom: \"0\", left: \"0\", right: \"0\"\n    },\n    \".~_left\": {\n        position: \"absolute\",\n        top: \"0\", bottom: \"0\", left: \"0\"\n    },\n    \".~_right\": {\n        position: \"absolute\",\n        top: \"0\", bottom: \"0\", right: \"0\"\n    }\n});\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/Renderers/Blocks/Card.js\nvar Blocks_Card___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Blocks_Card___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** Base class name used for CSS style sheet */\nvar Card_CSS_CLASS = \"UI-Card\";\n/** @internal DOM-specific component renderer */\nvar Card_Renderer = (function (_super) {\n    Blocks_Card___extends(Renderer, _super);\n    function Renderer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /** Generate rendered component output */\n    Renderer.prototype.render = function () {\n        // get or create the current output object\n        var out = _super.prototype.render.call(this);\n        var component = this.component;\n        // render header block and create wrapper if needed\n        var content = [];\n        if (component.header) {\n            // copy ltr/rtl flow direction if set at component level\n            if (component.flowDirection) {\n                unobserved(function () {\n                    component.header.flowDirection = component.flowDirection;\n                });\n            }\n            // render header synchronously\n            var out_1 = component.header.out;\n            var className = Card_CSS_CLASS + \"_header panel-heading card-header\";\n            if (out_1 && (!out_1.wrapper || out_1.wrapper.firstChild !== out_1.element ||\n                out_1.wrapper.className !== className))\n                out_1.wrapper = main_div(className, out_1.element);\n            content.push(out_1);\n        }\n        // render content blocks and remove wrappers if needed\n        component.content.forEach(function (c) {\n            // copy ltr/rtl flow direction if set at component level\n            if (c && component.flowDirection) {\n                unobserved(function () {\n                    c.flowDirection = component.flowDirection;\n                });\n            }\n            // render content synchronously\n            var out = c && c.out;\n            if (out)\n                delete out.wrapper;\n            content.push(out);\n        });\n        // render footer block and create wrapper if needed\n        if (component.footer) {\n            // copy ltr/rtl flow direction if set at component level\n            if (component.flowDirection) {\n                unobserved(function () {\n                    component.footer.flowDirection = component.flowDirection;\n                });\n            }\n            // render footer synchronously\n            var out_2 = component.footer.out;\n            var className = Card_CSS_CLASS + \"_footer panel-footer card-footer\";\n            if (out_2 && (!out_2.wrapper || out_2.wrapper.firstChild !== out_2.element ||\n                out_2.wrapper.className !== className))\n                out_2.wrapper = main_div(className, out_2.element);\n            content.push(out_2);\n        }\n        // add all sub blocks output\n        out.updated = this.context.updateAsync(content, true);\n        return out;\n    };\n    Renderer = Blocks_Card___decorate([\n        mapComponentRenderer(Card_Card)\n    ], Renderer);\n    return Renderer;\n}(Block_Renderer));\n\n// Add style override and apply style sheet\nCard_Card.addStyleOverride(Style_Style.withClass(Card_CSS_CLASS + \" panel panel-default card\"));\nStyles_Styles.define(\"UI-Block \" + Card_CSS_CLASS, {\n    \".~~\": {\n        margin: observe(function () { return Styles_Styles.size.controlSpacing; }),\n        padding: \"0\",\n        height: \"auto\",\n        width: \"auto\",\n        overflow: \"hidden\"\n    },\n    \".~_header\": {\n        padding: \"0\",\n        overflow: \"hidden\"\n    },\n    \".~_footer\": {\n        padding: \"0\",\n        overflow: \"hidden\"\n    },\n    // do not add margin to cards used within rows\n    \".UI-Control > .~~\": {\n        margin: \"0\"\n    }\n});\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/Renderers/Blocks/ContainerBlock.js\nvar Blocks_ContainerBlock___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Blocks_ContainerBlock___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n/** Base class name used for CSS style sheet */\nvar ContainerBlock_CSS_CLASS = \"UI-ContainerBlock\";\n/** @internal DOM-specific component renderer */\nvar ContainerBlock_Renderer = (function (_super) {\n    Blocks_ContainerBlock___extends(Renderer, _super);\n    function Renderer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /** Generate rendered component output */\n    Renderer.prototype.render = function () {\n        // get or create the current output object\n        var out = _super.prototype.render.call(this);\n        // add container to output\n        out.updated = this.context.updateAsync([this.component.container]);\n        return out;\n    };\n    Renderer = Blocks_ContainerBlock___decorate([\n        mapComponentRenderer(ContainerBlock_ContainerBlock)\n    ], Renderer);\n    return Renderer;\n}(Block_Renderer));\n\n// Add style override and apply style sheet\nContainerBlock_ContainerBlock.addStyleOverride(Style_Style.withClass(ContainerBlock_CSS_CLASS));\nStyles_Styles.define(\"UI-Block \" + ContainerBlock_CSS_CLASS, {\n    \".~~\": {\n        fontSize: \"0\",\n        lineHeight: \"0\"\n    }\n});\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/Renderers/Blocks/Divider.js\nvar Blocks_Divider___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Blocks_Divider___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** Base class name used for CSS style sheet */\nvar Divider_CSS_CLASS = \"UI-Divider\";\n/** @internal DOM-specific component renderer */\nvar Divider_Renderer = (function (_super) {\n    Blocks_Divider___extends(Renderer, _super);\n    /** Instantiate the renderer for given component */\n    function Renderer(component) {\n        var _this = _super.call(this, component, \"hr\") || this;\n        // add watcher for component style properties\n        _this.watch(function () { return ({\n            borderWidth: \"0 0 \" + (component.thickness || \"1px\"),\n            borderColor: component.color,\n            marginTop: component.margin || \".5rem\",\n            marginBottom: component.margin || \".5rem\",\n            marginLeft: component.flowDirection === \"rtl\" ?\n                component.insetEnd : component.insetStart,\n            marginRight: component.flowDirection === \"rtl\" ?\n                component.insetStart : component.insetEnd\n        }); }, function (styles) {\n            component.style.set(styles);\n        });\n        return _this;\n    }\n    Renderer = Blocks_Divider___decorate([\n        mapComponentRenderer(Divider_Divider)\n    ], Renderer);\n    return Renderer;\n}(Block_Renderer));\n\n// Add style override and apply style sheet\nDivider_Divider.addStyleOverride(Style_Style.withClass(Divider_CSS_CLASS));\nStyles_Styles.define(\"UI-Block \" + Divider_CSS_CLASS, {\n    \".~~\": {\n        boxSizing: \"content-box\",\n        height: \"0\",\n        lineHeight: \"0\",\n        fontSize: \"0\",\n        padding: \"0\", margin: \"0\",\n        borderStyle: \"solid\",\n        borderColor: observe(function () { return Styles_Styles.color.divider; }),\n        borderWidth: \"0\" // set by render method\n    }\n});\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/Renderers/Blocks/List.js\nvar Blocks_List___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Blocks_List___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** Base class names used for CSS style sheet */\nvar List_CSS_CLASS = \"UI-List\";\nvar CSS_CLASS_TREELIST = \"UI-TreeList\";\n/** @internal DOM-specific component renderer */\nvar List_Renderer = (function (_super) {\n    Blocks_List___extends(Renderer, _super);\n    function Renderer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /** Generate rendered component output */\n    Renderer.prototype.render = function () {\n        // get or create the current output object\n        var out = _super.prototype.render.call(this);\n        // add all items and dividers, if any\n        out.updated = this.context.updateAsync(this.component.getChildren(), false, this.component.renderOptions &&\n            this.component.renderOptions.animateListItems);\n        return out;\n    };\n    Renderer = Blocks_List___decorate([\n        mapComponentRenderer(List_List),\n        mapComponentRenderer(TreeList_TreeList)\n    ], Renderer);\n    return Renderer;\n}(Block_Renderer));\n\n// Add style override\nList_List.addStyleOverride(Style_Style.withClass(List_CSS_CLASS));\nTreeList_TreeList.addStyleOverride(Style_Style.withClass(List_CSS_CLASS + \" \" + CSS_CLASS_TREELIST));\nStyles_Styles.define(List_CSS_CLASS, {\n    \".~~ > [selected]\": {\n        background: observe(function () { return Styles_Styles.color.listSelectionBackground; }),\n        color: observe(function () { return Styles_Styles.color.listSelectionText; })\n    },\n    \".~~ > [selected]:focus\": {\n        background: observe(function () { return Styles_Styles.color.listSelectionFocusBackground; }),\n        color: observe(function () { return Styles_Styles.color.listSelectionFocusText; }),\n        outlineWidth: observe(function () { return Styles_Styles.size.listSelectionFocusOutline; })\n    },\n});\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/Renderers/Controls/ControlElement.js\nvar Controls_ControlElement___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Controls_ControlElement___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** Base class name used for CSS style sheet */\nvar ControlElement_CSS_CLASS = \"UI-Control\";\n/** @internal DOM-specific component renderer */\nvar ControlElement_Renderer = (function (_super) {\n    Controls_ControlElement___extends(Renderer, _super);\n    /** Instantiate the renderer for given component */\n    function Renderer(component, tagName) {\n        if (tagName === void 0) { tagName = \"span\"; }\n        var _this = _super.call(this, component) || this;\n        // initialize main DOM element(s)\n        _this.element = document.createElement(tagName);\n        _this.element.id = component.uid;\n        // create the element update context\n        _this.context = new UpdateContext_UpdateContext(_this.element);\n        // add watchers for component properties\n        _this.watch(function () { return applyStyleTo(component.style, _this.element); });\n        _this.watch(function () {\n            // check width AND shrinkwrap properties to set CSS width\n            var w = component.width;\n            if (w === \"auto\")\n                w = \"\";\n            var isPercentage = (w.slice(-1) === \"%\");\n            if (component.shrinkwrap) {\n                // add shrinkwrap class and set width\n                unobserved(function () {\n                    component.style.addClass(\"shrinkwrap\").set({\n                        width: isPercentage && w || \"\",\n                        minWidth: w,\n                        maxWidth: w\n                    });\n                });\n            }\n            else {\n                // remove shrinkwrap class and set width\n                unobserved(function () {\n                    component.style.removeClass(\"shrinkwrap\").set({\n                        width: isPercentage && w || \"\",\n                        minWidth: w,\n                        maxWidth: \"none\"\n                    });\n                });\n            }\n        });\n        _this.watch(function () { return component.wrapText; }, function (wrapText) {\n            // set white-space property (pre-wrap or pre [default])\n            component.style.set({\n                whiteSpace: wrapText ? \"pre-wrap\" : \"\"\n            });\n        });\n        return _this;\n    }\n    /** Generate rendered component output */\n    Renderer.prototype.render = function () {\n        // get or create the current output object\n        var out = _super.prototype.render.call(this) || new ComponentRenderer_ComponentRenderer.Output(this.component, this.element, this.context);\n        // set or update flow direction mode on context and element\n        this.context.flowDirection = this.component.flowDirection;\n        if (this.component.flowDirection) {\n            this.element.dir = this.component.flowDirection;\n        }\n        return out;\n    };\n    Renderer = Controls_ControlElement___decorate([\n        mapComponentRenderer(ControlElement_ControlElement)\n    ], Renderer);\n    return Renderer;\n}(ComponentRenderer_ComponentRenderer));\n\n// Add logic for focusing and blurring control elements\ninject(ControlElement_ControlElement, {\n    \"@focusLiveComponent\": function () {\n        focus(this);\n    },\n    \"@blurLiveComponent\": function () {\n        blur(this);\n    }\n});\n// Add style override and apply style sheet\nControlElement_ControlElement.addStyleOverride(Style_Style.withClass(ControlElement_CSS_CLASS));\nStyles_Styles.define(\"UI-Control \" + ControlElement_CSS_CLASS, {\n    \".~~\": {\n        position: \"relative\",\n        display: \"table-cell\",\n        verticalAlign: \"middle\",\n        borderSpacing: \"initial\",\n        margin: \"0\",\n        padding: \"0\",\n        lineHeight: \"normal\",\n        height: \"100%\",\n        whiteSpace: \"pre\"\n    },\n    \".~~.shrinkwrap\": {\n        width: \"1px\",\n        maxWidth: \"none\"\n    }\n});\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/Renderers/Controls/Label.js\nvar Controls_Label___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Controls_Label___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** Base class name used for CSS style sheet */\nvar Label_CSS_CLASS = \"UI-Label\";\n/** @internal DOM-specific component renderer */\nvar Label_Renderer = (function (_super) {\n    Controls_Label___extends(Renderer, _super);\n    function Renderer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Renderer_1 = Renderer;\n    /** Helper method to replace contents of given node with icon, label, and badge, if any; returns node itself */\n    Renderer.renderInto = function (node, icon, remGutter, label, badge, append, iconRight, smallBefore, smallAfter) {\n        if (!append)\n            while (node.firstChild)\n                node.removeChild(node.firstChild);\n        var beforeLabelText = smallBefore !== undefined && String(smallBefore);\n        if (beforeLabelText) {\n            var beforeLabelElement = document.createElement(\"small\");\n            beforeLabelElement.textContent = beforeLabelText;\n            node.appendChild(beforeLabelElement);\n        }\n        if (icon || remGutter > 0) {\n            var iconElement = document.createElement(\"icon\");\n            if (remGutter >= 0) {\n                iconElement.style.display = \"inline-block\";\n                iconElement.style.textAlign = \"center\";\n                iconElement.style.minWidth = remGutter + \"rem\";\n            }\n            if (icon) {\n                var content = \"\";\n                icon = icon.replace(/\\s+([\\w-]+)\\s*=\\s*(\\\"[^\\\"]*\\\"|[^\\s]+)/g, function (s, prop, val) {\n                    prop = prop.replace(/-\\w/g, function (s) { return s[1].toUpperCase(); });\n                    iconElement.style[prop] = (val[0] === '\"') ?\n                        JSON.parse(val) : val;\n                    return \"\";\n                })\n                    .replace(/\\:(?:\\\"[^\\\"]*\\\"|[^\\s]+)/, function (s) {\n                    s = s.slice(1);\n                    content = (s[0] === '\"') ? JSON.parse(s) : s;\n                    return \"\";\n                });\n                var prefix = icon.split(\"-\", 1)[0];\n                if (prefix !== icon)\n                    icon = prefix + \" \" + icon;\n                iconElement.className = icon;\n                iconElement.textContent = content;\n            }\n            node.appendChild(iconElement);\n        }\n        var labelText = label !== undefined && String(label);\n        if (labelText) {\n            if (icon && !(remGutter > 0))\n                labelText = \" \" + labelText;\n            var labelElement = document.createElement(\"span\");\n            labelElement.textContent = labelText;\n            node.appendChild(labelElement);\n        }\n        var badgeText = badge !== undefined && String(badge);\n        if (badgeText) {\n            var badgeElement = document.createElement(\"badge\");\n            badgeElement.className = \"badge badge-default tag tag-default\";\n            badgeElement.style.marginLeft = \".5rem\";\n            badgeElement.textContent = badgeText;\n            node.appendChild(badgeElement);\n        }\n        var afterLabelText = smallAfter !== undefined && String(smallAfter);\n        if (afterLabelText) {\n            var afterLabelElement = document.createElement(\"small\");\n            afterLabelElement.textContent = afterLabelText;\n            node.appendChild(afterLabelElement);\n        }\n        return node;\n    };\n    /** Generate rendered component output */\n    Renderer.prototype.render = function () {\n        // get or create the current output object\n        var out = _super.prototype.render.call(this);\n        var component = this.component;\n        // render text into DOM element\n        Renderer_1.renderInto(this.element, component.icon, component.remGutter, component.text, component.badge, false, false, component.textBefore, component.textAfter);\n        // set tooltip text\n        if (component.tooltipText !== undefined)\n            this.element.title = component.tooltipText;\n        return out;\n    };\n    Renderer = Renderer_1 = Controls_Label___decorate([\n        mapComponentRenderer(Label_Label)\n    ], Renderer);\n    return Renderer;\n    var Renderer_1;\n}(ControlElement_Renderer));\n\n/** @internal */\nvar Label_ParagraphRenderer = (function (_super) {\n    Controls_Label___extends(ParagraphRenderer, _super);\n    function ParagraphRenderer(component) {\n        return _super.call(this, component, \"p\") || this;\n    }\n    ParagraphRenderer = Controls_Label___decorate([\n        mapComponentRenderer(Paragraph)\n    ], ParagraphRenderer);\n    return ParagraphRenderer;\n}(Label_Renderer));\n\n/** @internal */\nvar Label_H1Renderer = (function (_super) {\n    Controls_Label___extends(H1Renderer, _super);\n    function H1Renderer(component) {\n        return _super.call(this, component, \"h1\") || this;\n    }\n    H1Renderer = Controls_Label___decorate([\n        mapComponentRenderer(Heading1)\n    ], H1Renderer);\n    return H1Renderer;\n}(Label_Renderer));\n\n/** @internal */\nvar Label_H2Renderer = (function (_super) {\n    Controls_Label___extends(H2Renderer, _super);\n    function H2Renderer(component) {\n        return _super.call(this, component, \"h2\") || this;\n    }\n    H2Renderer = Controls_Label___decorate([\n        mapComponentRenderer(Heading2)\n    ], H2Renderer);\n    return H2Renderer;\n}(Label_Renderer));\n\n/** @internal */\nvar Label_H3Renderer = (function (_super) {\n    Controls_Label___extends(H3Renderer, _super);\n    function H3Renderer(component) {\n        return _super.call(this, component, \"h3\") || this;\n    }\n    H3Renderer = Controls_Label___decorate([\n        mapComponentRenderer(Heading3)\n    ], H3Renderer);\n    return H3Renderer;\n}(Label_Renderer));\n\n/** @internal */\nvar Label_H4Renderer = (function (_super) {\n    Controls_Label___extends(H4Renderer, _super);\n    function H4Renderer(component) {\n        return _super.call(this, component, \"h4\") || this;\n    }\n    H4Renderer = Controls_Label___decorate([\n        mapComponentRenderer(Heading4)\n    ], H4Renderer);\n    return H4Renderer;\n}(Label_Renderer));\n\n/** @internal */\nvar Label_H5Renderer = (function (_super) {\n    Controls_Label___extends(H5Renderer, _super);\n    function H5Renderer(component) {\n        return _super.call(this, component, \"h5\") || this;\n    }\n    H5Renderer = Controls_Label___decorate([\n        mapComponentRenderer(Heading5)\n    ], H5Renderer);\n    return H5Renderer;\n}(Label_Renderer));\n\n/** @internal */\nvar Label_H6Renderer = (function (_super) {\n    Controls_Label___extends(H6Renderer, _super);\n    function H6Renderer(component) {\n        return _super.call(this, component, \"h6\") || this;\n    }\n    H6Renderer = Controls_Label___decorate([\n        mapComponentRenderer(Heading6)\n    ], H6Renderer);\n    return H6Renderer;\n}(Label_Renderer));\n\n// Add style override and apply style sheet\nLabel_Label.addStyleOverride(Style_Style.withClass(Label_CSS_CLASS));\nWideLabel.addStyleOverride(Style_Style.withClass(Label_CSS_CLASS + \" wide\")\n    .set(\"maxWidth\", \"1px\"));\nStyles_Styles.define(\"UI-Control \" + Label_CSS_CLASS, {\n    \".~~\": {\n        cursor: \"inherit\",\n        overflow: \"hidden\"\n    },\n    \".~~.wide\": {\n        textOverflow: \"ellipsis\"\n    },\n    \".~~ small\": {\n        display: \"block\",\n        color: observe(function () { return Styles_Styles.color.textFaded; })\n    },\n    \"p.~~\": {\n        lineHeight: observe(function () { return Styles_Styles.size.paragraphLineHeight; })\n    }\n});\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/Renderers/Blocks/NavList.js\nvar Blocks_NavList___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Blocks_NavList___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** Base class name used for CSS style sheet */\nvar NavList_CSS_CLASS = \"UI-NavList\";\n/** @internal DOM-specific component renderer */\nvar NavList_Renderer = (function (_super) {\n    Blocks_NavList___extends(Renderer, _super);\n    /** Instantiate the renderer for given component */\n    function Renderer(component) {\n        var _this = _super.call(this, component, \"nav\") || this;\n        // create the UL wrapper\n        _this._ul = document.createElement(\"ul\");\n        return _this;\n    }\n    /** Generate rendered component output */\n    Renderer.prototype.render = function () {\n        // get or create the current output object\n        var out = _super.prototype.render.call(this);\n        var component = this.component;\n        // set UL class name depending on nav type\n        var ul = this._ul;\n        var className = \"nav \";\n        if (component.justified)\n            className += \"nav-justified \";\n        switch (component.type) {\n            case NavList_NavList.Type.Tabs:\n                className += \"nav-tabs\";\n                break;\n            case NavList_NavList.Type.Pills:\n                className += \"nav-pills\";\n                break;\n            case NavList_NavList.Type.StackedPills:\n                className += \"nav-pills nav-stacked\";\n                break;\n        }\n        ul.className = className;\n        // create or reuse LI nodes\n        var cur = ul.firstChild;\n        var selectedIndex = component.selectedIndex;\n        component.navItems.forEach(function (item, index) {\n            if (!item)\n                return;\n            if (!cur) {\n                var li = document.createElement(\"li\");\n                var a = document.createElement(\"a\");\n                a.href = \"#\";\n                li.appendChild(a);\n                li.onclick = function (event) {\n                    component.activate(index);\n                    event.preventDefault();\n                    return false;\n                };\n                ul.appendChild(cur = li);\n            }\n            Label_Renderer.renderInto(cur.firstChild, item.icon, component.remGutter, item.label, item.badge);\n            var isSelected = (index === selectedIndex);\n            cur.className = isSelected ?\n                \"nav-item active\" : \"nav-item\";\n            cur.firstChild.className = isSelected ?\n                \"nav-link active\" : \"nav-link\";\n            cur = cur.nextSibling;\n        });\n        // remove additional existing nodes\n        while (cur) {\n            var next = cur.nextSibling;\n            ul.removeChild(cur);\n            cur = next;\n        }\n        // update with UL, and container block if needed\n        out.updated = this.context.updateAsync([ul].concat(component.getChildren()));\n        return out;\n    };\n    Renderer = Blocks_NavList___decorate([\n        mapComponentRenderer(NavList_NavList)\n    ], Renderer);\n    return Renderer;\n}(Block_Renderer));\n\n// inject simple URL-based activation functions\ninject(NavList_NavList.Activation, {\n    activate: function (target) {\n        // set location to given target directly (URL, path or hash)\n        if (typeof target === \"string\")\n            window.location.href = target;\n    },\n    isActive: function (target) {\n        if (typeof target === \"string\") {\n            target = target.replace(/\\/$/, \"\");\n            if (target[0] !== \"#\") {\n                // compare target to partial path name (without host and hash)\n                var path = String(document.location.pathname)\n                    .replace(/#.*/, \"\");\n                if (path === target ||\n                    path.slice(0, target.length + 1) === target + \"/\")\n                    return true;\n            }\n            else {\n                // compare target to partial hash\n                target = target.slice(1);\n                var hash = String(document.location.hash || \"\")\n                    .replace(/^#/, \"\");\n                if (hash === target ||\n                    hash.slice(0, target.length + 1) === target + \"/\")\n                    return true;\n            }\n        }\n        return false;\n    }\n});\n// Add style override\nNavList_NavList.addStyleOverride(Style_Style.withClass(NavList_CSS_CLASS));\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/Renderers/Blocks/Row.js\nvar Blocks_Row___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Blocks_Row___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n/** Base class name used for CSS style sheet */\nvar Row_CSS_CLASS = \"UI-Row\";\n/** @internal DOM-specific component renderer */\nvar Row_Renderer = (function (_super) {\n    Blocks_Row___extends(Renderer, _super);\n    /** Instantiate the renderer for given component */\n    function Renderer(component) {\n        var _this = _super.call(this, component) || this;\n        // initialize main DOM element\n        var wrapper = _this.wrapper = main_div(Row_CSS_CLASS + \"_wrapper\");\n        _this.element.appendChild(wrapper);\n        _this.context.root = wrapper;\n        // add watcher to detect if all child components are shrinkwrapped\n        _this.watch(function () {\n            return component.content.every(function (c) { return !c || c.hidden ||\n                (c.shrinkwrap && !(c.width && c.width.slice(-1) === \"%\")); });\n        }, function (allShrunk) {\n            // adjust width to compress around shrinkwrapped components\n            wrapper.style.width = allShrunk ? \"auto\" : \"100%\";\n        });\n        // add watcher for horizontal alignment\n        _this.watch(function () {\n            var horzAlign = component.horzAlign;\n            if (component.flowDirection === \"rtl\") {\n                if (horzAlign === \"start\")\n                    return \"right\";\n                if (horzAlign === \"end\")\n                    return \"left\";\n            }\n            else if (horzAlign === \"start\")\n                return \"\";\n            else if (horzAlign === \"end\")\n                return \"right\";\n            return horzAlign;\n        }, function (horzAlign) {\n            switch (horzAlign) {\n                case \"center\":\n                    _this.wrapper.style.marginLeft = \"auto\";\n                    _this.wrapper.style.marginRight = \"auto\";\n                    break;\n                case \"right\":\n                    _this.wrapper.style.marginLeft = \"auto\";\n                    _this.wrapper.style.marginRight = \"0\";\n                    break;\n                case \"left\":\n                    _this.wrapper.style.marginLeft = \"0\";\n                    _this.wrapper.style.marginRight = \"auto\";\n                    break;\n                default:\n                    _this.wrapper.style.marginLeft = \"\";\n                    _this.wrapper.style.marginRight = \"\";\n                    break;\n            }\n        });\n        // add watchers for height and spacing\n        var heightIsSet = false;\n        _this.watch(function () {\n            var spacing = component.spacing || Styles_Styles.size.controlSpacing;\n            _this.wrapper.style.borderSpacing = spacing + \" 0\";\n            var h = component.height;\n            if (!h || h === \"auto\") {\n                var space = (component.verticalSpacing || spacing);\n                _this.wrapper.style.marginTop = space;\n                _this.wrapper.style.marginBottom = space;\n                return undefined;\n            }\n            else {\n                _this.wrapper.style.marginTop = \"0\";\n                _this.wrapper.style.marginBottom = \"0\";\n                _this.wrapper.style.height = h;\n                return h;\n            }\n        }, function (h) {\n            if (h) {\n                heightIsSet = true;\n                component.style.set({\n                    maxHeight: h,\n                    overflow: \"hidden\"\n                });\n            }\n            else if (heightIsSet) {\n                heightIsSet = false;\n                component.style.set({\n                    maxHeight: \"\",\n                    overflow: \"\"\n                });\n            }\n        });\n        return _this;\n    }\n    /** Generate rendered component output */\n    Renderer.prototype.render = function () {\n        // get or create the current output object\n        var out = _super.prototype.render.call(this);\n        // add all components\n        out.updated = this.context.updateAsync(this.component.content);\n        return out;\n    };\n    Renderer = Blocks_Row___decorate([\n        mapComponentRenderer(Row_Row)\n    ], Renderer);\n    return Renderer;\n}(Block_Renderer));\n\n// Add style override(s) and apply style sheet\nRow_Row.addStyleOverride(Style_Style.withClass(Row_CSS_CLASS));\nStyles_Styles.define(\"UI-Block \" + Row_CSS_CLASS, {\n    \".~~\": {\n        lineHeight: \"0\",\n        maxHeight: \"none\",\n        overflow: \"visible\"\n    },\n    \".~_wrapper\": {\n        display: \"table\",\n        verticalAlign: \"middle\"\n    }\n});\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/Renderers/Blocks/Table.js\nvar Blocks_Table___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Blocks_Table___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** Base class name used for CSS style sheet */\nvar Table_CSS_CLASS = \"UI-Table\";\n/** @internal DOM-specific component renderer */\nvar Table_Renderer = (function (_super) {\n    Blocks_Table___extends(Renderer, _super);\n    /** Instantiate the renderer for given component */\n    function Renderer(component) {\n        var _this = _super.call(this, component, \"table\") || this;\n        // create main DOM elements\n        _this.thead = document.createElement(\"thead\");\n        _this.tbody = document.createElement(\"tbody\");\n        _this.element.appendChild(_this.tbody);\n        _this.context.root = _this.tbody;\n        return _this;\n    }\n    /** Generate rendered component output */\n    Renderer.prototype.render = function () {\n        // get or create the current output object\n        var out = _super.prototype.render.call(this);\n        var component = this.component;\n        // remove (old) header element first\n        while (this.element.firstChild !== this.tbody)\n            this.element.removeChild(this.element.firstChild);\n        // add header if needed (just render synchronously)\n        if (component.header && component.header.columns.length &&\n            component.rows.length) {\n            // copy ltr/rtl flow direction if set at component level\n            if (component.header && component.flowDirection) {\n                unobserved(function () {\n                    component.header.flowDirection = component.flowDirection;\n                });\n            }\n            var headerOut = component.header && component.header.out;\n            if (headerOut && headerOut.element) {\n                var theadTR = headerOut.element;\n                this.thead.appendChild(theadTR);\n                while (theadTR.previousSibling)\n                    this.thead.removeChild(theadTR.previousSibling);\n                this.element.insertBefore(this.thead, this.tbody);\n            }\n        }\n        // set row index on rendered rows\n        var rows = unobserved(function () {\n            return component.rows.map(function (r, i) { return r && (r.rowIndex = i, r); });\n        });\n        // add all table rows, if any\n        out.updated = this.context.updateAsync(rows, false, this.component.renderOptions &&\n            this.component.renderOptions.animateListItems);\n        return out;\n    };\n    Renderer = Blocks_Table___decorate([\n        mapComponentRenderer(Table_Table)\n    ], Renderer);\n    return Renderer;\n}(Block_Renderer));\n\n// Add style override and apply style sheet\nTable_Table.addStyleOverride(Style_Style.withClass(Table_CSS_CLASS + \" table\"));\nStyles_Styles.define(\"UI-Block \" + Table_CSS_CLASS, {\n    \".~~\": {\n        display: \"table\",\n        margin: \"0\",\n        borderSpacing: \"initial\"\n    }\n});\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/Renderers/Blocks/TableRow.js\nvar Blocks_TableRow___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Blocks_TableRow___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** Base class name used for CSS style sheet */\nvar TableRow_CSS_CLASS = \"UI-TableRow\";\n/** @internal DOM-specific component renderer */\nvar TableRow_Renderer = (function (_super) {\n    Blocks_TableRow___extends(Renderer, _super);\n    /** Instantiate the renderer for given component */\n    function Renderer(component) {\n        return _super.call(this, component, \"tr\") || this;\n    }\n    /** Generate rendered component output */\n    Renderer.prototype.render = function () {\n        // get or create the current output object\n        var out = _super.prototype.render.call(this);\n        var component = this.component;\n        // add all columns (using renderer wrappers), if any\n        var columns = [];\n        var isHeader = (component instanceof TableRow_TableHeader);\n        component.columns.forEach(function (col, i) {\n            var cell;\n            // check column content type: component or scalar\n            if (col instanceof Component_Component) {\n                // copy ltr/rtl flow direction if set at component level\n                if (component.flowDirection) {\n                    unobserved(function () {\n                        col.flowDirection = component.flowDirection;\n                    });\n                }\n                // render component synchronously, check wrapper\n                var out = col.out;\n                if (!out) {\n                    columns.push(undefined);\n                    return;\n                }\n                cell = out.wrapper;\n                var nodeName = String(cell && cell.nodeName).toLowerCase();\n                if (isHeader ? (nodeName !== \"td\") : (nodeName !== \"th\")) {\n                    // create (double) wrapper around component\n                    cell = document.createElement(isHeader ? \"th\" : \"td\");\n                    cell.style.verticalAlign = \"baseline\";\n                    cell.style.lineHeight = \"normal\";\n                    var div = document.createElement(\"div\");\n                    div.style.display = \"inline-block\";\n                    div.style.width = \"100%\";\n                    div.appendChild(out.element);\n                    cell.appendChild(div);\n                    out.wrapper = cell;\n                }\n                // add column output (with wrapper) to content list\n                columns.push(out);\n            }\n            else {\n                // create cell with text content\n                cell = document.createElement(isHeader ? \"th\" : \"td\");\n                cell.textContent = (col || col === 0) ? String(col) : \"\";\n                cell.style.whiteSpace = \"pre-wrap\";\n                // add cell element itself to content list\n                columns.push(cell);\n            }\n            // apply additional styles\n            if (component.styles[i]) {\n                var style = component.styles[i];\n                applyStyleTo((style instanceof Style_Style) ?\n                    style : new Style_Style(style), cell);\n            }\n            if (component.widths[i]) {\n                cell.style.width = component.widths[i];\n            }\n        });\n        // update TR content\n        out.updated = this.context.updateAsync(columns, true);\n        return out;\n    };\n    Renderer = Blocks_TableRow___decorate([\n        mapComponentRenderer(TableRow_TableRow)\n    ], Renderer);\n    return Renderer;\n}(Block_Renderer));\n\n// Add style override and apply style sheet\nTableRow_TableRow.addStyleOverride(Style_Style.withClass(TableRow_CSS_CLASS));\nStyles_Styles.define(\"UI-Block \" + TableRow_CSS_CLASS, {\n    \".~~\": {\n        display: \"table-row\",\n        cursor: \"inherit\"\n    }\n});\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/Renderers/Controls/BlockControl.js\nvar Controls_BlockControl___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Controls_BlockControl___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n/** @internal DOM-specific component renderer */\nvar BlockControl_Renderer = (function (_super) {\n    Controls_BlockControl___extends(Renderer, _super);\n    function Renderer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /** Generate rendered component output */\n    Renderer.prototype.render = function () {\n        // get or create the current output object\n        var out = _super.prototype.render.call(this);\n        // update with current block component\n        out.updated = this.context.updateAsync([this.component.block]);\n        return out;\n    };\n    Renderer = Controls_BlockControl___decorate([\n        mapComponentRenderer(BlockControl_BlockControl)\n    ], Renderer);\n    return Renderer;\n}(ControlElement_Renderer));\n\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/Renderers/Controls/Button.js\nvar Controls_Button___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Controls_Button___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n/** Base class name used for CSS style sheet */\nvar Button_CSS_CLASS = \"UI-Button\";\n/** Overrides for predefined button styles */\nvar linkBtnOverride = Style_Style.withClass(\"btn-link\")\n    .removeClass(\"btn-secondary\", \"btn-default\");\nvar textBtnOverride = Style_Style.withClass(\"btn-text-only\")\n    .removeClass(\"btn-secondary\", \"btn-default\");\n/** @internal DOM-specific component renderer */\nvar Button_Renderer = (function (_super) {\n    Controls_Button___extends(Renderer, _super);\n    /** Instantiate the renderer for given component */\n    function Renderer(component) {\n        var _this = _super.call(this, component) || this;\n        if (component instanceof LinkButton) {\n            // create link element\n            var a = _this.button = document.createElement(\"a\");\n            a.href = \"#\";\n            a.onclick = function (e) { return e.preventDefault(); };\n            _this.element.appendChild(a);\n            _this.watch(function () { return component.target; }, function (target) {\n                a.href = (typeof target === \"string\") ? target : \"#\";\n            });\n        }\n        else {\n            // create button element\n            var button = _this.button = document.createElement(\"button\");\n            button.type = \"button\";\n            _this.element.appendChild(button);\n            _this.watch(function () { return component.disabled; }, function (disabled) {\n                button.disabled = disabled;\n            });\n        }\n        // override btn styles\n        component.style_button.addClass(\"btn\");\n        if (component instanceof LinkButton)\n            component.style_button.override(linkBtnOverride);\n        if (component instanceof TextButton)\n            component.style_button.override(textBtnOverride);\n        // add watchers for component properties\n        _this.watch(function () { return applyStyleTo(component.style_button, _this.button); });\n        _this.watch(function () { return component.primary; }, function (primary) {\n            if (primary) {\n                component.style_button.addClass(\"btn-primary\");\n                component.style_button.removeClass(\"btn-secondary\", \"btn-default\");\n            }\n            else {\n                component.style_button.removeClass(\"btn-primary\");\n                component.style_button.addClass(\"btn-secondary\", \"btn-default\");\n            }\n        });\n        _this.watch(function () { return component.selected; }, function (selected) {\n            if (selected)\n                component.style_button.addClass(\"active\");\n            else\n                component.style_button.removeClass(\"active\");\n        });\n        return _this;\n    }\n    /** Generate rendered component output */\n    Renderer.prototype.render = function () {\n        // get or create the current output object\n        var out = _super.prototype.render.call(this);\n        out.liveElement = this.button;\n        var component = this.component;\n        // render text into DOM element\n        Label_Renderer.renderInto(this.button, component.icon, component.icon ? component.remGutter : 0, component.label, component.badge);\n        if (component.iconAfter) {\n            // also append iconAfter\n            Label_Renderer.renderInto(this.button, component.iconAfter, component.remGutter, \"\", \"\", true, true);\n        }\n        // set tooltip text\n        if (component.tooltipText !== undefined)\n            this.button.title = component.tooltipText;\n        return out;\n    };\n    Renderer = Controls_Button___decorate([\n        mapComponentRenderer(Button_Button)\n    ], Renderer);\n    return Renderer;\n}(ControlElement_Renderer));\n\n// inject simple URL-based activation function\ninject(Button_Button.Activation, {\n    activate: function (target) {\n        // set location to given target directly (URL, path or hash)\n        if (typeof target === \"string\")\n            window.location.href = target;\n    }\n});\n// Add style override and apply style sheet\nButton_Button.addStyleOverride(Style_Style.withClass(Button_CSS_CLASS));\nPrimaryButton.addStyleOverride(Style_Style.withClass(Button_CSS_CLASS + \" UI-PrimaryButton\"));\nButton_ToggleButton.addStyleOverride(Style_Style.withClass(Button_CSS_CLASS + \" UI-ToggleButton\"));\nLinkButton.addStyleOverride(Style_Style.withClass(Button_CSS_CLASS + \" UI-LinkButton\"));\nTextButton.addStyleOverride(Style_Style.withClass(Button_CSS_CLASS + \" UI-TextButton\"));\nRoundButton.addStyleOverride(Style_Style.withClass(Button_CSS_CLASS + \" UI-RoundButton\"));\nStyles_Styles.define(\"UI-Control \" + Button_CSS_CLASS, {\n    \".~~\": {\n        width: \"100%\"\n    },\n    \".~~ > button\": {\n        width: \"100%\",\n        whiteSpace: \"pre\"\n    },\n    \".~~.UI-TextButton > button\": {\n        border: \"0\",\n        boxShadow: \"none\",\n        outline: \"0\",\n        background: \"transparent\",\n        padding: \"0\",\n        margin: \"0\",\n        width: \"auto\",\n        minWidth: \"0\",\n        fontSize: \"inherit\",\n        fontWeight: \"inherit\",\n        fontFamily: \"inherit\",\n        fontStyle: \"inherit\",\n        height: \"auto\",\n        lineHeight: \"1em\",\n        verticalAlign: \"baseline\",\n        color: \"inherit\"\n    },\n    \".~~.UI-RoundButton > button\": {\n        padding: \"0\",\n        border: \"0\",\n        outline: \"0\",\n        borderRadius: \"50%\",\n        boxShadow: \"none\",\n        overflow: \"hidden\",\n        minWidth: \"2.2em\",\n        maxWidth: \"2.2em\",\n        height: \"2.2em\"\n    }\n});\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/Renderers/Controls/ButtonGroup.js\nvar Controls_ButtonGroup___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Controls_ButtonGroup___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n/** Base class name used for CSS style sheet */\nvar ButtonGroup_CSS_CLASS = \"UI-ButtonGroup\";\n/** @internal DOM-specific component renderer */\nvar ButtonGroup_Renderer = (function (_super) {\n    Controls_ButtonGroup___extends(Renderer, _super);\n    /** Instantiate the renderer for given component */\n    function Renderer(component) {\n        var _this = _super.call(this, component) || this;\n        _this.watch(function () { return component.vertical; }, function (vertical) {\n            // set appropriate class name\n            if (vertical)\n                component.style.removeClass(\"btn-group\")\n                    .addClass(\"btn-group-vertical\");\n            else\n                component.style.removeClass(\"btn-group-vertical\")\n                    .addClass(\"btn-group\");\n        });\n        return _this;\n    }\n    /** Generate rendered component output */\n    Renderer.prototype.render = function () {\n        // get or create the current output object\n        var out = _super.prototype.render.call(this);\n        var component = this.component;\n        // add all button elements\n        var elements = component.buttons.map(function (button) {\n            var buttonOut = button && button.out;\n            return buttonOut && buttonOut.liveElement;\n        });\n        out.updated = this.context.updateAsync(elements);\n        return out;\n    };\n    Renderer = Controls_ButtonGroup___decorate([\n        mapComponentRenderer(ButtonGroup_ButtonGroup)\n    ], Renderer);\n    return Renderer;\n}(ControlElement_Renderer));\n\n// Add style override and apply style sheet\nButtonGroup_ButtonGroup.addStyleOverride(Style_Style.withClass(ButtonGroup_CSS_CLASS));\nStyles_Styles.define(\"UI-Control \" + ButtonGroup_CSS_CLASS, {\n    \".~~ button\": {\n        float: \"none\"\n    }\n});\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/Renderers/Controls/ContainerControl.js\nvar Controls_ContainerControl___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Controls_ContainerControl___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n/** @internal DOM-specific component renderer */\nvar ContainerControl_Renderer = (function (_super) {\n    Controls_ContainerControl___extends(Renderer, _super);\n    /** Instantiate the renderer for given component */\n    function Renderer(component) {\n        var _this = _super.call(this, component) || this;\n        // override line-height for this element\n        component.style.set({ lineHeight: \"0\" });\n        return _this;\n    }\n    /** Generate rendered component output */\n    Renderer.prototype.render = function () {\n        // get or create the current output object\n        var out = _super.prototype.render.call(this);\n        // update with current container component\n        out.updated = this.context.updateAsync([this.component.container]);\n        return out;\n    };\n    Renderer = Controls_ContainerControl___decorate([\n        mapComponentRenderer(ContainerControl_ContainerControl)\n    ], Renderer);\n    return Renderer;\n}(ControlElement_Renderer));\n\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/Renderers/Controls/ControlStack.js\nvar Controls_ControlStack___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Controls_ControlStack___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** Base class name used for CSS style sheet */\nvar ControlStack_CSS_CLASS = \"UI-ControlStack\";\n/** @internal DOM-specific component renderer */\nvar ControlStack_Renderer = (function (_super) {\n    Controls_ControlStack___extends(Renderer, _super);\n    /** Instantiate the renderer for given component */\n    function Renderer(component) {\n        var _this = _super.call(this, component) || this;\n        // add a watcher for content alignment\n        _this.watch(function () { return component.horzAlign; }, function (align) {\n            component.style.set(\"textAlign\", align || \"\");\n        });\n        return _this;\n    }\n    /** Generate rendered component output */\n    Renderer.prototype.render = function () {\n        // get or create the current output object\n        var out = _super.prototype.render.call(this);\n        var component = this.component;\n        // add all controls (using renderer wrappers), if any\n        var content = [];\n        component.content.forEach(function (c) {\n            // add spacers in between wrapper tables to stack them up\n            if (content.length) {\n                var spacer = main_div(ControlStack_CSS_CLASS + \"_spacer\");\n                spacer.style.height =\n                    (component.spacing || Styles_Styles.size.controlSpacing);\n                content.push(spacer);\n            }\n            // copy ltr/rtl flow direction if set at component level\n            if (c && component.flowDirection) {\n                unobserved(function () {\n                    c.flowDirection = component.flowDirection;\n                });\n            }\n            // add wrapper tables (inline) for all controls\n            var out = c && c.out;\n            content.push(out);\n            if (out) {\n                var wrapper = out.wrapper;\n                if (!wrapper || wrapper.className !== ControlStack_CSS_CLASS + \"_wrapper\") {\n                    wrapper = main_div(ControlStack_CSS_CLASS + \"_wrapper\", out.element);\n                    out.wrapper = wrapper;\n                }\n                // shrink table itself if component is shrinkwrapped\n                wrapper.style.width = c.shrinkwrap ? \"auto\" : \"\";\n            }\n        });\n        // update stack control element content\n        out.updated = this.context.updateAsync(content, true);\n        return out;\n    };\n    Renderer = Controls_ControlStack___decorate([\n        mapComponentRenderer(ControlStack_ControlStack)\n    ], Renderer);\n    return Renderer;\n}(ControlElement_Renderer));\n\n// Add style override and apply style sheet\nControlStack_ControlStack.addStyleOverride(Style_Style.withClass(ControlStack_CSS_CLASS));\nStyles_Styles.define(\"UI-Control \" + ControlStack_CSS_CLASS, {\n    \".~~\": {\n        lineHeight: \"0\"\n    },\n    \".~_wrapper\": {\n        display: \"inline-table\",\n        tableLayout: \"fixed\",\n        borderSpacing: \"0\",\n        width: \"100%\"\n    }\n});\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/Renderers/Controls/Icon.js\nvar Controls_Icon___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Controls_Icon___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** Base class name used for CSS style sheet */\nvar Icon_CSS_CLASS = \"UI-Icon\";\n/** @internal DOM-specific component renderer */\nvar Icon_Renderer = (function (_super) {\n    Controls_Icon___extends(Renderer, _super);\n    function Renderer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /** Generate rendered component output */\n    Renderer.prototype.render = function () {\n        // get or create the current output object\n        var out = _super.prototype.render.call(this);\n        var component = this.component;\n        // render text into DOM element\n        Label_Renderer.renderInto(this.element, component.icon);\n        // set tooltip text\n        if (component.tooltipText !== undefined)\n            this.element.title = component.tooltipText;\n        return out;\n    };\n    Renderer = Controls_Icon___decorate([\n        mapComponentRenderer(Icon_Icon)\n    ], Renderer);\n    return Renderer;\n}(ControlElement_Renderer));\n\n// Add style override and apply style sheet\nIcon_Icon.addStyleOverride(Style_Style.withClass(Icon_CSS_CLASS));\nStyles_Styles.define(\"UI-Control \" + Icon_CSS_CLASS, {\n    \".~~\": {\n        cursor: \"inherit\",\n        textAlign: \"center\",\n        lineHeight: \"1em\"\n    }\n});\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/Renderers/Controls/Image.js\nvar Controls_Image___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Controls_Image___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** Base class name used for CSS style sheet */\nvar Image_CSS_CLASS = \"UI-Image\";\n/** @internal DOM-specific component renderer */\nvar Image_Renderer = (function (_super) {\n    Controls_Image___extends(Renderer, _super);\n    /** Instantiate the renderer for given component */\n    function Renderer(component) {\n        var _this = _super.call(this, component) || this;\n        // create image element\n        var img = _this.img = document.createElement(\"img\");\n        _this.element.appendChild(img);\n        // add style watcher\n        _this.watch(function () { return applyStyleTo(component.style_img, img); });\n        return _this;\n    }\n    /** Generate rendered component output */\n    Renderer.prototype.render = function () {\n        // get or create the current output object\n        var out = _super.prototype.render.call(this);\n        out.liveElement = this.img;\n        var component = this.component;\n        // create a new promise if needed\n        if (!component.resolveReady) {\n            component.ready = new Promise_Promise(function (resolve) {\n                component.resolveReady = resolve;\n            });\n        }\n        // set image event handlers and then set (new) URL\n        this.img.onload = function () {\n            component.hasError = false;\n            component.resolveReady && component.resolveReady();\n            component.resolveReady = undefined;\n        };\n        this.img.onerror = function () {\n            component.hasError = true;\n            component.resolveReady && component.resolveReady();\n            component.resolveReady = undefined;\n        };\n        this.img.src = component.imageUrl;\n        // set tooltip text\n        if (component.tooltipText !== undefined)\n            this.img.title = component.tooltipText;\n        return out;\n    };\n    Renderer = Controls_Image___decorate([\n        mapComponentRenderer(Image_Image)\n    ], Renderer);\n    return Renderer;\n}(ControlElement_Renderer));\n\n// Add style override and apply style sheet\nImage_Image.addStyleOverride(Style_Style.withClass(Image_CSS_CLASS));\nStyles_Styles.define(\"UI-Control \" + Image_CSS_CLASS, {\n    \".~~ > img\": {\n        margin: \"0\",\n        outline: \"0\",\n        maxWidth: \"100%\",\n        height: \"auto\"\n    }\n});\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/Renderers/Controls/ProgressBar.js\nvar Controls_ProgressBar___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Controls_ProgressBar___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** Base class name used for CSS style sheet */\nvar ProgressBar_CSS_CLASS = \"UI-ProgressBar\";\n/** @internal DOM-specific component renderer */\nvar ProgressBar_Renderer = (function (_super) {\n    Controls_ProgressBar___extends(Renderer, _super);\n    /** Instantiate the renderer for given component */\n    function Renderer(component) {\n        var _this = _super.call(this, component) || this;\n        // create inner element\n        var bar = _this.bar = document.createElement(\"span\");\n        component.style_bar.addClass(ProgressBar_CSS_CLASS + \"_bar\");\n        _this.element.appendChild(bar);\n        // add watchers for component properties\n        _this.watch(function () { return (component.flowDirection === \"rtl\"); }, function (rtl) {\n            component.style_bar.set(\"float\", rtl ? \"right\" : \"\");\n        });\n        _this.watch(function () { return applyStyleTo(component.style_bar, bar); });\n        _this.watch(function () { return component.progress; }, function (progress) {\n            component.style_bar.set(\"width\", (Math.max(0, Math.min(100, progress * 100)) || 0) + \"%\");\n        });\n        _this.watch(function () { return component.tooltipText; }, function (tooltip) {\n            if (tooltip !== undefined)\n                _this.element.title = tooltip;\n        });\n        return _this;\n    }\n    Renderer = Controls_ProgressBar___decorate([\n        mapComponentRenderer(ProgressBar_ProgressBar)\n    ], Renderer);\n    return Renderer;\n}(ControlElement_Renderer));\n\n// Add style override and apply style sheet\nProgressBar_ProgressBar.addStyleOverride(Style_Style.withClass(ProgressBar_CSS_CLASS));\nStyles_Styles.define(\"UI-Control \" + ProgressBar_CSS_CLASS, {\n    \".~~\": {\n        background: \"#f2f2f2\",\n        height: observe(function () { return Styles_Styles.size.text; }),\n        boxShadow: \"inset 0 1px 3px rgba(0,0,0,.2)\"\n    },\n    \".~_bar\": {\n        display: \"block\",\n        float: \"left\",\n        height: \"100%\",\n        background: \"rgba(0,0,0,.5)\",\n        margin: \"0\",\n        transition: \"width 250ms ease\"\n    }\n});\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/Renderers/Controls/Spacer.js\nvar Controls_Spacer___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Spacer___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n/** @internal DOM-specific component renderer */\nvar Spacer_Renderer = (function (_super) {\n    Controls_Spacer___extends(Renderer, _super);\n    /** Instantiate the renderer for given component */\n    function Renderer(component) {\n        var _this = _super.call(this, component) || this;\n        // set element content to a single zero-width space character\n        _this.element.innerHTML = \"&#8203;\";\n        // watch height and adjust line-height along with it\n        _this.watch(function () { return component.height; }, function (height) {\n            component.style.set({ lineHeight: height });\n        });\n        return _this;\n    }\n    Renderer = Spacer___decorate([\n        mapComponentRenderer(Spacer)\n    ], Renderer);\n    return Renderer;\n}(ControlElement_Renderer));\n\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/Renderers/Controls/InputControls/Checkbox.js\nvar InputControls_Checkbox___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar InputControls_Checkbox___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n/** Base class name used for CSS style sheet */\nvar Checkbox_CSS_CLASS = \"UI-CheckBox\";\n/** @internal DOM-specific component renderer */\nvar Checkbox_Renderer = (function (_super) {\n    InputControls_Checkbox___extends(Renderer, _super);\n    /** Instantiate the renderer for given component */\n    function Renderer(component) {\n        var _this = _super.call(this, component) || this;\n        // add label and input classes\n        component.style_label.addClass(\"form-check-label\");\n        component.style_input.addClass(\"form-check-input\");\n        // create label, input, and text elements\n        var label = _this.label = document.createElement(\"label\");\n        var input = _this.input = document.createElement(\"input\");\n        var span = _this.span = document.createElement(\"span\");\n        label.appendChild(input);\n        label.appendChild(span);\n        _this.element.appendChild(label);\n        label.onclick = function () {\n            // send event to unchecked radios as well\n            var radios = document.querySelectorAll(\"input[type=\\\"radio\\\"][name=\\\"\" + component.name + \"\\\"]\");\n            var evt = document.createEvent(\"Events\");\n            evt.initEvent(\"change\", true, false);\n            for (var _i = 0, _a = radios; _i < _a.length; _i++) {\n                var radio = _a[_i];\n                radio.dispatchEvent(evt);\n            }\n        };\n        input.onchange = function () { component.checked = input.checked; };\n        input.onblur = function () { component.checked = input.checked; };\n        // add watchers for component properties\n        _this.watch(function () { return applyStyleTo(component.style_label, label); });\n        _this.watch(function () { return applyStyleTo(component.style_input, input); });\n        _this.watch(function () { return applyStyleTo(component.style_text, span); });\n        _this.watch(function () { return component.disabled; }, function () {\n            _this.input.disabled = component.disabled;\n        });\n        _this.watch(function () { return component.type; }, function (type) {\n            _this.input.type = type ? \"radio\" : \"checkbox\";\n            if (type)\n                component.style.removeClass(\"checkbox\").addClass(\"radio\");\n            else\n                component.style.removeClass(\"radio\").addClass(\"checkbox\");\n        });\n        _this.watch(function () { return component.checked; }, function () {\n            _this.input.checked = !!component.checked;\n        });\n        return _this;\n    }\n    /** Generate rendered component output */\n    Renderer.prototype.render = function () {\n        // get or create the current output object\n        var out = _super.prototype.render.call(this);\n        out.liveElement = this.input;\n        var component = this.component;\n        // set properties\n        this.label.appendChild(this.input);\n        this.input.value = component.value;\n        this.input.name = component.name;\n        // render text into DOM element\n        var text = this.span.textContent = component.label;\n        if (!text) {\n            // move input inside of span, along with zero-width space\n            // to make sure the label has the height of 1 line at minimum\n            this.span.innerHTML = \"&#8203;\";\n            this.span.insertBefore(this.input, this.span.firstChild);\n        }\n        this.label.appendChild(this.span);\n        // set tooltip text\n        if (component.tooltipText !== undefined)\n            this.label.title = component.tooltipText;\n        return out;\n    };\n    Renderer = InputControls_Checkbox___decorate([\n        mapComponentRenderer(Checkbox_Checkbox)\n    ], Renderer);\n    return Renderer;\n}(ControlElement_Renderer));\n\n// Add style override and apply style sheet\nCheckbox_Checkbox.addStyleOverride(Style_Style.withClass(Checkbox_CSS_CLASS));\nStyles_Styles.define(\"UI-Control \" + Checkbox_CSS_CLASS, {\n    \".~~\": {},\n    \".~~ > label\": {\n        margin: \"0\",\n        paddingTop: \"0\", paddingBottom: \"0\",\n        display: \"inline\"\n    }\n});\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/Renderers/Controls/InputControls/SelectField.js\nvar InputControls_SelectField___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar InputControls_SelectField___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** Base class name used for CSS style sheet */\nvar SelectField_CSS_CLASS = \"UI-SelectField\";\n/** @internal DOM-specific component renderer */\nvar SelectField_Renderer = (function (_super) {\n    InputControls_SelectField___extends(Renderer, _super);\n    /** Instantiate the renderer for given component */\n    function Renderer(component) {\n        var _this = _super.call(this, component) || this;\n        // add label and input classes\n        component.style_label.addClass(\"form-control-label\", \"control-label\");\n        component.style_input.addClass(\"form-control\");\n        // create label and input elements\n        var label = _this.label = document.createElement(\"label\");\n        var select = _this.select = document.createElement(\"select\");\n        label.htmlFor = select.id = component.uid + \"_select\";\n        _this.element.appendChild(label);\n        _this.element.appendChild(select);\n        select.onchange = function () { component.value = select.value; };\n        select.onblur = function () { component.value = select.value; };\n        // add watchers for component properties\n        var valueChanged = false;\n        _this.watch(function () { return applyStyleTo(component.style_label, label); });\n        _this.watch(function () { return applyStyleTo(component.style_input, select); });\n        _this.watch(function () { return component.disabled; }, function () {\n            _this.select.disabled = component.disabled;\n        });\n        _this.watch(function () { return component.value; }, function () {\n            var value = component.value;\n            if (value === undefined)\n                value = \"\";\n            else\n                value = String(value);\n            if (value != select.value) {\n                _this.select.value = value;\n                valueChanged = true;\n            }\n        });\n        return _this;\n    }\n    /** Generate rendered component output */\n    Renderer.prototype.render = function () {\n        var _this = this;\n        // get or create the current output object\n        var out = _super.prototype.render.call(this);\n        out.liveElement = this.select;\n        var component = this.component;\n        // remove all options and add current options\n        while (this.select.firstChild)\n            this.select.removeChild(this.select.firstChild);\n        component.options.forEach(function (option) {\n            if (option) {\n                var optionElt = document.createElement(\"option\");\n                var text = optionElt.textContent = String(option.text);\n                optionElt.value = option.value !== undefined ? option.value : text;\n                _this.select.appendChild(optionElt);\n            }\n        });\n        this.select.name = component.name;\n        // show or hide label\n        var labelText = this.label.textContent = component.label;\n        unobserved(function () {\n            component.style_label.hide(!labelText);\n        });\n        // set tooltip text\n        if (component.tooltipText !== undefined)\n            this.label.title = component.tooltipText;\n        return out;\n    };\n    Renderer = InputControls_SelectField___decorate([\n        mapComponentRenderer(SelectField_SelectField)\n    ], Renderer);\n    return Renderer;\n}(ControlElement_Renderer));\n\n// Add style override and apply style sheet\nSelectField_SelectField.addStyleOverride(Style_Style.withClass(SelectField_CSS_CLASS));\nStyles_Styles.define(\"UI-Control \" + SelectField_CSS_CLASS, {\n    \".~~\": {},\n    \".~~ > label\": {\n        font: \"inherit\"\n    },\n    \".~~ > select\": {\n        boxSizing: \"border-box\",\n        width: \"100%\"\n    }\n});\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/Renderers/Controls/InputControls/TextField.js\nvar InputControls_TextField___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar InputControls_TextField___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** Base class name used for CSS style sheet */\nvar TextField_CSS_CLASS = \"UI-TextField\";\n/** @internal DOM-specific component renderer */\nvar TextField_Renderer = (function (_super) {\n    InputControls_TextField___extends(Renderer, _super);\n    /** Instantiate the renderer for given component */\n    function Renderer(component) {\n        var _this = _super.call(this, component) || this;\n        // add label and input classes\n        component.style_label.addClass(\"form-control-label\", \"control-label\");\n        component.style_input.addClass(\"form-control\");\n        // create label and input elements\n        var label = _this.label = document.createElement(\"label\");\n        var input = _this.input = document.createElement(component.textareaLines > 0 ? \"textarea\" : \"input\");\n        label.htmlFor = input.id = component.uid + \"_input\";\n        _this.element.appendChild(label);\n        _this.element.appendChild(input);\n        input.onchange = function () { component.value = input.value; };\n        input.onblur = function () { component.value = input.value; };\n        input.oninput = function () {\n            if (component.immediateValueUpdate)\n                component.value = input.value;\n        };\n        input.onkeydown = function (event) {\n            if (event.keyCode == 13)\n                component.value = input.value;\n        };\n        // add watchers for component properties\n        var valueChanged = false;\n        _this.watch(function () { return applyStyleTo(component.style_label, label); });\n        _this.watch(function () { return applyStyleTo(component.style_input, input); });\n        _this.watch(function () { return component.disabled; }, function () {\n            _this.input.disabled = component.disabled;\n        });\n        _this.watch(function () { return component.value; }, function () {\n            var value = component.value;\n            if (value != input.value) {\n                _this.input.value = value;\n                valueChanged = true;\n            }\n        });\n        return _this;\n    }\n    /** Generate rendered component output */\n    Renderer.prototype.render = function () {\n        // get or create the current output object\n        var out = _super.prototype.render.call(this);\n        out.liveElement = this.input;\n        var component = this.component;\n        // set properties\n        this.input.name = component.name;\n        this.input.placeholder = component.placeholderText;\n        if (component.textareaLines) {\n            // set number of rows\n            this.input.rows = component.textareaLines;\n        }\n        else {\n            // set specific text input type\n            this.input.setAttribute(\"type\", TextField_TextField.Type[component.type].toLowerCase());\n        }\n        // show or hide label\n        var labelText = this.label.textContent = component.label;\n        unobserved(function () {\n            component.style_label.hide(!labelText);\n        });\n        // set tooltip text\n        if (component.tooltipText !== undefined)\n            this.label.title = component.tooltipText;\n        return out;\n    };\n    Renderer = InputControls_TextField___decorate([\n        mapComponentRenderer(TextField_TextField)\n    ], Renderer);\n    return Renderer;\n}(ControlElement_Renderer));\n\n// inject text selection function\ninject(TextField_TextField, {\n    selectText: function (start, end) {\n        var _this = this;\n        if (start === void 0) { start = 0; }\n        var out = this.getLastRenderedOutput();\n        if (!out) {\n            // select only when rendered\n            this.Rendered.connect(function () { return _this.selectText(start, end); });\n            return;\n        }\n        // find the input element and focus it\n        var input = out.liveElement;\n        input.focus();\n        if (!end && end !== 0) {\n            // select all the way through to the end if end is undefined\n            end = input.value.length;\n        }\n        // use whatever method is available to select text\n        if (input.createTextRange) {\n            var range = input.createTextRange();\n            range.collapse(true);\n            range.moveStart('character', start);\n            range.moveEnd('character', end);\n            range.select();\n        }\n        else if (input.setSelectionRange) {\n            input.setSelectionRange(start, end);\n        }\n        else if (input.selectionStart) {\n            input.selectionStart = start;\n            input.selectionEnd = end;\n        }\n        return this;\n    }\n});\n// Add style override and apply style sheet\nTextField_TextField.addStyleOverride(Style_Style.withClass(TextField_CSS_CLASS));\nStyles_Styles.define(\"UI-Control \" + TextField_CSS_CLASS, {\n    \".~~\": {},\n    \".~~ > input\": {\n        width: \"100%\"\n    },\n    \".~~ > textarea\": {\n        width: \"100%\"\n    }\n});\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/Renderers/index.js\n// containers:\n\n\n\n\n// blocks:\n\n\n\n\n\n\n\n\n\n// controls:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/Menu.js\nvar Menu___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\n/** Mouse hover timeout after which to show/hide sub menu */\nvar HOVER_TIMEOUT = 200;\n/** Current hover timeout ID */\nvar _hoverTimer;\n/** Item height, in pixels, of one menu item; used for calculating whether the menu fits on screen vertically, before displaying the menu below or above the mouse cursor or control element */\nvar _itemHeight = 28;\n/** Display a modal context menu */\nMenu.displayContextMenu = function (options, event) {\n    return new Menu_DOMMenuComponent(options).display(event.clientX, event.clientY);\n};\n/** Display a modal dropdown menu */\nMenu.displayDropdown = function (options, ref) {\n    var out = ref.getLastRenderedOutput();\n    if (out && out.element) {\n        var r = out.element.getBoundingClientRect();\n        return new Menu_DOMMenuComponent(options)\n            .display(r.right, r.bottom, true, r.bottom - r.top);\n    }\n    return Promise_Promise.reject(new Error());\n};\n/** Remove current menu */\nMenu.dismiss = function () {\n    var page = Page_Page.getCurrentPage();\n    page && page.getComponentsByType(Menu_DOMMenuComponent)\n        .forEach(function (c) { return Screen_Screen.remove(c); });\n};\n/** Component that contains a menu DOM element */\nvar Menu_DOMMenuComponent = (function (_super) {\n    Menu___extends(DOMMenuComponent, _super);\n    /** Create DOM dropdown menu */\n    function DOMMenuComponent(options) {\n        if (options === void 0) { options = []; }\n        var _this = _super.call(this) || this;\n        _this.options = options;\n        // create UL node\n        var menu = document.createElement(\"ul\");\n        menu.style.cssFloat = \"none\";\n        menu.style.position = \"static\";\n        menu.style.boxShadow = \"none\";\n        menu.style.margin = \"0\";\n        menu.className = \"dropdown-menu show\"; // v3\n        _this._menu = menu;\n        _this.nodes.push(menu);\n        // set display options\n        _this.displayOptions = {\n            modal: true,\n            onEsc: function () {\n                // onEsc: reject promise and remove menu\n                Screen_Screen.remove(_this);\n                _this._rejector(new Error());\n            }\n        };\n        // add mouseout handler to stop sub menus from showing\n        menu.onmouseout = function (event) {\n            if (_hoverTimer)\n                window.clearTimeout(_hoverTimer);\n            _hoverTimer = undefined;\n            if (event.target === menu && !_this._subMenuShown) {\n                _hoverTimer = window.setTimeout(function () {\n                    _this._clearSubMenus();\n                    _hoverTimer = undefined;\n                }, HOVER_TIMEOUT);\n            }\n        };\n        return _this;\n    }\n    /** Display this menu at the given location on screen, either below or above; vert/horz push define the amount to displace the menu if showing on top/left; appended as child of given DOM node, or displayed on screen in its own layer */\n    DOMMenuComponent.prototype.display = function (x, y, force, vertPush, horizPush, parent) {\n        var _this = this;\n        this._isBase = !parent;\n        while (this._menu.firstChild)\n            this._menu.removeChild(this._menu.firstChild);\n        var result = new Promise_Promise(function (resolve, reject) {\n            _this._resolver = resolve;\n            _this._rejector = reject;\n        });\n        // set position around given x, y + displacement coordinates\n        this._setPosition(x, y, force, vertPush, horizPush);\n        // add options from array\n        var hasIcon = this.options.some(function (option) { return option && !!option.icon; });\n        this.options.forEach(function (option, i) {\n            if (!option)\n                return;\n            // create list item element with divider or option link\n            var li = document.createElement(\"li\");\n            _this._menu.appendChild(li);\n            if (option.disabled)\n                li.className = \"disabled\";\n            if (option.divider) {\n                // create a divider\n                li.className = \"divider dropdown-divider\";\n            }\n            else {\n                // create a text option, add click handler\n                var a = document.createElement(\"a\");\n                a.className = \"dropdown-item\";\n                a.href = \"#\";\n                if (option.disabled) {\n                    a.className += \" disabled\";\n                    a.style.cursor = \"default\";\n                    a.onclick = function (event) { event.preventDefault(); };\n                }\n                else {\n                    a.tabIndex = 0;\n                    a.style.cursor = \"pointer\";\n                    if (!option.subMenu)\n                        _this._addLinkClickHandler(a, i);\n                }\n                _this._addLinkHoverHandler(a, i);\n                li.appendChild(a);\n                // render text into link\n                var iw = hasIcon ? 1.5 : 0;\n                Label_Renderer.renderInto(a, option.icon, iw, option.label);\n                if (hasIcon)\n                    a.style.paddingLeft = \".5rem\";\n                // render far side icon\n                if (option.sideIcon) {\n                    var r = document.createElement(\"span\");\n                    r.className = \"bidi_floatEnd\";\n                    Label_Renderer.renderInto(r, option.sideIcon);\n                    a.appendChild(r);\n                }\n            }\n        });\n        // update element height estimate after display\n        this.Rendered.connectOnce(function (out) {\n            sleep(30).then(function () {\n                var elt = out.element;\n                if (elt) {\n                    var max = 0;\n                    for (var _i = 0, _a = elt.querySelectorAll(\"li\"); _i < _a.length; _i++) {\n                        var li = _a[_i];\n                        max = Math.max(max, li.offsetHeight);\n                    }\n                    if (max && _itemHeight !== max) {\n                        _itemHeight = max;\n                        _this._setPosition(x, y, force, vertPush, horizPush);\n                    }\n                }\n            });\n        });\n        // add menu as a child or display as new modal layer\n        var out = this.out;\n        if (parent && out)\n            parent.appendChild(out.element);\n        else\n            Screen_Screen.displayAsync(this);\n        return result;\n    };\n    DOMMenuComponent.prototype._setPosition = function (x, y, forceLeft, vertPush, horizPush) {\n        var _this = this;\n        // position menu on left or right of given coordinates\n        if (x + 200 < window.innerWidth && (!forceLeft || x < 200)) {\n            this.style.set({ left: x + \"px\", right: \"auto\" });\n        }\n        else {\n            var right = (window.innerWidth - x + (horizPush || 0)) + \"px\";\n            this.style.set({ left: \"auto\", right: right });\n        }\n        // position menu on top or bottom of given coordinates\n        if (y + this.options.length * _itemHeight + 10 < window.innerHeight) {\n            this.style.set({ top: y + \"px\", bottom: \"auto\" });\n        }\n        else {\n            var bottom = (window.innerHeight - y + (vertPush || 0)) + \"px\";\n            this.style.set({ top: \"auto\", bottom: bottom });\n            var checkTop = function () {\n                // if pushed above window top, move to very top\n                if (_this._menu.offsetTop < 0)\n                    _this.style.set({ top: \"0\", bottom: \"auto\" });\n            };\n            window.setTimeout(checkTop, 10);\n            window.setTimeout(checkTop, 50);\n            window.setTimeout(checkTop, 100);\n        }\n    };\n    DOMMenuComponent.prototype._clearSubMenus = function () {\n        this._subMenuShown = undefined;\n        var out = this.getLastRenderedOutput();\n        var elt = out && out.element;\n        while (elt && elt.nextSibling)\n            elt.parentNode.removeChild(elt.nextSibling);\n    };\n    DOMMenuComponent.prototype._addLinkClickHandler = function (elt, i) {\n        var _this = this;\n        var option = this.options[i];\n        elt.onclick = function (event) {\n            event.preventDefault();\n            if (_this._isBase)\n                Screen_Screen.remove(_this);\n            _this._resolver(option.key || (i + 1));\n        };\n    };\n    DOMMenuComponent.prototype._addLinkHoverHandler = function (elt, i) {\n        var _this = this;\n        var option = this.options[i];\n        elt.onmouseover = function () {\n            // clear timer to show/hide (other) sub menu\n            if (_hoverTimer) {\n                window.clearTimeout(_hoverTimer);\n                _hoverTimer = undefined;\n            }\n            // set timer to show current sub menu, if not already shown\n            if (_this._subMenuShown !== option) {\n                _hoverTimer = window.setTimeout(function () {\n                    _this._clearSubMenus();\n                    _hoverTimer = undefined;\n                    if (!option.subMenu)\n                        return;\n                    _this._subMenuShown = option;\n                    // create and display sub menu\n                    var r = elt.parentNode.getBoundingClientRect();\n                    var out = _this.getLastRenderedOutput();\n                    var parentNode = out && out.element.parentNode;\n                    var p = new DOMMenuComponent(option.subMenu)\n                        .display(r.right - 5, r.top, false, -_itemHeight, r.right - r.left - 10, parentNode);\n                    p.then(function (choice) {\n                        if (_this._isBase)\n                            Screen_Screen.remove(_this);\n                        if (typeof choice == \"number\" && choice > 0) {\n                            var base = 100;\n                            while (base <= choice)\n                                base *= 100;\n                            choice = (i + 1) * base + choice;\n                        }\n                        _this._resolver(choice);\n                    });\n                }, HOVER_TIMEOUT);\n            }\n        };\n    };\n    return DOMMenuComponent;\n}(DOMBlock_DOMBlock));\n// Add style override and apply style sheet\nMenu_DOMMenuComponent.addStyleOverride(Style_Style.withClass(\"UI-Menu dropdown open\")\n    .addShadowEffect(.75));\nStyles_Styles.define(\"UI-Block UI-Menu\", {\n    \".~~\": {\n        position: \"absolute\",\n        fontSize: observe(function () { return Styles_Styles.size.text; }),\n        lineHeight: \"normal\"\n    }\n});\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/Events.js\n\n\n// lookup table for custom event names\nvar customEventNames = {\n    DoubleClick: \"dblclick\",\n    Press: \"mousedown\",\n    MouseEnter: \"mouseover\",\n    MouseLeave: \"mouseout\",\n    FnKeyPressed: \"keydown\",\n    DragStart: \"uidragstart\",\n    DragEnter: \"uidragenter\",\n    DragLeave: \"uidragleave\",\n    DragDrop: \"uidragdrop\",\n    FocusGained: \"uicustomfocusin\",\n    Clicked: \"uiasyncclick\",\n    DoubleClicked: \"uiasyncdblclick\",\n    Pressed: \"uiasyncpress\",\n    ValueChange: \"change\",\n    ValueInput: \"input\"\n};\n/** Helper function to get the DOM event name for given signal name */\nfunction _getName(signalName) {\n    return customEventNames[signalName] || signalName.toLowerCase();\n}\n/** Called when a first handler is added (mixin) */\nfunction onHandlerConnected() {\n    var _this = this;\n    // when connected: add event handler when element is known\n    this.component.getRenderedOutputAsync().then(function (out) {\n        var addHandler = function () {\n            _this.domEventHandler = function (event) {\n                var test = (_this.isConnected() || undefined) &&\n                    (!_this.domEventFilter || _this.domEventFilter(event));\n                if (test !== undefined) {\n                    // consume the event if not in capture mode\n                    if (!_this.useCapture)\n                        event.stopPropagation();\n                    // emit signal now and wait for handlers to be called\n                    // (unless filter function returned false)\n                    if (test) {\n                        _this(event);\n                        runYield(true);\n                    }\n                }\n            };\n            (out.liveElement || out.element).addEventListener(_this.domEventName, _this.domEventHandler, _this.useCapture);\n        };\n        if (!_this.domEventHandler) {\n            // add handler only after rendering, if possible\n            if (out.updated)\n                out.updated.then(addHandler);\n            else\n                addHandler();\n        }\n    });\n}\n/** Called when all handlers have been disconnected (mixin) */\nfunction onHandlersDisconnected() {\n    var _this = this;\n    // when disconnected: remove event handler\n    this.component.getRenderedOutputAsync().then(function (out) {\n        if (_this.domEventHandler && !_this.isConnected) {\n            (out.liveElement || out.element).removeEventListener(_this.domEventName, _this.domEventHandler);\n            delete _this.domEventHandler;\n        }\n    });\n}\n// inject a method to create DOM event signals into the Component class\ninject(Component_Component, {\n    \"@createEventSignal\": function (id, signalClass, opt) {\n        var _this = this;\n        var result;\n        var domEventFilter;\n        var useCapture = true;\n        switch (id) {\n            case \"Press\":\n            case \"Click\":\n            case \"DoubleClick\":\n            case \"MouseContextMenu\":\n                // only emit if the element is not disabled (e.g. button)\n                domEventFilter = function (event) {\n                    return !(event.currentTarget.disabled);\n                };\n                result = defineComponentSignal(signalClass, this, {\n                    domEventName: _getName(id), useCapture: useCapture, domEventFilter: domEventFilter,\n                    onHandlerConnected: onHandlerConnected, onHandlersDisconnected: onHandlersDisconnected\n                });\n                break;\n            case \"Pressed\":\n            case \"Clicked\":\n            case \"DoubleClicked\":\n                // only emit if the element is not disabled (e.g. button)\n                domEventFilter = function (event) {\n                    return !(event.currentTarget.disabled);\n                };\n                result = defineComponentSignal(signalClass, this, {\n                    domEventName: _getName(id), domEventFilter: domEventFilter,\n                    onHandlerConnected: onHandlerConnected, onHandlersDisconnected: onHandlersDisconnected\n                });\n                break;\n            case \"MouseEnter\":\n            case \"MouseLeave\":\n                // only emit if there is no source/destination target, or\n                // if the source/destination target is the current element, or\n                // if the source/destination is outside of the current element\n                // (i.e. current element does not contain source/destination)\n                domEventFilter = function (event) { return (!event.relatedTarget ||\n                    //event.relatedTarget === event.currentTarget ||\n                    event.relatedTarget !== event.currentTarget &&\n                        !(event.relatedTarget.compareDocumentPosition(event.currentTarget) & 8)); };\n                result = defineComponentSignal(signalClass, this, {\n                    domEventName: _getName(id),\n                    domEventFilter: domEventFilter, useCapture: useCapture,\n                    onHandlerConnected: onHandlerConnected, onHandlersDisconnected: onHandlersDisconnected\n                });\n                break;\n            case \"FnKeyPressed\":\n                domEventFilter = function (event) { return (event.keyCode == opt || undefined); };\n                useCapture = false;\n            case \"KeyDown\":\n            case \"KeyPress\":\n                result = defineComponentSignal(signalClass, this, {\n                    domEventName: _getName(id),\n                    domEventFilter: domEventFilter, useCapture: useCapture,\n                    onHandlerConnected: onHandlerConnected, onHandlersDisconnected: onHandlersDisconnected,\n                });\n                break;\n            case \"Focus\":\n            case \"Blur\":\n            case \"ValueChange\":\n            case \"ValueInput\":\n                result = defineComponentSignal(signalClass, this, {\n                    domEventName: _getName(id), useCapture: useCapture,\n                    onHandlerConnected: onHandlerConnected, onHandlersDisconnected: onHandlersDisconnected\n                });\n                break;\n            case \"FocusGained\":\n                domEventFilter = function (event) {\n                    if (!result.domAsyncFocus) {\n                        result.domAsyncFocus = true;\n                        // add a re-focus listener to the list\n                        var componentElt = event.currentTarget;\n                        onRefocusCallbacks.push(function (elt) {\n                            // ignore if not blurred and not focused self or child\n                            if (elt && (elt === componentElt ||\n                                event.target.compareDocumentPosition(componentElt) & 8))\n                                return true;\n                            // otherwise, emit FocusLost and remove listener\n                            result.domAsyncFocus = false;\n                            _this.FocusLost(_lastBlurEvent);\n                            return false;\n                        });\n                        // emit the FocusGained signal now\n                        return true;\n                    }\n                    // if already focused, do not emit but consume the event\n                    return false;\n                };\n                result = defineComponentSignal(signalClass, this, {\n                    domEventName: _getName(id), domEventFilter: domEventFilter,\n                    onHandlerConnected: onHandlerConnected, onHandlersDisconnected: onHandlersDisconnected\n                });\n                break;\n            case \"FocusLost\":\n                // do not listen to DOM events at all; this signal is emitted\n                // from the callback added to onRefocusCallbacks by FocusGained\n                result = defineComponentSignal(signalClass, this);\n                break;\n            case \"DragEnter\":\n            case \"DragLeave\":\n                useCapture = false;\n            case \"DragStart\":\n            case \"DragDrop\":\n                result = defineComponentSignal(signalClass, this, {\n                    domEventName: _getName(id), useCapture: useCapture,\n                    onHandlerConnected: onHandlerConnected, onHandlersDisconnected: onHandlersDisconnected\n                });\n                break;\n            default:\n                throw new TypeError();\n        }\n        return result;\n    }\n});\n/** List of callbacks that are called with a newly focused element, or undefined if none; to dispatch a non-bubbling FocusLost event if the focus moved outside of the originally focused component; callbacks return true if focus was not lost (callback stays in the list) or false otherwise */\nvar onRefocusCallbacks = [];\n/** Last blur event that occurred, waiting for another focus event or timeout */\nvar _lastBlurEvent;\n/** Current timer ID for blur event listener callback */\nvar _blurTimeout;\n// listen for focus/blur events to manage FocusGained/Lost behavior\ndocument.addEventListener(\"focus\", function (event) {\n    // check if blur timeout is active (waiting for re-focus)\n    if (_lastBlurEvent) {\n        // pass newly focused element to listeners, stop waiting\n        onRefocusCallbacks = onRefocusCallbacks.filter(function (f) { return f(event.target); });\n        clearTimeout(_blurTimeout);\n        _lastBlurEvent = undefined;\n    }\n    // dispatch custom event to trigger FocusGained on newly focused element\n    // (bubbles so that it can be consumed normally by connecting to signal)\n    var canceled = !event.target.dispatchEvent(new CustomEvent(customEventNames[\"FocusGained\"], { bubbles: true, cancelable: true }));\n    if (canceled)\n        event.preventDefault();\n}, true);\ndocument.addEventListener(\"blur\", function (event) {\n    if (!onRefocusCallbacks.length)\n        return;\n    // set a timeout to wait for possible focus events\n    _blurTimeout = setTimeout(function () {\n        // no re-focus occurred, inform all listeners\n        onRefocusCallbacks.forEach(function (f) { return f(); });\n        onRefocusCallbacks.length = 0;\n        _lastBlurEvent = undefined;\n    }, 0);\n    _lastBlurEvent = event;\n}, true);\n// listen to click/dblclick/press and dispatch asynchronous events\nfunction addAsyncEvent(origEvent, asyncEvent) {\n    document.addEventListener(origEvent, function (event) {\n        var target = event.target;\n        setTimeout(function () {\n            var toDispatch = new CustomEvent(asyncEvent, { bubbles: true, cancelable: true });\n            toDispatch.button = event.button;\n            toDispatch.clientX = event.clientX;\n            toDispatch.clientY = event.clientY;\n            toDispatch.altKey = event.altKey;\n            toDispatch.ctrlKey = event.ctrlKey;\n            toDispatch.metaKey = event.metaKey;\n            toDispatch.shiftKey = event.shiftKey;\n            target.dispatchEvent(toDispatch);\n        }, 0);\n    }, true);\n}\naddAsyncEvent(\"click\", customEventNames[\"Clicked\"]);\naddAsyncEvent(\"dblclick\", customEventNames[\"DblClicked\"]);\naddAsyncEvent(\"mousedown\", customEventNames[\"Pressed\"]);\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI/index.js\nvar dom_lib_UI_namespaceObject = {};\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"DOM\", function() { return DOM_namespaceObject; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"Style\", function() { return Style_Style; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"Page\", function() { return Page_Page; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"PageRenderer\", function() { return Page_PageRenderer; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"Screen\", function() { return Screen_Screen; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"Binding\", function() { return Binding_Binding; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"TwoWayBinding\", function() { return TwoWayBinding; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"ArrayBinding\", function() { return Binding_ArrayBinding; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"bind\", function() { return bind; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"bind2\", function() { return bind2; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"bindComponents\", function() { return bindComponents; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"_getBatchTransformer\", function() { return _getBatchTransformer; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"Animation\", function() { return Animation; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"Drag\", function() { return Drag_Drag; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"Menu\", function() { return Menu; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"Component\", function() { return Component_Component; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"ComponentSignal\", function() { return ComponentSignal; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"ComponentSignalHandler\", function() { return ComponentSignalHandler; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"defineComponentSignal\", function() { return defineComponentSignal; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"ActionHandler\", function() { return ActionHandler; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"KeyEventSignal\", function() { return KeyEventSignal; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"KeyHandler\", function() { return KeyHandler; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"PointerEventSignal\", function() { return PointerEventSignal; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"PointerHandler\", function() { return PointerHandler; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"DragEventSignal\", function() { return DragEventSignal; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"DragHandler\", function() { return DragHandler; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"ComponentFactory\", function() { return ComponentFactory_ComponentFactory; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"makeFactory\", function() { return makeFactory; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"ComponentRenderer\", function() { return ComponentRenderer_ComponentRenderer; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"ComponentRenderHandler\", function() { return ComponentRenderHandler; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"mapComponentRenderer\", function() { return mapComponentRenderer; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"TextLabelFactory\", function() { return TextLabelFactory_TextLabelFactory; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"tl\", function() { return tl; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"Container\", function() { return Container_Container; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"FlowContainer\", function() { return FlowContainer; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"DialogContainer\", function() { return DialogContainer_DialogContainer; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"DrawerContainer\", function() { return DrawerContainer; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"OppositeDrawerContainer\", function() { return OppositeDrawerContainer; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"LayoutContainer\", function() { return LayoutContainer_LayoutContainer; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"Block\", function() { return Block_Block; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"Card\", function() { return Card_Card; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"ContainerBlock\", function() { return ContainerBlock_ContainerBlock; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"Divider\", function() { return Divider_Divider; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"List\", function() { return List_List; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"ListSelectionHandler\", function() { return ListSelectionHandler; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"TreeList\", function() { return TreeList_TreeList; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"TreeListSelectionHandler\", function() { return TreeListSelectionHandler; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"TreeListFoldHandler\", function() { return TreeListFoldHandler; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"TreeListRow\", function() { return TreeListRow_TreeListRow; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"NavList\", function() { return NavList_NavList; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"NavListSelectionHandler\", function() { return NavListSelectionHandler; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"Row\", function() { return Row_Row; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"CloseRow\", function() { return CloseRow; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"OppositeRow\", function() { return OppositeRow; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"CenterRow\", function() { return CenterRow; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"Table\", function() { return Table_Table; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"TableRow\", function() { return TableRow_TableRow; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"TableHeader\", function() { return TableRow_TableHeader; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"ControlElement\", function() { return ControlElement_ControlElement; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"BlockControl\", function() { return BlockControl_BlockControl; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"Button\", function() { return Button_Button; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"ButtonDropdownClickHandler\", function() { return ButtonDropdownClickHandler; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"PrimaryButton\", function() { return PrimaryButton; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"ToggleButton\", function() { return Button_ToggleButton; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"LinkButton\", function() { return LinkButton; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"TextButton\", function() { return TextButton; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"RoundButton\", function() { return RoundButton; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"ButtonGroup\", function() { return ButtonGroup_ButtonGroup; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"ContainerControl\", function() { return ContainerControl_ContainerControl; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"ControlStack\", function() { return ControlStack_ControlStack; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"CloseControlStack\", function() { return CloseControlStack; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"Icon\", function() { return Icon_Icon; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"Image\", function() { return Image_Image; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"Label\", function() { return Label_Label; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"WideLabel\", function() { return WideLabel; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"Paragraph\", function() { return Paragraph; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"Heading1\", function() { return Heading1; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"Heading2\", function() { return Heading2; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"Heading3\", function() { return Heading3; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"Heading4\", function() { return Heading4; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"Heading5\", function() { return Heading5; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"Heading6\", function() { return Heading6; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"ProgressBar\", function() { return ProgressBar_ProgressBar; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"Spacer\", function() { return Spacer; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"InputControl\", function() { return InputControl_InputControl; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"Checkbox\", function() { return Checkbox_Checkbox; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"SelectField\", function() { return SelectField_SelectField; });\n__webpack_require__.d(dom_lib_UI_namespaceObject, \"TextField\", function() { return TextField_TextField; });\n\n// platform specifics:\n\n\n\n\n\n\n\n\n\n// CONCATENATED MODULE: ./dist/dom/lib/UI.js\nvar dist_dom_lib_UI_namespaceObject = {};\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"default\", function() { return lib_UI_defaultExport; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"DOM\", function() { return DOM_namespaceObject; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"Style\", function() { return Style_Style; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"Page\", function() { return Page_Page; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"PageRenderer\", function() { return Page_PageRenderer; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"Screen\", function() { return Screen_Screen; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"Binding\", function() { return Binding_Binding; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"TwoWayBinding\", function() { return TwoWayBinding; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"ArrayBinding\", function() { return Binding_ArrayBinding; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"bind\", function() { return bind; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"bind2\", function() { return bind2; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"bindComponents\", function() { return bindComponents; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"_getBatchTransformer\", function() { return _getBatchTransformer; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"Animation\", function() { return Animation; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"Drag\", function() { return Drag_Drag; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"Menu\", function() { return Menu; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"Component\", function() { return Component_Component; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"ComponentSignal\", function() { return ComponentSignal; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"ComponentSignalHandler\", function() { return ComponentSignalHandler; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"defineComponentSignal\", function() { return defineComponentSignal; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"ActionHandler\", function() { return ActionHandler; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"KeyEventSignal\", function() { return KeyEventSignal; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"KeyHandler\", function() { return KeyHandler; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"PointerEventSignal\", function() { return PointerEventSignal; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"PointerHandler\", function() { return PointerHandler; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"DragEventSignal\", function() { return DragEventSignal; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"DragHandler\", function() { return DragHandler; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"ComponentFactory\", function() { return ComponentFactory_ComponentFactory; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"makeFactory\", function() { return makeFactory; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"ComponentRenderer\", function() { return ComponentRenderer_ComponentRenderer; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"ComponentRenderHandler\", function() { return ComponentRenderHandler; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"mapComponentRenderer\", function() { return mapComponentRenderer; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"TextLabelFactory\", function() { return TextLabelFactory_TextLabelFactory; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"tl\", function() { return tl; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"Container\", function() { return Container_Container; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"FlowContainer\", function() { return FlowContainer; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"DialogContainer\", function() { return DialogContainer_DialogContainer; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"DrawerContainer\", function() { return DrawerContainer; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"OppositeDrawerContainer\", function() { return OppositeDrawerContainer; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"LayoutContainer\", function() { return LayoutContainer_LayoutContainer; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"Block\", function() { return Block_Block; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"Card\", function() { return Card_Card; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"ContainerBlock\", function() { return ContainerBlock_ContainerBlock; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"Divider\", function() { return Divider_Divider; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"List\", function() { return List_List; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"ListSelectionHandler\", function() { return ListSelectionHandler; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"TreeList\", function() { return TreeList_TreeList; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"TreeListSelectionHandler\", function() { return TreeListSelectionHandler; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"TreeListFoldHandler\", function() { return TreeListFoldHandler; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"TreeListRow\", function() { return TreeListRow_TreeListRow; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"NavList\", function() { return NavList_NavList; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"NavListSelectionHandler\", function() { return NavListSelectionHandler; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"Row\", function() { return Row_Row; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"CloseRow\", function() { return CloseRow; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"OppositeRow\", function() { return OppositeRow; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"CenterRow\", function() { return CenterRow; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"Table\", function() { return Table_Table; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"TableRow\", function() { return TableRow_TableRow; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"TableHeader\", function() { return TableRow_TableHeader; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"ControlElement\", function() { return ControlElement_ControlElement; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"BlockControl\", function() { return BlockControl_BlockControl; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"Button\", function() { return Button_Button; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"ButtonDropdownClickHandler\", function() { return ButtonDropdownClickHandler; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"PrimaryButton\", function() { return PrimaryButton; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"ToggleButton\", function() { return Button_ToggleButton; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"LinkButton\", function() { return LinkButton; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"TextButton\", function() { return TextButton; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"RoundButton\", function() { return RoundButton; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"ButtonGroup\", function() { return ButtonGroup_ButtonGroup; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"ContainerControl\", function() { return ContainerControl_ContainerControl; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"ControlStack\", function() { return ControlStack_ControlStack; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"CloseControlStack\", function() { return CloseControlStack; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"Icon\", function() { return Icon_Icon; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"Image\", function() { return Image_Image; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"Label\", function() { return Label_Label; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"WideLabel\", function() { return WideLabel; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"Paragraph\", function() { return Paragraph; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"Heading1\", function() { return Heading1; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"Heading2\", function() { return Heading2; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"Heading3\", function() { return Heading3; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"Heading4\", function() { return Heading4; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"Heading5\", function() { return Heading5; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"Heading6\", function() { return Heading6; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"ProgressBar\", function() { return ProgressBar_ProgressBar; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"Spacer\", function() { return Spacer; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"InputControl\", function() { return InputControl_InputControl; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"Checkbox\", function() { return Checkbox_Checkbox; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"SelectField\", function() { return SelectField_SelectField; });\n__webpack_require__.d(dist_dom_lib_UI_namespaceObject, \"TextField\", function() { return TextField_TextField; });\n\n\n/* harmony default export */ var lib_UI_defaultExport = (dom_lib_UI_namespaceObject);\n\n// CONCATENATED MODULE: ./dist/core/lib/App/View/ViewLayout.js\n\n/** @internal */\nvar FRAG_ID_PROP = \"@_fragment_id\";\n/** @internal */\nvar FRAG_HASH_PREFIX = \"#frag:\";\n;\nfunction isLayoutFragment(component, layout) {\n    // the component must include a fragment ID property, which must also be\n    // referenced by the view layout class (with matching class reference)\n    var id = component && component[FRAG_ID_PROP];\n    if (id && layout) {\n        return !!layout[FRAG_HASH_PREFIX + id] &&\n            (component instanceof layout[FRAG_HASH_PREFIX + id]);\n    }\n    return !!id;\n}\n/** *Property decorator*, defines the UI Component class (or factory) referenced by the decorated static property as a layout fragment, for use with layout views (i.e. classes defined on `Layout` namespace and derived classes), such that instances of the referenced component class are added to the `fragments` object on layout view instances [decorator] */\nfunction layoutFragment(target, id) {\n    var componentClass = target[id];\n    if (typeof componentClass !== \"function\" ||\n        !(componentClass.prototype instanceof Component_Component))\n        throw new Error(\"Invalid layout fragment component class for \" + id);\n    if (componentClass.prototype[FRAG_ID_PROP] &&\n        componentClass.prototype[FRAG_ID_PROP] !== id)\n        throw new Error(\"Cannot reuse fragment component class \" +\n            componentClass.prototype[FRAG_ID_PROP] + \" as \" + id);\n    componentClass.prototype[FRAG_ID_PROP] = id;\n    componentClass.isFragmentFactory = true;\n    target.prototype[FRAG_HASH_PREFIX + id] = componentClass;\n}\n\n// CONCATENATED MODULE: ./dist/core/lib/App/View/Layout/Base.js\nvar Base___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Base___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n/** Helper function to initialize layout view instances: add a `.fragments` object with observable properties for all fragments that have been declared using `@layoutFragment` */\nfunction _initLayout(target) {\n    target.fragments = new Async_defaultExport.ObservableObject();\n    for (var id in target) {\n        if (id[0] === \"#\" && id.slice(0, 6) === FRAG_HASH_PREFIX)\n            Async_defaultExport.makePropertyObservable(target.fragments, id.slice(6));\n    }\n}\n/** Helper function to implement `.appendChild` method on layout view classes */\nfunction _appendChild(target, child, recurse) {\n    if (!recurse && child instanceof Async_defaultExport.ObservableValue) {\n        return child.map(function (v) { return _appendChild(target, v, true); });\n    }\n    // check for fragments with a fragment ID\n    var id = child && child[FRAG_ID_PROP];\n    if (id) {\n        // check if target defines same ID with matching component class\n        if (!target[FRAG_HASH_PREFIX + id] || !(child instanceof target[FRAG_HASH_PREFIX + id]))\n            throw new Error(\"Invalid fragment type for this layout: \" + id);\n        target.fragments[id] = child;\n        return undefined;\n    }\n    return child;\n}\n/** Represents a container layout, can be extended to define container-based layouts and their associated layout fragments (using `layoutFragment` on static properties) */\nvar Base_BaseLayout = (function (_super) {\n    Base___extends(BaseLayout, _super);\n    /** Create a new instance of this layout view */\n    function BaseLayout() {\n        var _this = _super.call(this) || this;\n        _initLayout(_this);\n        return _this;\n    }\n    /** Add a child component to this component, or store a view fragment in the `.fragments` object; returns this */\n    BaseLayout.prototype.appendChild = function (child) {\n        child = _appendChild(this, child);\n        if (child !== undefined)\n            _super.prototype.appendChild.call(this, child);\n        return this;\n    };\n    /** Set given observable property of this component to given named fragment (observed property of `.fragments` object), with optional transformation function (run inside the observable context, for e.g. conditional assignment) */\n    BaseLayout.prototype.bindFragment = function (propertyName, fragmentName, transform) {\n        var _this = this;\n        if (!this.hasObservableProperty(propertyName))\n            throw new Error(\"Property \" + propertyName + \" is not observable\");\n        this[propertyName] = Async_defaultExport.observe(function () {\n            var fragment = _this.fragments[fragmentName];\n            return transform ? transform(fragment) : fragment;\n        });\n    };\n    /** Dummy property for duck typing of layout classes */\n    BaseLayout.isLayoutClass = true;\n    BaseLayout = Base___decorate([\n        ComponentFactory_ComponentFactory.appendChildComponents(ComponentFactory_ComponentFactory.CLevel.Block, true)\n    ], BaseLayout);\n    return BaseLayout;\n}(LayoutContainer_LayoutContainer));\n\n/** Represents a dialog layout, can be extended to define dialog container-based layouts and their associated layout fragments (using `layoutFragment` on static properties) */\nvar Base_BaseDialogLayout = (function (_super) {\n    Base___extends(BaseDialogLayout, _super);\n    /** Create a new instance of this layout view */\n    function BaseDialogLayout() {\n        var _this = _super.call(this) || this;\n        _initLayout(_this);\n        return _this;\n    }\n    /** Add a child component to this component, or store a view fragment in the `.fragments` object; returns this */\n    BaseDialogLayout.prototype.appendChild = function (child) {\n        child = _appendChild(this, child);\n        if (child !== undefined)\n            _super.prototype.appendChild.call(this, child);\n        return this;\n    };\n    /** Set given observable property of this component to given named fragment (observed property of `.fragments` object), with optional transformation function (run inside the observable context, for e.g. conditional assignment) */\n    BaseDialogLayout.prototype.bindFragment = function (propertyName, fragmentName, transform) {\n        var _this = this;\n        if (!this.hasObservableProperty(propertyName))\n            throw new Error(\"Property \" + propertyName + \" is not observable\");\n        this[propertyName] = Async_defaultExport.observe(function () {\n            var fragment = _this.fragments[fragmentName];\n            return transform ? transform(fragment) : fragment;\n        });\n    };\n    /** Dummy property for duck typing of layout classes */\n    BaseDialogLayout.isLayoutClass = true;\n    BaseDialogLayout = Base___decorate([\n        ComponentFactory_ComponentFactory.appendChildComponents(ComponentFactory_ComponentFactory.CLevel.Block, true)\n    ], BaseDialogLayout);\n    return BaseDialogLayout;\n}(DialogContainer_DialogContainer));\n\n\n// CONCATENATED MODULE: ./dist/core/lib/App/View/Layout/Single.js\nvar Single___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Single___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n/** Represents a strictly vertical layout that contains a header container fragment and a footer container fragment; all other content will be added to the main content area */\nvar Single_VerticalLayout = (function (_super) {\n    Single___extends(VerticalLayout, _super);\n    function VerticalLayout() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /** Layout fragment for the container's fixed header */\n    VerticalLayout.Header = Container_Container.with();\n    /** Layout fragment for the container's fixed footer */\n    VerticalLayout.Footer = Container_Container.with();\n    Single___decorate([\n        layoutFragment\n    ], VerticalLayout, \"Header\", void 0);\n    Single___decorate([\n        layoutFragment\n    ], VerticalLayout, \"Footer\", void 0);\n    return VerticalLayout;\n}(Base_BaseLayout.with(function (self) {\n    self.bindFragment(\"header\", \"Header\");\n    self.bindFragment(\"footer\", \"Footer\");\n})));\n\n/** Represents a strictly vertical layout that contains a header container fragment and a footer container fragment, all other content will be added to the _scrollable_ main content container */\nvar ScrollableLayout = (function (_super) {\n    Single___extends(ScrollableLayout, _super);\n    function ScrollableLayout() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return ScrollableLayout;\n}(Single_VerticalLayout.with({\n    scrollable: true\n})));\n\n\n// CONCATENATED MODULE: ./dist/core/lib/App/View/Layout/App.js\nvar App___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar App___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** Represents the top header row of an application page, contains only one Row instance; all content passed into the initializer is automatically added to this row, not the container itself */\nvar App_AppBarLayout = (function (_super) {\n    App___extends(AppBarLayout, _super);\n    function AppBarLayout() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AppBarLayout.prototype.appendChild = function (child) {\n        // find (first) Row instance and append there if possible\n        if (this.content.length && (child instanceof ControlElement_ControlElement)) {\n            var row = this.getComponentsByType(Row_Row)[0];\n            if (row)\n                row.appendChild(child);\n        }\n        else if (child instanceof Row_Row) {\n            // add the Row itself\n            _super.prototype.appendChild.call(this, child);\n        }\n        return this;\n    };\n    AppBarLayout = App___decorate([\n        ComponentFactory_ComponentFactory.appendChildComponents(ComponentFactory_ComponentFactory.CLevel.ControlElement, true)\n    ], AppBarLayout);\n    return AppBarLayout;\n}(Container_Container.with(Row_Row.with({ height: \"100%\" }))));\n\n/** Represents a full-page application layout that contains a header app bar fragment and a footer container fragment */\nvar App_AppViewLayout = (function (_super) {\n    App___extends(AppViewLayout, _super);\n    function AppViewLayout() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /** Layout fragment for the application bar at the top of the screen, contains only one Row instance; all content passed into the initializer is automatically added to this row, not the container itself */\n    AppViewLayout.Header = App_AppBarLayout.with();\n    App___decorate([\n        layoutFragment\n    ], AppViewLayout, \"Header\", void 0);\n    return AppViewLayout;\n}(Single_VerticalLayout));\n\n/** Represents a full-page application layout that contains a header app bar fragment and a footer container fragment, as well as a scrollable navigation sidebar; the sidebar is automatically collapsed while `.sidebarCollapsed` is set (defaults to true on small screens, observable) but is also wrapped in a drawer container in the `.drawer` property, which can be opened using its `openAsync()` method (e.g. from a click handler on a button available in the `.AppBar` fragment) */\nvar App_HubViewLayout = (function (_super) {\n    App___extends(HubViewLayout, _super);\n    /** Create a view instance and initialize the sidebar/drawer combination */\n    function HubViewLayout() {\n        var _this = _super.call(this) || this;\n        // prepare a drawer factory in advance\n        _this._drawerIsOpen = new Async_defaultExport.ObservableValue();\n        _this.drawer = new (DrawerContainer.with(Async_defaultExport.observe(function () { return _this.fragments[\"Sidebar\"]; })));\n        _this.drawer.Opening.connect(function () {\n            // remove sidebar to avoid component redisplay\n            _this.insideGutter = undefined;\n            _this._drawerIsOpen.value = true;\n        });\n        _this.drawer.Closed.connect(function () {\n            // put sidebar back if (by now) supposed to\n            _this._drawerIsOpen.value = false;\n        });\n        // add the (inside, i.e. left by default) sidebar if not on a small screen\n        _this.bindFragment(\"insideGutter\", \"Sidebar\", function (sidebar) {\n            return (_this.sidebarCollapsed || _this._drawerIsOpen.value) ?\n                undefined : sidebar;\n        });\n        return _this;\n    }\n    Object.defineProperty(HubViewLayout.prototype, \"sidebarCollapsed\", {\n        /** True if the sidebar should be hidden, normally only on small screens but can be overridden by defining a getter for this property (observed, readonly) */\n        get: function () { return Screen_Screen.dimensions.isSmall; },\n        enumerable: true,\n        configurable: true\n    });\n    /** Layout fragment for sidebar content */\n    HubViewLayout.Sidebar = ScrollableLayout.with({ height: \"100%\" });\n    App___decorate([\n        Async_defaultExport.observable\n    ], HubViewLayout.prototype, \"sidebarCollapsed\", null);\n    App___decorate([\n        layoutFragment\n    ], HubViewLayout, \"Sidebar\", void 0);\n    return HubViewLayout;\n}(App_AppViewLayout));\n\n\n// CONCATENATED MODULE: ./dist/core/lib/App/View/Layout/index.js\n\n\n\n\n// CONCATENATED MODULE: ./dist/core/lib/App/Service/Service.js\nvar Service___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\nvar INSTANCE_PROTO_PROP = \"@_service_instance\";\nvar SERVICE_REG_ID_PREFIX = \"+\";\n/** Service classes registered by *lowercase* ID, and others waiting to be mapped */\nvar registry = new Async_defaultExport.ObservableObject();\n/** Helper function to add an ID to the registry */\nfunction register(serviceId, serviceClass) {\n    var prop = (SERVICE_REG_ID_PREFIX + serviceId).toLowerCase();\n    if (!registry.hasObservableProperty(prop)) {\n        // add an observable property for this service\n        registry.addObservableProperty(prop, serviceClass);\n    }\n    else if (serviceClass) {\n        // (re)set the observable property\n        registry[prop] = serviceClass;\n    }\n}\n/** Helper function to inject a service instance */\nfunction doInject(classObj, propertyId, serviceId) {\n    // make sure a key in the registry exists\n    var prop = (SERVICE_REG_ID_PREFIX + serviceId).toLowerCase();\n    if (!registry.hasObservableProperty(prop)) {\n        // add an observable property for this service\n        registry.addObservableProperty(prop, undefined);\n    }\n    // inject the observable reference\n    Async_defaultExport.inject(classObj, (_a = {},\n        _a[propertyId] = Async_defaultExport.observe(function () { return registry[prop]; })\n            .map(function (serviceClass) { return serviceClass && serviceClass.getInstance(); }),\n        _a));\n    var _a;\n}\n/** Service base class, to be extended to represent a service of which a singleton instance can be injected as a property of any other class (e.g. a view or activity class, or another service); service classes must be registered by ID, using the `mapService` decorator */\nvar Service = (function (_super) {\n    Service___extends(Service, _super);\n    /** Singleton constructor; do not use directly, use `getInstance` instead */\n    function Service() {\n        var _this = _super.call(this) || this;\n        if (Object.prototype.hasOwnProperty.call(_this.constructor.prototype, INSTANCE_PROTO_PROP))\n            throw new Error(\"Service has already been constructed\");\n        _this.constructor.prototype[INSTANCE_PROTO_PROP] = _this;\n        return _this;\n    }\n    /** Get the singleton instance of this service class, can be overridden; by default returns a single instance, constructed without parameters only when needed, and never dereferenced */\n    Service.getInstance = function () {\n        if (Object.prototype.hasOwnProperty.call(this.prototype, INSTANCE_PROTO_PROP)) {\n            // already constructed\n            return this.prototype[INSTANCE_PROTO_PROP];\n        }\n        if (this === Service)\n            throw new TypeError();\n        return new this();\n    };\n    return Service;\n}(Async_defaultExport.ObservableObject));\n\n/** *Class decorator*, registers the decorated `Service` class with one or more IDs, so that injected properties (see `injectService`) decorated with a matching service ID automatically contain a reference to a singleton instance of the decorated `Service` [decorator] */\nfunction mapService() {\n    var id = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        id[_i] = arguments[_i];\n    }\n    return function (target) {\n        for (var _i = 0, id_1 = id; _i < id_1.length; _i++) {\n            var s = id_1[_i];\n            register(s, target);\n        }\n    };\n}\n/** Add an alias for the given service by ID, so that the aliased service *also* becomes available using the given alias; the aliased service does not need to have been mapped yet */\nfunction addServiceAlias(newId, serviceId) {\n    var prop = (SERVICE_REG_ID_PREFIX + serviceId).toLowerCase();\n    if (!registry.hasObservableProperty(prop)) {\n        // add an observable property for this service\n        registry.addObservableProperty(prop, undefined);\n    }\n    register(newId, Async_defaultExport.observe(function () { return registry[prop]; }));\n}\nfunction injectService(idOrTarget, key, desc) {\n    if (typeof idOrTarget === \"string\") {\n        return function (target, propertyKey, desc) {\n            // create an injectable property first\n            var result = Async_defaultExport.injectable(target, propertyKey, desc);\n            Object.defineProperty(target, propertyKey, result);\n            // register the service if needed, and create an observable reference\n            doInject(target.constructor, propertyKey, idOrTarget);\n            return result;\n        };\n    }\n    else if (typeof idOrTarget === \"object\" &&\n        typeof idOrTarget.constructor === \"function\" &&\n        typeof key === \"string\") {\n        // create an injectable property first\n        var result = Async_defaultExport.injectable(idOrTarget, key, desc);\n        Object.defineProperty(idOrTarget, key, result);\n        // register the service if needed, and create an observable reference\n        doInject(idOrTarget.constructor, key, key);\n        return result;\n    }\n}\n\n// CONCATENATED MODULE: ./dist/core/lib/App/Service/index.js\n\n\n// CONCATENATED MODULE: ./dist/core/lib/App/Application.js\nvar Application___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Application___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** RegExp to parse a URL */\nvar urlRE = /^(?:([^:/?#]+):)?(?:\\/\\/([^\\/?#]*))?([^?#]*)(\\?[^#]*)?(#.*)?/;\n/** Helper to check if given reference refers to an Activity class */\nfunction isActivityClass(a) {\n    return (typeof a === \"function\" && a.prototype instanceof Activity_Activity);\n}\n/** Encapsulates the application as a singleton object; to be overridden with a platform-specific implementation, do not instantiate directly */\nvar Application_Application = (function (_super) {\n    Application___extends(Application, _super);\n    /** Create the application instance (from a derived class); can be called only once */\n    function Application(title) {\n        var _this = _super.call(this) || this;\n        /** The application name to be displayed in the window title bar (observed) */\n        _this.title = \"\";\n        /** Signal that is emitted when no activity is found for a location */\n        _this.PageNotFound = Signal_Signal.create();\n        /** Signal that is emitted when all activities have been dropped and none have been started */\n        _this.NoActivity = Signal_Signal.create();\n        /** Activity stack instance */\n        _this.activities = new ActivityStack_ActivityStack();\n        if (Application.current || !Application._resolve_ready)\n            throw new Error(\"Cannot construct more than one Application instance\");\n        Application.current = _this.constructor.current = _this;\n        _this.title = title;\n        // initialize page view\n        Screen_Screen.ready.then(function () {\n            Application._resolve_ready(_this);\n            Application._resolve_ready = undefined;\n        });\n        // install handlers for NavList and Button activation\n        var activate = function (target) { _this.startActivityAsync(target); };\n        var isActive = function (target) { _this.isActive(target); };\n        Async_defaultExport.inject(Button_Button.Activation, { activate: activate });\n        Async_defaultExport.inject(NavList_NavList.Activation, { activate: activate, isActive: isActive });\n        return _this;\n    }\n    /** Returns the activity that is currently in the foreground (observable) */\n    Application.prototype.getTopActivity = function () {\n        return this.activities.top;\n    };\n    /** Start given activity as foreground activity (push/replace, same as calling `.activities.push/replace(...)` directly), or start activity using given resource path or string (`#/...` or `/...`, or relative path as `#./...`, `#../...`, `./...` or `../...`); if `navigateIfNotFound` is not false, then the browser/app will navigate to the new location if no matching activity is found (automatic for external URLs), otherwise invokes onPageNotFound handler; note that activities transition asynchronously and any updates will not be reflected until a few milliseconds after calling this method */\n    Application.prototype.startActivityAsync = function (activatable, replace, navigateIfNotFound) {\n        var _this = this;\n        if (isActivityClass(activatable)) {\n            activatable = activatable.getInstance();\n            if (!(activatable instanceof Activity_Activity))\n                throw new Error(\"Invalid activity instance\");\n        }\n        if (activatable instanceof Activation_Activation) {\n            return activatable.getActivityAsync().then(function (activity) {\n                if (activity)\n                    return _this.startActivityAsync(activity);\n                _this.PageNotFound(activatable.getPath());\n                return undefined;\n            });\n        }\n        if (activatable instanceof Activity_Activity) {\n            // check if background activity\n            if (activatable.options.isBackgroundActivity)\n                throw new Error(\"Cannot start background activity directly\");\n            // push or replace directly\n            return replace ? this.activities.replaceAsync(activatable) :\n                this.activities.pushAsync(activatable);\n        }\n        // normalize given path/URL to absolute path, if possible\n        var path = this.normalizePath(activatable);\n        // check if path already active\n        var currentActivityPath = this.activities.top &&\n            this.activities.top.activation.getPath();\n        if (currentActivityPath && currentActivityPath === path) {\n            return Async_defaultExport.Promise.resolve(undefined);\n        }\n        // route based on the resulting path\n        var activation = Activation_Activation.route(path);\n        if (activation) {\n            // recurse for activation object\n            return this.startActivityAsync(activation);\n        }\n        else if (navigateIfNotFound !== false) {\n            // if no route/activity mapped, navigate directly\n            this.navigateToUrl(activatable);\n        }\n        else {\n            // if not supposed to navigate, emit signal\n            this.PageNotFound(path);\n        }\n        return Async_defaultExport.Promise.resolve(undefined);\n    };\n    /** Go back in activity history; either to previous activity or to activity of given class; returns promise that resolves to the new foreground activity, or undefined if activity was not found; the NoActivity signal is emitted if all activities have been dropped and there is no current activity anymore */\n    Application.prototype.dropActivityAsync = function (ActivityClass) {\n        var _this = this;\n        if (ActivityClass) {\n            // go up to given activity, and stay put for 2ms to allow\n            // platform to catch up\n            return this.activities.upAsync(ActivityClass)\n                .then(function (a) { return Async_defaultExport.sleep(2, a); });\n        }\n        else if (this.activities.length) {\n            // pop current activity\n            var resolve_1 = function () {\n                var top = _this.activities.top;\n                // pop again if top activity is now a background activity\n                if (top && top.options.isBackgroundActivity)\n                    return _this.activities.popAsync(top).then(resolve_1);\n                // emit NoActivity if none left after 10ms\n                if (!top) {\n                    return Async_defaultExport.sleep(10).then(function () {\n                        if (!_this.activities.length)\n                            _this.NoActivity();\n                        return undefined;\n                    });\n                }\n                return top;\n            };\n            return this.activities.popAsync().then(resolve_1);\n        }\n        else {\n            // nothing to pop, emit NoActivity and return empty promise\n            this.NoActivity();\n            return Async_defaultExport.Promise.resolve(undefined);\n        }\n    };\n    Application.prototype.isActive = function (pathOrActivity) {\n        if ((pathOrActivity instanceof Activity_Activity) ||\n            typeof pathOrActivity === \"function\") {\n            // only check top activity and its parent activities\n            var current = this.activities.top;\n            while (current) {\n                if (current === pathOrActivity ||\n                    (current instanceof pathOrActivity))\n                    return true;\n                var parent = current.options.parentActivity;\n                if (parent instanceof Activity_Activity) {\n                    // check parent activity itself\n                    current = parent;\n                }\n                else if (parent) {\n                    // find parent activity in the stack\n                    current = this.activities.getParent(parent, current);\n                }\n            }\n            return false;\n        }\n        else {\n            // normalize given path and check against current URL\n            var path = this.normalizePath(pathOrActivity);\n            if (!path)\n                return false;\n            var cur = this.getCurrentUrl();\n            if (path[0] === \"#\") {\n                // looking for hash: trim everything except hash path\n                cur = cur.replace(/[^#]*/, \"\").replace(/\\/$/, \"\");\n            }\n            else {\n                // looking for base path: keep path and hash\n                cur = cur.replace(/^(?:([^:/?#]+):)?(?:\\/\\/([^\\/?#]*))/, \"\")\n                    .replace(/\\/?\\?[^#]*/, \"/\").replace(/\\/$/, \"\");\n            }\n            var l = path.length;\n            return (cur.slice(0, l) === path &&\n                (cur.length === l || cur[l] === \"/\"));\n        }\n    };\n    /** Remove the activity that is currently in the foreground, and reinstantiate a new activity using the `Activation` object that was used to instantiate the current activity; this also re-displays the view, if any; also increments the `.activationIndex` property; returns a promise that is fulfilled after the activity has been started */\n    Application.prototype.reactivate = function () {\n        var _this = this;\n        if (!this.activities.top)\n            return Async_defaultExport.Promise.resolve(undefined);\n        var activation = this.activities.top.activation;\n        if (!this._activationIndex)\n            this._activationIndex = 0;\n        this._activationIndex++;\n        return this.dropActivityAsync().then(function () { return _this.startActivityAsync(activation); });\n    };\n    Object.defineProperty(Application.prototype, \"activationIndex\", {\n        /** Counter that is incremented every time `.reactivate` is called */\n        get: function () { return this._activationIndex; },\n        enumerable: true,\n        configurable: true\n    });\n    /** Returns a normalized version of given path/URL, i.e. either `/...` or `#/...`, or undefined if given path/URL cannot be normalized; relative paths are also supported (e.g. `../foo` or `#../foo`) */\n    Application.prototype.normalizePath = function (path) {\n        if (path === void 0) { path = \"\"; }\n        var _a = String(path).match(urlRE) || [], _ = _a[0], proto = _a[1], host = _a[2], targetPath = _a[3], query = _a[4], targetHash = _a[5];\n        // if path is empty, force home and use either `/` or `#/`\n        if (!_)\n            return (this.getCurrentUrl().indexOf(\"#\") >= 0) ? \"#/\" : \"/\";\n        // check if given a full URL that is actually on the same domain\n        if (proto || host) {\n            var _b = this.getCurrentUrl().match(urlRE) || [], _1 = _b[0], curProto = _b[1], curHost = _b[2], curPath = _b[3], curQuery = _b[4];\n            if (!_1 || curProto !== proto || curHost !== host) {\n                // domain does not match\n                return undefined;\n            }\n            curPath = curPath.replace(/\\/$/, \"\");\n            targetPath = targetPath.replace(/\\/$/, \"\");\n            if (targetHash && curPath === targetPath && curQuery == query) {\n                // use hash part only\n                path = targetHash;\n            }\n            else {\n                // use full path\n                targetPath += (targetHash ? \"/\" + targetHash : \"\");\n                path = targetPath || \"/\";\n            }\n        }\n        // check target type\n        if (/^#?\\//.test(path)) {\n            // full path or hash path: stop here\n            return path;\n        }\n        else if (path[0] === \"#\") {\n            // relative hash path: resolve against current URL\n            var current = this.getCurrentUrl();\n            current = current.replace(/[^#]*/, \"\").replace(/\\/$/, \"\").slice(1);\n            path = (current + \"/\" + path.slice(1)).replace(/\\.\\//g, \"\");\n            for (var oldPath = path; oldPath !== (path = path.replace(/[^\\/]+\\/\\.\\.\\//, \"\"));)\n                ;\n            return \"#\" + path;\n        }\n        else {\n            // relative path: resolve against current URL\n            var current = this.getCurrentUrl();\n            current = current.replace(/^(?:([^:/?#]+):)?(?:\\/\\/([^\\/?#]*))/, \"\")\n                .replace(/\\#.*/, \"\").replace(/\\/$/, \"\");\n            path = (current + \"/\" + path).replace(/\\.\\//g, \"\");\n            for (var oldPath = path; oldPath !== (path = path.replace(/[^\\/]+\\/\\.\\.\\//, \"\"));)\n                ;\n            return path;\n        }\n    };\n    /** Returns the (browser/app) platform's current URI as a string, if available */\n    Application.prototype.getCurrentUrl = function () { return \"\"; };\n    /** Directs the (browser/app) platform to given URL, e.g. a full URL to navigate away from the current application */\n    Application.prototype.navigateToUrl = function (url) { /* platform defined */ url; };\n    /** Promise that resolves to the application instance after it has been created */\n    Application.ready = new Async_defaultExport.Promise(function (resolve) { Application._resolve_ready = resolve; });\n    Application___decorate([\n        Async_defaultExport.observable_string\n    ], Application.prototype, \"title\", void 0);\n    Application___decorate([\n        injectService(\"culture\")\n    ], Application.prototype, \"culture\", void 0);\n    return Application;\n}(Async_defaultExport.ObservableObject));\n\n/** Alias for `Application#startActivityAsync` on the current `Application` instance; if there is no current instance, this function waits for an Application instance to be created first */\nfunction startActivityAsync(activityOrPath, replace, navigateIfNotFound) {\n    var go = function (app) {\n        return app.startActivityAsync(activityOrPath, replace, navigateIfNotFound);\n    };\n    if (Application_Application.current)\n        return go(Application_Application.current);\n    return Application_Application.ready.then(function (app) { return go(app); });\n}\n/** Get the activity closest to the foreground of given type, if any */\nfunction findActivity(ActivityClass) {\n    if (!Application_Application.current)\n        return undefined;\n    if (Application_Application.current.activities.top instanceof ActivityClass)\n        return Application_Application.current.activities.top;\n    return Application_Application.current.activities.getParent(ActivityClass);\n}\n\n// CONCATENATED MODULE: ./dist/core/lib/App/View/ViewMapping.js\n\n\n\n\nvar VIEW_INITIALIZED_PROP = \"@_view_\";\nvar VIEW_MAP_PREFIX = \"#view:\";\n/** Next UID to be used by mapViewActivity */\nvar ViewMapping__nextUID = 0;\n/** Represents a mapping between an activity and a view class */\nvar ViewMapping_ViewMapping = (function () {\n    /** Private constructor, do not use directly: use static method `.mapView` instead */\n    function ViewMapping() {\n        this._ref = 0;\n    }\n    /** Map the given activity to given view class, with given dereference timeout (or 0 to disable dereferencing); also connects to the activity's Resumed signal, once per activity instance */\n    ViewMapping.mapView = function (activity, View, timeout) {\n        var _this = this;\n        // create and store the view mapping in the activity object\n        var mapping = activity[VIEW_MAP_PREFIX + ViewMapping__nextUID++] = new ViewMapping;\n        mapping._activity = activity;\n        mapping._View = View;\n        mapping._timeout = timeout;\n        // connect to the Resumed signal to display (parent) view(s)\n        // and add layout(s) -- but only once for each activity instance\n        if (!activity[VIEW_INITIALIZED_PROP]) {\n            activity[VIEW_INITIALIZED_PROP] = true;\n            activity.Resumed.connect(function (t) {\n                // wait just a bit to see if stack will skip over\n                Async_defaultExport.sleep(2).then(function () {\n                    var cursor = t.activityStack.getCursor();\n                    if (cursor.activity === activity) {\n                        try {\n                            _this._display(cursor);\n                        }\n                        catch (err) {\n                            t.activityStack.popAsync(activity);\n                            throw err;\n                        }\n                    }\n                });\n            });\n        }\n    };\n    /** Display views for the activity at the top of the stack; throws an error if there is nothing to display */\n    ViewMapping._display = function (cursor) {\n        var activity = cursor.activity;\n        var views = this._findViews(activity, cursor);\n        if (!views.length) {\n            // back up if nothing to display\n            throw new Error(\"No view mapped for this activity\");\n        }\n        else if (views.some(function (v) { return (v instanceof Page_Page); })) {\n            // displaying a (new) page, let Screen figure it out\n            views.forEach(function (v) { return Screen_Screen.displayAsync(v); });\n        }\n        else {\n            // try to use existing page if it features the same content\n            var current = Page_Page.getCurrentPage();\n            if (current && current.content[0] === views[0]) {\n                // just replace content array\n                current.content = views;\n            }\n            else {\n                // create a new page and display everything in one go\n                new Page_Page(views).displayAsync();\n            }\n        }\n    };\n    /** Find (parent) views up to the first full (non-modal) view instance, and add layout fragments on the way back up; returns an array of views to be displayed */\n    ViewMapping._findViews = function (fg, cursor, seen, traceParents) {\n        if (seen === void 0) { seen = {}; }\n        var activity = cursor.activity;\n        while (activity &&\n            (!activity[VIEW_INITIALIZED_PROP] || seen[activity.uid])) {\n            if (traceParents)\n                activity = cursor.goParent().activity;\n            else\n                activity = cursor.goBack().activity;\n        }\n        if (activity) {\n            // make sure this activity is not checked again\n            seen[activity.uid] = true;\n            // found a mapped activity, get instances for all views\n            var result = [];\n            var fragments = [];\n            var hasFullView;\n            for (var id in activity) {\n                if (id[0] === \"#\" && id.slice(0, 6) === VIEW_MAP_PREFIX) {\n                    var view = activity[id]._getInstance(fg);\n                    if (view instanceof Page_Page) {\n                        // found a page, use it as a full view (sort to front)\n                        hasFullView = true;\n                        result.unshift(view);\n                        if (result[1] && (result[1] instanceof Page_Page)) {\n                            // keep only one page instance\n                            result.splice(1, 1);\n                        }\n                    }\n                    else if (isLayoutFragment(view)) {\n                        // found a fragment only, try to use it later\n                        fragments.push(view);\n                    }\n                    else if (view.displayOptions && view.displayOptions.modal) {\n                        // found a modal view, use it on top of other views\n                        result.push(view);\n                        // connect to Closed signal to pop activity automatically\n                        var Closed = view.Closed;\n                        if (Closed && typeof Closed.connectOnce === \"function\") {\n                            Closed.connectOnce(function () {\n                                cursor.activityStack.popAsync(activity);\n                            });\n                        }\n                    }\n                    else {\n                        // found a full view component\n                        hasFullView = true;\n                        result.push(view);\n                    }\n                }\n            }\n            // keep looking if no full view component was found\n            if (!hasFullView && fragments.length) {\n                // got a fragment: check with parents first\n                var parentViews = this._findViews(fg, cursor.clone().goParent(), seen, true);\n                for (var i = parentViews.length - 1; i >= 0; i--) {\n                    var parentView = parentViews[i];\n                    if ((parentView instanceof Page_Page) ||\n                        !parentView.displayOptions ||\n                        !parentView.displayOptions.modal)\n                        hasFullView = true;\n                    result.unshift(parentView);\n                }\n            }\n            if (!hasFullView) {\n                // check with previous activities\n                result = this._findViews(fg, cursor.goBack(), seen)\n                    .concat(result);\n            }\n            // add fragments to full views where possible\n            fragments.forEach(function (frag) {\n                for (var i = result.length - 1; i >= 0; i--) {\n                    var view_1 = result[i];\n                    if ((view_1 instanceof Component_Component) &&\n                        isLayoutFragment(frag, view_1)) {\n                        view_1.appendChild(frag);\n                        break;\n                    }\n                }\n            });\n            return result;\n        }\n        return [];\n    };\n    /** Create a view instance (or use the existing instance), and watch given foreground activity for suspension to dereference the view instance */\n    ViewMapping.prototype._getInstance = function (fg) {\n        var _this = this;\n        var instance;\n        if (this._timeout > 0) {\n            var ref = ++this._ref;\n            fg.Suspended.connectOnce(function () {\n                // check if reactivated application activity\n                if (_this._instanceIndex !== Application_Application.current.activationIndex) {\n                    // dereference immediately\n                    delete _this._instance;\n                    return;\n                }\n                // dereference after timeout, unless overtaken\n                // by another call to getInstance\n                Async_defaultExport.sleep(_this._timeout).then(function () {\n                    if (ref === _this._ref && instance === _this._instance)\n                        delete _this._instance;\n                });\n            });\n        }\n        if (this._instanceIndex !== Application_Application.current.activationIndex) {\n            delete this._instance;\n            this._instanceIndex = Application_Application.current.activationIndex;\n        }\n        return instance = this._instance || (this._instance =\n            new this._View(this._activity));\n    };\n    return ViewMapping;\n}());\n/** *Class decorator*, maps the decorated view class to an `Activity` class; the view class should be a UI `Component` or `Page` class with a constructor that has a single matching activity argument, possibly a view layout or fragment class that derives from the types in the `Layout` namespace; if the view class is a fragment, it is automatically added to the (parent) activity's matching view; re-uses view instances when possible, but views are dereferenced within given timeout when no longer in use (in ms, defaults to 2s, set to 0 to disable) [decorator] */\nfunction mapViewActivity(activityClass, dereferenceTimeout) {\n    if (dereferenceTimeout === void 0) { dereferenceTimeout = 2000; }\n    return function (target) {\n        // inject initializer into the activity class\n        var current = Async_defaultExport.inject(activityClass, {\n            \"@initialize\": function () {\n                ViewMapping_ViewMapping.mapView(this, target, dereferenceTimeout);\n                current[\"@initialize\"].call(this);\n            }\n        });\n    };\n}\n\n// CONCATENATED MODULE: ./dist/core/lib/App/View/MessageBox.js\nvar MessageBox___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar MessageBox___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** Modal dialog layout view used by `showMessageBox` that contains a title row fragment and a button row fragment, and all messages as separate rows in the main content area */\nvar MessageBox_MessageBoxLayout = (function (_super) {\n    MessageBox___extends(MessageBoxLayout, _super);\n    /** Create a new message box (without content); use `showMessageBox` function instead, to initialize and display a message box with a title, message, and predefined buttons */\n    function MessageBoxLayout() {\n        var _this = _super.call(this) || this;\n        _this.bindFragment(\"header\", \"TitleRow\");\n        _this.bindFragment(\"footer\", \"ButtonRow\");\n        return _this;\n    }\n    /** Layout fragment for the message box title row, used by `showMessageBox` as the header of message box dialogs that contain a title; can be used to apply global style overrides */\n    MessageBoxLayout.TitleRow = Row_Row.with();\n    /** Layout fragment for the message box button row, used by `showMessageBox` as a footer row on message box dialogs; can be used to apply global style overrides */\n    MessageBoxLayout.ButtonRow = Row_Row.with();\n    /** Message row component factory (NOT a fragment), used by `showMessageBox` to construct the _first_ message row; can be used to apply global style overrides */\n    MessageBoxLayout.FirstMessageRow = Row_Row.with();\n    /** Message row component factory (NOT a fragment), used by `showMessageBox` to construct the all message rows _other than the first row_; can be used to apply global style overrides */\n    MessageBoxLayout.MessageRow = Row_Row.with();\n    /** Label used for the default \"Dismiss\" button when the arguments to `showMessageBox` do not include a single button; can be changed but must be a `UI.TextLabelFactory` (i.e. result of `UI.tl`) */\n    MessageBoxLayout.DISMISS_LABEL = new TextLabelFactory_TextLabelFactory(\"Dismiss\");\n    MessageBox___decorate([\n        layoutFragment\n    ], MessageBoxLayout, \"TitleRow\", void 0);\n    MessageBox___decorate([\n        layoutFragment\n    ], MessageBoxLayout, \"ButtonRow\", void 0);\n    return MessageBoxLayout;\n}(Base_BaseDialogLayout));\n\n// implementation:\nfunction showMessageBox() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var layoutArgs = [];\n    // check for title text\n    if (args[1] && !args[1].isComponentFactory) {\n        // first argument is not the only text: it is the title text\n        var titleArg = args.shift();\n        if (typeof titleArg === \"string\") {\n            // use a wide label by default\n            titleArg = new TextLabelFactory_TextLabelFactory(\"{}\" + titleArg, undefined, false, WideLabel);\n        }\n        layoutArgs.push(MessageBox_MessageBoxLayout.TitleRow.with(titleArg, DialogContainer_DialogContainer.TopCloseButton));\n    }\n    // append message text\n    if (args.length) {\n        var textArg = args.shift();\n        if (!(textArg instanceof Array))\n            textArg = [textArg];\n        textArg.forEach(function (t, i) {\n            if (typeof t === \"string\") {\n                // use a paragraph label by default\n                t = new TextLabelFactory_TextLabelFactory(\"{}\" + (t || \"\"), undefined, false, Paragraph);\n            }\n            layoutArgs.push(i ?\n                MessageBox_MessageBoxLayout.MessageRow.with(t) :\n                MessageBox_MessageBoxLayout.FirstMessageRow.with(t));\n        });\n    }\n    // if no button passed in, use a default \"Dismiss\" button\n    if (!args.length) {\n        args.push(Button_Button.withLabel(MessageBox_MessageBoxLayout.DISMISS_LABEL));\n    }\n    // remaining args should be Button component factories at this point\n    var buttons = args.map(function (arg) { return new arg(); });\n    layoutArgs.push(new MessageBox_MessageBoxLayout.ButtonRow(buttons));\n    // create and show the dialog\n    var dialog = new (MessageBox_MessageBoxLayout.with.apply(MessageBox_MessageBoxLayout, layoutArgs))();\n    dialog.openAsync();\n    return new Async_defaultExport.Promise(function (resolve) {\n        // resolve with button index when clicked, and close dialog\n        buttons.forEach(function (b, i) {\n            b.Click.connectOnce(function () {\n                resolve(i);\n                dialog.close();\n            });\n        });\n        // resolve with undefined value if dismissed otherwise\n        dialog.Closed.connectOnce(function () {\n            resolve(undefined);\n        });\n    });\n}\n\n// CONCATENATED MODULE: ./dist/core/lib/App/View/index.js\n\n\n\n\n\n// CONCATENATED MODULE: ./dist/core/lib/App/Activity/Activity.js\nvar Activity___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Activity___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n/** Current unique ID for Activity instances */\nvar Activity__nextUID = 0;\n/** Activity base class, represents a UI activity; to be extended by application code, and registered using an activation decorator (i.e. `mapActivation` or `mapRoute`); can be linked to a view class to be displayed by decorating the view (`UI.Component` or `UI.Page` class using `mapViewActivity`) */\nvar Activity_Activity = (function (_super) {\n    Activity___extends(Activity, _super);\n    /** Create an activity instance, using given activation object if any; if the activation object is the result of a route mapping, it contains all routing parameters as string properties; otherwise the activation object may contain any type of data that can be used to initialize the new activity, and replace it with a new instance (following `Application.reactivate`) */\n    function Activity(activation) {\n        if (activation === void 0) { activation = {}; }\n        var _this = _super.call(this) || this;\n        /** Globally unique activity identifier */\n        _this.uid = \"A\" + Activity__nextUID++;\n        /** Object that contains options for this activity (observable, never null or undefined) */\n        _this.options = {};\n        /** Signal that is emitted before this activity is pushed to foreground, if any handler throws an error then the activity is not activated */\n        _this.Starting = Signal_Signal.create();\n        /** Signal that is emitted after this activity is pushed to foreground (note that `.Resumed` will also always be emitted) */\n        _this.Started = Signal_Signal.create();\n        /** Signal that is emitted before another activity is pushed to foreground, if any handler throws an error then the activity is not suspended */\n        _this.Suspending = Signal_Signal.create();\n        /** Signal that is emitted after this activity is no longer in foreground */\n        _this.Suspended = Signal_Signal.create();\n        /** Signal that is emitted before this activity is put back in foreground, if any handler throws an error then the previous activity is not suspended */\n        _this.Resuming = Signal_Signal.create();\n        /** Signal that is emitted after this activity is in foreground (emitted after `.Resuming`, or after `.Starting` together with `.Started`) */\n        _this.Resumed = Signal_Signal.create();\n        /** Signal that is emitted after this activity is removed from history, and will not be resumed anymore */\n        _this.Deactivated = Signal_Signal.create();\n        if (activation instanceof Activation_Activation) {\n            // use given activation object\n            _this.activation = activation;\n        }\n        else {\n            // no object specified, create class on the fly\n            var DirectActivation = (function (_super) {\n                Activity___extends(DirectActivation, _super);\n                function DirectActivation() {\n                    return _super !== null && _super.apply(this, arguments) || this;\n                }\n                return DirectActivation;\n            }(Activation_Activation));\n            _this.activation = new DirectActivation(activation);\n        }\n        _this[\"@initialize\"]();\n        Async_defaultExport.defer(function () {\n            var p = _this.onCreateAsync();\n            if (p)\n                _this.Starting.connectOnce(function () { return p; });\n        });\n        return _this;\n    }\n    /** Get an instance of this activity class, can be overridden to alter behavior when e.g. pushing a parent activity by class; by default simply constructs the instance without parameters */\n    Activity.getInstance = function (activation) {\n        if (this === Activity)\n            throw new TypeError();\n        return new this(activation);\n    };\n    /** Method that is called asynchronously after this activity is created; override this method to perform any initialization that must be completed before the activity is started; if this method returns a promise, it must be fulfilled _before_ the activity can be pushed to the foreground */\n    Activity.prototype.onCreateAsync = function () {\n        /* nothing here */\n    };\n    /** @internal Injectable method called by the constructor, used by activity decorators */\n    Activity.prototype[_a = \"@initialize\"] = function () { };\n    Activity___decorate([\n        Async_defaultExport.injectable\n    ], Activity.prototype, _a, null);\n    Activity___decorate([\n        Async_defaultExport.observable_string\n    ], Activity.prototype, \"title\", void 0);\n    Activity___decorate([\n        Async_defaultExport.observable_not_null\n    ], Activity.prototype, \"options\", void 0);\n    return Activity;\n    var _a;\n}(Async_defaultExport.ObservableObject));\n\n/** Represents an activity that should be created only once and re-used if required (overrides .getInstance static method); abstract class, to be overridden */\nvar Activity_SingletonActivity = (function (_super) {\n    Activity___extends(SingletonActivity, _super);\n    /** Create a new activity; can be used only once */\n    function SingletonActivity(activation) {\n        var _this = _super.call(this, activation) || this;\n        var self = _this.constructor;\n        if (self._instance)\n            throw new Error(\"Cannot create another instance of this activity\");\n        self._instance = _this;\n        return _this;\n    }\n    /** Get the instance of this activity class, constructs the instance without parameters once and returns this instance every time */\n    SingletonActivity.getInstance = function (activation) {\n        if (this._instanceIndex !== Application_Application.current.activationIndex) {\n            delete this._instance;\n            this._instanceIndex = Application_Application.current.activationIndex;\n        }\n        return this._instance || new this(activation);\n    };\n    return SingletonActivity;\n}(Activity_Activity));\n\n/** Represents a singleton activity that may only exist in the background (i.e. it should not be started directly, and it should be skipped when navigating back in history, enforced by `Application`), created only once and re-used if required (overrides .getInstance static method); abstract class, needs to be overridden */\nvar SupportActivity = (function (_super) {\n    Activity___extends(SupportActivity, _super);\n    function SupportActivity(activation) {\n        var _this = _super.call(this, activation) || this;\n        _this.options.isBackgroundActivity = true;\n        return _this;\n    }\n    return SupportActivity;\n}(Activity_SingletonActivity));\n\n/** Represents a singleton activity that is both a root activity (i.e. may exist only once on the activity stack, starting/replacing the activity again transitions the stack up to the existing activity instead), and a hub activity (i.e. starting any activity that specifies this activity as its parent activity, transitions the stack up to the hub activity first, suspending all other activities that used to be in the foreground), created only once and re-used if required (overrides .getInstance static method); abstract class, to be overridden */\nvar RootActivity = (function (_super) {\n    Activity___extends(RootActivity, _super);\n    function RootActivity(activation) {\n        var _this = _super.call(this, activation) || this;\n        _this.options.isHubActivity = true;\n        _this.options.isRootActivity = true;\n        return _this;\n    }\n    return RootActivity;\n}(Activity_SingletonActivity));\n\n/** *Class decorator*, associates a parent activity class with the decorated `Activity` class: whenever an activity instance of the class decorated with this decorator is started, an instance of the given parent activity class must already exist on the stack, or a (new) instance will be started in advance [decorator] */\nfunction mapParentActivity(parentActivityClass) {\n    return function (target) {\n        var current = Async_defaultExport.inject(target, {\n            \"@initialize\": function () {\n                current[\"@initialize\"].call(this);\n                // set parent activity class reference\n                if (!(parentActivityClass.prototype instanceof Activity_Activity))\n                    throw new TypeError(\"Invalid parent activity\");\n                if (this.options.parentActivity &&\n                    this.options.parentActivity !== parentActivityClass)\n                    throw new Error(\"Cannot add more than one parent activity\");\n                this.options.parentActivity = parentActivityClass;\n            }\n        });\n    };\n}\n\n// CONCATENATED MODULE: ./dist/core/lib/App/Activity/Activation.js\nvar Activation___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Activation___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n/** Name for the property on activation objects, set by `ActivationRouter#match` and used by the `getPath` method injected by `mapRoute`, that holds the path that actually lead to the activation */\nvar MAPROUTE_PATH_PROPERTY = \"@mapRoute.path\";\n/** Functions that return an Activation instance if a given path matches the stored route; hashed by route string to avoid duplication */\nvar routersByRoute = {};\n/** List of routes currently mapped (with matchers in `routersByRoute`) */\nvar routesList = [];\n/** Lookup table of known named routes */\nvar namedRoutes = {};\n/** Encapsulates a command to start an activity; should be extended into unique classes that `Activity` classes can be mapped to using `mapActivation`, and which can be mapped to routes using `mapRoute`; the latter will enable saving parts of a path (URL) to properties on the activation object */\nvar Activation_Activation = (function () {\n    /** Create a new activation object, which can be used (with a derived class) to start an activity based on the Activation class type, and stored property values; copies all properties from the given object, if any */\n    function Activation(properties) {\n        if (properties) {\n            // copy all given properties to this instance\n            for (var p in properties)\n                if (Object.prototype.hasOwnProperty.call(properties, p))\n                    this[p] = properties[p];\n        }\n    }\n    /** Returns a new activation object for the given route path (must start with `/` or `#/`), or undefined if none of the currently mapped routes match */\n    Activation.route = function (path) {\n        // go through the list of mapped routes and run matchers one by one\n        if (typeof path === \"string\" && /^#?\\//.test(path)) {\n            for (var _i = 0, routesList_1 = routesList; _i < routesList_1.length; _i++) {\n                var r = routesList_1[_i];\n                var result = routersByRoute[r].match(path);\n                if (result)\n                    return result;\n            }\n        }\n        return undefined;\n    };\n    /** Returns a promise for an activity instance, or for undefined if no `Activity` class is mapped to this activation type; this method is injected by `mapActivation`, but can also be overridden directly to customize the behavior of creating activities for activation objects (e.g. testing for valid IDs, or lazy loading) */\n    Activation.prototype.getActivityAsync = function () {\n        // (injected by mapActivation)\n        return Async_defaultExport.Promise.resolve(undefined);\n    };\n    /** Returns the full path that will route to this activation object (or the path that this object was actually created for, using `mapRoute`), or undefined if no route has been mapped to this activation class or if one of the route parameters is missing */\n    Activation.prototype.getPath = function () {\n        // (injected by mapRoute)\n        return undefined;\n    };\n    Activation___decorate([\n        Async_defaultExport.injectable\n    ], Activation.prototype, \"getActivityAsync\", null);\n    Activation___decorate([\n        Async_defaultExport.injectable\n    ], Activation.prototype, \"getPath\", null);\n    return Activation;\n}());\n\n/** Activation router (internal), created for a mapped route */\nvar ActivationRouter = (function () {\n    function ActivationRouter(route, target) {\n        this.target = target;\n        // dissect given route for faster matching later\n        this._routeSegments = route.split(\"/\").filter(function (s) { return !!s; });\n        this._isHashRoute = this._routeSegments[0] === \"#\";\n        if (this._isHashRoute)\n            this._routeSegments.shift();\n        if (this._routeSegments.length &&\n            this._routeSegments[0][0] === \"&\") {\n            // this is a sub route, remove & store first segment\n            this._isSubRoute = true;\n            this._parentRouteName = this._routeSegments.shift().slice(1);\n        }\n    }\n    /** Returns the full path that will route to given activation object (or the path that the object was actually created for, using `mapRoute`), or undefined if no route has been mapped to the activation class or if one of the route parameters is missing */\n    ActivationRouter.prototype.getPathFor = function (activation) {\n        if (activation[MAPROUTE_PATH_PROPERTY]) {\n            // use actual path used\n            return activation[MAPROUTE_PATH_PROPERTY];\n        }\n        var result = \"\";\n        if (this._isSubRoute) {\n            // get path from parent activation router first\n            var parent = namedRoutes[this._parentRouteName];\n            if (!parent)\n                return undefined;\n            result = parent.getPathFor(activation);\n            if (result === undefined)\n                return undefined;\n        }\n        else if (this._isHashRoute) {\n            result = \"#\";\n        }\n        // add all path segments for this route\n        for (var _i = 0, _a = this._routeSegments; _i < _a.length; _i++) {\n            var segment = _a[_i];\n            if (segment[0] === \"*\" || segment[0] === \":\") {\n                // substitute activation property\n                var value = activation[segment.slice(1)];\n                if (value === undefined || value === null)\n                    return undefined;\n                result += \"/\" + value;\n            }\n            else {\n                // include segment literally\n                result += \"/\" + segment;\n            }\n        }\n        return result;\n    };\n    /** Returns a new activation object if the given path matches the mapped route */\n    ActivationRouter.prototype.match = function (path) {\n        var idx = (path[0] === \"#\") ? 1 : 0;\n        var segments = this._routeSegments;\n        if (!segments.length && this._isHashRoute && /^[^#]*#?$/) {\n            // always match home path #/ for a hashless path\n            return new this.target();\n        }\n        if (this._isSubRoute) {\n            // look for parent route first, prepend segments\n            var parent = namedRoutes[this._parentRouteName];\n            if (!parent)\n                return undefined;\n            if (!!idx !== parent._isHashRoute)\n                return undefined;\n            segments = parent._routeSegments.slice(0);\n            segments.push.apply(segments, this._routeSegments);\n        }\n        else {\n            // give up early if not hash route and path\n            if (!!idx !== this._isHashRoute)\n                return undefined;\n        }\n        // match route segments one by one\n        var segmentIdx = 0, parameters = {};\n        while (segmentIdx < segments.length) {\n            if (path[idx++] !== \"/\")\n                return undefined;\n            if (path.length <= idx)\n                return undefined;\n            var spec = segments[segmentIdx++];\n            if (spec[0] === \"*\") {\n                // match glob: store remainder in a parameter\n                parameters[spec.slice(1)] = path.slice(idx);\n                idx = path.length;\n                continue;\n            }\n            // find next segment in given path\n            var end = path.indexOf(\"/\", idx);\n            if (end < 0)\n                end = path.length;\n            if (spec[0] === \":\") {\n                // match parameter: store next segment in a parameter\n                parameters[spec.slice(1)] = path.slice(idx, end);\n            }\n            else if (spec !== path.slice(idx, end)) {\n                // segment does not match\n                return undefined;\n            }\n            idx = end;\n        }\n        // all segments matched, if path is fully consumed then create the activation\n        if (idx >= path.length || path.slice(idx) === \"/\") {\n            parameters[MAPROUTE_PATH_PROPERTY] = path;\n            return new this.target(parameters);\n        }\n        // no match: path is longer than route\n        return undefined;\n    };\n    return ActivationRouter;\n}());\n/** *Class decorator*, maps the decorated `Activation` (sub) class OR `Activity` class OR `Component` (ui module) class to the given route (e.g `dashboard`, `/users/:userID/post/:postID` or `#/docs/*docName`); if a name is provided, it can be used at the start of sub routes, using `&name/sub/route` (without leading hash/slash chars); multiple routes can be added per class; if the decorated class is an `Activity` class, a unique `Activation` sub class is generated automatically, and if the decorated class is a UI `Component` or `Page` class, a unique `Activity` class is also generated [decorator] */\nfunction mapRoute(route, name) {\n    return function (target) {\n        // if target is a view class, generate unique Activity class\n        if (target.prototype instanceof Component_Component ||\n            target.prototype instanceof Page_Page) {\n            var ViewActivity = (function (_super) {\n                Activation___extends(MappedViewActivity, _super);\n                function MappedViewActivity() {\n                    return _super !== null && _super.apply(this, arguments) || this;\n                }\n                return MappedViewActivity;\n            }(Activity_Activity));\n            mapViewActivity(ViewActivity)(target);\n            target = ViewActivity;\n        }\n        // if target is an activity class, generate unique Activation class\n        if (target.prototype instanceof Activity_Activity) {\n            var activation = (function (_super) {\n                Activation___extends(MappedActivation, _super);\n                function MappedActivation() {\n                    return _super !== null && _super.apply(this, arguments) || this;\n                }\n                return MappedActivation;\n            }(Activation_Activation));\n            mapActivation(activation)(target);\n            target = activation;\n        }\n        // store activation route for use while matching paths to routes\n        if (routesList.indexOf(route) < 0)\n            routesList.unshift(route);\n        var router = new ActivationRouter(route, target);\n        routersByRoute[route] = router;\n        if (name)\n            namedRoutes[name] = router;\n        // inject method for generating a full path for an activation object\n        Async_defaultExport.inject(target, {\n            getPath: function () { return router.getPathFor(this); }\n        });\n    };\n}\n/** *Class decorator*, maps the decorated `Activity` class to given `Activation` type, so that routed (path/URL) and manual activations (using an activation object) lead to the instantiation of the decorated `Activity` [decorator] */\nfunction mapActivation(activationType) {\n    return function (target) {\n        // inject method to obtain an activity for instances of this activation type\n        Async_defaultExport.inject(activationType, {\n            getActivityAsync: function () {\n                return Async_defaultExport.Promise.resolve(target.getInstance(this));\n            }\n        });\n    };\n}\n\n// CONCATENATED MODULE: ./dist/core/lib/App/Activity/ActivityStack.js\n\n\nvar currentHistoryIDBase = \"_A\" + String(Math.random()).slice(-5);\nvar currentHistoryID = 0;\nvar nextTransitionID = 0;\nvar previousTransition;\n/** Represents a stack of activated activities (like browser history) */\nvar ActivityStack_ActivityStack = (function () {\n    function ActivityStack() {\n        /** Signal that is emitted when a transition occurs (after Starting/Resuming/Suspending but before Started/Resumed) */\n        this.Transition = Signal_Signal.create();\n        this._idx = Async_defaultExport.ObservableValue.fromValue(-1);\n        this._stack = new Async_defaultExport.ObservableArray();\n        this._ids = [];\n    }\n    /** Add an activity to the foreground asynchronously, does nothing if given activity was already in the foreground; returns Promise that resolves to the completed transition */\n    ActivityStack.prototype.pushAsync = function (activity) {\n        var _this = this;\n        if (!(activity instanceof Activity_Activity))\n            throw new Error(\"Invalid activity\");\n        // push activity and its parents on the stack\n        this._popTransient();\n        this._upToHubOrRoot(activity);\n        return this._transitionP = (this._transitionP || Async_defaultExport.Promise.resolve(undefined))\n            .then(function (t) {\n            previousTransition = undefined;\n            var result;\n            _this._findParents(activity).forEach(function (a) {\n                var p = function () { return _this._processTransition(a, ActivityTransition.Operation.Push); };\n                result = result ? result.then(p) : p();\n            });\n            return result || t;\n        });\n    };\n    /** Replace the current activity asynchronously (throws error if none), or remove current activity if given activity was already directly below current activity in the activity stack; returns Promise that resolves to the completed transition */\n    ActivityStack.prototype.replaceAsync = function (activity) {\n        var _this = this;\n        if (!(activity instanceof Activity_Activity))\n            throw new Error(\"Invalid activity\");\n        // process replace transaction\n        this._popTransient();\n        this._upToHubOrRoot(activity);\n        return this._transitionP = (this._transitionP || Async_defaultExport.Promise.resolve(undefined))\n            .then(function (t) {\n            previousTransition = undefined;\n            var lonely = (_this.topIndex < 0);\n            // pop if already directly below, otherwise replace or push\n            if (!lonely && _this._stack[_this.topIndex - 1] === activity)\n                return _this._processTransition(activity, ActivityTransition.Operation.Pop);\n            else {\n                // replace/push activity and its parents on the stack\n                var result;\n                _this._findParents(activity, true).forEach(function (a) {\n                    var p = function () { return _this._processTransition(a, (result || lonely) ?\n                        ActivityTransition.Operation.Push :\n                        ActivityTransition.Operation.Replace); };\n                    result = result ? result.then(p) : p();\n                });\n                return result || t;\n            }\n        });\n    };\n    ActivityStack.prototype.popAsync = function (activity) {\n        var _this = this;\n        return this._transitionP = (this._transitionP || Async_defaultExport.Promise.resolve(undefined))\n            .then(function () {\n            previousTransition = undefined;\n            if (_this.topIndex < 0)\n                throw new Error(\"No activity to suspend\");\n            if (activity !== undefined && _this.top !== activity)\n                return Async_defaultExport.Promise.resolve(undefined);\n            // send signals and return promise\n            return _this._processTransition(_this._stack[_this.topIndex - 1], ActivityTransition.Operation.Pop);\n        });\n    };\n    /** Remove foreground activities until given activity or activity of given type is in the foreground; returns Promise that resolves to activity, or undefined if there was no matching activity on the stack */\n    ActivityStack.prototype.upAsync = function (activityOrClass) {\n        var _this = this;\n        var isActivity = (activityOrClass instanceof Activity_Activity);\n        var recurse = function () {\n            if (isActivity ?\n                (_this.top === activityOrClass) :\n                (_this.top instanceof activityOrClass))\n                return Async_defaultExport.Promise.resolve(_this.top);\n            if (_this._stack.some(function (activity) { return isActivity ?\n                (activity === activityOrClass) :\n                (activity instanceof activityOrClass); }))\n                return _this._processTransition(_this._stack[_this.topIndex - 1], ActivityTransition.Operation.Pop)\n                    .then(function () { return recurse(); });\n            else\n                return Async_defaultExport.Promise.resolve(undefined);\n        };\n        return this._transitionP = (this._transitionP || Async_defaultExport.Promise.resolve(undefined))\n            .then(function () {\n            previousTransition = undefined;\n            return recurse();\n        });\n    };\n    /** Reload state using given history ID, if possible (i.e. not yet deactivated relevant activities in the meantime); returns a promise that resolves when the state has been reached */\n    ActivityStack.prototype.restoreHistoryStateAsync = function (historyID) {\n        var _this = this;\n        var idx = this._ids.lastIndexOf(historyID);\n        if (idx < 0 && historyID !== \"0\")\n            throw new Error(\"Cannot resume activities\");\n        if (idx === this.topIndex)\n            return Async_defaultExport.Promise.resolve(undefined);\n        // either go back or go forward and check again\n        return (idx < this.topIndex ?\n            this.popAsync() :\n            this.pushAsync(this._stack[this.topIndex + 1]))\n            .then(function () { return _this.restoreHistoryStateAsync(historyID); });\n    };\n    /** Get an ID that represents the current state, for use with `.restoreHistoryStateAsync` */\n    ActivityStack.prototype.getHistoryState = function () {\n        return this._ids[this.topIndex] || \"0\";\n    };\n    /** Get the activity closest to the foreground of the given type, if any (excluding foreground activity itself, and before given activity in second parameter, if any) */\n    ActivityStack.prototype.getParent = function (ActivityClass, before) {\n        var seenBefore = (this._stack[this.topIndex] === before);\n        for (var i = this.topIndex - 1; i >= 0; i--) {\n            if ((seenBefore || !before) &&\n                this._stack[i] instanceof ActivityClass)\n                return this._stack[i];\n            if (this._stack[i] === before)\n                seenBefore = true;\n        }\n        return undefined;\n    };\n    /** Returns true if the stack contains given activity */\n    ActivityStack.prototype.contains = function (activity) {\n        for (var i = this.topIndex; i >= 0; i--)\n            if (this._stack[i] === activity)\n                return true;\n        return false;\n    };\n    Object.defineProperty(ActivityStack.prototype, \"top\", {\n        /** The current foreground activity (top of stack, if any; observable) */\n        get: function () {\n            if (this.topIndex < 0)\n                return undefined;\n            return this._stack[this.topIndex];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivityStack.prototype, \"length\", {\n        /** The number of activities on the stack (observable) */\n        get: function () {\n            return this.topIndex + 1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ActivityStack.prototype, \"title\", {\n        /** The title of the topmost activity that has a title defined (observable) */\n        get: function () {\n            for (var i = this.topIndex; i >= 0; i--)\n                if (this._stack[i].title !== undefined)\n                    return this._stack[i].title;\n            return \"\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Create an activity cursor that starts at the top of this stack, and can move back on the stack and to parent activities; if the `activity` property is undefined, the cursor has reached the end; note that any changes to the stack while the cursor is in use may yield unexpected results */\n    ActivityStack.prototype.getCursor = function () {\n        var _this = this;\n        var cursor = function (idx, stack) { return ({\n            activityStack: _this,\n            clone: function () { return cursor(idx, stack); },\n            get activity() {\n                if (idx >= stack.length)\n                    idx = stack.length - 1;\n                if (idx < 0)\n                    return undefined;\n                return stack[idx];\n            },\n            goBack: function () { idx--; return this; },\n            goParent: function () {\n                var current = this.activity;\n                if (current) {\n                    var parent = current.options.parentActivity;\n                    var isClass = (typeof parent === \"function\");\n                    for (idx--; idx >= 0; idx--) {\n                        current = stack[idx];\n                        if (current === parent || isClass &&\n                            (current instanceof parent))\n                            return this;\n                    }\n                }\n                return this;\n            }\n        }); };\n        return cursor(this.topIndex, this._stack);\n    };\n    /** Helper method to find parent activity/ies for given activity; returns an array of activities to be pushed (including activity itself) */\n    ActivityStack.prototype._findParents = function (activity, excludeTop) {\n        var result = [activity];\n        while (result[0].options.parentActivity) {\n            // ensure parent is on stack somewhere\n            var parent = result[0].options.parentActivity;\n            if (parent instanceof Activity_Activity) {\n                if (this.contains(parent) &&\n                    (!excludeTop || this.top !== parent))\n                    break;\n                result.unshift(parent);\n            }\n            else {\n                if ((!excludeTop && (this.top instanceof parent)) ||\n                    this.getParent(parent))\n                    break;\n                result.unshift(parent.getInstance());\n            }\n        }\n        return result;\n    };\n    /** Helper method to move up to existing root activity, or hub parent activity if needed */\n    ActivityStack.prototype._upToHubOrRoot = function (activity) {\n        // check if activity is a root activity and move up if possible\n        if (activity.options.isRootActivity && this.contains(activity)) {\n            this.upAsync(activity);\n            // wait until browser history is synchronized\n            this._transitionP =\n                (this._transitionP || Async_defaultExport.Promise.resolve(undefined))\n                    .then(function () { return Async_defaultExport.sleep(2); });\n        }\n        else {\n            // find out if existing parent activity is a hub activity\n            var parent;\n            if (parent = activity.options.parentActivity) {\n                if (!(parent instanceof Activity_Activity))\n                    parent = this.getParent(parent);\n                if (parent && parent.options.isHubActivity)\n                    this.upAsync(parent);\n                // wait until browser history is synchronized\n                this._transitionP =\n                    (this._transitionP || Async_defaultExport.Promise.resolve(undefined))\n                        .then(function () { return Async_defaultExport.sleep(2); });\n            }\n        }\n    };\n    /** Helper method to remove a transient activity if needed */\n    ActivityStack.prototype._popTransient = function () {\n        if (this.top && this.top.options.isTransient) {\n            var current = this.getCursor();\n            while (current.activity && current.activity.options.isTransient) {\n                current.goBack();\n            }\n            if (current.activity)\n                this.upAsync(current.activity);\n        }\n    };\n    /** Helper method for sending signals and creating promise */\n    ActivityStack.prototype._processTransition = function (to, op) {\n        var _this = this;\n        // create transition operation\n        var t = Object.freeze({\n            id: \"T\" + nextTransitionID++,\n            activityStack: this,\n            op: op, to: to, from: this.top,\n            previous: previousTransition\n        });\n        previousTransition = t;\n        // check if anything to do at all\n        if (this.top === to) {\n            if (op === ActivityTransition.Operation.Pop)\n                this.topIndex--;\n            return Async_defaultExport.Promise.resolve(t);\n        }\n        // gather promises for Suspending results\n        var top = this.top;\n        var suspense = top ? new top.Suspending(t).emit().results : [];\n        // try to activate/resume new activity and return promise\n        var resuming = !!to && this.contains(to);\n        return Async_defaultExport.Promise.all(suspense)\n            .then(function () {\n            // signal that transition is about to happen\n            return Async_defaultExport.Promise.all(resuming ?\n                new t.to.Resuming(t).emit().results :\n                t.to ? new t.to.Starting(t).emit().results : []);\n        })\n            .then(function () {\n            // when all handlers are OK, go ahead:\n            _this.Transition(t);\n            switch (t.op) {\n                case ActivityTransition.Operation.Pop:\n                    // just decrease stack top\n                    _this.topIndex--;\n                    break;\n                case ActivityTransition.Operation.Replace:\n                    // decrease stack top and then push\n                    _this.topIndex--;\n                case ActivityTransition.Operation.Push:\n                    // only move stack top if same activity above\n                    if (_this._stack.length > _this.topIndex + 1 &&\n                        _this._stack[_this.topIndex + 1] === t.to) {\n                        _this.topIndex++;\n                    }\n                    else {\n                        // deactivate overwritten stack top\n                        while (_this._stack.length > _this.topIndex + 1) {\n                            var oldTop = _this._stack.pop();\n                            if (!_this.contains(oldTop))\n                                oldTop.Deactivated(t);\n                        }\n                        // push new activity\n                        _this.topIndex = _this._stack.push(t.to) - 1;\n                        _this._ids.length = _this._stack.length;\n                        _this._ids[_this.topIndex] =\n                            currentHistoryIDBase + currentHistoryID++;\n                    }\n            }\n            // signal that transition has happened\n            if (t.to) {\n                if (!resuming)\n                    t.to.Started(t);\n                t.to.Resumed(t);\n            }\n            top && top.Suspended(t);\n            return t;\n        });\n    };\n    Object.defineProperty(ActivityStack.prototype, \"topIndex\", {\n        /** @internal */\n        get: function () { return this._idx.value; },\n        set: function (v) { this._idx.value = v; },\n        enumerable: true,\n        configurable: true\n    });\n    return ActivityStack;\n}());\n\nvar ActivityTransition;\n(function (ActivityTransition) {\n    /** Operation type that triggered a transition */\n    var Operation;\n    (function (Operation) {\n        /** Push operation */\n        Operation[Operation[\"Push\"] = 0] = \"Push\";\n        /** Replace operation */\n        Operation[Operation[\"Replace\"] = 1] = \"Replace\";\n        /** Pop operation */\n        Operation[Operation[\"Pop\"] = 2] = \"Pop\";\n    })(Operation = ActivityTransition.Operation || (ActivityTransition.Operation = {}));\n    ;\n})(ActivityTransition || (ActivityTransition = {}));\n\n// CONCATENATED MODULE: ./dist/core/lib/App/Activity/index.js\n\n\n\n\n// CONCATENATED MODULE: ./dist/core/lib/App/Culture/CultureService.js\nvar CultureService___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar CultureService___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n/** Quick 2-digit number padding implementation for date/time formatting */\nvar d2 = function (n) { return n < 10 ? \"0\" + n : String(n); };\n/** Quick 4-digit number padding implementation for year formatting */\nfunction d4(n) {\n    var s = String(d4);\n    return \"000\".slice(0, Math.max(3 - s.length, 0)) + s;\n}\n;\n/** String splitter for day/month names */\nvar capSplit = function (s) { return s.split(/(?=[A-Z])/); };\n/** English weekday names */\nvar dayNames = capSplit(\"SundayMondayTuesdayWednesdayThursdayFridaySaturday\");\n/** English abbreviated weekday names */\nvar dayNamesAbbr = capSplit(\"SunMonTueWedThuFriSat\");\n/** English month names */\nvar monthNames = capSplit(\"JanuaryFebruaryMarchAprilMayJuneJulyAugustSeptemberOctoberNovemberDecember\");\n/** English abbreviated month names */\nvar monthNamesAbbr = capSplit(\"JanFebMarAprMayJunJulAugSepOctNovDec\");\n/** Base culture service (mapped on `culture_neutral` and `culture` initially); to be overridden with a language and region specific culture service, mapped as `culture_xx_YY_zz` (language xx, country YY, region zz, where YY and zz are optional), and aliased as `culture` using `addServiceAlias` to set as the current culture */\nvar CultureService_CultureService = (function (_super) {\n    CultureService___extends(CultureService, _super);\n    function CultureService() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /** The name of this culture, defaults to \"none\" but should be set to _languagecode-countrycode/regioncode_ and/or shorter forms such as _languagecode-countrycode_ and _languagecode_ */\n        _this.name = \"neutral\";\n        /** Collection of date/time formatters specific to this culture, used by `.formatDateTime`; defaults to a mostly international English format; replacement algorithm requires inclusion of all lengths of possible placeholders (including e.g. `yyy` and `%`) */\n        _this.dateTimeFormatters = {\n            \"d\": function (d) { return d.getDate().toString(); },\n            \"dd\": function (d) { return d2(d.getDate()); },\n            \"ddd\": function (d) { return dayNamesAbbr[d.getDay()]; },\n            \"dddd\": function (d) { return dayNames[d.getDay()]; },\n            \"h\": function (d) { return (d.getHours() % 12 || 12).toString(); },\n            \"hh\": function (d) { return d2(d.getHours() % 12 || 12); },\n            \"H\": function (d) { return d.getHours().toString(); },\n            \"HH\": function (d) { return d2(d.getHours()); },\n            \"m\": function (d) { return d.getMinutes().toString(); },\n            \"mm\": function (d) { return d2(d.getMinutes()); },\n            \"M\": function (d) { return String(d.getMonth() + 1); },\n            \"MM\": function (d) { return d2(d.getMonth() + 1); },\n            \"MMM\": function (d) { return monthNamesAbbr[d.getMonth()]; },\n            \"MMMM\": function (d) { return monthNames[d.getMonth()]; },\n            \"s\": function (d) { return d.getSeconds().toString(); },\n            \"ss\": function (d) { return d2(d.getSeconds()); },\n            \"t\": function (d) { return (d.getHours() < 12 ? \"a\" : \"p\"); },\n            \"tt\": function (d) { return (d.getHours() < 12 ? \"AM\" : \"PM\"); },\n            \"y\": function (d) { return String(d.getFullYear() % 100); },\n            \"yy\": function (d) { return d2(d.getFullYear() % 100); },\n            \"yyy\": function (d) { return d2(d.getFullYear() % 100); },\n            \"yyyy\": function (d) { return d.getFullYear().toString(); },\n            \"/\": function () { return \"/\"; },\n            \":\": function () { return \":\"; },\n            \"%\": function () { return \"\"; },\n            \"%d\": function (d, s) { return s.formatDateTime(d, \"d/M/y\"); },\n            \"%dd\": function (d, s) { return s.formatDateTime(d, \"d MMM yyyy\"); },\n            \"%ddd\": function (d, s) { return s.formatDateTime(d, \"d MMMM yyyy\"); },\n            \"%dddd\": function (d, s) { return s.formatDateTime(d, \"dddd, d MMMM yyyy\"); },\n            \"%t\": function (d, s) { return s.formatDateTime(d, \"h:mm tt\"); },\n            \"%tt\": function (d, s) { return s.formatDateTime(d, \"h:mm:ss tt\"); },\n            \"%T\": function (d, s) { return s.formatDateTime(d, \"H:mm\"); },\n            \"%TT\": function (d, s) { return s.formatDateTime(d, \"H:mm:ss\"); },\n        };\n        return _this;\n    }\n    /** Translate given text (may include placeholders and prefixes used by `UI.tl`) */\n    CultureService.prototype.translateText = function (text) {\n        return this._textLookup && this._textLookup[text] || text;\n    };\n    /** Add simple text (lookup) translations to this culture service instance; given lookup table object must contain source text as property names, and translated text as values */\n    CultureService.prototype.addTranslations = function (lookup) {\n        if (!this._textLookup)\n            this._textLookup = {};\n        for (var source in lookup) {\n            this._textLookup[source] = lookup[source];\n        }\n    };\n    /** Pluralize text based on given number and substitution form(s); defaults to English singular/plural rules without automatic pluralization (i.e. both singular and plural forms need to be specified in the placeholder) */\n    CultureService.prototype.pluralizeText = function (n, forms) {\n        return (n === 0 || n > 1 || n < -1) ? (forms[1] || forms[0]) : forms[0];\n    };\n    /** Returns given number formatted using culture specific rules, and using given precision (i.e. fixed number of decimals to display e.g. `2.00`, and/or rounding at given number of decimals, default 8, to avoid binary-to-decimal rounding errors such as `1.99999999`...); default implementation uses decimal point (`.`) and no thousands separators, but may revert to scientific notation for numbers with more than 20 digits (platform default) */\n    CultureService.prototype.formatNumber = function (n, fixedDecimals, roundDecimals) {\n        if (roundDecimals === void 0) { roundDecimals = 8; }\n        if (typeof n !== \"number\")\n            n = parseFloat(n);\n        if (roundDecimals >= 0) {\n            var factor = 1;\n            while (roundDecimals--)\n                factor *= 10;\n            n = Math.round(n * factor) / factor;\n        }\n        return fixedDecimals >= 0 ? n.toFixed(fixedDecimals) : String(n);\n    };\n    /** Returns given number formatted as a currency, with given currency symbol and fixed number of decimals; defaults to \"$\", non-breaking space, and number with 2 fixed decimals; specific culture implementations should override defaults but still accept the same arguments */\n    CultureService.prototype.formatCurrency = function (n, currencySymbol, fixedDecimals) {\n        if (currencySymbol === void 0) { currencySymbol = \"$\"; }\n        if (fixedDecimals === void 0) { fixedDecimals = 2; }\n        return currencySymbol + \"\\xa0\" + this.formatNumber(n, fixedDecimals);\n    };\n    /** Returns given number formatted as a percentage, with given percentage symbol and fixed number of decimals; defaults to number without fixed decimals and \"%\" character; specific culture implementations should override defaults but still accept the same arguments */\n    CultureService.prototype.formatPercentage = function (n, percSymbol, fixedDecimals) {\n        if (percSymbol === void 0) { percSymbol = \"%\"; }\n        return this.formatNumber(n, fixedDecimals) + percSymbol;\n    };\n    /** Returns given date/time formatted using given format string (e.g. `dd/MMM/yyyy HH:mm`) using the following default placeholders, which may be (re-) defined by the culture service (defaults to `%dd %t`):\n     * * `%d`: short date, e.g. 20/1/17,\n     * * `%dd`: medium date, e.g. 20 Jan 2017\n     * * `%ddd`: long date, e.g. 20 January 2017\n     * * `%dddd`: full date, e.g. Friday, 20 January 2017\n     * * `%t`: time, e.g. 2:20 PM\n     * * `%tt`: time with seconds, e.g. 2:20:00 PM\n     * * `%T`: 24-hour time, e.g. 14:20\n     * * `%TT`: 24-hour time with seconds, e.g. 14:20:00\n     * * `d`: date 0-31,\n     * * `dd`: date 00-31,\n     * * `ddd`: abbreviated weekday name,\n     * * `dddd`: full weekday name,\n     * * `h`: hours 0-12,\n     * * `hh`: hours 00-12,\n     * * `H`: hours 0-23,\n     * * `HH`: hours 00-23,\n     * * `m`: minutes 0-59,\n     * * `mm`: minutes 00-59,\n     * * `M`: month 0-12,\n     * * `MM`: month 00-12,\n     * * `MMM`: abbreviated month name,\n     * * `MMMM`: full month name,\n     * * `s`: seconds 0-59,\n     * * `ss`: seconds 00-59,\n     * * `t`: a/p,\n     * * `tt`: AM/PM,\n     * * `y`: year 0-99,\n     * * `yy`: year 00-99,\n     * * `yyyy`: year 0000-9999,\n     * * `/`: date separator,\n     * * `:`: time separator\n     */\n    CultureService.prototype.formatDateTime = function (d, format) {\n        if (format === void 0) { format = \"%dd %t\"; }\n        var result = \"\";\n        for (var i = 0, len = format.length; i < len; i++) {\n            if (format[i] === \"\\\\\") {\n                result += format[i + 1] || \"\";\n                continue;\n            }\n            for (var j = i, buf = \"\"; j < len && this.dateTimeFormatters[buf + format[j]];)\n                buf += format[j++];\n            if (buf) {\n                result += this.dateTimeFormatters[buf](d, this);\n                i = j - 1;\n                continue;\n            }\n            result += format[i];\n        }\n        return result;\n    };\n    CultureService = CultureService___decorate([\n        mapService(\"culture_neutral\", \"culture\")\n    ], CultureService);\n    return CultureService;\n}(Service));\n\n\n// CONCATENATED MODULE: ./dist/core/lib/App/Culture/Observer.js\nvar Observer___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n/** Helper class used to subscribe to culture changes and update UI module properties */\nvar Observer_Observer = (function () {\n    function Observer() {\n        var _this = this;\n        var currentCulture;\n        Async_defaultExport.observe(function () { return _this.culture; }).subscribe(function (culture) {\n            if (currentCulture && currentCulture !== culture) {\n                // emit global signal\n                CultureChanged(culture);\n            }\n            if (culture) {\n                // update global flow direction\n                Screen_Screen.defaultFlowDirection = culture.textFlowDirection;\n            }\n            currentCulture = culture;\n        });\n        Async_defaultExport.inject(TextLabelFactory_TextLabelFactory, (_a = {},\n            _a[\"@translateText\"] = function (text) {\n                // translate according to current culture (set above)\n                return currentCulture ? currentCulture.translateText(text) : \"\";\n            },\n            _a[\"@pluralizeText\"] = function (n, forms) {\n                // pluralize according to current culture (set above)\n                return currentCulture ? currentCulture.pluralizeText(n, forms) : \"\";\n            },\n            _a));\n        var _a;\n    }\n    Observer___decorate([\n        injectService(\"culture\")\n    ], Observer.prototype, \"culture\", void 0);\n    return Observer;\n}());\n// create an instance to start observing\nAsync_defaultExport.defer(function () { new Observer_Observer(); });\n/** Signal that is emitted when the global i18n culture changes (through `CultureService`) */\nvar CultureChanged = Signal_Signal.create();\n\n// CONCATENATED MODULE: ./dist/core/lib/App/Culture/index.js\n\n\n\n// CONCATENATED MODULE: ./dist/core/lib/App/index.js\nvar lib_App_namespaceObject = {};\n__webpack_require__.d(lib_App_namespaceObject, \"Application\", function() { return Application_Application; });\n__webpack_require__.d(lib_App_namespaceObject, \"startActivityAsync\", function() { return startActivityAsync; });\n__webpack_require__.d(lib_App_namespaceObject, \"findActivity\", function() { return findActivity; });\n__webpack_require__.d(lib_App_namespaceObject, \"Activation\", function() { return Activation_Activation; });\n__webpack_require__.d(lib_App_namespaceObject, \"mapRoute\", function() { return mapRoute; });\n__webpack_require__.d(lib_App_namespaceObject, \"mapActivation\", function() { return mapActivation; });\n__webpack_require__.d(lib_App_namespaceObject, \"Activity\", function() { return Activity_Activity; });\n__webpack_require__.d(lib_App_namespaceObject, \"SingletonActivity\", function() { return Activity_SingletonActivity; });\n__webpack_require__.d(lib_App_namespaceObject, \"SupportActivity\", function() { return SupportActivity; });\n__webpack_require__.d(lib_App_namespaceObject, \"RootActivity\", function() { return RootActivity; });\n__webpack_require__.d(lib_App_namespaceObject, \"mapParentActivity\", function() { return mapParentActivity; });\n__webpack_require__.d(lib_App_namespaceObject, \"ActivityStack\", function() { return ActivityStack_ActivityStack; });\n__webpack_require__.d(lib_App_namespaceObject, \"ActivityTransition\", function() { return ActivityTransition; });\n__webpack_require__.d(lib_App_namespaceObject, \"FRAG_ID_PROP\", function() { return FRAG_ID_PROP; });\n__webpack_require__.d(lib_App_namespaceObject, \"FRAG_HASH_PREFIX\", function() { return FRAG_HASH_PREFIX; });\n__webpack_require__.d(lib_App_namespaceObject, \"isLayoutFragment\", function() { return isLayoutFragment; });\n__webpack_require__.d(lib_App_namespaceObject, \"layoutFragment\", function() { return layoutFragment; });\n__webpack_require__.d(lib_App_namespaceObject, \"mapViewActivity\", function() { return mapViewActivity; });\n__webpack_require__.d(lib_App_namespaceObject, \"MessageBoxLayout\", function() { return MessageBox_MessageBoxLayout; });\n__webpack_require__.d(lib_App_namespaceObject, \"showMessageBox\", function() { return showMessageBox; });\n__webpack_require__.d(lib_App_namespaceObject, \"Service\", function() { return Service; });\n__webpack_require__.d(lib_App_namespaceObject, \"mapService\", function() { return mapService; });\n__webpack_require__.d(lib_App_namespaceObject, \"addServiceAlias\", function() { return addServiceAlias; });\n__webpack_require__.d(lib_App_namespaceObject, \"injectService\", function() { return injectService; });\n__webpack_require__.d(lib_App_namespaceObject, \"CultureService\", function() { return CultureService_CultureService; });\n__webpack_require__.d(lib_App_namespaceObject, \"CultureChanged\", function() { return CultureChanged; });\n__webpack_require__.d(lib_App_namespaceObject, \"BaseLayout\", function() { return Base_BaseLayout; });\n__webpack_require__.d(lib_App_namespaceObject, \"BaseDialogLayout\", function() { return Base_BaseDialogLayout; });\n__webpack_require__.d(lib_App_namespaceObject, \"VerticalLayout\", function() { return Single_VerticalLayout; });\n__webpack_require__.d(lib_App_namespaceObject, \"ScrollableLayout\", function() { return ScrollableLayout; });\n__webpack_require__.d(lib_App_namespaceObject, \"AppBarLayout\", function() { return App_AppBarLayout; });\n__webpack_require__.d(lib_App_namespaceObject, \"AppViewLayout\", function() { return App_AppViewLayout; });\n__webpack_require__.d(lib_App_namespaceObject, \"HubViewLayout\", function() { return App_HubViewLayout; });\n\n\n\n\n\n\n// CONCATENATED MODULE: ./dist/core/lib/App.js\nvar core_lib_App_namespaceObject = {};\n__webpack_require__.d(core_lib_App_namespaceObject, \"default\", function() { return App_defaultExport; });\n__webpack_require__.d(core_lib_App_namespaceObject, \"Application\", function() { return Application_Application; });\n__webpack_require__.d(core_lib_App_namespaceObject, \"startActivityAsync\", function() { return startActivityAsync; });\n__webpack_require__.d(core_lib_App_namespaceObject, \"findActivity\", function() { return findActivity; });\n__webpack_require__.d(core_lib_App_namespaceObject, \"Activation\", function() { return Activation_Activation; });\n__webpack_require__.d(core_lib_App_namespaceObject, \"mapRoute\", function() { return mapRoute; });\n__webpack_require__.d(core_lib_App_namespaceObject, \"mapActivation\", function() { return mapActivation; });\n__webpack_require__.d(core_lib_App_namespaceObject, \"Activity\", function() { return Activity_Activity; });\n__webpack_require__.d(core_lib_App_namespaceObject, \"SingletonActivity\", function() { return Activity_SingletonActivity; });\n__webpack_require__.d(core_lib_App_namespaceObject, \"SupportActivity\", function() { return SupportActivity; });\n__webpack_require__.d(core_lib_App_namespaceObject, \"RootActivity\", function() { return RootActivity; });\n__webpack_require__.d(core_lib_App_namespaceObject, \"mapParentActivity\", function() { return mapParentActivity; });\n__webpack_require__.d(core_lib_App_namespaceObject, \"ActivityStack\", function() { return ActivityStack_ActivityStack; });\n__webpack_require__.d(core_lib_App_namespaceObject, \"ActivityTransition\", function() { return ActivityTransition; });\n__webpack_require__.d(core_lib_App_namespaceObject, \"FRAG_ID_PROP\", function() { return FRAG_ID_PROP; });\n__webpack_require__.d(core_lib_App_namespaceObject, \"FRAG_HASH_PREFIX\", function() { return FRAG_HASH_PREFIX; });\n__webpack_require__.d(core_lib_App_namespaceObject, \"isLayoutFragment\", function() { return isLayoutFragment; });\n__webpack_require__.d(core_lib_App_namespaceObject, \"layoutFragment\", function() { return layoutFragment; });\n__webpack_require__.d(core_lib_App_namespaceObject, \"mapViewActivity\", function() { return mapViewActivity; });\n__webpack_require__.d(core_lib_App_namespaceObject, \"MessageBoxLayout\", function() { return MessageBox_MessageBoxLayout; });\n__webpack_require__.d(core_lib_App_namespaceObject, \"showMessageBox\", function() { return showMessageBox; });\n__webpack_require__.d(core_lib_App_namespaceObject, \"Service\", function() { return Service; });\n__webpack_require__.d(core_lib_App_namespaceObject, \"mapService\", function() { return mapService; });\n__webpack_require__.d(core_lib_App_namespaceObject, \"addServiceAlias\", function() { return addServiceAlias; });\n__webpack_require__.d(core_lib_App_namespaceObject, \"injectService\", function() { return injectService; });\n__webpack_require__.d(core_lib_App_namespaceObject, \"CultureService\", function() { return CultureService_CultureService; });\n__webpack_require__.d(core_lib_App_namespaceObject, \"CultureChanged\", function() { return CultureChanged; });\n__webpack_require__.d(core_lib_App_namespaceObject, \"BaseLayout\", function() { return Base_BaseLayout; });\n__webpack_require__.d(core_lib_App_namespaceObject, \"BaseDialogLayout\", function() { return Base_BaseDialogLayout; });\n__webpack_require__.d(core_lib_App_namespaceObject, \"VerticalLayout\", function() { return Single_VerticalLayout; });\n__webpack_require__.d(core_lib_App_namespaceObject, \"ScrollableLayout\", function() { return ScrollableLayout; });\n__webpack_require__.d(core_lib_App_namespaceObject, \"AppBarLayout\", function() { return App_AppBarLayout; });\n__webpack_require__.d(core_lib_App_namespaceObject, \"AppViewLayout\", function() { return App_AppViewLayout; });\n__webpack_require__.d(core_lib_App_namespaceObject, \"HubViewLayout\", function() { return App_HubViewLayout; });\n\n\n/* harmony default export */ var App_defaultExport = (lib_App_namespaceObject);\n\n// CONCATENATED MODULE: ./dist/dom/node_modules/@typescene/core/App.js\n\n// CONCATENATED MODULE: ./dist/dom/lib/App/DOMApplication.js\nvar DOMApplication___extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n/** True if browser history is enabled */\nvar useBrowserHistory = true;\n/** Platform specific encapsulation of the application as a singleton object */\nvar DOMApplication_DOMApplication = (function (_super) {\n    DOMApplication___extends(DOMApplication, _super);\n    /** Create the application instance (either from a derived class or from the Application class itself); can be called only once */\n    function DOMApplication(title) {\n        var _this = _super.call(this, title) || this;\n        // initialize page view\n        Screen_Screen.ready.then(function () {\n            // listen for events and activity transitions\n            _this._listen();\n            // start initial page view\n            Defer_defer(function () {\n                if (!_this.activities.length)\n                    _this._startLocationActivity();\n            });\n            // set title and keep it updated\n            observe(function () {\n                var activityTitle = _this.activities.title;\n                return [\n                    activityTitle,\n                    _this.title !== activityTitle ? _this.title : \"\"\n                ].filter(function (s) { return !!s; }).join(\" - \");\n            }).subscribe(function (title) {\n                // apply to DOM document window\n                document.title = title;\n            });\n        });\n        return _this;\n    }\n    /** Disable synchronization of activity stack with browser history */\n    DOMApplication.disableBrowserHistory = function () {\n        useBrowserHistory = false;\n    };\n    /** Returns the full URL from `window.location.href`; used to resolve relative URLs to start routed activities */\n    DOMApplication.prototype.getCurrentUrl = function () { return String(window.location.href); };\n    /** Sets the browser's current URL (using `window.location.href`), to navigate to another page or website */\n    DOMApplication.prototype.navigateToUrl = function (url) { window.location.href = url; };\n    /** @internal Helper that sets event handlers and listens for activity transitions */\n    DOMApplication.prototype._listen = function () {\n        var _this = this;\n        // true if external trigger caused activity changes\n        var externalTrigger = false;\n        function withExternal(f) {\n            externalTrigger = true;\n            try {\n                return f().then(function () { externalTrigger = false; }, function () { externalTrigger = false; });\n            }\n            catch (err) {\n                externalTrigger = false;\n                throw err;\n            }\n        }\n        // listen for hash changes (triggered by user)\n        window.addEventListener(\"hashchange\", function () {\n            if (!useBrowserHistory)\n                return;\n            var hash = String(window.location.hash || \"#\");\n            // return if this is a known state\n            if (window.history.state && window.history.state.activityID)\n                return;\n            // check if activity history ID (no pushState support)\n            if (hash.slice(0, 3) === \"#__\") {\n                withExternal(function () { return _this.activities.restoreHistoryStateAsync(hash.slice(3)); });\n                return;\n            }\n            // push activities\n            if (hash[1] !== \"/\")\n                hash = \"#/\" + hash.slice(1);\n            withExternal(function () { return _this.startActivityAsync(hash, false, false); });\n        });\n        // listen for browser history movement (either triggered by user,\n        // or by function below after popping an activity): reset state\n        var lastPopStateID = null;\n        window.addEventListener(\"popstate\", function (event) {\n            if (!useBrowserHistory)\n                return;\n            var id = lastPopStateID = event.state && event.state.activityID;\n            // defer reset to process only latest popstate event\n            id && Defer_defer(function () {\n                if (id === lastPopStateID && id !== _this.activities.getHistoryState()) {\n                    try {\n                        withExternal(function () { return _this.activities.restoreHistoryStateAsync(id); })\n                            .then(undefined, function () {\n                            // if not successful, try to revert again\n                            _this._updateHistoryState(ActivityTransition.Operation.Push);\n                        });\n                    }\n                    catch (err) {\n                        // if cannot reset activity, just use location\n                        _this._startLocationActivity(true);\n                    }\n                }\n            });\n        });\n        // connect to activity manager\n        this.activities.Transition.connect(function (t) {\n            if (externalTrigger) {\n                // triggered by above, replace state if currrently no ID\n                if (window.history.state && !window.history.state.activityID)\n                    _this._updateHistoryState(ActivityTransition.Operation.Replace);\n            }\n            else {\n                // triggered by application: update browser history\n                var op = t.op;\n                _this._updateHistoryState(op);\n            }\n        });\n    };\n    // start activity based on current location\n    DOMApplication.prototype._startLocationActivity = function (replace) {\n        if (window.location.hash && window.location.hash !== \"#\")\n            this.startActivityAsync(window.location.hash, replace, false)\n                .then(undefined, function () { window.location.hash = \"\"; });\n        else\n            this.startActivityAsync(window.location.href, replace, false);\n    };\n    // update browser history following an activity transition\n    DOMApplication.prototype._updateHistoryState = function (op) {\n        var current = this.activities.top;\n        if (current && current.options.isBackgroundActivity)\n            return;\n        if (!useBrowserHistory)\n            return;\n        // change first push to a replace to avoid lingering initial state\n        if (op === ActivityTransition.Operation.Push &&\n            window.history.pushState &&\n            (!window.history.state || !window.history.state.activityID))\n            op = ActivityTransition.Operation.Replace;\n        // check what to do: push, replace, or pop history state\n        if (op === ActivityTransition.Operation.Push) {\n            var path = current && current.activation.getPath();\n            var activityID = this.activities.getHistoryState();\n            if (path) {\n                if (window.history.pushState) {\n                    window.history.pushState({ activityID: activityID, path: path }, this.title, path);\n                }\n                else {\n                    window.location.hash = \"#__\" + activityID;\n                }\n            }\n            else {\n                if (window.history.pushState) {\n                    window.history.pushState({ activityID: activityID }, this.title);\n                }\n                else {\n                    window.location.hash = \"#__\" + activityID;\n                }\n            }\n        }\n        else if (op === ActivityTransition.Operation.Replace) {\n            var path = current && current.activation.getPath();\n            var activityID = this.activities.getHistoryState();\n            if (path) {\n                if (window.history.replaceState) {\n                    window.history.replaceState({ activityID: activityID, path: path }, this.title, path);\n                }\n            }\n            else {\n                if (window.history.replaceState) {\n                    window.history.replaceState({ activityID: activityID }, this.title);\n                }\n            }\n        }\n        else if (op === ActivityTransition.Operation.Pop) {\n            window.history.pushState && window.history.back();\n        }\n    };\n    return DOMApplication;\n}(Application_Application));\n\n\n// CONCATENATED MODULE: ./dist/dom/lib/App/Http.js\n\n// declare fetch function if not defined\nvar _hasNativeFetch = (typeof window.fetch === \"function\");\nvar _canBlob = (function () {\n    try {\n        if (typeof Blob !== \"undefined\" &&\n            typeof FileReader !== \"undefined\" &&\n            new Blob([]))\n            return true;\n    }\n    catch (all) { }\n    return false;\n})();\n/** Namespace that encapsulates `.fetch` and related functionality */\nvar Http_Http;\n(function (Http) {\n    /** Configuration options */\n    Http.config = {\n        FORCE_XHR_FETCH: false,\n        FETCH_INCLUDE_CREDENTIALS: true\n    };\n    ;\n    /** Signal that is emitted before sending a request; can be used to intercept requests, modify request options, and provide an alternate response; if one of the connected handlers returns a (promise for) an alternate response, i.e. an object that implements `FetchResponse`, then the request will not be sent, and the (first) resulting alternate response is used instead; if one of the connected handlers throws an exception, the original promise for the request is rejected; otherwise the request is sent as per normal */\n    Http.Requesting = Signal_Signal.create();\n    /** Signal that is emitted after obtaining a remote response (from an actual request, not an alternate response provided by a connected handler of `.Requesting`) */\n    Http.Responded = Signal_Signal.create();\n    /** Implements the FetchResponse interface, can be used to mock responses or initialize a response from an XMLHttpRequest */\n    var MockResponse = (function () {\n        /** Create a response with given properties (an XMLHttpRequest object can be passed in directly, along with a native fetch `Headers` instance or a MockResponseHeaders instance); the response itself is taken from `.responseText` if it is not undefined, or from `.response` if it is a Blob */\n        function MockResponse(init, headers) {\n            if (!init)\n                init = { responseText: \"\" };\n            this._init = init;\n            this.status = (init.status !== undefined ? init.status : 200);\n            this.ok = this.status >= 200 && this.status < 300;\n            this.statusText = init.statusText || \"OK\";\n            this.headers = headers || new MockResponseHeaders();\n        }\n        /** Create a response with given data encoded as JSON, the `application/json` content type, and status 200 */\n        MockResponse.withJSONContent = function (data) {\n            return new MockResponse({ responseText: JSON.stringify(data) }, new MockResponseHeaders(\"Content-Type: application/json\"));\n        };\n        /** Returns a promise for the response body read into a Blob, if supported */\n        MockResponse.prototype.blob = function () {\n            if (!_canBlob)\n                return Promise_Promise.reject(new TypeError());\n            else if (!(this._init.response instanceof Blob))\n                return Promise_Promise.resolve(new Blob([this._init.responseText || \"\"], { type: this.headers.get(\"content-type\") || \"text/plain\" }));\n            else\n                return Promise_Promise.resolve(this._init.response);\n        };\n        /** Returns a promise for the response body */\n        MockResponse.prototype.text = function () { return this._readText(); };\n        /** Returns a promise for the response body, parsed as JSON */\n        MockResponse.prototype.json = function () { return this._readText().then(function (s) { return JSON.parse(s); }); };\n        /** Helper method that returns a Promise with the text from the constructor initializer (with text in `.responseText`, or a blob in `.response`) */\n        MockResponse.prototype._readText = function () {\n            var _this = this;\n            try {\n                // try to use reponseText property first\n                if (this._init.responseType !== \"blob\" &&\n                    this._init.responseText !== undefined)\n                    return Promise_Promise.resolve(this._init.responseText);\n            }\n            catch (all) { }\n            // ... otherwise read from response blob\n            if (this._init.response instanceof Blob) {\n                return new Promise_Promise(function (resolve, reject) {\n                    var fileReader = new FileReader();\n                    fileReader.onload = function () { return resolve(fileReader.result); };\n                    fileReader.onerror = function () { return reject(fileReader.error); };\n                    fileReader.readAsText(_this._init.response);\n                });\n            }\n            return Promise_Promise.reject(new Error(\"Response is neither text nor blob\"));\n        };\n        return MockResponse;\n    }());\n    Http.MockResponse = MockResponse;\n    /** Implements the FetchResponse interface, can be used to mock response headers or initialize response headers from an XMLHttpRequest */\n    var MockResponseHeaders = (function () {\n        /** Initialize the list of headers using given HTTP header text (i.e. one or more lines with header name, colon, and header value; strips all whitespace around names and values) */\n        function MockResponseHeaders(allResponseHeaders) {\n            var _this = this;\n            this._headers = {};\n            // parse all response headers from text\n            if (allResponseHeaders) {\n                allResponseHeaders.split(/\\r\\n|\\n\\r|\\r|\\n/).forEach(function (s) {\n                    var match = s.match(/^\\s+([^:]+):\\s*(.*)/);\n                    if (match) {\n                        var key = match[0], value = match[1];\n                        key = key.toLowerCase();\n                        value = value.replace(/\\s+$/, \"\");\n                        if (!_this._headers[key])\n                            _this._headers[key] = [];\n                        _this._headers[key].push(value);\n                    }\n                });\n            }\n        }\n        MockResponseHeaders.prototype.get = function (name) {\n            name = name.toLowerCase();\n            return this._headers[name] && this._headers[name][0];\n        };\n        MockResponseHeaders.prototype.getAll = function (name) {\n            name = name.toLowerCase();\n            return this._headers[name];\n        };\n        MockResponseHeaders.prototype.has = function (name) {\n            name = name.toLowerCase();\n            return !!(this._headers[name]);\n        };\n        MockResponseHeaders.prototype.keys = function () {\n            var keys = [], idx = 0;\n            for (var name in this._headers) {\n                if (Object.prototype.hasOwnProperty.call(this._headers, name))\n                    keys.push(name);\n            }\n            return {\n                next: function () {\n                    if (idx >= keys.length)\n                        return { done: true };\n                    else\n                        return { done: false, value: keys[idx] };\n                }\n            };\n        };\n        return MockResponseHeaders;\n    }());\n    Http.MockResponseHeaders = MockResponseHeaders;\n    function fetch(input, init) {\n        var props;\n        if (typeof input === \"string\") {\n            // use init or create new options instance\n            props = init || {};\n            props.url = input;\n        }\n        else {\n            // use options/Request instance directly\n            props = input;\n        }\n        // include credentials by default\n        if (_hasNativeFetch && !props.credentials &&\n            Http.config.FETCH_INCLUDE_CREDENTIALS)\n            props.credentials = \"same-origin\";\n        // return a promise for the remote/mock response\n        return new Http.Requesting(props).emit().then(function (results) {\n            // use resulting response, if any\n            for (var _i = 0, results_1 = results; _i < results_1.length; _i++) {\n                var r = results_1[_i];\n                if (r)\n                    return r;\n            }\n            // start request\n            if (!props.headers)\n                props.headers = {};\n            return ((_hasNativeFetch && !Http.config.FORCE_XHR_FETCH) ?\n                window.fetch(props.url, props) : _xhr(props))\n                .then(function (response) { return (Http.Responded(response), response); });\n        });\n    }\n    Http.fetch = fetch;\n    /** Helper function for sending a simple request through XMLHttpRequest, returns a promise for the XHR responseText */\n    function _xhr(options) {\n        return new Promise_Promise(function (resolve, reject) {\n            try {\n                // create request and send data\n                var xhr = new XMLHttpRequest();\n                if (_canBlob)\n                    xhr.responseType = \"blob\";\n                xhr.open(options.method || \"GET\", options.url, true);\n                if (options.headers) {\n                    if (typeof options.headers.keys ===\n                        \"function\") {\n                        // get all headers from the native/polyfill Headers object\n                        var it = options.headers.keys();\n                        var r;\n                        while ((r = it.next()) && !r.done) {\n                            options.headers.getAll(r.value)\n                                .forEach(function (v) { return xhr.setRequestHeader(r.value, v); });\n                        }\n                    }\n                    else {\n                        // use headers from a plain object\n                        var headers = options.headers;\n                        for (var key in headers) {\n                            if (Object.prototype.hasOwnProperty.call(headers, key))\n                                xhr.setRequestHeader(key, headers[key]);\n                        }\n                    }\n                }\n                // await response and resolve or reject promise\n                xhr.onload = function () {\n                    var h = new MockResponseHeaders(xhr.getAllResponseHeaders());\n                    resolve(new MockResponse(xhr, h));\n                };\n                xhr.onerror = function () { reject(new Error(\"HTTP error\")); };\n                xhr.ontimeout = function () { reject(new Error(\"HTTP timeout\")); };\n                xhr.send(options.body);\n            }\n            catch (all) {\n                reject(all);\n            }\n        });\n    }\n    /** Helper function to add an \"Accept\" header */\n    function _headersWithAccept(headers, accept, type) {\n        if (headers === void 0) { headers = {}; }\n        if (accept === void 0) { accept = \"application/json\"; }\n        if (type === void 0) { type = \"application/json\"; }\n        if ((typeof headers.has === \"function\") &&\n            !headers.has(\"accept\")) {\n            if (accept)\n                headers.append(\"accept\", accept);\n            if (type)\n                headers.append(\"content-Type\", type);\n        }\n        else if (!headers[\"accept\"] && !headers[\"Accept\"]) {\n            if (accept)\n                headers[\"accept\"] = accept;\n            if (type)\n                headers[\"content-type\"] = type;\n        }\n        return headers;\n    }\n    /** Helper function to add query parameters to a URL */\n    function _addQueryParams(url, params) {\n        if (params) {\n            var first = (url.indexOf(\"?\") < 0);\n            for (var key in params) {\n                if (Object.prototype.hasOwnProperty.call(params, key)) {\n                    url += (first ? \"?\" : \"&\") + encodeURIComponent(key)\n                        + \"=\" + encodeURIComponent(params[key]);\n                    first = false;\n                }\n            }\n        }\n        return url;\n    }\n    /** Helper function to make a request with a JSON body, that only accepts JSON */\n    function _fetchJSON(options, data) {\n        options.headers = _headersWithAccept(options.headers || {});\n        if (data === undefined)\n            data = {};\n        options.body = JSON.stringify(data);\n        return fetch(options).then(function (response) {\n            if (!response.ok)\n                throw new Error(\"HTTP \" + response.status);\n            return response.text().then(function (s) { return s.length ? JSON.parse(s) : undefined; });\n        });\n    }\n    /** Perform a GET request with given parameters and headers, if any; returns a promise that resolves to the response text, or gets rejected if the request fails or response status is not in 2xx range */\n    function getTextAsync(url, params, headers) {\n        url = _addQueryParams(url, params);\n        return fetch(url, { method: \"GET\", headers: headers }).then(function (response) {\n            if (!response.ok)\n                throw new Error(\"HTTP \" + response.status);\n            return response.text();\n        });\n    }\n    Http.getTextAsync = getTextAsync;\n    /** Perform a GET request with given parameters and headers, if any; returns a promise that resolves to a blob, or gets rejected if the request fails or response status is not in 2xx range; requires a browser that supports Blob constructors */\n    function getBlobAsync(url, params, headers) {\n        if (!_canBlob)\n            throw new TypeError();\n        url = _addQueryParams(url, params);\n        return fetch(url, { method: \"GET\", headers: headers }).then(function (response) {\n            if (!response.ok)\n                throw new Error(\"HTTP \" + response.status);\n            return response.blob();\n        });\n    }\n    Http.getBlobAsync = getBlobAsync;\n    /** Perform a GET request with given parameters and headers, if any; returns a promise that resolves to the parsed HTML result body as a document fragment (ignores everything before and after body tag, if any; inserts everything if no body tag is found, i.e. partial HTML), or gets rejected if the request fails or response status is not in 2xx range */\n    function getHtmlContentAsync(url, params, headers) {\n        return getTextAsync(url, params, _headersWithAccept(headers, \"text/html\", \"\"))\n            .then(function (responseText) {\n            // find body tag and keep only its content\n            responseText = String(responseText || \"\");\n            var startTag = responseText.match(/<body(?:>|\\s[^>]+>)/m);\n            if (startTag) {\n                responseText = responseText.slice(startTag.index + startTag[0].length);\n                var endTagPos = responseText.lastIndexOf(\"</body>\");\n                if (endTagPos >= 0)\n                    responseText = responseText.slice(0, endTagPos);\n            }\n            // set inner HTML of a placeholder element\n            var placeholder = document.createElement(\"div\");\n            placeholder.innerHTML = responseText;\n            // transfer resulting elements to document fragment\n            var result = document.createDocumentFragment();\n            while (placeholder.firstChild)\n                result.appendChild(placeholder.firstChild);\n            return result;\n        });\n    }\n    Http.getHtmlContentAsync = getHtmlContentAsync;\n    /** Perform a GET request with given parameters and headers, if any; returns a promise that resolves to the parsed JSON response (or undefined if response was empty), or gets rejected if the request fails or response status is not in 2xx range */\n    function getAsync(url, params, headers) {\n        return getTextAsync(url, params, _headersWithAccept(headers, undefined, \"\"))\n            .then(function (s) { return s.length ? JSON.parse(s) : undefined; });\n    }\n    Http.getAsync = getAsync;\n    /** Perform a POST request with given object (sent as JSON) and headers, if any; returns a promise that resolves to the parsed JSON response (or undefined if response was empty), or gets rejected if the request fails or response status is not in 2xx range */\n    function postAsync(url, data, headers) {\n        return _fetchJSON({ url: url, method: \"POST\", headers: headers }, data);\n    }\n    Http.postAsync = postAsync;\n    /** Perform a PUT request with given object (sent as JSON) and headers, if any; returns a promise that resolves to the parsed JSON response (or undefined if response was empty), or gets rejected if the request fails or response status is not in 2xx range */\n    function putAsync(url, data, headers) {\n        return _fetchJSON({ url: url, method: \"PUT\", headers: headers }, data);\n    }\n    Http.putAsync = putAsync;\n    /** Perform a DELETE request with given object (sent as JSON) and headers, if any; returns a promise that resolves to the parsed JSON response (or undefined if response was empty), or gets rejected if the request fails or response status is not in 2xx range */\n    function deleteAsync(url, data, headers) {\n        return _fetchJSON({ url: url, method: \"DELETE\", headers: headers }, data);\n    }\n    Http.deleteAsync = deleteAsync;\n})(Http_Http || (Http_Http = {}));\n\n// CONCATENATED MODULE: ./dist/dom/lib/App/Layout.js\n\n\n\n// override MessageBox appearance\nMessageBox_MessageBoxLayout.TitleRow.override({\n    height: \"2.4rem\",\n    style: {\n        background: observe(function () { return DOM_namespaceObject.Styles.color.titleBarBackground; }),\n        color: observe(function () { return DOM_namespaceObject.Styles.color.titleBarText; })\n    }\n});\nMessageBox_MessageBoxLayout.ButtonRow.override({\n    height: \"4rem\",\n    horzAlign: \"end\"\n});\nMessageBox_MessageBoxLayout.FirstMessageRow.override({\n    verticalSpacing: \"1.5rem\"\n});\n// override AppLayout colors\nApp_AppViewLayout.override({\n    background: observe(function () { return DOM_namespaceObject.Styles.color.background; }),\n    color: observe(function () { return DOM_namespaceObject.Styles.color.text; })\n});\n// override AppBar appearance\nApp_AppBarLayout.override({\n    height: \"3.5rem\",\n    shadowEffect: .3,\n});\nApp_AppBarLayout.addStyleOverride(Style_Style.withClass(\"App-Layout-AppBar\"));\nDOM_namespaceObject.applyStylesheet(new DOM_namespaceObject.Stylesheet(\"App-Layout-AppBar\", {\n    \".~~\": {\n        backgroundColor: observe(function () { return DOM_namespaceObject.Styles.color.primary; }),\n        color: observe(function () { return DOM_namespaceObject.Styles.color.primaryText; })\n    },\n    \".~~ .UI-Button a\": {\n        color: observe(function () { return DOM_namespaceObject.Styles.color.primaryText; })\n    }\n}), true);\n// override HubView sidebar width\nApp_HubViewLayout.override({\n    leftGutterWidth: \"19rem\"\n});\n\n// CONCATENATED MODULE: ./dist/dom/lib/App/index.js\nvar dom_lib_App_namespaceObject = {};\n__webpack_require__.d(dom_lib_App_namespaceObject, \"DOMApplication\", function() { return DOMApplication_DOMApplication; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"Http\", function() { return Http_Http; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"Application\", function() { return Application_Application; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"startActivityAsync\", function() { return startActivityAsync; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"findActivity\", function() { return findActivity; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"Activation\", function() { return Activation_Activation; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"mapRoute\", function() { return mapRoute; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"mapActivation\", function() { return mapActivation; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"Activity\", function() { return Activity_Activity; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"SingletonActivity\", function() { return Activity_SingletonActivity; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"SupportActivity\", function() { return SupportActivity; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"RootActivity\", function() { return RootActivity; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"mapParentActivity\", function() { return mapParentActivity; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"ActivityStack\", function() { return ActivityStack_ActivityStack; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"ActivityTransition\", function() { return ActivityTransition; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"FRAG_ID_PROP\", function() { return FRAG_ID_PROP; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"FRAG_HASH_PREFIX\", function() { return FRAG_HASH_PREFIX; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"isLayoutFragment\", function() { return isLayoutFragment; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"layoutFragment\", function() { return layoutFragment; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"mapViewActivity\", function() { return mapViewActivity; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"MessageBoxLayout\", function() { return MessageBox_MessageBoxLayout; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"showMessageBox\", function() { return showMessageBox; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"Service\", function() { return Service; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"mapService\", function() { return mapService; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"addServiceAlias\", function() { return addServiceAlias; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"injectService\", function() { return injectService; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"CultureService\", function() { return CultureService_CultureService; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"CultureChanged\", function() { return CultureChanged; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"BaseLayout\", function() { return Base_BaseLayout; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"BaseDialogLayout\", function() { return Base_BaseDialogLayout; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"VerticalLayout\", function() { return Single_VerticalLayout; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"ScrollableLayout\", function() { return ScrollableLayout; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"AppBarLayout\", function() { return App_AppBarLayout; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"AppViewLayout\", function() { return App_AppViewLayout; });\n__webpack_require__.d(dom_lib_App_namespaceObject, \"HubViewLayout\", function() { return App_HubViewLayout; });\n\n// platform specifics:\n\n\n\n\n// CONCATENATED MODULE: ./dist/dom/lib/App.js\nvar dist_dom_lib_App_namespaceObject = {};\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"default\", function() { return lib_App_defaultExport; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"DOMApplication\", function() { return DOMApplication_DOMApplication; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"Http\", function() { return Http_Http; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"Application\", function() { return Application_Application; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"startActivityAsync\", function() { return startActivityAsync; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"findActivity\", function() { return findActivity; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"Activation\", function() { return Activation_Activation; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"mapRoute\", function() { return mapRoute; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"mapActivation\", function() { return mapActivation; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"Activity\", function() { return Activity_Activity; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"SingletonActivity\", function() { return Activity_SingletonActivity; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"SupportActivity\", function() { return SupportActivity; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"RootActivity\", function() { return RootActivity; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"mapParentActivity\", function() { return mapParentActivity; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"ActivityStack\", function() { return ActivityStack_ActivityStack; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"ActivityTransition\", function() { return ActivityTransition; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"FRAG_ID_PROP\", function() { return FRAG_ID_PROP; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"FRAG_HASH_PREFIX\", function() { return FRAG_HASH_PREFIX; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"isLayoutFragment\", function() { return isLayoutFragment; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"layoutFragment\", function() { return layoutFragment; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"mapViewActivity\", function() { return mapViewActivity; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"MessageBoxLayout\", function() { return MessageBox_MessageBoxLayout; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"showMessageBox\", function() { return showMessageBox; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"Service\", function() { return Service; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"mapService\", function() { return mapService; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"addServiceAlias\", function() { return addServiceAlias; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"injectService\", function() { return injectService; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"CultureService\", function() { return CultureService_CultureService; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"CultureChanged\", function() { return CultureChanged; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"BaseLayout\", function() { return Base_BaseLayout; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"BaseDialogLayout\", function() { return Base_BaseDialogLayout; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"VerticalLayout\", function() { return Single_VerticalLayout; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"ScrollableLayout\", function() { return ScrollableLayout; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"AppBarLayout\", function() { return App_AppBarLayout; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"AppViewLayout\", function() { return App_AppViewLayout; });\n__webpack_require__.d(dist_dom_lib_App_namespaceObject, \"HubViewLayout\", function() { return App_HubViewLayout; });\n\n\n/* harmony default export */ var lib_App_defaultExport = (dom_lib_App_namespaceObject);\n\n// CONCATENATED MODULE: ./dist/core/lib/index.js\n\n\n\n\n/* harmony default export */ var lib_defaultExport = ({ Async: Async_defaultExport, UI: lib_UI_namespaceObject, App: core_lib_App_namespaceObject });\nconst version = \"0.9.11\"\n\n// CONCATENATED MODULE: ./dist/dom/node_modules/@typescene/core/index.js\nvar core_namespaceObject = {};\n__webpack_require__.d(core_namespaceObject, \"Async\", function() { return Async_defaultExport; });\n__webpack_require__.d(core_namespaceObject, \"UI\", function() { return lib_UI_namespaceObject; });\n__webpack_require__.d(core_namespaceObject, \"App\", function() { return core_lib_App_namespaceObject; });\n__webpack_require__.d(core_namespaceObject, \"version\", function() { return version; });\n\n// CONCATENATED MODULE: ./dist/dom/lib/index.js\n\n\n\n\n/* harmony default export */ var dom_lib_defaultExport = ({ Async: dom_lib_Async_namespaceObject, UI: dist_dom_lib_UI_namespaceObject, App: dist_dom_lib_App_namespaceObject });\n\n// export all modules as global variables\nvar lib_w = window;\nlib_w[\"typescene\"] = { Async: dom_lib_Async_namespaceObject, UI: dist_dom_lib_UI_namespaceObject, App: dist_dom_lib_App_namespaceObject, core: core_namespaceObject };\n// export Promise polyfill if needed\nif (!lib_w[\"Promise\"])\n    lib_w[\"Promise\"] = Promise_Promise;\n\n// CONCATENATED MODULE: ./src/docs-viewer/DocumentService.ts\nvar DocumentService___extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar DocumentService___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\n\r\n;\r\nvar DocumentService_DocumentService = (function (_super) {\r\n    DocumentService___extends(DocumentService, _super);\r\n    function DocumentService() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        /** True if the documentation data was loaded */\r\n        _this.isLoaded = false;\r\n        /** Signal that is emitted when the document data has been loaded successfully */\r\n        _this.Loaded = dom_lib_Async_namespaceObject.Signal.create();\r\n        /** All documentation items indexed by ID and slug */\r\n        _this._itemsById = {};\r\n        return _this;\r\n    }\r\n    DocumentService_1 = DocumentService;\r\n    /** Load the documentation JSON data (or make sure it has been loaded already); returns a promise that resolves to true when the data is loaded successfully */\r\n    DocumentService.prototype.loadAsync = function () {\r\n        var _this = this;\r\n        if (this.isLoaded)\r\n            return dom_lib_Async_namespaceObject.Promise.resolve(true);\r\n        if (DocumentService_1._loadingP)\r\n            return DocumentService_1._loadingP;\r\n        return DocumentService_1._loadingP = dist_dom_lib_App_namespaceObject.Http.getAsync(\"/\" + 0.9 + \"/documentation.json\")\r\n            .then(function (json) {\r\n            _this.fromJSON(json);\r\n            return true;\r\n        });\r\n    };\r\n    /** Initialize with given JSON data */\r\n    DocumentService.prototype.fromJSON = function (jsonData) {\r\n        var _this = this;\r\n        this._data = jsonData;\r\n        this.isLoaded = true;\r\n        // go through all items and add them to the instance\r\n        var itemsToIndex = this._data.items;\r\n        var itemsWithTOC = [];\r\n        while (itemsToIndex.length) {\r\n            var item = itemsToIndex.pop();\r\n            this._itemsById[item.id] = item;\r\n            // populate icon name (TODO: separate this out)\r\n            if (item.isClass || item.isNamespace)\r\n                item.icon = \"fa-cubes\";\r\n            else if (item.isInterface)\r\n                item.icon = \"fa-cubes opacity=.7\";\r\n            else if (item.isCtor)\r\n                item.icon = \"fa-magic\";\r\n            else if (item.isSignal)\r\n                item.icon = \"fa-bolt\";\r\n            else if (item.isDecorator)\r\n                item.icon = \"fa-tag\";\r\n            else if (item.isMethod || item.isFunction)\r\n                item.icon = \"fa-dot-circle-o\";\r\n            else if (item.isType || item.isEnum)\r\n                item.icon = \"fa-square-o\";\r\n            else if (!item.code)\r\n                item.icon = \"fa-file-text-o\";\r\n            else\r\n                item.icon = \"fa-cube\";\r\n            // clean up slug's leading/trailing slashes\r\n            if (item.textSlug) {\r\n                var slug = item.textSlug;\r\n                slug = slug.replace(/^\\/|\\/$/g, \"\");\r\n                this._itemsById[slug] = item;\r\n            }\r\n            // recurse for child items\r\n            if (item.items) {\r\n                item.items.forEach(function (z) {\r\n                    z.parentItem = item;\r\n                    itemsToIndex.push(z);\r\n                });\r\n            }\r\n            else if (item.toc) {\r\n                // keep track of TOC parent items\r\n                itemsWithTOC.push(item);\r\n            }\r\n        }\r\n        // reference TOC parent items from child items too\r\n        for (var _i = 0, itemsWithTOC_1 = itemsWithTOC; _i < itemsWithTOC_1.length; _i++) {\r\n            var item = itemsWithTOC_1[_i];\r\n            item.toc.forEach(function (subId) {\r\n                var subItem = _this._itemsById[subId];\r\n                if (subItem && !subItem.parentItem)\r\n                    subItem.parentItem = item;\r\n            });\r\n        }\r\n    };\r\n    /** Returns the version number loaded from the doc JSON */\r\n    DocumentService.prototype.getVersion = function () {\r\n        return this._data && this._data.version;\r\n    };\r\n    /** Returns the documentation title */\r\n    DocumentService.prototype.getTitle = function () {\r\n        return this._data && (this._data.title + \" (\" + this._data.version + \")\");\r\n    };\r\n    /** Returns an (absolute) item ID based on the given (potentially relative) ID in the context of given item */\r\n    DocumentService.prototype.find = function (id, context) {\r\n        var current = context;\r\n        while (current) {\r\n            if (this._itemsById[current.id + \".\" + id]) {\r\n                // found a matching item\r\n                return current.id + \".\" + id;\r\n            }\r\n            current = current.parentItem;\r\n        }\r\n        if (this._itemsById[id])\r\n            return id;\r\n        return undefined;\r\n    };\r\n    /** Returns true if item with given ID exists */\r\n    DocumentService.prototype.exists = function (id) {\r\n        return !!this._itemsById[id] && this._itemsById[id].id === id;\r\n    };\r\n    /** Find item data by unique ID or slug */\r\n    DocumentService.prototype.getItemById = function (id) {\r\n        var result = this._itemsById[id];\r\n        if (result)\r\n            return result;\r\n        throw new Error(\"Item does not exist: \" + id);\r\n    };\r\n    /** Returns display text for cross-references and TOC */\r\n    DocumentService.prototype.getDisplayNameFor = function (id) {\r\n        var item = this.getItemById(id);\r\n        if (item.textTopic)\r\n            return item.textTopic;\r\n        // if no text topic defined, use code identifier\r\n        var result = item.name;\r\n        if (item.isMethod || item.isFunction || item.isCtor) {\r\n            result += item.hasParams ? \"(...)\" : \"()\";\r\n        }\r\n        if (item.isDecorator)\r\n            result = \"@\" + result;\r\n        else if (item.isStatic)\r\n            result = \".\" + result;\r\n        return result;\r\n    };\r\n    /** Returns a list of items that make up the sub TOC below the item with given ID, or the root TOC if no ID is given */\r\n    DocumentService.prototype.getTOCItems = function (id) {\r\n        var _this = this;\r\n        var result = [];\r\n        var item = id ? this.getItemById(id) : undefined;\r\n        var toc = item ? item.toc : (this._data && this._data.toc);\r\n        if (toc)\r\n            toc.forEach(function (s) { return result.push(_this.getItemById(s)); });\r\n        item && item.items && result.push.apply(result, item.items);\r\n        return result;\r\n    };\r\n    DocumentService___decorate([\r\n        dom_lib_Async_namespaceObject.observable\r\n    ], DocumentService.prototype, \"isLoaded\", void 0);\r\n    DocumentService = DocumentService_1 = DocumentService___decorate([\r\n        dist_dom_lib_App_namespaceObject.mapService(\"DocumentService\")\r\n    ], DocumentService);\r\n    return DocumentService;\r\n    var DocumentService_1;\r\n}(dist_dom_lib_App_namespaceObject.Service));\r\n\r\n\n// CONCATENATED MODULE: ./src/docs-viewer/MainActivity.ts\nvar MainActivity___extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar MainActivity___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\n\r\n/** Activity that should be on the stack before all others */\r\nvar MainActivity_MainActivity = (function (_super) {\r\n    MainActivity___extends(MainActivity, _super);\r\n    function MainActivity(activation) {\r\n        var _this = _super.call(this, activation) || this;\r\n        /** True if documentation is loading (observable) */\r\n        _this.loading = true;\r\n        /** True if an error occurred while loading documentation (observable) */\r\n        _this.error = false;\r\n        _this.title = \"Typescene\";\r\n        _this.Starting.connect(function () {\r\n            _this.documentService.loadAsync().then(function () {\r\n                _this.loading = false;\r\n                _this.error = false;\r\n                _this.title = _this.documentService.getTitle();\r\n            }, function (err) {\r\n                _this.error = true;\r\n            });\r\n        });\r\n        return _this;\r\n    }\r\n    MainActivity___decorate([\r\n        dist_dom_lib_App_namespaceObject.injectService\r\n    ], MainActivity.prototype, \"documentService\", void 0);\r\n    MainActivity___decorate([\r\n        dom_lib_Async_namespaceObject.observable\r\n    ], MainActivity.prototype, \"loading\", void 0);\r\n    MainActivity___decorate([\r\n        dom_lib_Async_namespaceObject.observable\r\n    ], MainActivity.prototype, \"error\", void 0);\r\n    return MainActivity;\r\n}(dist_dom_lib_App_namespaceObject.SupportActivity));\r\n\r\n/** Activity that is mapped to root URLs and forwards to first article */\r\nvar MainActivity_HomeActivity = (function (_super) {\r\n    MainActivity___extends(HomeActivity, _super);\r\n    function HomeActivity() {\r\n        var _this = _super.call(this) || this;\r\n        _this.Starting.connect(function () {\r\n            _this.documentService.loadAsync().then(function () {\r\n                var first = _this.documentService.getTOCItems()[0];\r\n                if (first)\r\n                    dist_dom_lib_App_namespaceObject.Application.current.startActivityAsync(\"/doc/\" + (first.textSlug || first.id), true);\r\n            });\r\n        });\r\n        return _this;\r\n    }\r\n    MainActivity___decorate([\r\n        dist_dom_lib_App_namespaceObject.injectService\r\n    ], HomeActivity.prototype, \"documentService\", void 0);\r\n    HomeActivity = MainActivity___decorate([\r\n        dist_dom_lib_App_namespaceObject.mapRoute(\"/\"),\r\n        dist_dom_lib_App_namespaceObject.mapRoute(\"/doc/\"),\r\n        dist_dom_lib_App_namespaceObject.mapParentActivity(MainActivity_MainActivity)\r\n    ], HomeActivity);\r\n    return HomeActivity;\r\n}(dist_dom_lib_App_namespaceObject.Activity));\r\n\r\n\n// CONCATENATED MODULE: ./src/docs-viewer/MainView.ts\nvar MainView___extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar MainView___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\n\r\n\r\nvar MainView_MainView = (function (_super) {\r\n    MainView___extends(MainView, _super);\r\n    function MainView(activity) {\r\n        var _this = _super.call(this) || this;\r\n        _this.activity = activity;\r\n        return _this;\r\n    }\r\n    /** Show the TOC drawer (on small screens) */\r\n    MainView.prototype.showDrawer = function () {\r\n        var _this = this;\r\n        this.drawer.openAsync();\r\n        dist_dom_lib_App_namespaceObject.Application.current.activities.Transition.connectOnce(function () {\r\n            _this.drawer.close();\r\n        });\r\n    };\r\n    MainView.TOCView = dist_dom_lib_App_namespaceObject.ScrollableLayout.with({ id: \"toc\", height: \"100%\" });\r\n    MainView.DocView = dist_dom_lib_UI_namespaceObject.Container.with({ id: \"doc\" });\r\n    MainView___decorate([\r\n        dist_dom_lib_App_namespaceObject.layoutFragment\r\n    ], MainView, \"TOCView\", void 0);\r\n    MainView___decorate([\r\n        dist_dom_lib_App_namespaceObject.layoutFragment\r\n    ], MainView, \"DocView\", void 0);\r\n    MainView = MainView___decorate([\r\n        dist_dom_lib_App_namespaceObject.mapViewActivity(MainActivity_MainActivity)\r\n    ], MainView);\r\n    return MainView;\r\n}(dist_dom_lib_App_namespaceObject.HubViewLayout.with({ horzAlign: \"center\", maxContentWidth: \"calc(40vw + 20rem)\" }, dist_dom_lib_App_namespaceObject.HubViewLayout.Header.with({ style: { background: \"linear-gradient(284deg, #2bf 0%, #509 100%) || #4ae\" } }, dist_dom_lib_UI_namespaceObject.TextButton.with({\r\n    hidden: dist_dom_lib_UI_namespaceObject.bind(\"!sidebarCollapsed\"),\r\n    label: \"\",\r\n    icon: \"fa-bars\",\r\n    Click: \"showDrawer\"\r\n}), dist_dom_lib_UI_namespaceObject.Image.with({\r\n    imageUrl: \"/logo.png\",\r\n    width: \"1.5rem\",\r\n    style_img: { verticalAlign: \"middle\" }\r\n}), (MainView__a = [\"{h1|1.5rem|600}Documentation\"], MainView__a.raw = [\"{h1|1.5rem|600}Documentation\"], dist_dom_lib_UI_namespaceObject.tl(MainView__a)), dist_dom_lib_UI_namespaceObject.Spacer, dist_dom_lib_UI_namespaceObject.LinkButton.with({\r\n    hidden: dist_dom_lib_UI_namespaceObject.bind(\"sidebarCollapsed\"),\r\n    label: \"Typescene home\",\r\n    target: \"http://typescene.org\"\r\n}), dist_dom_lib_UI_namespaceObject.LinkButton.with({\r\n    hidden: dist_dom_lib_UI_namespaceObject.bind(\"sidebarCollapsed\"),\r\n    label: \"Github\",\r\n    target: \"https://www.github.com/typescene/typescene\"\r\n})), dist_dom_lib_App_namespaceObject.HubViewLayout.Sidebar.with({\r\n    style: {\r\n        borderRight: \"1px solid #eee\",\r\n        background: \"#f8f8f8\"\r\n    },\r\n    scrollable: false\r\n}, dist_dom_lib_App_namespaceObject.HubViewLayout.Sidebar.Header.with({\r\n    hidden: dist_dom_lib_UI_namespaceObject.bind(\"!sidebarCollapsed\"),\r\n    height: \"7rem\",\r\n    style: { background: \"#333\", color: \"#fff\" },\r\n    vertAlign: \"bottom\"\r\n}, (MainView__b = [\"{h4}Table of Contents\"], MainView__b.raw = [\"{h4}Table of Contents\"], dist_dom_lib_UI_namespaceObject.tl(MainView__b))), dist_dom_lib_UI_namespaceObject.bind(\"fragments.TOCView\")), dist_dom_lib_UI_namespaceObject.bind(\"fragments.DocView\"))));\r\n\r\nvar MainView__a, MainView__b;\r\n\n// CONCATENATED MODULE: ./src/docs-viewer/DocActivity.ts\nvar DocActivity___extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar DocActivity___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\n\r\n\r\nvar DocActivity_DocActivation = (function (_super) {\r\n    DocActivity___extends(DocActivation, _super);\r\n    function DocActivation() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    DocActivation = DocActivity___decorate([\r\n        dist_dom_lib_App_namespaceObject.mapRoute(\"/doc/*glob\")\r\n    ], DocActivation);\r\n    return DocActivation;\r\n}(dist_dom_lib_App_namespaceObject.Activation));\r\nvar DocActivity_DocActivity = (function (_super) {\r\n    DocActivity___extends(DocActivity, _super);\r\n    function DocActivity() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this._scrollTop = 0;\r\n        return _this;\r\n    }\r\n    DocActivity.prototype.onCreateAsync = function () {\r\n        var _this = this;\r\n        // find main activity and get data\r\n        var glob = this.activation[\"glob\"];\r\n        this.Started.connect(function () {\r\n            _this.documentService.loadAsync().then(function () {\r\n                _this.populate();\r\n            });\r\n        });\r\n        // TODO: do this in a more structural way...\r\n        // save & restore scroll positions when moving back/forward\r\n        var withScrollElt = function (f) { return function () {\r\n            var page = dist_dom_lib_UI_namespaceObject.Page.getCurrentPage();\r\n            if (page && (page.content[0] instanceof dist_dom_lib_UI_namespaceObject.LayoutContainer)) {\r\n                page.content[0].getRenderedOutputAsync().then(function (out) {\r\n                    var elt = out && out.element && out.element.firstChild;\r\n                    while (elt) {\r\n                        if (String(elt.className).split(/\\s+/)\r\n                            .some(function (s) { return s === \"UI-LayoutContainer_scroll\"; })) {\r\n                            return f(elt);\r\n                        }\r\n                        elt = elt.nextSibling;\r\n                    }\r\n                });\r\n            }\r\n        }; };\r\n        this.Suspending.connect(withScrollElt(function (elt) {\r\n            _this._scrollTop = elt.scrollTop;\r\n        }));\r\n        this.Resumed.connect(withScrollElt(function (elt) {\r\n            elt.scrollTop = 0;\r\n            var reset = function () {\r\n                if (dist_dom_lib_App_namespaceObject.Application.current.getTopActivity() === _this)\r\n                    elt.scrollTop = _this._scrollTop;\r\n            };\r\n            dom_lib_Async_namespaceObject.sleep(10).then(reset);\r\n            dom_lib_Async_namespaceObject.sleep(100).then(reset);\r\n        }));\r\n    };\r\n    DocActivity.prototype.populate = function () {\r\n        try {\r\n            var item = this.documentService.getItemById(this.activation[\"glob\"]);\r\n            this.item = item;\r\n            this.title = this.item.name;\r\n        }\r\n        catch (err) {\r\n            dist_dom_lib_App_namespaceObject.startActivityAsync(\"/\");\r\n            return;\r\n        }\r\n    };\r\n    DocActivity___decorate([\r\n        dist_dom_lib_App_namespaceObject.injectService\r\n    ], DocActivity.prototype, \"documentService\", void 0);\r\n    DocActivity___decorate([\r\n        dom_lib_Async_namespaceObject.observable_shallow\r\n    ], DocActivity.prototype, \"item\", void 0);\r\n    DocActivity = DocActivity___decorate([\r\n        dist_dom_lib_App_namespaceObject.mapActivation(DocActivity_DocActivation),\r\n        dist_dom_lib_App_namespaceObject.mapParentActivity(MainActivity_MainActivity)\r\n    ], DocActivity);\r\n    return DocActivity;\r\n}(dist_dom_lib_App_namespaceObject.Activity));\r\n\r\n\n// CONCATENATED MODULE: ./src/docs-viewer/MonacoEditor.ts\nvar MonacoEditor___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\n/// <reference path=\"../../node_modules/monaco-editor/monaco.d.ts\" />\r\n\r\nvar VS_PATH = \"/\" + 0.9 + \"/monaco-editor/min/vs\";\r\n/** Wrapper around the MS Monaco editor, configured for TypeScript code (es5) */\r\nvar MonacoEditor_MonacoEditor = (function () {\r\n    /** Create an instance of the editor, inside given HTML element */\r\n    function MonacoEditor(elt, code) {\r\n        if (code === void 0) { code = \"\"; }\r\n        var _this = this;\r\n        /** Cursor position as a string (line:column) */\r\n        this.position = \"1:1\";\r\n        this.element = elt;\r\n        var editor = this._editor = monaco.editor.create(elt, {\r\n            theme: \"vs-dark\",\r\n            value: code,\r\n            language: \"typescript\",\r\n            folding: true,\r\n            scrollBeyondLastLine: false,\r\n            formatOnType: true,\r\n            formatOnPaste: true,\r\n            wordBasedSuggestions: false,\r\n            minimap: { enabled: false }\r\n        });\r\n        monaco.languages.typescript.typescriptDefaults.setCompilerOptions({\r\n            target: monaco.languages.typescript.ScriptTarget.ES2015,\r\n            module: monaco.languages.typescript.ModuleKind.CommonJS,\r\n            allowNonTsExtensions: true,\r\n            experimentalDecorators: true,\r\n            strictNullChecks: true\r\n        });\r\n        editor.onDidChangeCursorPosition(function () {\r\n            var pos = editor.getPosition();\r\n            _this.position = pos.lineNumber + \":\" + pos.column;\r\n        });\r\n    }\r\n    /** Load the editor script, returns promise that resolves when everything is loaded */\r\n    MonacoEditor.load = function () {\r\n        // load the Monaco editor AMD loader script\r\n        return this._isLoaded || (this._isLoaded = new dom_lib_Async_namespaceObject.Promise(function (resolve) {\r\n            var script = document.createElement(\"script\");\r\n            script.src = VS_PATH + \"/loader.js\";\r\n            script.async = false;\r\n            document.body.appendChild(script);\r\n            // poll to see if the script has run yet\r\n            var intv = setInterval(function () {\r\n                if (typeof AMDLoader !== \"undefined\") {\r\n                    clearInterval(intv);\r\n                    var r = window[\"require\"];\r\n                    r.config({ paths: { vs: VS_PATH } });\r\n                    r([\"vs/editor/editor.main\"], function () { return resolve(true); });\r\n                }\r\n            }, 100);\r\n        }));\r\n    };\r\n    /** Load a .d.ts file into the typescript context */\r\n    MonacoEditor.loadDeclarations = function (fileName, source) {\r\n        monaco.languages.typescript.typescriptDefaults.addExtraLib(source, fileName);\r\n    };\r\n    /** Returns the current text contents of the editor */\r\n    MonacoEditor.prototype.getCode = function () {\r\n        return this._editor.getValue();\r\n    };\r\n    /** Overwrites the current text contents of the editor, and focuses element */\r\n    MonacoEditor.prototype.setCode = function (source) {\r\n        this._editor.setValue(source);\r\n        this._editor.setPosition({ lineNumber: 1, column: 1 });\r\n        this.position = \"1:1\";\r\n        this._editor.focus();\r\n    };\r\n    /** Update layout and re-focus the editor */\r\n    MonacoEditor.prototype.focus = function () {\r\n        this._editor.layout();\r\n        this._editor.focus();\r\n    };\r\n    /** Dispose the editor */\r\n    MonacoEditor.prototype.destroy = function () {\r\n        this._editor.dispose();\r\n    };\r\n    MonacoEditor___decorate([\r\n        dom_lib_Async_namespaceObject.observable\r\n    ], MonacoEditor.prototype, \"position\", void 0);\r\n    return MonacoEditor;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/docs-viewer/CodeOutput.ts\nvar CodeOutput___extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar CodeOutput___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\n\r\n\r\n\r\n/** Global TypeScript compiler instance */\r\nvar ts;\r\n/** Modules by ID */\r\nvar typescene = window.typescene;\r\nvar modules = {\r\n    \"@typescene/core\": typescene.core,\r\n    \"@typescene/core/Async\": typescene.core.Async,\r\n    \"@typescene/core/UI\": typescene.core.UI,\r\n    \"@typescene/core/App\": typescene.core.App,\r\n    \"@typescene/dom\": typescene,\r\n    \"@typescene/dom/Async\": typescene.Async,\r\n    \"@typescene/dom/UI\": typescene.UI,\r\n    \"@typescene/dom/App\": typescene.App\r\n};\r\n/** Code modified by user, by example ID */\r\nvar modifiedCode = {};\r\n/** Last opened example code ID */\r\nvar lastEditedExampleID;\r\n/** Last open editor (should be destroyed when opening a new editor */\r\nvar lastEditor;\r\n// start with a fresh hidden editor to load typescript\r\nvar _loaded = dist_dom_lib_UI_namespaceObject.Screen.ready.then(function () {\r\n    return MonacoEditor_MonacoEditor.load().then(function () {\r\n        new MonacoEditor_MonacoEditor(document.createElement(\"div\"));\r\n        var svc = DocumentService_DocumentService.getInstance();\r\n        return svc.loadAsync().then(function () {\r\n            return dist_dom_lib_App_namespaceObject.Http.getTextAsync(\"/\" + 0.9 + \"/typescene.d.ts.txt\");\r\n        }).then(function (defs) {\r\n            MonacoEditor_MonacoEditor.loadDeclarations(\"typescene.d.ts\", defs);\r\n            MonacoEditor_MonacoEditor.loadDeclarations(\"editor.d.ts\", \"declare var displayResult: (value: any) => void\");\r\n            var doPollTypescript = function () {\r\n                return dom_lib_Async_namespaceObject.sleep(100).then(function () {\r\n                    ts = window[\"ts\"];\r\n                    if (ts)\r\n                        return true;\r\n                    else\r\n                        return doPollTypescript();\r\n                });\r\n            };\r\n            return doPollTypescript();\r\n        });\r\n    });\r\n});\r\nvar CodeOutput_CodeOutputContainer = (function (_super) {\r\n    CodeOutput___extends(CodeOutputContainer, _super);\r\n    function CodeOutputContainer(cID, code, outputIdentifier, hasEditButton) {\r\n        if (hasEditButton === void 0) { hasEditButton = true; }\r\n        var _this = _super.call(this) || this;\r\n        _this.cID = cID;\r\n        _this.code = code;\r\n        _this.hasEditButton = hasEditButton;\r\n        /** Number of times updated */\r\n        _this.count = 0;\r\n        _this.appendChild(new (dist_dom_lib_UI_namespaceObject.CloseRow.with(dist_dom_lib_UI_namespaceObject.tl(\"{i|#555}Starting TypeScript environment...\"))));\r\n        // wrap code in a full program\r\n        _this.code =\r\n            (/^import/.test(code) ? \"\" :\r\n                \"import { Async, UI, App } from \\\"@typescene/dom\\\";\\n\\n\") +\r\n                code;\r\n        if (outputIdentifier)\r\n            _this.code += \"\\ndisplayResult(\" + outputIdentifier + \");\";\r\n        else if (!/console\\.log/.test(code))\r\n            _this.code += \"\\nconsole.log(\\\"OK\\\")\";\r\n        // wait for Typescript environment to be loaded\r\n        _loaded.then(function () {\r\n            _this.style.addClass(\"doc-text-example-output\")\r\n                .addShadowEffect(.2);\r\n            _this.updateOutput();\r\n        });\r\n        return _this;\r\n    }\r\n    /** Revert changes and update output */\r\n    CodeOutputContainer.prototype.revertChanges = function () {\r\n        delete modifiedCode[this.cID];\r\n        this.updateOutput();\r\n    };\r\n    /** Show editor for current example code */\r\n    CodeOutputContainer.prototype.showEditor = function () {\r\n        new CodeOutput_CodeEditor(this).openAsync();\r\n    };\r\n    /** Update the output within this container, for current example code */\r\n    CodeOutputContainer.prototype.updateOutput = function () {\r\n        var _this = this;\r\n        // make the factory that creates the byline and buttons on top\r\n        var isModified = !!(modifiedCode[this.cID]);\r\n        var dd = new Date();\r\n        var ddMins = dd.getMinutes();\r\n        var ddSecs = dd.getSeconds();\r\n        var ddStr = \"Updated \" + dd.getHours() + \":\" +\r\n            (ddMins < 10 ? \"0\" + ddMins : ddMins) + \":\" +\r\n            (ddSecs < 10 ? \"0\" + ddSecs : ddSecs);\r\n        var byline = dist_dom_lib_UI_namespaceObject.Row.with({\r\n            content: [\r\n                dist_dom_lib_UI_namespaceObject.tl((this.count++ ? ddStr : \"Output\")\r\n                    + (isModified ? \" (modified)\" : \"\")),\r\n                dist_dom_lib_UI_namespaceObject.Spacer,\r\n                dist_dom_lib_UI_namespaceObject.TextButton.with({\r\n                    label: \"Edit this example\",\r\n                    Clicked: \"showEditor\",\r\n                    hidden: dom_lib_Async_namespaceObject.observe(function () {\r\n                        return !_this.hasEditButton || dist_dom_lib_UI_namespaceObject.Screen.dimensions.isSmall;\r\n                    })\r\n                }),\r\n                isModified ?\r\n                    dist_dom_lib_UI_namespaceObject.TextButton.withLabel(\"Revert changes\", \"revertChanges\") :\r\n                    undefined,\r\n            ],\r\n            height: \"1.75rem\",\r\n            style: dist_dom_lib_UI_namespaceObject.Style.withClass(\"doc-text-example-byline\"),\r\n            animations: { appear: dist_dom_lib_UI_namespaceObject.DOM.DOMAnimation.basic.in.slideDown }\r\n        });\r\n        // transpile the program\r\n        try {\r\n            var code = modifiedCode[this.cID] || this.code;\r\n            var t = ts.transpileModule(code, {\r\n                reportDiagnostics: true,\r\n                compilerOptions: {\r\n                    target: \"es5\",\r\n                    module: \"commonjs\",\r\n                    experimentalDecorators: true,\r\n                    strictNullChecks: true,\r\n                    lib: [\"es2015\", \"dom\"]\r\n                }\r\n            });\r\n            var mockConsole = {\r\n                log: function () {\r\n                    var args = [];\r\n                    for (var _i = 0; _i < arguments.length; _i++) {\r\n                        args[_i] = arguments[_i];\r\n                    }\r\n                    dom_lib_Async_namespaceObject.unobserved(function () {\r\n                        // try to convert all output to text\r\n                        var output = args.map(function (v) {\r\n                            try {\r\n                                if (typeof v === \"string\")\r\n                                    return v;\r\n                                if (v === undefined)\r\n                                    return \"undefined\";\r\n                                else\r\n                                    return JSON.stringify(v);\r\n                            }\r\n                            catch (all) {\r\n                                try {\r\n                                    return String(v);\r\n                                }\r\n                                catch (err) {\r\n                                    return String(err);\r\n                                }\r\n                            }\r\n                        });\r\n                        if (!_this.content.length) {\r\n                            _this.initializeWith({ content: [byline] });\r\n                            _this.getComponentsByType(dist_dom_lib_UI_namespaceObject.Row)[0].content\r\n                                .unshift(new dist_dom_lib_UI_namespaceObject.Icon(\"fa-terminal color=green fontSize=1rem\"));\r\n                        }\r\n                        // add all logged text in a row with a single label\r\n                        var label = new dist_dom_lib_UI_namespaceObject.Label(output.join(\" \"));\r\n                        label.wrapText = true;\r\n                        label.shrinkwrap = false;\r\n                        _this.content.push(new dist_dom_lib_UI_namespaceObject.Row([label]));\r\n                    });\r\n                }\r\n            };\r\n            try {\r\n                Object.setPrototypeOf(mockConsole, console);\r\n            }\r\n            catch (all) { }\r\n            // run the (modified) program with function parameters\r\n            this.content.length = 0;\r\n            (new Function(\"exports\", \"require\", \"displayResult\", \"console\", t.outputText))\r\n                .call(void 0, \r\n            // exports (ignored)\r\n            {}, \r\n            // require function:\r\n            function (name) {\r\n                if (modules[name])\r\n                    return modules[name];\r\n                throw new Error(\"Cannot find module: \" + name);\r\n            }, \r\n            // displayResult function:\r\n            function (value) {\r\n                _this.initializeWith({ content: [byline, value] });\r\n                if (isModified) {\r\n                    _this.getComponentsByType(dist_dom_lib_UI_namespaceObject.Row)[0]\r\n                        .content.unshift(new dist_dom_lib_UI_namespaceObject.Icon(\"fa-check color=green\"));\r\n                }\r\n            }, \r\n            // console with own `log` method\r\n            mockConsole);\r\n            dom_lib_Async_namespaceObject.sleep(1000).then(function () {\r\n                // force display of empty result after 1s\r\n                if (_this.content.length === 0)\r\n                    mockConsole.log();\r\n            });\r\n        }\r\n        catch (err) {\r\n            // display error instead\r\n            console.error(err);\r\n            var label = dist_dom_lib_UI_namespaceObject.tl(\"{i|#c30}\" + String(err));\r\n            this.initializeWith({ content: [byline, label] });\r\n        }\r\n    };\r\n    return CodeOutputContainer;\r\n}(dist_dom_lib_UI_namespaceObject.Container));\r\n\r\nvar CodeOutput_CodeEditor = (function (_super) {\r\n    CodeOutput___extends(CodeEditor, _super);\r\n    function CodeEditor(codeOutput) {\r\n        var _this = _super.call(this) || this;\r\n        _this.codeOutput = codeOutput;\r\n        _this.displayOptions.modalHorzAlign = \"left\";\r\n        var code = modifiedCode[codeOutput.cID] || codeOutput.code;\r\n        // create the editor, or use last editor\r\n        if (lastEditedExampleID === codeOutput.cID) {\r\n            // re-use\r\n            _this.editor = lastEditor;\r\n            if (!modifiedCode[_this.codeOutput.cID])\r\n                _this.editor.setCode(_this.codeOutput.code);\r\n        }\r\n        else {\r\n            // dispose of old editor\r\n            lastEditor && lastEditor.destroy();\r\n            // create new editor\r\n            var elt = document.createElement(\"div\");\r\n            elt.style.height = \"100%\";\r\n            _this.editor = new MonacoEditor_MonacoEditor(elt, code);\r\n            lastEditedExampleID = codeOutput.cID;\r\n            lastEditor = _this.editor;\r\n        }\r\n        // add the editor inside of a DOM block component\r\n        var domBlock = new dist_dom_lib_UI_namespaceObject.DOM.DOMBlock(_this.editor.element);\r\n        domBlock.height = \"100vh\";\r\n        domBlock.style.set(\"paddingTop\", \"5.5rem\");\r\n        _this.initialize();\r\n        _this.content.unshift(domBlock);\r\n        // ignore ESC presses within editor\r\n        domBlock.EscapeKeyPressed.connect(function () { });\r\n        // focus the editor when rendering finishes\r\n        _this.Rendered.connect(function (out) {\r\n            out.updated && out.updated.then(function () { return _this.editor.focus(); });\r\n        });\r\n        // save the code when user closes this dialog (e.g. clicking outside)\r\n        _this.Closed.connect(function () {\r\n            modifiedCode[_this.codeOutput.cID] = _this.editor.getCode();\r\n        });\r\n        return _this;\r\n    }\r\n    /** Close the dialog and update original output */\r\n    CodeEditor.prototype.closeAndRun = function () {\r\n        var _this = this;\r\n        this.close();\r\n        modifiedCode[this.codeOutput.cID] = this.editor.getCode();\r\n        dom_lib_Async_namespaceObject.sleep(10).then(function () {\r\n            _this.codeOutput.updateOutput();\r\n        });\r\n    };\r\n    CodeOutput___decorate([\r\n        dom_lib_Async_namespaceObject.observable\r\n    ], CodeEditor.prototype, \"editor\", void 0);\r\n    return CodeEditor;\r\n}(dist_dom_lib_UI_namespaceObject.DialogContainer.with({\r\n    height: \"100vh\",\r\n    width: \"55vw\",\r\n    scrollable: false,\r\n    style: {\r\n        overflow: \"visible\",\r\n        minWidth: \"45rem\",\r\n        background: \"#333\"\r\n    },\r\n    shadowEffect: 1,\r\n    animations: {\r\n        appear: dist_dom_lib_UI_namespaceObject.DOM.DOMAnimation.basic.in.slideRight\r\n    }\r\n}, \r\n// toolbar row\r\ndist_dom_lib_UI_namespaceObject.Row.with({\r\n    height: \"2rem\",\r\n    overlayPosition: dist_dom_lib_UI_namespaceObject.Row.OverlayPosition.Top,\r\n    style: {\r\n        marginTop: \"3.5rem\",\r\n        background: \"#333\", color: \"#ccc\"\r\n    }\r\n}, dist_dom_lib_UI_namespaceObject.TextButton.with({\r\n    label: \"Save and run\",\r\n    icon: \"fa-play\",\r\n    remGutter: 2,\r\n    style: { cursor: \"pointer\" },\r\n    style_button: { color: \"\" },\r\n    Clicked: \"closeAndRun\"\r\n}), dist_dom_lib_UI_namespaceObject.Spacer, dist_dom_lib_UI_namespaceObject.tl(dist_dom_lib_UI_namespaceObject.bind(\"editor.position\", function (s) { return (s || \"\"); }))), \r\n// top row with back button:\r\ndist_dom_lib_UI_namespaceObject.Row.with({\r\n    height: \"3.5rem\",\r\n    overlayPosition: dist_dom_lib_UI_namespaceObject.Row.OverlayPosition.Top,\r\n    style: { background: \"#555\", color: \"#fff\" },\r\n    shadowEffect: .5\r\n}, dist_dom_lib_UI_namespaceObject.RoundButton.withIcon(\"fa-arrow-left\", \"close\"), (CodeOutput__a = [\"{1rem}Live code editor\"], CodeOutput__a.raw = [\"{1rem}Live code editor\"], dist_dom_lib_UI_namespaceObject.tl(CodeOutput__a))), \r\n// \"Play\" button to close and run code\r\ndist_dom_lib_UI_namespaceObject.CenterRow.with({\r\n    width: \"3.5rem\",\r\n    height: \"3.5rem\",\r\n    style: {\r\n        cursor: \"pointer\",\r\n        position: \"absolute\",\r\n        top: \"40%\",\r\n        right: \"-1.75rem\",\r\n        background: \"#fd3\",\r\n        color: \"#333\",\r\n        borderRadius: \"1.75rem\",\r\n        zIndex: \"1\"\r\n    },\r\n    shadowEffect: 1,\r\n    Clicked: \"closeAndRun\"\r\n}, dist_dom_lib_UI_namespaceObject.Icon.with({\r\n    icon: \"fa-play fa-2x\",\r\n    tooltipText: \"Close & run\",\r\n    style: {\r\n        // optically center the triangle:\r\n        paddingLeft: \".2rem\"\r\n    }\r\n})))));\r\nvar CodeOutput__a;\r\n\n// CONCATENATED MODULE: ./src/docs-viewer/DocArticle.ts\nvar DocArticle___extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar DocArticle___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\n\r\n\r\nvar TAG_BG_CLASSTYPE = \"#333\";\r\nvar TAG_BG_INTFTYPE = \"#888\";\r\nvar TAG_BG_CTOR = \"#c3e\";\r\nvar TAG_BG_MEMBERTYPE = \"#38e\";\r\nvar TAG_BG_ASYNC = \"#ac6\";\r\nvar TAG_BG_DECORATOR = \"#555\";\r\nvar TAG_BG_OTHRTYPE = \"#aaa\";\r\nvar TAG_BG_STATIC = \"#eb6\";\r\nvar TAG_BG_ACCESS = \"#c63\";\r\n/** Helper function to replace code tags with links if applicable */\r\nfunction linkifyCode(root, svc, base) {\r\n    var aElts = root.querySelectorAll(\"a\");\r\n    var _loop_1 = function () {\r\n        var elt = aElts[i];\r\n        var href = elt.href;\r\n        if (href.indexOf(\"~/\") >= 0) {\r\n            // change href from ~/foo to /doc/foo\r\n            href = href.replace(/.*~\\//, \"/doc/\");\r\n            elt.href = href;\r\n            elt.onclick = function () {\r\n                dist_dom_lib_App_namespaceObject.startActivityAsync(href);\r\n                return false;\r\n            };\r\n        }\r\n    };\r\n    for (var i = 0; i < aElts.length; i++) {\r\n        _loop_1();\r\n    }\r\n    var codeElts = root.querySelectorAll(\"code\");\r\n    var _loop_2 = function () {\r\n        var elt = codeElts[i];\r\n        if (elt.parentNode.nodeName.toUpperCase() === \"A\")\r\n            return \"continue\";\r\n        var text = elt.innerText;\r\n        text = text.replace(/\\(\\.*\\)$/, \"\").replace(/\\#(\\w+)$/, \"/$1\");\r\n        if (base && (text[0] === \".\" || text[0] === \"/\")) {\r\n            // use relative ID\r\n            text = base.id + (svc.exists(base.id + text) ?\r\n                text : text.replace(/\\./g, \"/\"));\r\n        }\r\n        id = svc.find(text, base);\r\n        if (id) {\r\n            // wrap <code> element into <a> element\r\n            item = svc.getItemById(id);\r\n            a = document.createElement(\"a\");\r\n            var href_1 = \"/doc/\" + (item.textSlug || item.id);\r\n            a.href = href_1;\r\n            elt.parentNode.insertBefore(a, elt);\r\n            a.appendChild(elt);\r\n            a.onclick = function () {\r\n                dist_dom_lib_App_namespaceObject.startActivityAsync(href_1);\r\n                return false;\r\n            };\r\n        }\r\n    };\r\n    var id, item, a;\r\n    for (var i = 0; i < codeElts.length; i++) {\r\n        _loop_2();\r\n    }\r\n}\r\n/** Helper function to perform syntax highlighting */\r\nfunction highlightCode(elt) {\r\n    var preElts = elt.querySelectorAll(\"pre code\");\r\n    for (var i = 0; i < preElts.length; i++) {\r\n        var elt_1 = preElts[i];\r\n        if (typeof hljs !== \"undefined\")\r\n            hljs.highlightBlock(elt_1);\r\n    }\r\n}\r\n/** Container with a full article about a documentation item/topic */\r\nvar DocArticle_DocArticle = (function (_super) {\r\n    DocArticle___extends(DocArticle, _super);\r\n    function DocArticle(item) {\r\n        var _this = _super.call(this) || this;\r\n        _this.item = item;\r\n        _this.style.set(\"fontSize\", \"1.125rem\");\r\n        // add row with the item heading, and a divider\r\n        if (!item.textSkipTitle) {\r\n            _this.content.push(new (dist_dom_lib_UI_namespaceObject.Row.with({ verticalSpacing: \".5rem\" }, dist_dom_lib_UI_namespaceObject.Heading2.with({\r\n                text: item.name,\r\n                shrinkwrap: false,\r\n                style: {\r\n                    whiteSpace: \"pre-wrap\",\r\n                    fontSize: \"2rem\",\r\n                    fontWeight: \"300\",\r\n                    lineHeight: \"1.4em\"\r\n                }\r\n            }))), new dist_dom_lib_UI_namespaceObject.Divider(undefined, undefined, \"0\"));\r\n        }\r\n        // build up the article with HTML elements,\r\n        // starting from a code declaration if any\r\n        if (item.code) {\r\n            var codeElt = document.createElement(\"code\");\r\n            codeElt.innerText = item.code;\r\n            var codeBlock = new dist_dom_lib_UI_namespaceObject.DOM.DOMBlock(codeElt);\r\n            codeBlock.style.addClass(\"doc-code\");\r\n            codeBlock.style.set({ margin: \"1rem\" });\r\n            _this.content.push(codeBlock);\r\n        }\r\n        // append JSDoc text\r\n        if (item.doc) {\r\n            var docElt = document.createElement(\"div\");\r\n            docElt.innerHTML = item.doc;\r\n            linkifyCode(docElt, _this.documentService, item.parentItem);\r\n            var docBlock = new dist_dom_lib_UI_namespaceObject.DOM.DOMBlock(docElt);\r\n            docBlock.style.addClass(\"doc-text-article\");\r\n            docBlock.style.set({ margin: \"1rem\" });\r\n            _this.content.push(docBlock);\r\n        }\r\n        // append more text\r\n        var frag = document.createDocumentFragment();\r\n        item.text && item.text.forEach(function (textItem, i) {\r\n            var textElt = document.createElement(\"div\");\r\n            if (textItem.type)\r\n                textElt.className = \"doc-text-type-\" + textItem.type;\r\n            // populate text content\r\n            textElt.innerHTML = textItem.content;\r\n            linkifyCode(textElt, _this.documentService, (item.isClass || item.isInterface || item.isNamespace) ? item : item.parentItem);\r\n            highlightCode(textElt);\r\n            // show examples with code output\r\n            if (textItem.type === \"example\" || textItem.type === \"playground\") {\r\n                var code = \"\", outID = textItem.displayResult;\r\n                for (var _i = 0, _a = textElt.querySelectorAll(\"pre\"); _i < _a.length; _i++) {\r\n                    var elt = _a[_i];\r\n                    code += (code ? \"\\n\" : \"\") + elt.textContent;\r\n                }\r\n                var outElt = document.createComment(\"output\");\r\n                textElt.appendChild(outElt);\r\n                // use the result of the first expression in the example if\r\n                // displayResult is \"*\"\r\n                if (outID === \"*\") {\r\n                    outID = \"result\";\r\n                    code = \"var result = \" + code;\r\n                }\r\n                // add observable to watch code output while block\r\n                // is displayed, but show output as an element inside\r\n                // of the text element itself\r\n                var exampleID = item.id + \"|ex\" + i;\r\n                var c = new CodeOutput_CodeOutputContainer(exampleID, code, outID, textItem.type !== \"playground\");\r\n                _this.content.push(dom_lib_Async_namespaceObject.observe(function () {\r\n                    var out = c.out;\r\n                    if (out) {\r\n                        outElt.parentNode.replaceChild(out.element, outElt);\r\n                        outElt = out.element;\r\n                    }\r\n                }));\r\n                // for playground \"example\", show a separate button to open the editor\r\n                if (textItem.type === \"playground\") {\r\n                    textElt.className += \" doc-text-type-example\";\r\n                    var row = new (dist_dom_lib_UI_namespaceObject.Row.with({ verticalSpacing: \"1rem\", spacing: \"0\" }, dist_dom_lib_UI_namespaceObject.PrimaryButton.with({\r\n                        hidden: dom_lib_Async_namespaceObject.observe(function () { return dist_dom_lib_UI_namespaceObject.Screen.dimensions.isSmall; }),\r\n                        icon: \"fa-pencil\",\r\n                        remGutter: 2,\r\n                        label: (_b = [\"Open code editor\"], _b.raw = [\"Open code editor\"], dist_dom_lib_UI_namespaceObject.tl(_b)),\r\n                        Clicked: new dist_dom_lib_UI_namespaceObject.ActionHandler(function () {\r\n                            c.showEditor();\r\n                            for (var _i = 0, _a = textElt.querySelectorAll(\"pre\"); _i < _a.length; _i++) {\r\n                                var elt = _a[_i];\r\n                                textElt.removeChild(elt);\r\n                            }\r\n                        }),\r\n                        shrinkwrap: false\r\n                    }), dist_dom_lib_UI_namespaceObject.Label.with({\r\n                        hidden: dom_lib_Async_namespaceObject.observe(function () { return !dist_dom_lib_UI_namespaceObject.Screen.dimensions.isSmall; }),\r\n                        text: \"(Not available on mobile devices)\",\r\n                        shrinkwrap: false,\r\n                        style: { textAlign: \"center\" }\r\n                    })));\r\n                    var playgroundButtonRowElt = document.createComment(\"\");\r\n                    textElt.insertBefore(playgroundButtonRowElt, textElt.firstChild);\r\n                    _this.content.push(dom_lib_Async_namespaceObject.observe(function () {\r\n                        var out = row.out;\r\n                        if (out) {\r\n                            playgroundButtonRowElt.parentNode\r\n                                .replaceChild(out.element, playgroundButtonRowElt);\r\n                            playgroundButtonRowElt = out.element;\r\n                        }\r\n                    }));\r\n                }\r\n            }\r\n            // show title, collapsed or normal\r\n            if (textItem.title && textItem.title[0] !== \"_\") {\r\n                var headingElt = document.createElement(textItem.subHeading ? \"h4\" : \"h3\");\r\n                headingElt.className = \"doc-heading doc-heading-\" +\r\n                    (textItem.type ? textItem.type : \"section\");\r\n                headingElt.textContent = textItem.title;\r\n                if (textItem.type === \"task\") {\r\n                    // insert \"task\" icon in heading\r\n                    var iconElt = document.createElement(\"i\");\r\n                    iconElt.className = \"fa fa-arrow-circle-right\";\r\n                    headingElt.insertBefore(iconElt, headingElt.firstChild);\r\n                }\r\n                if (textItem.collapse === \"heading\") {\r\n                    // insert icon in heading, and set event handler\r\n                    var iconElt = document.createElement(\"i\");\r\n                    headingElt.insertBefore(iconElt, headingElt.firstChild);\r\n                    headingElt.style.cursor = \"pointer\";\r\n                    var setIconClass_1 = function (open) {\r\n                        iconElt.className = open ?\r\n                            \"fa fa-chevron-down fa-fw\" :\r\n                            \"fa fa-chevron-right fa-fw\";\r\n                    };\r\n                    setIconClass_1();\r\n                    var wrapper = document.createElement(\"div\");\r\n                    while (textElt.firstChild)\r\n                        wrapper.appendChild(textElt.removeChild(textElt.firstChild));\r\n                    var open = false;\r\n                    headingElt.onclick = function () {\r\n                        open = !open;\r\n                        setIconClass_1(open);\r\n                        if (open)\r\n                            textElt.appendChild(wrapper);\r\n                        else\r\n                            textElt.removeChild(wrapper);\r\n                    };\r\n                }\r\n                textElt.insertBefore(headingElt, textElt.firstChild);\r\n            }\r\n            frag.appendChild(textElt);\r\n            var _b;\r\n        });\r\n        if (frag.firstChild || item.doc || item.code) {\r\n            var textBlock = new dist_dom_lib_UI_namespaceObject.DOM.DOMBlock(frag);\r\n            textBlock.style.addClass(\"doc-text-article\");\r\n            textBlock.style.set({ margin: \"1rem 1rem 2rem\" });\r\n            _this.content.push(textBlock);\r\n        }\r\n        // append lists of sub items, if any, including inherited ones\r\n        if (item.toc && !item.textSkipTOC) {\r\n            _this.content.push(new dist_dom_lib_UI_namespaceObject.Row([new dist_dom_lib_UI_namespaceObject.Heading3(\"In this section\")]));\r\n            _this.content.push(new DocArticle_ItemListPanel(\"\", item.toc.map(function (id) {\r\n                return _this.documentService.getItemById(id);\r\n            })));\r\n        }\r\n        if (item.items && item.items.length ||\r\n            item.extends && item.extends.length) {\r\n            var staticPanel = new DocArticle_ItemListPanel(item.isEnum ? \"Enum members\" : \"Static members\", item.items && item.items.filter(function (z) { return z.isStatic; }), item.inherits && item.inherits.filter(function (id) {\r\n                return /\\.[^\\/]+$/.test(id) && !/\\.constructor/.test(id);\r\n            }));\r\n            var constrPanel = new DocArticle_ItemListPanel(\"Constructors\", item.items && item.items.filter(function (z) { return z.isCtor; }), item.inherits && item.inherits.filter(function (id) {\r\n                return /\\.constructor/.test(id);\r\n            }));\r\n            var membersPanel = new DocArticle_ItemListPanel(\"Instance members\", item.items && item.items.filter(function (z) { return !z.isCtor && !z.isStatic; }), item.inherits && item.inherits.filter(function (id) {\r\n                return !/\\.[^\\/]+$/.test(id);\r\n            }));\r\n            if (staticPanel.docItems.length || constrPanel.docItems.length ||\r\n                membersPanel.docItems.length) {\r\n                _this.content.push(new dist_dom_lib_UI_namespaceObject.Row([new dist_dom_lib_UI_namespaceObject.Heading3(\"Members\")]), staticPanel, constrPanel, membersPanel);\r\n            }\r\n        }\r\n        if (item.declType) {\r\n            var valueTypes = [];\r\n            item.declType.split(/\\s*[&|,\\<\\>]\\s*/).forEach(function (typeName) {\r\n                typeName = typeName.replace(/^\\s*typeof /, \"\").trim();\r\n                var typeId = _this.documentService.find(typeName, item);\r\n                if (typeId) {\r\n                    var typeItem = _this.documentService.getItemById(typeId);\r\n                    if (!valueTypes.some(function (z) { return z.id === typeItem.id; }))\r\n                        valueTypes.push(typeItem);\r\n                }\r\n            });\r\n            if (valueTypes.length) {\r\n                // link (return) type(s)\r\n                _this.content.push(new dist_dom_lib_UI_namespaceObject.Row([new dist_dom_lib_UI_namespaceObject.Heading3((item.isFunction || item.isMethod) ?\r\n                        \"Return type\" : \"Value type\")]));\r\n                _this.content.push(new DocArticle_ItemListPanel(\"\", valueTypes));\r\n            }\r\n        }\r\n        if (item.textSeeAlso) {\r\n            // show a \"See also\" section\r\n            _this.content.push(new dist_dom_lib_UI_namespaceObject.Row([new dist_dom_lib_UI_namespaceObject.Heading3(\"See also\")]));\r\n            _this.content.push(new DocArticle_ItemListPanel(\"References\", item.textSeeAlso.split(/,|;|\\|/).map(function (id) {\r\n                id = _this.documentService.find(id.trim(), item);\r\n                return id ? _this.documentService.getItemById(id) :\r\n                    undefined;\r\n            }).filter(function (z) { return !!z; })));\r\n        }\r\n        if (item.parentItem && item.parentItem.items) {\r\n            // link parent item\r\n            _this.content.push(new dist_dom_lib_UI_namespaceObject.Row([new dist_dom_lib_UI_namespaceObject.Heading3(\"Declared on\")]));\r\n            _this.content.push(new DocArticle_ItemListPanel(\"\", [item.parentItem]));\r\n            // show a list of related/sibling/instance items\r\n            if (item.isStatic) {\r\n                var heading = new dist_dom_lib_UI_namespaceObject.Row([new dist_dom_lib_UI_namespaceObject.Heading3(\"Related members\")]);\r\n                var panel = new DocArticle_ItemListPanel(\"Members (static)\", item.parentItem.items.filter(function (z) {\r\n                    return z.isStatic && z.id !== item.id;\r\n                }), item.parentItem.inherits &&\r\n                    item.parentItem.inherits.filter(function (id) {\r\n                        return /\\.[^\\/]+$/.test(id) && !/\\.constructor/.test(id);\r\n                    }));\r\n                if (panel.itemRows.length)\r\n                    _this.content.push(heading, panel);\r\n            }\r\n            else {\r\n                var heading = new dist_dom_lib_UI_namespaceObject.Row([new dist_dom_lib_UI_namespaceObject.Heading3(item.isCtor ?\r\n                        \"Instance members\" : \"Related members\")]);\r\n                var panel = new DocArticle_ItemListPanel(\"Instance members\", item.parentItem.items.filter(function (z) {\r\n                    return !z.isCtor && !z.isStatic && z.id !== item.id;\r\n                }), item.parentItem.inherits && item.parentItem.inherits.filter(function (id) { return !/\\.[^\\/]+$/.test(id); }));\r\n                if (panel.itemRows.length)\r\n                    _this.content.push(heading, panel);\r\n            }\r\n        }\r\n        // add final space below all content\r\n        var bottomSpacer = new dist_dom_lib_UI_namespaceObject.Block();\r\n        bottomSpacer.height = \"5rem\";\r\n        _this.content.push(bottomSpacer);\r\n        return _this;\r\n    }\r\n    DocArticle___decorate([\r\n        dist_dom_lib_App_namespaceObject.injectService\r\n    ], DocArticle.prototype, \"documentService\", void 0);\r\n    return DocArticle;\r\n}(dist_dom_lib_UI_namespaceObject.Container));\r\n\r\n/** Spacer that is always exactly .5rem wide */\r\nvar HalfSpacer = (function (_super) {\r\n    DocArticle___extends(HalfSpacer, _super);\r\n    function HalfSpacer() {\r\n        var _this = _super.call(this) || this;\r\n        _this.width = \".5rem\";\r\n        _this.shrinkwrap = true;\r\n        return _this;\r\n    }\r\n    return HalfSpacer;\r\n}(dist_dom_lib_UI_namespaceObject.Spacer));\r\n/** A row with labels that describe a code documentation item */\r\nvar DocArticle_TagLabelRow = (function (_super) {\r\n    DocArticle___extends(TagLabelRow, _super);\r\n    function TagLabelRow(item, isInherited, omitIcon) {\r\n        var _this = _super.call(this) || this;\r\n        _this.icon = item.icon;\r\n        if (isInherited) {\r\n            // dim all tags\r\n            _this.style.set({ opacity: \".5\" });\r\n            // add an icon and the inherited label\r\n            var inheritedIcon = new dist_dom_lib_UI_namespaceObject.Icon();\r\n            inheritedIcon.icon = \"fa-clone\";\r\n            inheritedIcon.tooltipText = \"Inherited\";\r\n            inheritedIcon.style.set({\r\n                color: \"#888\"\r\n            });\r\n            _this.content.push(inheritedIcon, new HalfSpacer());\r\n        }\r\n        if (item.code) {\r\n            // add the icon and a small space\r\n            if (!omitIcon)\r\n                _this.content.push(new dist_dom_lib_UI_namespaceObject.Icon(_this.icon), new HalfSpacer());\r\n            // add all appropriate tags\r\n            var add = function (text, bg, italic) {\r\n                var label = new dist_dom_lib_UI_namespaceObject.Label(text);\r\n                label.style.set({\r\n                    background: bg,\r\n                    color: \"#fff\",\r\n                    borderRadius: \".5rem\",\r\n                    padding: \"0 .5rem\",\r\n                    lineHeight: \"1.5em\",\r\n                    fontSize: \".75rem\",\r\n                    fontStyle: italic ? \"italic\" : \"normal\"\r\n                });\r\n                _this.content.push(label, new HalfSpacer());\r\n            };\r\n            if (item.isClass)\r\n                add(\"class\", TAG_BG_CLASSTYPE);\r\n            else if (item.isNamespace)\r\n                add(\"namespace\", TAG_BG_CLASSTYPE);\r\n            else if (item.isInterface)\r\n                add(\"interface\", TAG_BG_INTFTYPE);\r\n            else if (item.isCtor)\r\n                add(\"constructor\", TAG_BG_CTOR);\r\n            else if (item.isMethod)\r\n                add(\"method\", TAG_BG_MEMBERTYPE);\r\n            else if (item.isSignal)\r\n                add(\"signal\", TAG_BG_ASYNC);\r\n            else if (item.isProperty)\r\n                add(\"property\", TAG_BG_MEMBERTYPE);\r\n            else if (item.isDecorator)\r\n                add(\"decorator\", TAG_BG_DECORATOR);\r\n            else if (item.isFunction)\r\n                add(\"function\", TAG_BG_OTHRTYPE);\r\n            else if (item.isConst)\r\n                add(\"const\", TAG_BG_OTHRTYPE);\r\n            else if (item.isVar)\r\n                add(\"var\", TAG_BG_OTHRTYPE);\r\n            else if (item.isEnum)\r\n                add(\"enum\", TAG_BG_OTHRTYPE);\r\n            else if (item.isType)\r\n                add(\"type\", TAG_BG_OTHRTYPE);\r\n            if (item.isProtected)\r\n                add(\"protected\", TAG_BG_ACCESS, true);\r\n            if (item.isReadOnly)\r\n                add(\"read-only\", TAG_BG_ACCESS, true);\r\n            if (item.isStatic)\r\n                add(\"static\", TAG_BG_STATIC, true);\r\n            if (item.isAsync)\r\n                add(\"async\", TAG_BG_ASYNC, true);\r\n        }\r\n        return _this;\r\n    }\r\n    return TagLabelRow;\r\n}(dist_dom_lib_UI_namespaceObject.CloseRow));\r\n\r\n/** A list of annotated item links */\r\nvar DocArticle_ItemListPanel = (function (_super) {\r\n    DocArticle___extends(ItemListPanel, _super);\r\n    function ItemListPanel(title, items, inherited) {\r\n        if (items === void 0) { items = []; }\r\n        var _this = _super.call(this) || this;\r\n        _this.title = title;\r\n        _this.items = items;\r\n        _this.inherited = inherited;\r\n        /** Factories used to populate this block */\r\n        _this.itemRows = [];\r\n        // concatenate all given items\r\n        var allItems = items.slice();\r\n        if (inherited) {\r\n            inherited.forEach(function (s) {\r\n                allItems.push(_this.documentService.getItemById(s));\r\n            });\r\n        }\r\n        _this.docItems = allItems = allItems.filter(function (item) { return !!item; });\r\n        if (!allItems.length)\r\n            _this.hidden = true;\r\n        // populate item rows\r\n        var p = dom_lib_Async_namespaceObject.Promise.resolve(true);\r\n        allItems.forEach(function (item, i) {\r\n            if (i % 4 === 0)\r\n                p = p.then(function () { return dom_lib_Async_namespaceObject.sleep(0); });\r\n            p.then(function () {\r\n                // collect properties\r\n                var isInherited = !items.some(function (z) { return z.id === item.id; });\r\n                var displayName = _this.documentService.getDisplayNameFor(item.id);\r\n                var labelRow = new DocArticle_TagLabelRow(item, isInherited, true);\r\n                // pull JSDoc as text from a live DOM element\r\n                var docText = item.textSummary || \"\";\r\n                if (!docText && item.doc) {\r\n                    var tempDiv = document.createElement(\"div\");\r\n                    tempDiv.innerHTML = item.doc;\r\n                    docText = tempDiv.innerText.replace(/\\r|\\n/g, \" \");\r\n                }\r\n                // create a new row factory for this item\r\n                _this.itemRows.push(dist_dom_lib_UI_namespaceObject.Row.with({\r\n                    spacing: \".5rem\",\r\n                    content: [\r\n                        // adjust left alignment\r\n                        dist_dom_lib_UI_namespaceObject.Spacer.with({ width: \"0\", shrinkwrap: true }),\r\n                        // label with icon in front\r\n                        dist_dom_lib_UI_namespaceObject.Label.with({\r\n                            text: displayName,\r\n                            icon: labelRow.icon + \" fa-fw\",\r\n                            style: { fontWeight: isInherited ? \"400\" : \"600\" }\r\n                        }),\r\n                        // label row (shrinkwrapped) and JSDoc start\r\n                        dist_dom_lib_UI_namespaceObject.BlockControl.with({\r\n                            block: labelRow,\r\n                            shrinkwrap: true\r\n                        }),\r\n                        (_a = [\"{w|#aaa|300}\", \"\"], _a.raw = [\"{w|#aaa|300}\", \"\"], dist_dom_lib_UI_namespaceObject.tl(_a, docText))\r\n                    ],\r\n                    style: {\r\n                        fontSize: \"1rem\",\r\n                        cursor: \"pointer\"\r\n                    },\r\n                    Click: new dist_dom_lib_UI_namespaceObject.ActionHandler(function () {\r\n                        dist_dom_lib_App_namespaceObject.startActivityAsync(\"/doc/\" +\r\n                            (item.textSlug || item.id));\r\n                    })\r\n                }));\r\n                var _a;\r\n            });\r\n        });\r\n        return _this;\r\n    }\r\n    DocArticle___decorate([\r\n        dist_dom_lib_App_namespaceObject.injectService\r\n    ], ItemListPanel.prototype, \"documentService\", void 0);\r\n    DocArticle___decorate([\r\n        dom_lib_Async_namespaceObject.observable\r\n    ], ItemListPanel.prototype, \"itemRows\", void 0);\r\n    return ItemListPanel;\r\n}(dist_dom_lib_UI_namespaceObject.ContainerBlock.with({\r\n    style: {\r\n        margin: \"0 0 1.5rem\",\r\n        borderTop: \"2px solid \" + dist_dom_lib_UI_namespaceObject.DOM.Styles.color.divider,\r\n        borderBottom: \"1px solid \" + dist_dom_lib_UI_namespaceObject.DOM.Styles.color.divider\r\n    }\r\n}, dist_dom_lib_UI_namespaceObject.Container.with({ hidden: dist_dom_lib_UI_namespaceObject.bind(\"!itemRows.length\") }, dist_dom_lib_UI_namespaceObject.Row.with({\r\n    hidden: dist_dom_lib_UI_namespaceObject.bind(\"!title\"),\r\n    height: \"1.75rem\",\r\n    content: [dist_dom_lib_UI_namespaceObject.Heading5.withText(dist_dom_lib_UI_namespaceObject.bind(\"title\"))],\r\n    style: {\r\n        background: \"#eee\",\r\n        color: \"#333\"\r\n    }\r\n}), dist_dom_lib_UI_namespaceObject.List.with({\r\n    items: dist_dom_lib_UI_namespaceObject.bind(\"itemRows\"),\r\n    divider: { margin: \"0\" }\r\n})))));\r\n\n// CONCATENATED MODULE: ./src/docs-viewer/DocView.ts\nvar DocView___extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar DocView___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\n\r\n\r\n\r\n\r\nvar DocView_DocView = (function (_super) {\r\n    DocView___extends(DocView, _super);\r\n    function DocView(activity) {\r\n        var _this = _super.call(this) || this;\r\n        _this.activity = activity;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DocView.prototype, \"item\", {\r\n        get: function () { return this.activity.item; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DocView.prototype, \"parentItem\", {\r\n        get: function () {\r\n            return this.item && this.item.parentItem;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    DocView___decorate([\r\n        dom_lib_Async_namespaceObject.observable\r\n    ], DocView.prototype, \"item\", null);\r\n    DocView___decorate([\r\n        dom_lib_Async_namespaceObject.observable\r\n    ], DocView.prototype, \"parentItem\", null);\r\n    DocView = DocView___decorate([\r\n        dist_dom_lib_App_namespaceObject.mapViewActivity(DocActivity_DocActivity)\r\n    ], DocView);\r\n    return DocView;\r\n}(MainView_MainView.DocView.with({\r\n    style: dom_lib_Async_namespaceObject.observe(function () { return dist_dom_lib_UI_namespaceObject.Screen.dimensions.isSmall ?\r\n        { padding: \"0\" } :\r\n        { padding: \"0 2.5rem 0 2.5rem\" }; })\r\n}, \r\n// row that describes the (code) item, and a link to parent\r\ndist_dom_lib_UI_namespaceObject.Row.with({\r\n    height: dom_lib_Async_namespaceObject.observe(function () {\r\n        return dist_dom_lib_UI_namespaceObject.Screen.dimensions.isSmall ? \"auto\" : \"4rem\";\r\n    }),\r\n    spacing: \".5rem\",\r\n    verticalSpacing: \"1rem\"\r\n}, dist_dom_lib_UI_namespaceObject.Spacer.with({ width: \"0\", shrinkwrap: true }), dist_dom_lib_UI_namespaceObject.TextButton.with({\r\n    hidden: dist_dom_lib_UI_namespaceObject.bind(\"!parentItem\"),\r\n    label: dist_dom_lib_UI_namespaceObject.bind(\"parentItem\", function (parent) {\r\n        return (parent && (parent.textTopic || parent.name) || \"\");\r\n    }),\r\n    iconAfter: \"fa-caret-right\",\r\n    remGutter: 1.75,\r\n    target: dist_dom_lib_UI_namespaceObject.bind(\"parentItem.id\", function (id) { return \"/doc/\" + id; }),\r\n    style_button: {\r\n        color: \"#666\",\r\n        fontWeight: \"600\"\r\n    }\r\n}), dist_dom_lib_UI_namespaceObject.bind(\"item\", function (item) { return item && new DocArticle_TagLabelRow(item); })), \r\n// loading indicator\r\ndom_lib_Async_namespaceObject.sleep(50).then(function () {\r\n    return dist_dom_lib_UI_namespaceObject.CenterRow.with({\r\n        hidden: dist_dom_lib_UI_namespaceObject.bind(\"item\"),\r\n        height: \"10rem\",\r\n        content: [(_a = [\"Loading documentation...\"], _a.raw = [\"Loading documentation...\"], dist_dom_lib_UI_namespaceObject.tl(_a))]\r\n    });\r\n    var _a;\r\n}), \r\n// container with the article itself\r\ndist_dom_lib_UI_namespaceObject.bind(\"item\", function (item) { return item && new DocArticle_DocArticle(item); }))));\r\n\n// CONCATENATED MODULE: ./src/docs-viewer/TOCView.ts\nvar TOCView___extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar TOCView___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\n\r\n\r\n\r\n\r\nvar TOCView_TOCView = (function (_super) {\r\n    TOCView___extends(TOCView, _super);\r\n    function TOCView(activity) {\r\n        var _this = _super.call(this) || this;\r\n        _this.activity = activity;\r\n        _this.filterText = \"\";\r\n        // observe top doc activity\r\n        _this.Rendered.connectOnce(function () {\r\n            var count = 0;\r\n            dom_lib_Async_namespaceObject.observe(function () {\r\n                if (_this.tocTreeList && _this.tocTreeList.items.length &&\r\n                    !_this.filterTerms && !activity.loading) {\r\n                    var docActivity = dist_dom_lib_App_namespaceObject.findActivity(DocActivity_DocActivity);\r\n                    if (docActivity)\r\n                        return docActivity.item;\r\n                }\r\n                return undefined;\r\n            }).subscribe(function (item) {\r\n                if (item) {\r\n                    // select the currently shown document using the item ID\r\n                    dom_lib_Async_namespaceObject.sleep(10).then(function () {\r\n                        _this.tocTreeList.selectedKey = item.id;\r\n                    });\r\n                }\r\n            });\r\n            // auto focus selected items to bring them into view\r\n            _this.tocTreeList.SelectionChange.connect(function (data) {\r\n                if (_this.hasFocus)\r\n                    return;\r\n                if (data.item && !_this.filterTerms)\r\n                    data.item.hasFocus = true;\r\n            });\r\n            // observe search filter and update terms after a delay\r\n            var timer;\r\n            dom_lib_Async_namespaceObject.observe(function () { return _this.filterText; }).subscribe(function () {\r\n                if (timer)\r\n                    clearTimeout(timer);\r\n                timer = setTimeout(function () {\r\n                    timer = 0;\r\n                    _this._updateFilter();\r\n                }, 50);\r\n            });\r\n        });\r\n        return _this;\r\n    }\r\n    /** Returns a list of items for the TOC tree list */\r\n    TOCView.prototype.getTreeItems = function () {\r\n        var _this = this;\r\n        if (!this.documentService || !this.documentService.isLoaded)\r\n            return [];\r\n        var makeItemData = function (tocItem) {\r\n            var subItems = _this.documentService.getTOCItems(tocItem.id);\r\n            return {\r\n                name: tocItem.textTopic || tocItem.name,\r\n                key: tocItem.id,\r\n                icon: tocItem.icon,\r\n                autoExpand: !!tocItem.textAutoOpen,\r\n                items: subItems.length ?\r\n                    subItems.map(makeItemData) : undefined\r\n            };\r\n        };\r\n        var result = this.documentService.getTOCItems().map(makeItemData);\r\n        if (this.filterTerms && this.filterTerms.length) {\r\n            var terms_1 = this.filterTerms.map(function (s) { return s.toLowerCase(); });\r\n            var f_1 = function (item) {\r\n                if (!terms_1.some(function (s) {\r\n                    return (item.name.toLowerCase().indexOf(s) < 0) &&\r\n                        item.key.toLowerCase().indexOf(s) !== 0;\r\n                }))\r\n                    return true;\r\n                if (item.items) {\r\n                    item.items = item.items.filter(f_1);\r\n                    if (item.items.length) {\r\n                        item.autoExpand = true;\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            };\r\n            result = result.filter(f_1);\r\n        }\r\n        return result;\r\n    };\r\n    /** Show newly selected TOC topic */\r\n    TOCView.prototype.showTocTopic = function () {\r\n        var _this = this;\r\n        dom_lib_Async_namespaceObject.sleep(10).then(function () {\r\n            var id = _this.tocTreeList.selectedKey;\r\n            var data = id && _this.documentService.getItemById(id);\r\n            if (data)\r\n                dist_dom_lib_App_namespaceObject.startActivityAsync(\"/doc/\"\r\n                    + (data.textSlug || data.id));\r\n        });\r\n    };\r\n    /** Reset the search filter */\r\n    TOCView.prototype.resetFilter = function () {\r\n        this.filterText = \"\";\r\n    };\r\n    /** Take the current filter input value and apply the filter */\r\n    TOCView.prototype._updateFilter = function () {\r\n        var terms = this.filterText\r\n            .replace(/[^\\w\\s\\.]+/, \" \").trim()\r\n            .split(/\\s+/)\r\n            .filter(function (s) { return !!s; });\r\n        // set terms only if any found\r\n        this.filterTerms = terms.some(function (s) { return s.length > 2; }) ?\r\n            terms : undefined;\r\n    };\r\n    TOCView___decorate([\r\n        dist_dom_lib_App_namespaceObject.injectService\r\n    ], TOCView.prototype, \"documentService\", void 0);\r\n    TOCView___decorate([\r\n        dom_lib_Async_namespaceObject.observable\r\n    ], TOCView.prototype, \"tocTreeList\", void 0);\r\n    TOCView___decorate([\r\n        dom_lib_Async_namespaceObject.observable\r\n    ], TOCView.prototype, \"filterText\", void 0);\r\n    TOCView___decorate([\r\n        dom_lib_Async_namespaceObject.observable_shallow\r\n    ], TOCView.prototype, \"filterTerms\", void 0);\r\n    TOCView = TOCView___decorate([\r\n        dist_dom_lib_App_namespaceObject.mapViewActivity(MainActivity_MainActivity)\r\n    ], TOCView);\r\n    return TOCView;\r\n}(MainView_MainView.TOCView.with(\r\n// add header with search field\r\nMainView_MainView.TOCView.Header.with({\r\n    height: \"4.5rem\",\r\n    vertAlign: \"middle\",\r\n    style: { padding: \"0 .5rem\" },\r\n    shadowEffect: dist_dom_lib_UI_namespaceObject.bind(\"scrolledToTop\", function (atTop) {\r\n        return atTop ? 0 : .35;\r\n    })\r\n}, dist_dom_lib_UI_namespaceObject.CloseRow.with({\r\n    style: {\r\n        background: \"#fff\",\r\n        border: \"2px solid #eee\"\r\n    }\r\n}, dist_dom_lib_UI_namespaceObject.TextField.with({\r\n    name: \"filter\",\r\n    value: dist_dom_lib_UI_namespaceObject.bind2(\"filterText\"),\r\n    placeholderText: \"Filter\",\r\n    style_input: {\r\n        border: \"0\",\r\n        boxShadow: \"none\",\r\n        outline: \"0\"\r\n    },\r\n    immediateValueUpdate: true\r\n}), dist_dom_lib_UI_namespaceObject.TextButton.withIcon(\"fa-times\", \"resetFilter\"), dist_dom_lib_UI_namespaceObject.Spacer.with({\r\n    width: \".5rem\",\r\n    shrinkwrap: true\r\n}))), \r\n// add a label for this documentation file\r\ndist_dom_lib_UI_namespaceObject.CloseRow.with({ height: \"2rem\", style: { marginTop: \"1rem\" } }, dist_dom_lib_UI_namespaceObject.Icon.with({\r\n    icon: \"fa-chevron-down\",\r\n    width: \"2rem\",\r\n    style: { paddingLeft: \".75rem\" }\r\n}), dist_dom_lib_UI_namespaceObject.Label.with({\r\n    text: dist_dom_lib_UI_namespaceObject.bind(\"activity.title\"),\r\n    icon: \"fa-book\",\r\n    remGutter: 1.5,\r\n    style: { fontWeight: \"600\" }\r\n})), dist_dom_lib_UI_namespaceObject.Divider.with({ margin: \".25rem\" }), \r\n// add the actual TOC tree list\r\ndist_dom_lib_UI_namespaceObject.TreeList.with({\r\n    id: \"tocTreeList\",\r\n    items: dist_dom_lib_UI_namespaceObject.TreeListRow.arrayFromBinding(\"getTreeItems()\", \"fa-chevron-down\", \"fa-chevron-right\", 1.5, \"2rem\", 10),\r\n    focusMode: dist_dom_lib_UI_namespaceObject.Component.FocusMode.Items,\r\n    selectionMode: dist_dom_lib_UI_namespaceObject.Component.SelectionMode.ItemFocus,\r\n    style: dist_dom_lib_UI_namespaceObject.Style.withClass(\"toc_tree\"),\r\n    EnterKeyPressed: \"showTocTopic\",\r\n    Click: \"showTocTopic\",\r\n}))));\r\n\r\ndist_dom_lib_UI_namespaceObject.DOM.applyStylesheet({\r\n    \".toc_tree > .UI-Row\": {\r\n        cursor: \"pointer\"\r\n    },\r\n    \".toc_tree [selected]\": {\r\n        cursor: \"default\"\r\n    }\r\n});\r\n\n// CONCATENATED MODULE: ./src/docs-viewer/style.ts\n\r\n// apply style directly to the body element\r\ndist_dom_lib_UI_namespaceObject.Screen.ready.then(function () {\r\n    document.body.style.background = \"#fff\";\r\n    document.body.style.height = \"100%\";\r\n    document.body.style.margin = \"0\";\r\n});\r\n// Apply style sheet (copied from CSS... TODO: make this less messy)\r\ndist_dom_lib_UI_namespaceObject.DOM.applyStylesheet({\r\n    \"h1\": {\r\n        fontSize: \"3.8rem\",\r\n        fontWeight: \"600\"\r\n    },\r\n    \"h2\": {\r\n        fontSize: \"2.25rem\",\r\n        fontWeight: \"600\"\r\n    },\r\n    \"h3\": {\r\n        fontSize: \"1.5rem\",\r\n        fontWeight: \"600\",\r\n        fontStyle: \"normal\",\r\n        padding: \"0\",\r\n        margin: \"2.5rem 0 1rem\"\r\n    },\r\n    \"h4\": {\r\n        fontSize: \"1.125rem\",\r\n        fontWeight: \"600\",\r\n        fontStyle: \"normal\",\r\n        padding: \"0\",\r\n        margin: \"1.5rem 0 .5rem\"\r\n    },\r\n    \"h5\": {\r\n        fontSize: \".85rem\",\r\n        fontWeight: \"600\",\r\n        fontStyle: \"normal\",\r\n        textTransform: \"uppercase\",\r\n        margin: \"1.75rem 0 .75rem\"\r\n    },\r\n    \".fa\": {\r\n        fontSize: \".875em\" // 16px (1rem) => 14px native size\r\n    },\r\n    \"code\": {\r\n        fontFamily: \"Menlo,Monaco,Consolas,\\\"Liberation Mono\\\",\\\"Courier New\\\",monospace\",\r\n        fontSize: \".8em\"\r\n    },\r\n    \".doc-code\": {\r\n        color: \"#63e\"\r\n    },\r\n    \".doc-code > code\": {\r\n        lineHeight: \"1.5em\",\r\n    },\r\n    \".doc-text-article .fa:first-child\": {\r\n        paddingRight: \".5rem\"\r\n    },\r\n    \".doc-text-article a, .doc-text-article a:visited\": {\r\n        color: \"#39e\"\r\n    },\r\n    \".doc-text-article a > .fa\": {\r\n        color: \"#333 !important\",\r\n        textDecoration: \"none\"\r\n    },\r\n    \".doc-text-article code\": {\r\n        background: \"rgba(0,64,128,.05)\",\r\n        padding: \".125rem\",\r\n        borderRadius: \"2px\"\r\n    },\r\n    \".doc-text-article pre\": {\r\n        fontSize: \"1rem\",\r\n        background: \"rgba(0,64,128,.05)\",\r\n        borderTop: \"2px solid rgba(0,64,128,.2)\",\r\n        padding: \".75rem .5rem\",\r\n        margin: \"1rem 0\",\r\n        color: \"#555\",\r\n        overflow: \"auto\"\r\n    },\r\n    \".doc-text-article pre > code\": {\r\n        lineHeight: \"1.5em\",\r\n        background: \"transparent\",\r\n        whiteSpace: \"pre !important\"\r\n    },\r\n    \".doc-text-article blockquote\": {\r\n        fontSize: \"inherit\",\r\n        borderColor: \"#e80\"\r\n    },\r\n    \".doc-text-article p, .doc-text-article li, .doc-text-article dl\": {\r\n        lineHeight: \"1.65em\",\r\n        margin: \"0 0 1rem\",\r\n        padding: \"0\"\r\n    },\r\n    \".doc-text-article dt\": {\r\n        margin: \"1rem 0 0\",\r\n        padding: \"0\",\r\n        fontSize: \"1.2rem\",\r\n        fontWeight: \"300\"\r\n    },\r\n    \".doc-text-article dt code\": {\r\n        background: \"transparent\"\r\n    },\r\n    \".doc-text-article dt .fa\": {\r\n        fontSize: \"14px\"\r\n    },\r\n    \".doc-text-article dd\": {\r\n        margin: \".25rem 0 .75rem\",\r\n        padding: \"0 0 .5rem 2.8rem\"\r\n    },\r\n    \".doc-text-article li\": {\r\n        margin: \".25rem 0\"\r\n    },\r\n    \".doc-text-article h3.doc-heading-section\": {\r\n        padding: \".75rem 0\",\r\n        borderTop: \"1px solid rgba(0,0,0,.15)\"\r\n    },\r\n    \".doc-text-article hr\": {\r\n        border: \"0\",\r\n        borderBottom: \"1px solid rgba(0,0,0,.2)\",\r\n        padding: \"0\",\r\n        margin: \"2rem -1rem\"\r\n    },\r\n    \".doc-text-type-intro\": {\r\n        fontSize: \"1.25rem\",\r\n        fontWeight: \"300\"\r\n    },\r\n    \".doc-text-type-note\": {\r\n        background: \"rgba(220,160,64,.08)\",\r\n        borderTop: \"2px solid rgba(0,0,0,.2)\",\r\n        padding: \".5rem 1rem\",\r\n        margin: \"1.5rem 0\"\r\n    },\r\n    \".doc-text-type-note > :first-child\": {\r\n        marginTop: \".5rem\"\r\n    },\r\n    \".doc-text-type-note pre\": {\r\n        background: \"transparent\",\r\n        border: \"0\",\r\n        padding: \"0\"\r\n    },\r\n    \".doc-text-type-example\": {\r\n        background: \"rgba(0,64,128,.05)\",\r\n        padding: \".5rem 1rem\",\r\n        margin: \"1.5rem 0\"\r\n    },\r\n    \".doc-text-type-example pre\": {\r\n        background: \"transparent\",\r\n        border: \"0\"\r\n    },\r\n    \".doc-text-type-example > h3\": {\r\n        background: \"#666\",\r\n        color: \"#fff\",\r\n        textTransform: \"uppercase\",\r\n        fontSize: \".8em\",\r\n        lineHeight: \"1.75em\",\r\n        padding: \".25rem 1rem\",\r\n        margin: \"-.5rem -1rem 1rem -1rem\"\r\n    },\r\n    \".doc-text-type-example > h3:last-child\": {\r\n        marginBottom: \"-.5rem\"\r\n    },\r\n    \".doc-text-type-example > pre\": {\r\n        marginLeft: \"-.65rem\",\r\n        marginRight: \"-.65rem\"\r\n    },\r\n    \".doc-text-type-example > h3 + pre\": {\r\n        margin: \"-1rem -1rem 1rem\",\r\n        borderRadius: \"0\",\r\n        paddingLeft: \".75rem\"\r\n    },\r\n    \".doc-text-type-example > pre:first-child\": {\r\n        borderTop: \"2px solid rgba(0,64,128,.2)\",\r\n        margin: \"-.5rem -1rem 1rem\",\r\n        borderRadius: \"0\",\r\n        paddingLeft: \".75rem\"\r\n    },\r\n    \".doc-text-type-example > pre:first-child + .doc-text-example-output\": {\r\n        marginTop: \"-1rem !important\"\r\n    },\r\n    \".doc-text-example-output\": {\r\n        display: \"block !important\",\r\n        overflow: \"auto !important\",\r\n        width: \"auto !important\",\r\n        margin: \"0 -1rem -.5rem !important\",\r\n        background: \"#fff\"\r\n    },\r\n    \".doc-text-type-example > h3 + pre + .doc-text-example-output\": {\r\n        marginTop: \"-1rem !important\"\r\n    },\r\n    \".doc-text-example-byline, .doc-text-example-byline button\": {\r\n        fontSize: \".75rem\",\r\n        textTransform: \"uppercase !important\",\r\n        fontWeight: \"600\",\r\n        borderBottom: \"1px dotted #ccc\"\r\n    },\r\n    \".toc_tree\": {\r\n        color: \"#444\"\r\n    },\r\n    \".toc_tree div\": {\r\n        outline: \"0\"\r\n    }\r\n});\r\n\n// CONCATENATED MODULE: ./src/docs-viewer/main.ts\n// Simple viewer for Typescene API documentation\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nnew dist_dom_lib_App_namespaceObject.DOMApplication(\"Documentation\");\r\ndist_dom_lib_UI_namespaceObject.DOM.Styles.font.family = \"\\\"Source Sans Pro\\\", sans-serif\";\r\n// Do not use predefined heading styles but take them from CSS\r\ndist_dom_lib_UI_namespaceObject.DOM.Styles.rebootStyles.remove(\"h1,h2,h3,h4,h5,h6\");\r\ndist_dom_lib_UI_namespaceObject.DOM.Styles.rebootStyles.remove(/^h\\d$/);\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ })
/******/ ]);