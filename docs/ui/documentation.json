{"title":"Typescene UI module","toc":["overview","playground","~reference"],"items":[{"name":"Overview","id":"overview","textDocTitle":"Typescene UI module","textSort":"01","text":[{"title":"","content":"<p>The UI module is mostly made up of Component classes, each of which represents a different type of on-screen component. These components can be put together in your application to lay out pages (or modal dialogs, drawers, etc.) to display your application state and invite interaction.</p>\n"},{"title":"What is Typescene?","type":"note","content":"<p>This module is part of the Typescene toolkit, a strongly typed front-end toolkit for modern Web applications built with TypeScript. Read more about Typescene on the project’s <a href=\"http://typescene.org\">website</a>.</p>\n"},{"title":"Component Structure","content":"<p>Component classes all derive from the root <code>Component</code> class, which in itself already includes a lot of the overall functionality provided by all components— but the <code>Component</code> class itself is an <em>abstract</em> class, meaning that it cannot be constructed as-is.</p>\n<p>Instead, a hierarchy of different kinds of components is exported by this module. These can either be used directly, or subclassed by your application.</p>\n<ul>\n<li><strong>Control-level components.</strong> These include e.g. <code>Button</code>, <code>Checkbox</code>, <code>Image</code>, <code>Label</code>, <code>TextField</code> (both single and multiple line), and <code>Stack</code> (to display control-level components vertically); as well as <code>BlockControl</code> (to wrap a block-level component) and <code>ContainerControl</code> (to wrap a container-level component).</li>\n<li><strong>Block-level components.</strong> These include e.g. <code>Row</code> (to display control-level components horizontally), <code>Divider</code>, <code>Table</code> and <code>List</code>; as well as <code>ContainerBlock</code> (to wrap a container-level component).</li>\n<li><strong>Container-level components.</strong> These include e.g. <code>Container</code> (to display block-level components vertically just like HTML does), <code>LayoutContainer</code> (with header, footer, and sidebars on left and right hand sides), <code>DialogContainer</code> and <code>DrawerContainer</code>.</li>\n<li><strong>Combined components</strong> ready for use with a single line of code, e.g. <code>MessageDialog</code>, <code>ConfirmationDialog</code>, <code>Menu</code>, and <code>Notification</code>.</li>\n<li><strong>Component factory</strong> construct, used through component <em>initializers</em> to quickly express a template for a part of the UI in a simple data structure. Also includes <code>TextLabelFactory</code> to initialize labels and icons, and a <code>bind</code> function to initialize bindings to view properties.</li>\n<li><strong>Events</strong> and signals, to wrap all DOM events and more.</li>\n<li><strong>Animation</strong> toolkit, optionally applies effects to show/hide transitions and special effects.</li>\n</ul>\n"}],"sourceIdx":110,"toc":["overview/getting-started"]},{"name":"Getting started: UI module","id":"overview/getting-started","textTopic":"Getting Started","textSort":"01","text":[{"title":"Design and Layout","content":"<p><strong>Bootstrap</strong> — The component rendering code creates and manages DOM elements that are styled using Bootstrap CSS classes, so a CSS file compatible with Bootstrap (version 3 or 4, or your custom version) should always be loaded on the HTML page first.</p>\n<p><strong>Table row layout, or flexbox (soon)</strong> — For laying out components, Typescene primarily uses the HTML ‘table’ engine. Not in the way things were done in the 1990s, but in a much cleaner way. Tables still have interesting properties which make them work very well for UI layouts: they have special rules concerning margins and padding, which is very useful to <em>contain elements</em> that would otherwise interact with each other in unpredictable ways.</p>\n<p>Secondly, it lets us define horizontal layout in terms of <em>filling up the available row space</em>, without hardcoding <em>all</em> of the required widths. Very useful when ‘shrinkwrapped’ components (as small as possible) are mixed with e.g. text input elements that need to be expanded (to fill up horizontal space). Combined with a ‘spacer’ element that takes up space but does not contain any elements (a blank table cell), this lets you define most common layouts very quickly without any explicit measurements.</p>\n<p>The CSS ‘flexbox’ engine can also be used in the same way, but is not available on all supported browsers. Since the actual DOM rendering engine is separate from the Component classes themselves, a flexbox option can be developed independently (but is not ready yet).</p>\n<p>Examples of row layouts:</p>\n<ul>\n<li>For a simple text field with a button to its right, you can use a row containing a <code>[ TextField, Button ]</code>, since textfields always auto-expand (shrinkwrap = false, by default), while buttons do not (shrinkwrap = true).</li>\n<li>For a row with one button on the left and one on the right, use <code>[ Button, Spacer, Button ]</code> components.</li>\n<li>For a row with one button in the middle, use <code>[ Spacer, Button, Spacer ]</code>. For two buttons, just add the button between the spacers, like <code>[ Spacer, Button, Button, Spacer ]</code>.</li>\n<li>For a two-column layout, use a row with two ControlStack components or two ContainerControl components (which can all have nested rows).</li>\n</ul>\n<p>Components in a row are always vertically aligned to the middle of all other components, unless configured otherwise.</p>\n<p><strong>Block layout</strong> — Outside of rows, the normal rules of HTML layout apply. Blocks (such as Rows themselves) stack on top of each other, and may or may not have an explicit height defined. <code>Table</code>, <code>List</code>, and <code>TreeList</code> components make it easy to create uniform grid and list layouts. They also provide logic for selecting list elements by clicking on them or using the arrow keys.</p>\n<p><strong>Containers</strong> — To wrap everything up, containers contain lists of blocks. These are usually displayed full-screen, or within other components. There are also <code>DialogContainer</code> and <code>DrawerContainer</code> classes that can be used to display dialog and drawer (modal) overlays. The <code>LayoutContainer</code> component can be used to quickly define layouts in “NSEW” style, with 4 possible sub container slots surrounding its main content region.</p>\n"},{"title":"Object Orientation","content":"<p>Inspired by desktop UI toolkits, the Typescene UI module defines components through a hierarchy of classes. For example, a <code>TextField</code> derives properties and methods from <code>InputControl</code>, which derives from <code>ControlElement</code>, which derives from <code>Component</code>. This makes it easy to define structured layouts, e.g. the <code>Row</code> component has a <code>content</code> property with an array of <code>ControlElement</code> objects. The <code>Container</code> component’s <code>content</code> property is an array of <code>Block</code> objects (such as <code>Row</code> instances).</p>\n<p>With this object oriented structure you <em>could</em> implement your UI as follows, in the style of Java Spring UI components:</p>\n"},{"title":"Primitive Example: Not Recommended","type":"example","displayResult":"myButton","content":"<pre><code class=\"language-typescript\">var myTextField = new UI.TextField(&quot;text&quot;);\nmyTextField.placeholderText = &quot;Your name&quot;;\nmyTextField.hasFocus = true;\nvar myRow = new UI.Row();\nmyRow.content.push(myTextField);\nvar myContainer = new UI.DialogContainer();\nmyContainer.content.push(myRow);\nlet hide = () =&gt; { myContainer.close() };\nvar hideButton = new UI.Button(&quot;Hide&quot;);\nhideButton.Clicked.connect(hide);\nmyContainer.content.push(new UI.Row([hideButton]));\nlet show = () =&gt; { myContainer.display() };\nvar myButton = new UI.Button(&quot;Click me&quot;);\nmyButton.Clicked.connect(show);\n</code></pre>\n"},{"title":"","content":"<p>However, this quickly becomes tedious, and you may easily lose track of the overall component hierarchy. Just look at the long list of ‘var’ statements above, the resulting structure is not obvious from this code at all. Enter initializers…</p>\n"},{"title":"Initializers","content":"<p>While all components fit into an object oriented architecture, we don’t want to initialize them by <code>new</code>-ing every instance manually, and stringing them together by <code>push</code>-ing them into one another’s content arrays.</p>\n<p>Hence, Typescene includes a <em>component factory</em> concept. A component factory is basically a derived class, created from a base class, along with a template data structure. There are several ways to create a factory, but a simple example looks like this:</p>\n"},{"title":"Example: component factories","type":"example","displayResult":"myButton","content":"<pre><code class=\"language-typescript\">// create a factory\nvar MyFactory = UI.Container.with({\n    maxContentWidth: &quot;24rem&quot;,\n    vertAlign: &quot;middle&quot;,\n    content: [\n        // a row with a full-width label, with centered text:\n        [ UI.tl(&quot;{center}Hello, world!&quot;) ],\n\n        // a 4rem-tall row with a text field and a button:\n        UI.Row.with({\n            height: &quot;4rem&quot;,\n            content: [\n                UI.TextField.withName(&quot;text&quot;),\n                UI.PrimaryButton.withLabel(&quot;Button&quot;)\n            ]\n        }),\n\n        // a big button, automatically wrapped in a row\n        UI.Button.with({\n            label: &quot;Go back&quot;,\n            icon: &quot;fa-arrow-left fa-fw&quot;,\n            shrinkwrap: false,\n            Clicked: new UI.ActionHandler(() =&gt; {\n                UI.Screen.remove(myContainer);\n            })\n        })\n    ],\n    style: { background: &quot;#fff&quot; }\n});\n\n// instantiate using new\nvar myContainer = new MyFactory();\nvar myButton = UI.Button.withLabel(&quot;Click me&quot;, new UI.ActionHandler(() =&gt; {\n    myContainer.display();\n});\n</code></pre>\n"},{"title":"","content":"<p>Note that most editors supporting TypeScript (including the embedded editor on this page) will provide you with syntax highlighting and autocomplete even within the initializer expression, e.g. for available properties on the object passed to <code>.with</code> for various component classes.</p>\n<p>(Note: for properties within an object passed to <code>.with</code>, press the ctrl+space keys <em>before</em> starting to type the property name, then type a few letters and select the property using tab or enter).</p>\n<p>You can also apply initializers to existing instances:</p>\n<pre><code class=\"language-typescript\">// create an instance first, then initialize\nvar myDialog = new UI.DialogContainer();\nmyDialog.initializeWith({\n    width: &quot;24rem&quot;,\n    content: [\n        // a single full-width text field (leave out the array brackets\n        // to upgrade to a single Row automatically)\n        UI.TextField.withName(&quot;text&quot;),\n\n        // a row with a right-aligned button\n        [\n            UI.Spacer,\n            UI.Button.withLabel(&quot;OK&quot;, new UI.MouseHandler(() =&gt; {\n                alert(myDialog.getFormValues().text);\n                myDialog.close();\n            }))\n        ]\n    ]\n});\n</code></pre>\n<p>And finally, you can use the <code>@initializer</code> decorator on a static property to set the default initializer structure for a component (view) class:</p>\n<pre><code class=\"language-typescript\">// custom dialog container class\nclass MyDialog extends UI.DialogContainer {\n    @UI.initializer\n    static initializer = UI.DialogContainer.with({\n        content: [\n            // a single label bound to the .message property\n            UI.WideLabel.withText(UI.bind(&quot;message&quot;)),\n\n            // a single left-aligned button\n            UI.Button.with({\n                hasFocus: true,\n                label: &quot;OK&quot;,\n                Press: &quot;okPressed&quot;\n            })\n        ]\n    });\n\n    @Async.observable\n    public message: string;\n\n    public okPressed() {\n        /* ... do something ... */\n        this.close();\n    }\n}\n\n// instantiate using new\nvar myDialog = new MyDialog();\nmyDialog.message = &quot;Hello, world!&quot;;\nmyDialog.display();\n</code></pre>\n<p>Notice the <code>@Async.observable</code> there? More on that below.</p>\n"},{"title":"Asynchronous Programming","content":"<p>The Typescene toolkit enforces developers to be explicit about most things. There is no “magic” happening in the background, nothing that is not explicitly expressed in the code. Except in the case of <em>observable values</em> (or observable properties), which most properties on Component instances are.</p>\n<p>This means that, for example, setting <code>.width</code> on a dialog component will have an effect on the appearance of the dialog without having to call an <code>update</code> or <code>render</code> function. In fact, the <code>render</code> function is there, but it is used to generate “observable” output — observed by parent components and finally the <code>Page</code> class while the component is displayed. The output then depends on a number of other observable properties (marked with the Async library’s observable decorator). Once one or more of those properties change while observed by a visible <code>Page</code>, the <code>render</code> function is called again <em>asynchronously</em> (but not necessarily the render functions of nested components, if those didn’t also change) to update the DOM.</p>\n<p>You can also use asynchronous constructs in your UI code directly. The easiest method to achieve this is with bindings (one or two-way) in an initializer, which watch and/or update a property on the main view component, i.e. the one that the initializer was applied to.</p>\n<p>Alternatively, you can use the Async library yourself to generate and consume observable values. For more information on asynchronous constructs, see the <a href=\"../Async\">Async module documentation</a>. As an example:</p>\n<pre><code class=\"language-typescript\">// create a dialog instance\nvar myDialog = new UI.DialogContainer();\n\n// create an observable value that combines field values\nvar fullNameObservable = Async.observe(() =&gt; {\n    var fields = myDialog.getComponentsByType(UI.TextField);\n    var values = fields.map(f =&gt; f.value);\n    var name = values.filter(v =&gt; !!v).join(&quot; &quot;);\n    return name;\n});\n\n// initialize the dialog, using the observable value\nmyDialog.initializeWithContent([\n    [\n        // two text fields\n        UI.TextField.withName(&quot;first&quot;, &quot;&quot;, &quot;First name&quot;),\n        UI.TextField.withName(&quot;last&quot;, &quot;&quot;, &quot;Last name&quot;),\n    ],\n    [\n        // combined name label, and OK button\n        UI.WideLabel.withText(fullNameObservable),\n        UI.Button.withLabel(&quot;OK&quot;, &quot;close&quot;)\n    ]\n]);\nmyDialog.display();\n</code></pre>\n<p>Or, expressed as a proper class that uses a one-way binding:</p>\n<pre><code class=\"language-typescript\">// custom dialog class using an observable property\nclass MyDialog extends UI.DialogContainer {\n    @UI.initializer\n    static initializer = UI.DialogContainer.withContent([\n        [\n            UI.TextField.withName(&quot;first&quot;, &quot;&quot;, &quot;First name&quot;),\n            UI.TextField.withName(&quot;last&quot;, &quot;&quot;, &quot;Last name&quot;),\n        ],\n        [\n            UI.WideLabel.withText(UI.bind(&quot;fullName&quot;)),\n            UI.Button.withLabel(&quot;OK&quot;, &quot;close&quot;)\n        ]\n    ]);\n\n    @Async.observable\n    public get fullName() {\n        return this.getComponentsByType(UI.TextField)\n            .map(f =&gt; f.value).filter(v =&gt; !!v).join(&quot; &quot;);\n    }\n}\n</code></pre>\n<p>And finally using a two-way binding:</p>\n"},{"title":"Two-way binding example","type":"example","displayResult":"myButton","content":"<pre><code class=\"language-typescript\">// custom dialog class using an observable property\nclass MyDialog extends UI.DialogContainer {\n    @UI.initializer\n    static initializer = UI.DialogContainer.withContent([\n        UI.Heading3.withText(&quot;Bind this:&quot;),\n        [\n            UI.TextField.with({\n                name: &quot;name&quot;,\n                placeholderText: &quot;Full name&quot;,\n                value: UI.bind2(&quot;fullName&quot;),\n                immediateValueUpdate: true,\n                hasFocus: true\n            }),\n        ],\n        [\n            UI.WideLabel.withText(UI.bind(&quot;fullName&quot;)),\n            UI.Button.withLabel(&quot;OK&quot;, &quot;close&quot;)\n        ]\n    ]);\n\n    @Async.observable\n    public fullName: string;\n}\n\nvar myButton = new UI.Button(&quot;Click&quot;);\nmyButton.Clicked.connect(() =&gt; new MyDialog().display());\n</code></pre>\n"},{"title":"Asynchronous functional style","content":"<p>Much more is possible when combining initializers and asynchronous constructs. For example, an initializer could contain an observable value (result of <code>Async.observe</code>) instead of any component factory. The observable value can then take any value at runtime: a component instance (e.g. depending on the value of some other property), a component class, or <em>another component initializer</em>, with more observables and factories.</p>\n<p>This enables a more functional style of programming, where changes in state (or initial values) ‘bubble up’ through a hierarchy of asynchronous transformation functions encapsulated in observable values. The final step would be the component factory initializer transformation, to create a Component instance and render it as part of its parent.</p>\n<p>With this functional style, an application’s UI code base could be greatly simplified. However in some cases this also makes the flow of data harder to understand— which is why Typescene always provides the option to update your UI using a more ‘imperative’ style. Signals and Promises can simply trigger callback functions, which can in turn update the content of containers and rows to include updated data. Which style you choose for your application is up to you.</p>\n"}],"sourceIdx":111,"textParent":"overview"},{"name":"Playground","id":"playground","textSort":"10","text":[{"title":"","content":"<p>Use the example code below as a starting point for exploring the API. Click “Edit this example” on the right below the sample code to get started.</p>\n"},{"title":"Edit this code","type":"example","displayResult":"View","content":"<pre><code class=\"language-typescript\">class View extends UI.Container {\n    @UI.initializer\n    static initializer = UI.Container.with({\n        content: [\n            UI.CenterRow.withContent([\n                UI.tl`The time is: ${UI.bind(&quot;timeDisplayed&quot;)}`\n            ])\n        ]\n    });\n\n    /** Create a View instance */\n    constructor() {\n        super();\n        setInterval(() =&gt; {\n            this.timeDisplayed = new Date().toTimeString();\n        }, 1000);\n    }\n\n    @Async.observable\n    public timeDisplayed = &quot;&quot;;\n}\n</code></pre>\n"}],"sourceIdx":112},{"id":"ActionHandler","name":"ActionHandler","isClass":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":72,"code":"class ActionHandler extends ComponentSignalHandler<never, typeof ComponentSignal>","doc":"<p>Constructor for a component signal handler (no event data).</p>\n","extends":["ComponentSignalHandler"],"items":[],"sourceIdx":38,"text":[{"title":"","content":"<p>Use an <code>ActionHandler</code> in an initializer to connect to a component’s signal, when you do not care about the event object passed in (e.g. DOM mouse event).</p>\n<pre><code class=\"language-typescript\">var buttonFactory = Button.with({\n    label: &quot;Click me&quot;,\n    Press: new UI.ActionHandler(() =&gt; {\n        // ... do something when pressed\n    })\n});\n</code></pre>\n<p>You can also use an <code>ActionHandler</code> as a property, for stronger typing (optional):</p>\n<pre><code class=\"language-typescript\">class CountButton extends UI.Button {\n    constructor() { this.Press.connect(this.addUp) }\n    public count = 0;\n    public addUp = new UI.ActionHandler(() =&gt; {\n        this.count++;\n    });\n}\n</code></pre>\n<p>However, the following also works, without wrapping the method in an <code>ActionHandler</code> instance.</p>\n<pre><code class=\"language-typescript\">class CountButton extends UI.Button {\n    constructor(label: string) {\n        this.initializeWith({\n            label,\n            Press: &quot;addUp&quot;\n        });\n    }\n    public count = 0;\n    public addUp() { this.count++ }\n}\n</code></pre>\n"}],"inherits":["ComponentSignalHandler.!call","ComponentSignalHandler/connectTo","ComponentSignalHandler/isEventHandler"]},{"id":"Animation","name":"Animation","isClass":true,"file":"./packages/ui/typings/UI/Animation.d.ts","line":2,"code":"class Animation","doc":"<p>Represents a UI component animation.</p>\n","items":[{"id":"Animation.AnimationControl","name":"AnimationControl","isInterface":true,"file":"./packages/ui/typings/UI/Animation.d.ts","line":20,"code":"interface AnimationControl<AnimationT extends Animation>","doc":"<p>Represents the public interface for a playing animation.</p>\n","isStatic":true,"typeParams":["AnimationT extends Animation"],"items":[{"id":"Animation.AnimationControl/animation","name":"animation","isProperty":true,"file":"./packages/ui/typings/UI/Animation.d.ts","line":22,"code":"animation: AnimationT;","doc":"<p>Reference to the animation itself.</p>\n","declType":"AnimationT"},{"id":"Animation.AnimationControl/done","name":"done","isProperty":true,"file":"./packages/ui/typings/UI/Animation.d.ts","line":26,"code":"done: PromiseLike<AnimationControl<AnimationT>>;","doc":"<p>Promise that resolves to the animation control itself, after the animation is over (duration has passed).</p>\n","declType":"PromiseLike<AnimationControl<AnimationT>>","isAsync":true},{"id":"Animation.AnimationControl/stop","name":"stop","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Animation.d.ts","line":24,"code":"stop(): void;","doc":"<p>Stop playing the animation, clear its artifacts.</p>\n","declType":"void"}]},{"id":"Animation.disableAll","name":"disableAll","hasParams":false,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Animation.d.ts","line":4,"code":"static disableAll(): void;","doc":"<p>No description</p>\n","declType":"void"},{"id":"Animation.enableAll","name":"enableAll","hasParams":false,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Animation.d.ts","line":3,"code":"static enableAll(): void;","doc":"<p>No description</p>\n","declType":"void"},{"id":"Animation.isEnabled","name":"isEnabled","isStatic":true,"isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Animation.d.ts","line":5,"code":"static readonly isEnabled: boolean;","doc":"<p>No description</p>\n","declType":"boolean"},{"id":"Animation.constructor","name":"new Animation","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Animation.d.ts","line":6,"code":"constructor(name: string);","doc":"<p>No description</p>\n"},{"id":"Animation/duration","name":"duration","isProperty":true,"file":"./packages/ui/typings/UI/Animation.d.ts","line":12,"code":"duration: number;","doc":"<p>Total duration in milliseconds of (the looping segment of) this animation, set by implementation.</p>\n","declType":"number"},{"id":"Animation/id","name":"id","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Animation.d.ts","line":8,"code":"readonly id: string;","doc":"<p>Unique ID (includes name and a unique number, generated by constructor).</p>\n","declType":"string"},{"id":"Animation/name","name":"name","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Animation.d.ts","line":10,"code":"readonly name: string;","doc":"<p>Name of the animation (not necessarily unique).</p>\n","declType":"string"},{"id":"Animation/play","name":"play","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Animation.d.ts","line":14,"code":"abstract play(component: Component): Animation.AnimationControl<Animation>;","doc":"<p>Play the animation on given component.</p>\n","declType":"Animation.AnimationControl<Animation>"},{"id":"Animation/playOnce","name":"playOnce","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Animation.d.ts","line":16,"code":"playOnce(component: Component): Animation.AnimationControl<Animation>;","doc":"<p>Play the animation once for the entire duration, and then stop it.</p>\n","declType":"Animation.AnimationControl<Animation>"}],"isNamespace":true,"sourceIdx":107,"text":[{"title":"","content":"<p>An implementation of this class using CSS keyframe animations is available as <code>DOMAnimation</code>.</p>\n"}]},{"id":"ArrayBinding","name":"ArrayBinding","isClass":true,"file":"./packages/ui/typings/UI/Binding.d.ts","line":17,"code":"class ArrayBinding<ItemT> extends Binding<ItemT[]>","doc":"<p>Represents an array property binding, used with component factories to proxy arrays taken from the base component instance onto array properties of its sub components.</p>\n","extends":["Binding"],"typeParams":["ItemT"],"items":[{"id":"ArrayBinding.constructor","name":"new ArrayBinding","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Binding.d.ts","line":19,"code":"constructor(sourcePath?: string, getTransform?: (array: any, baseComponent: Component) => any, itemTransform?: (value: any, baseComponent: Component) => ItemT, uniqueValues?: boolean);\nconstructor(sourcePath?: string, getTransform?: (array: any, baseComponent: Component) => any, itemTransform?: (value: any, baseComponent: Component) => (ItemT | ItemT[]), uniqueValues?: boolean, flatten?: boolean);","doc":"<p>[1]. Create a new binding based on the given property name/path, getter transformation function (see <code>Binding</code> constructor), and array element transformation function, to be passed to <code>mapAsync</code> or <code>mapAsyncValues</code> (if <code>uniqueValues</code> argument is true).</p>\n<p>[2]. Create a new binding based on the given property name/path, getter transformation function (see <code>Binding</code> constructor), and array element transformation function, to be passed to <code>mapAsync</code> or <code>mapAsyncValues</code> (if <code>uniqueValues</code> argument is true); if <code>flatten</code> argument is true, the element transformation function may return an array of results as well, to be flattened into the final result (with undefined/null values removed).</p>\n","count":2},{"id":"ArrayBinding/observeArrayOn","name":"observeArrayOn","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Binding.d.ts","line":25,"code":"observeArrayOn(component: Component, name?: string): Async.ObservableArray<ItemT>;","doc":"<p>Make an ObservableArray that is bound to the value on given component (used by factory initializer to apply binding).</p>\n","declType":"Async.ObservableArray<ItemT>"},{"id":"ArrayBinding/observeOn","name":"observeOn","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Binding.d.ts","line":23,"code":"observeOn(component: Component, name?: string): Async.ObservableValue<ItemT[]>;","doc":"<p>Make an ObservableValue that is bound to the value on given component (used by factory initializer to apply binding); wraps an observable array in an observable value; for better performance, use <code>.observeArrayOn(...)</code> directly (used by component factory initializer).</p>\n","declType":"Async.ObservableValue<ItemT[]>"}],"sourceIdx":3,"textSeeAlso":"Binding, TwoWayBinding, bind, bind2, bindComponents","text":[{"title":"","content":"<p>An instance of this class is commonly obtained as the result of the <code>bindComponents</code> function.</p>\n"}]},{"id":"Binding","name":"Binding","isClass":true,"file":"./packages/ui/typings/UI/Binding.d.ts","line":3,"code":"class Binding<ResultT>","doc":"<p>Represents a property binding, used with component factories to proxy values taken from the base component instance onto properties of its sub components.</p>\n","typeParams":["ResultT"],"items":[{"id":"Binding.constructor","name":"new Binding","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Binding.d.ts","line":5,"code":"constructor(sourcePath?: string, getTransform?: (value: any, baseComponent: Component) => (ResultT | Async.ObservableValue<ResultT> | PromiseLike<ResultT>));","doc":"<p>Create a new binding based on the given property name/path (referring to the base component, on which .with or .initializeWith was called; resulting values can also be instances of ObservableValue or Promise), and optionally a transformation function, invoked each time the observed value changes (outside of any observable context, like <code>map</code> on <code>ObservableValue</code>, i.e. no further dependencies are recorded); if no path is specified, the name of the initializer property that contains this binding is used, if any.</p>\n"},{"id":"Binding/observeOn","name":"observeOn","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Binding.d.ts","line":7,"code":"observeOn(component: Component, name?: string): Async.ObservableValue<ResultT>;","doc":"<p>Make an ObservableValue that is bound to the value on given component (used by factory initializer to apply binding).</p>\n","declType":"Async.ObservableValue<ResultT>"}],"sourceIdx":1,"textSeeAlso":"TwoWayBinding, ArrayBinding, bind, bind2, bindComponents","text":[{"title":"","content":"<p>An instance of this class is commonly obtained as the result of the <code>bind</code> function.</p>\n"}]},{"id":"Block","name":"Block","isClass":true,"file":"./packages/ui/typings/UI/Components/Blocks/Block.d.ts","line":3,"code":"class Block extends Component","doc":"<p>Block base class: full-width block component.</p>\n","extends":["Component"],"items":[{"id":"Block.Initializer","name":"Initializer","isInterface":true,"file":"./packages/ui/typings/UI/Components/Blocks/Block.d.ts","line":15,"code":"interface Initializer extends Component.Initializer","doc":"<p>Initializer for .with({…}).</p>\n","isStatic":true,"extends":["Component.Initializer"],"items":[{"id":"Block.Initializer/displayOptions","name":"displayOptions","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Block.d.ts","line":19,"code":"displayOptions?: Page.DisplayOptions;","doc":"<p>Property initializer: display options (for use when displayed directly on the page).</p>\n","declType":"Page.DisplayOptions"},{"id":"Block.Initializer/overlayPosition","name":"overlayPosition","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Block.d.ts","line":17,"code":"overlayPosition?: OverlayPosition;","doc":"<p>Property initializer: overlay positioning option (to display block as an overlay within its parent container).</p>\n","declType":"OverlayPosition"}],"inherits":["Component.Initializer/ArrowDownKeyPressed","Component.Initializer/ArrowLeftKeyPressed","Component.Initializer/ArrowRightKeyPressed","Component.Initializer/ArrowUpKeyPressed","Component.Initializer/BackspaceKeyPressed","Component.Initializer/Blur","Component.Initializer/Click","Component.Initializer/Clicked","Component.Initializer/DeleteKeyPressed","Component.Initializer/DoubleClick","Component.Initializer/DoubleClicked","Component.Initializer/DragDrop","Component.Initializer/DragEnter","Component.Initializer/DragLeave","Component.Initializer/DragStart","Component.Initializer/EnterKeyPressed","Component.Initializer/EscapeKeyPressed","Component.Initializer/Focus","Component.Initializer/FocusGained","Component.Initializer/FocusLost","Component.Initializer/KeyDown","Component.Initializer/KeyPress","Component.Initializer/MouseContextMenu","Component.Initializer/MouseEnter","Component.Initializer/MouseLeave","Component.Initializer/Press","Component.Initializer/Pressed","Component.Initializer/Rendered","Component.Initializer/SpaceBarPressed","Component.Initializer/animations","Component.Initializer/focusMode","Component.Initializer/hasFocus","Component.Initializer/height","Component.Initializer/hidden","Component.Initializer/id","Component.Initializer/renderOptions","Component.Initializer/selected","Component.Initializer/selectionMode","Component.Initializer/shadowEffect","Component.Initializer/shadowEffectOnFocus","Component.Initializer/shadowEffectOnHover","Component.Initializer/style","Component.Initializer/width"]},{"id":"Block.OverlayPosition","name":"OverlayPosition","isEnum":true,"file":"./packages/ui/typings/UI/Components/Blocks/Block.d.ts","line":22,"code":"enum OverlayPosition","doc":"<p>Overlay positioning options.</p>\n","isStatic":true,"items":[{"id":"Block.OverlayPosition.Bottom","name":"Bottom","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Blocks/Block.d.ts","line":30,"code":"enum OverlayPosition { ...Bottom }","doc":"<p>Bottom (full width).</p>\n"},{"id":"Block.OverlayPosition.BottomLeft","name":"BottomLeft","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Blocks/Block.d.ts","line":32,"code":"enum OverlayPosition { ...BottomLeft }","doc":"<p>Bottom left corner.</p>\n"},{"id":"Block.OverlayPosition.BottomRight","name":"BottomRight","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Blocks/Block.d.ts","line":34,"code":"enum OverlayPosition { ...BottomRight }","doc":"<p>Bottom right corner.</p>\n"},{"id":"Block.OverlayPosition.Top","name":"Top","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Blocks/Block.d.ts","line":24,"code":"enum OverlayPosition { ...Top }","doc":"<p>Top (full width).</p>\n"},{"id":"Block.OverlayPosition.TopLeft","name":"TopLeft","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Blocks/Block.d.ts","line":26,"code":"enum OverlayPosition { ...TopLeft }","doc":"<p>Top left corner.</p>\n"},{"id":"Block.OverlayPosition.TopRight","name":"TopRight","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Blocks/Block.d.ts","line":28,"code":"enum OverlayPosition { ...TopRight }","doc":"<p>Top right corner.</p>\n"}]},{"id":"Block.constructor","name":"new Block","hasParams":false,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Blocks/Block.d.ts","line":5,"code":"constructor();","doc":"<p>Create a new empty block component.</p>\n"},{"id":"Block/displayOptions","name":"displayOptions","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Block.d.ts","line":11,"code":"displayOptions?: Page.DisplayOptions;","doc":"<p>Object with options to be used when displaying this block as a page component, initially undefined (observed).</p>\n","declType":"Page.DisplayOptions"},{"id":"Block/initializeWith","name":"initializeWith","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Block.d.ts","line":7,"code":"initializeWith: (values: Block.Initializer) => this;","doc":"<p>Initialize with given (observable) properties; returns this.</p>\n","declType":"(values: Block.Initializer) => this"},{"id":"Block/overlayPosition","name":"overlayPosition","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Block.d.ts","line":9,"code":"overlayPosition?: Block.OverlayPosition;","doc":"<p>Overlay position (observed); set to one of the <code>OverlayPosition</code> enum’s values to take this block out of the top-down component flow, and position it relative to its <em>parent</em> container (or to the screen, if displayed directly); note that this block will still move up/down along with the content of the parent container if its <code>scrollable</code> property is true.</p>\n","declType":"Block.OverlayPosition"}],"isNamespace":true,"sourceIdx":7,"inherits":["Component.addStyleOverride","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Component/focusMode","Component/getActualDimensions","Component/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Component/id","Component/initialize","Component/out","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Component/style","Component/uid","Component/width","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"BlockControl","name":"BlockControl","isClass":true,"file":"./packages/ui/typings/UI/Components/Controls/BlockControl.d.ts","line":5,"code":"class BlockControl<BlockT extends Block> extends ControlElement","doc":"<p>Represents a control element that contains a block.</p>\n","extends":["ControlElement"],"typeParams":["BlockT extends Block"],"items":[{"id":"BlockControl.Initializer","name":"Initializer","isInterface":true,"file":"./packages/ui/typings/UI/Components/Controls/BlockControl.d.ts","line":19,"code":"interface Initializer extends ControlElement.Initializer","doc":"<p>initializer for .with({ … }).</p>\n","isStatic":true,"extends":["ControlElement.Initializer"],"items":[{"id":"BlockControl.Initializer/block","name":"block","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/BlockControl.d.ts","line":21,"code":"block?: ComponentFactory.SpecEltOrList;","doc":"<p>Property initializer: content block.</p>\n","declType":"ComponentFactory.SpecEltOrList"}],"inherits":["Component.Initializer/ArrowDownKeyPressed","Component.Initializer/ArrowLeftKeyPressed","Component.Initializer/ArrowRightKeyPressed","Component.Initializer/ArrowUpKeyPressed","Component.Initializer/BackspaceKeyPressed","Component.Initializer/Blur","Component.Initializer/Click","Component.Initializer/Clicked","Component.Initializer/DeleteKeyPressed","Component.Initializer/DoubleClick","Component.Initializer/DoubleClicked","Component.Initializer/DragDrop","Component.Initializer/DragEnter","Component.Initializer/DragLeave","Component.Initializer/DragStart","Component.Initializer/EnterKeyPressed","Component.Initializer/EscapeKeyPressed","Component.Initializer/Focus","Component.Initializer/FocusGained","Component.Initializer/FocusLost","Component.Initializer/KeyDown","Component.Initializer/KeyPress","Component.Initializer/MouseContextMenu","Component.Initializer/MouseEnter","Component.Initializer/MouseLeave","Component.Initializer/Press","Component.Initializer/Pressed","Component.Initializer/Rendered","Component.Initializer/SpaceBarPressed","Component.Initializer/animations","Component.Initializer/focusMode","ControlElement.Initializer/hasFocus","Component.Initializer/height","Component.Initializer/hidden","Component.Initializer/id","Component.Initializer/renderOptions","Component.Initializer/selected","Component.Initializer/selectionMode","Component.Initializer/shadowEffect","Component.Initializer/shadowEffectOnFocus","Component.Initializer/shadowEffectOnHover","ControlElement.Initializer/shrinkwrap","Component.Initializer/style","ControlElement.Initializer/width"]},{"id":"BlockControl.constructor","name":"new BlockControl","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Controls/BlockControl.d.ts","line":7,"code":"constructor(block?: BlockT);","doc":"<p>Create a new block control element containing the given block, if any.</p>\n"},{"id":"BlockControl/block","name":"block","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/BlockControl.d.ts","line":11,"code":"block?: BlockT;","doc":"<p>Block element, if any (observed).</p>\n","declType":"BlockT"},{"id":"BlockControl/getChildren","name":"getChildren","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Controls/BlockControl.d.ts","line":15,"code":"getChildren(): Component[];","doc":"<p>Returns an array of directly contained components (observable).</p>\n","declType":"Component[]"},{"id":"BlockControl/initializeWith","name":"initializeWith","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/BlockControl.d.ts","line":9,"code":"initializeWith: (values: BlockControl.Initializer) => this;","doc":"<p>Initialize with given (observable) properties; returns this.</p>\n","declType":"(values: BlockControl.Initializer) => this"},{"id":"BlockControl/width","name":"width","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/BlockControl.d.ts","line":13,"code":"width: string;","doc":"<p>Overall target width of this component (CSS length; observable, directly modifies <code>.style</code> property, does <em>not</em> retrieve actual component height, may be “auto”); if a width has not been set explicitly, or is set to “auto”, then the value is taken from the width of the container.</p>\n","declType":"string"}],"isNamespace":true,"sourceIdx":55,"inherits":["Component.addStyleOverride","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Component/focusMode","Component/getActualDimensions","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Component/id","Component/initialize","Component/out","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","ControlElement/shrinkwrap","Component/style","Component/uid","ControlElement/wrapText","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"Button","name":"Button","isClass":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":9,"code":"class Button extends ControlElement","doc":"<p>Represents a button control.</p>\n","extends":["ControlElement"],"items":[{"id":"Button.Activation","name":"Activation","isClass":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":64,"code":"class Activation","doc":"<p>Contains injectable method for activating targets; instantiated by <code>Button</code>.</p>\n","isStatic":true,"items":[{"id":"Button.Activation/activate","name":"activate","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":66,"code":"activate(target: any): void;","doc":"<p>Injectable method to activate given target (e.g. URL, or Activity instance or class); default ony handles URLs, <code>Application</code> instance injects more functionality here.</p>\n","declType":"void"}]},{"id":"Button.DropdownClickSignal","name":"DropdownClickSignal","isClass":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":61,"code":"class DropdownClickSignal extends ComponentSignal<string | number>","doc":"<p>Signal that is emitted when a dropdown item has been selected.</p>\n","isStatic":true,"extends":["ComponentSignal"],"items":[]},{"id":"Button.Initializer","name":"Initializer","isInterface":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":69,"code":"interface Initializer extends ControlElement.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["ControlElement.Initializer"],"items":[{"id":"Button.Initializer/DropdownClicked","name":"DropdownClicked","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":101,"code":"DropdownClicked?: string | ButtonDropdownClickHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | ButtonDropdownClickHandler"},{"id":"Button.Initializer/badge","name":"badge","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":79,"code":"badge?: UIValueOrAsync<string | TextLabelFactory>;","doc":"<p>Property initializer: badge text.</p>\n","declType":"UIValueOrAsync<string | TextLabelFactory>"},{"id":"Button.Initializer/disabled","name":"disabled","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":83,"code":"disabled?: UIValueOrAsync<boolean>;","doc":"<p>Property initializer: true to disable the button.</p>\n","declType":"UIValueOrAsync<boolean>"},{"id":"Button.Initializer/dropdown","name":"dropdown","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":87,"code":"dropdown?: UIValueOrAsync<Menu.Option[]>;","doc":"<p>Property initializer: dropdown items.</p>\n","declType":"UIValueOrAsync<Menu.Option[]>"},{"id":"Button.Initializer/icon","name":"icon","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":73,"code":"icon?: UIValueOrAsync<string>;","doc":"<p>Property initializer: icon (before label).</p>\n","declType":"UIValueOrAsync<string>"},{"id":"Button.Initializer/iconAfter","name":"iconAfter","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":75,"code":"iconAfter?: UIValueOrAsync<string>;","doc":"<p>Property initializer: icon (after label).</p>\n","declType":"UIValueOrAsync<string>"},{"id":"Button.Initializer/label","name":"label","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":71,"code":"label?: UIValueOrAsync<string | TextLabelFactory>;","doc":"<p>Property initializer: label text.</p>\n","declType":"UIValueOrAsync<string | TextLabelFactory>"},{"id":"Button.Initializer/popover","name":"popover","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":89,"code":"popover?: UIValueOrAsync<ComponentFactory<Container> | typeof Container>;","doc":"<p>Property initializer: popover content (container).</p>\n","declType":"UIValueOrAsync<ComponentFactory<Container> | typeof Container>"},{"id":"Button.Initializer/popoverAbove","name":"popoverAbove","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":91,"code":"popoverAbove?: UIValueOrAsync<boolean>;","doc":"<p>Property initializer: true to display popover above button.</p>\n","declType":"UIValueOrAsync<boolean>"},{"id":"Button.Initializer/popoverAnimation","name":"popoverAnimation","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":95,"code":"popoverAnimation?: Animation;","doc":"<p>Property initializer: popover animation (appear).</p>\n","declType":"Animation"},{"id":"Button.Initializer/popoverTitle","name":"popoverTitle","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":93,"code":"popoverTitle?: UIValueOrAsync<string | TextLabelFactory>;","doc":"<p>Property initializer: popover title text.</p>\n","declType":"UIValueOrAsync<string | TextLabelFactory>"},{"id":"Button.Initializer/primary","name":"primary","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":85,"code":"primary?: UIValueOrAsync<boolean>;","doc":"<p>Property initializer: true to display as primary button.</p>\n","declType":"UIValueOrAsync<boolean>"},{"id":"Button.Initializer/remGutter","name":"remGutter","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":77,"code":"remGutter?: UIValueOrAsync<number>;","doc":"<p>Property initializer: space reserved for icon (rem units).</p>\n","declType":"UIValueOrAsync<number>"},{"id":"Button.Initializer/style_button","name":"style_button","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":99,"code":"style_button?: UIValueOrAsync<Style | Style.StyleSet>;","doc":"<p>Property initializer: button style.</p>\n","declType":"UIValueOrAsync<Style | Style.StyleSet>"},{"id":"Button.Initializer/target","name":"target","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":97,"code":"target?: any;","doc":"<p>Property initializer: target URL, or Activity instance/class.</p>\n"},{"id":"Button.Initializer/tooltipText","name":"tooltipText","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":81,"code":"tooltipText?: UIValueOrAsync<string | TextLabelFactory>;","doc":"<p>Property initializer: tooltip text.</p>\n","declType":"UIValueOrAsync<string | TextLabelFactory>"}],"inherits":["Component.Initializer/ArrowDownKeyPressed","Component.Initializer/ArrowLeftKeyPressed","Component.Initializer/ArrowRightKeyPressed","Component.Initializer/ArrowUpKeyPressed","Component.Initializer/BackspaceKeyPressed","Component.Initializer/Blur","Component.Initializer/Click","Component.Initializer/Clicked","Component.Initializer/DeleteKeyPressed","Component.Initializer/DoubleClick","Component.Initializer/DoubleClicked","Component.Initializer/DragDrop","Component.Initializer/DragEnter","Component.Initializer/DragLeave","Component.Initializer/DragStart","Component.Initializer/EnterKeyPressed","Component.Initializer/EscapeKeyPressed","Component.Initializer/Focus","Component.Initializer/FocusGained","Component.Initializer/FocusLost","Component.Initializer/KeyDown","Component.Initializer/KeyPress","Component.Initializer/MouseContextMenu","Component.Initializer/MouseEnter","Component.Initializer/MouseLeave","Component.Initializer/Press","Component.Initializer/Pressed","Component.Initializer/Rendered","Component.Initializer/SpaceBarPressed","Component.Initializer/animations","Component.Initializer/focusMode","ControlElement.Initializer/hasFocus","Component.Initializer/height","Component.Initializer/hidden","Component.Initializer/id","Component.Initializer/renderOptions","Component.Initializer/selected","Component.Initializer/selectionMode","Component.Initializer/shadowEffect","Component.Initializer/shadowEffectOnFocus","Component.Initializer/shadowEffectOnHover","ControlElement.Initializer/shrinkwrap","Component.Initializer/style","ControlElement.Initializer/width"]},{"id":"Button.withIcon","name":"withIcon","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":18,"code":"static withIcon<T extends Button>(this: { new (): T; with: typeof Button.with; }, icon: UIValueOrAsync<string>, clickedHandler?: string | PointerHandler): ComponentFactory<T>;","doc":"<p>Initialize a button control factory with given icon and handler.</p>\n","typeParams":["T extends Button"],"declType":"ComponentFactory<T>"},{"id":"Button.withLabel","name":"withLabel","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":13,"code":"static withLabel<T extends Button>(this: { new (): T; with: typeof Button.with; }, label: UIValueOrAsync<string | TextLabelFactory>, clickedHandler?: string | PointerHandler): ComponentFactory<T>;","doc":"<p>Initialize a button control factory with given label and handler.</p>\n","typeParams":["T extends Button"],"declType":"ComponentFactory<T>"},{"id":"Button.constructor","name":"new Button","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":11,"code":"constructor(label?: string | TextLabelFactory, icon?: string);","doc":"<p>Create a button control element.</p>\n"},{"id":"Button/badge","name":"badge","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":33,"code":"badge: string;","doc":"<p>Optional badge text (see <code>Label#badge</code>; observed).</p>\n","declType":"string"},{"id":"Button/disabled","name":"disabled","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":37,"code":"disabled: boolean;","doc":"<p>Disabled state (observed).</p>\n","declType":"boolean"},{"id":"Button/dropdown","name":"dropdown","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":41,"code":"dropdown?: Menu.Option[];","doc":"<p>Dropdown menu options to be displayed when this button is clicked (optional); defaults to undefined, set to array or ObservableArray to enable.</p>\n","declType":"Menu.Option[]"},{"id":"Button/icon","name":"icon","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":27,"code":"icon?: string;","doc":"<p>Optional icon (see <code>Label#icon</code>; observed).</p>\n","declType":"string"},{"id":"Button/iconAfter","name":"iconAfter","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":29,"code":"iconAfter?: string;","doc":"<p>Optional icon to be appended after the label text (observed).</p>\n","declType":"string"},{"id":"Button/initializeWith","name":"initializeWith","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":23,"code":"initializeWith: (values: Button.Initializer) => this;","doc":"<p>Initialize with given (observable) properties; returns this.</p>\n","declType":"(values: Button.Initializer) => this"},{"id":"Button/label","name":"label","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":25,"code":"label: string;","doc":"<p>Button label (observed).</p>\n","declType":"string"},{"id":"Button/popover","name":"popover","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":43,"code":"popover?: typeof Container | ComponentFactory<Container>;","doc":"<p>Container class or container factory for the contents of a popover to be displayed when this button is clicked (optional).</p>\n","declType":"typeof Container | ComponentFactory<Container>"},{"id":"Button/popoverAbove","name":"popoverAbove","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":45,"code":"popoverAbove: boolean;","doc":"<p>Set to true to open popover above this button (vertically) when this button is clicked.</p>\n","declType":"boolean"},{"id":"Button/popoverAnimation","name":"popoverAnimation","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":49,"code":"popoverAnimation: Animation;","doc":"<p>Animation to be used for display of a popover.</p>\n","declType":"Animation"},{"id":"Button/popoverTitle","name":"popoverTitle","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":47,"code":"popoverTitle: string;","doc":"<p>Title of the popover (optional) displayed when this button is clicked; no title is displayed if this string is undefined or empty.</p>\n","declType":"string"},{"id":"Button/primary","name":"primary","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":39,"code":"primary: boolean;","doc":"<p>Set to true to enable Bootstrap style “primary” class.</p>\n","declType":"boolean"},{"id":"Button/remGutter","name":"remGutter","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":31,"code":"remGutter?: number;","doc":"<p>Space reserved for icon (rem units), if &gt; 0 (observed).</p>\n","declType":"number"},{"id":"Button/shrinkwrap","name":"shrinkwrap","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":53,"code":"shrinkwrap: boolean;","doc":"<p>Set to false to expand horizontally within row (observed).</p>\n","declType":"boolean"},{"id":"Button/style_button","name":"style_button","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":55,"code":"readonly style_button: Style;","doc":"<p>Encapsulation of button element style (observed).</p>\n","declType":"Style"},{"id":"Button/target","name":"target","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":51,"code":"target: any;","doc":"<p>URL/path string, or (App module) <code>Activity</code> instance or <code>Activity</code> class that will be activated when this button is clicked (optional).</p>\n"},{"id":"Button/tooltipText","name":"tooltipText","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":35,"code":"tooltipText: string;","doc":"<p>Tooltip text (observed).</p>\n","declType":"string"},{"id":"Button/DropdownClicked","name":"DropdownClicked","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":57,"code":"readonly DropdownClicked: ComponentSignal.Emittable<string | number, typeof Button.DropdownClickSignal>;","doc":"<p>Signal emitted when a dropdown option has been selected.</p>\n","declType":"ComponentSignal.Emittable<string | number, typeof Button.DropdownClickSignal>","isSignal":true}],"isNamespace":true,"sourceIdx":56,"inherits":["Component.addStyleOverride","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Component/focusMode","Component/getActualDimensions","Component/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Component/id","Component/initialize","Component/out","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Component/style","Component/uid","ControlElement/width","ControlElement/wrapText","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"ButtonDropdownClickHandler","name":"ButtonDropdownClickHandler","isClass":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":105,"code":"class ButtonDropdownClickHandler extends ComponentSignalHandler<string | number, typeof Button.DropdownClickSignal>","doc":"<p>Constructor for a button dropdown click event handler.</p>\n","extends":["ComponentSignalHandler"],"items":[],"sourceIdx":57,"inherits":["ComponentSignalHandler.!call","ComponentSignalHandler/connectTo","ComponentSignalHandler/isEventHandler"]},{"id":"ButtonGroup","name":"ButtonGroup","isClass":true,"file":"./packages/ui/typings/UI/Components/Controls/ButtonGroup.d.ts","line":6,"code":"class ButtonGroup extends ControlElement","doc":"<p>Represents a button group (toggle, tab, or toolbar) control.</p>\n","extends":["ControlElement"],"items":[{"id":"ButtonGroup.Initializer","name":"Initializer","isInterface":true,"file":"./packages/ui/typings/UI/Components/Controls/ButtonGroup.d.ts","line":32,"code":"interface Initializer extends ControlElement.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["ControlElement.Initializer"],"items":[{"id":"ButtonGroup.Initializer/buttons","name":"buttons","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ButtonGroup.d.ts","line":34,"code":"buttons?: ComponentFactory.SpecList;","doc":"<p>Property initializer: buttons to display.</p>\n","declType":"ComponentFactory.SpecList"},{"id":"ButtonGroup.Initializer/selectedIndex","name":"selectedIndex","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ButtonGroup.d.ts","line":38,"code":"selectedIndex?: UIValueOrAsync<number>;","doc":"<p>Property initializer: index of selected button (use with <code>.selectionMode</code> set to <code>ItemClick</code>).</p>\n","declType":"UIValueOrAsync<number>"},{"id":"ButtonGroup.Initializer/vertical","name":"vertical","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ButtonGroup.d.ts","line":36,"code":"vertical?: UIValueOrAsync<boolean>;","doc":"<p>Property initializer: true to display buttons vertically.</p>\n","declType":"UIValueOrAsync<boolean>"}],"inherits":["Component.Initializer/ArrowDownKeyPressed","Component.Initializer/ArrowLeftKeyPressed","Component.Initializer/ArrowRightKeyPressed","Component.Initializer/ArrowUpKeyPressed","Component.Initializer/BackspaceKeyPressed","Component.Initializer/Blur","Component.Initializer/Click","Component.Initializer/Clicked","Component.Initializer/DeleteKeyPressed","Component.Initializer/DoubleClick","Component.Initializer/DoubleClicked","Component.Initializer/DragDrop","Component.Initializer/DragEnter","Component.Initializer/DragLeave","Component.Initializer/DragStart","Component.Initializer/EnterKeyPressed","Component.Initializer/EscapeKeyPressed","Component.Initializer/Focus","Component.Initializer/FocusGained","Component.Initializer/FocusLost","Component.Initializer/KeyDown","Component.Initializer/KeyPress","Component.Initializer/MouseContextMenu","Component.Initializer/MouseEnter","Component.Initializer/MouseLeave","Component.Initializer/Press","Component.Initializer/Pressed","Component.Initializer/Rendered","Component.Initializer/SpaceBarPressed","Component.Initializer/animations","Component.Initializer/focusMode","ControlElement.Initializer/hasFocus","Component.Initializer/height","Component.Initializer/hidden","Component.Initializer/id","Component.Initializer/renderOptions","Component.Initializer/selected","Component.Initializer/selectionMode","Component.Initializer/shadowEffect","Component.Initializer/shadowEffectOnFocus","Component.Initializer/shadowEffectOnHover","ControlElement.Initializer/shrinkwrap","Component.Initializer/style","ControlElement.Initializer/width"]},{"id":"ButtonGroup.withButtons","name":"withButtons","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Controls/ButtonGroup.d.ts","line":12,"code":"static withButtons<T extends ButtonGroup>(this: { new (): T; with: typeof ButtonGroup.with; }, buttons: Array<Button | ComponentFactory<Button>>, selectedIndex?: number, multiple?: boolean): ComponentFactory<T>;","doc":"<p>Initialize a button group control factory with given buttons/button factories; provide selected button index to select (activate) one of the buttons, OR set <code>multiple</code> argument to true to allow multiple buttons to be active at once.</p>\n","typeParams":["T extends ButtonGroup"],"declType":"ComponentFactory<T>"},{"id":"ButtonGroup.constructor","name":"new ButtonGroup","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Controls/ButtonGroup.d.ts","line":8,"code":"constructor(buttons?: Button[]);","doc":"<p>Create a button group element.</p>\n"},{"id":"ButtonGroup/buttons","name":"buttons","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ButtonGroup.d.ts","line":19,"code":"buttons: Array<Button | undefined>;","doc":"<p>Buttons to be displayed as part of the button group, in order (observed).</p>\n","declType":"Array<Button | undefined>"},{"id":"ButtonGroup/getChildren","name":"getChildren","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Controls/ButtonGroup.d.ts","line":28,"code":"getChildren(): Component[];","doc":"<p>Returns an array of directly contained components (observable).</p>\n","declType":"Component[]"},{"id":"ButtonGroup/initializeWith","name":"initializeWith","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ButtonGroup.d.ts","line":17,"code":"initializeWith: (values: ButtonGroup.Initializer) => this;","doc":"<p>Initialize with given (observable) properties; returns this.</p>\n","declType":"(values: ButtonGroup.Initializer) => this"},{"id":"ButtonGroup/selectedIndex","name":"selectedIndex","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ButtonGroup.d.ts","line":25,"code":"selectedIndex: number;","doc":"<p>Currently selected button index (base 0) or -1 if no selection (observed).</p>\n","declType":"number"},{"id":"ButtonGroup/shrinkwrap","name":"shrinkwrap","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ButtonGroup.d.ts","line":23,"code":"shrinkwrap: boolean;","doc":"<p>Set to false to expand horizontally within row (observed).</p>\n","declType":"boolean"},{"id":"ButtonGroup/vertical","name":"vertical","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ButtonGroup.d.ts","line":21,"code":"vertical: boolean;","doc":"<p>Set to true to show buttons from top to bottom (observed).</p>\n","declType":"boolean"},{"id":"ButtonGroup/beforeFirstRender","name":"beforeFirstRender","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Controls/ButtonGroup.d.ts","line":10,"code":"protected beforeFirstRender(renderer: ComponentRenderer<this, any>): void;","doc":"<p>Method that is called immediately after the renderer for this button group is constructed; adds observers for button activation.</p>\n","isProtected":true,"declType":"void"}],"isNamespace":true,"sourceIdx":63,"inherits":["Component.addStyleOverride","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Component/focusMode","Component/getActualDimensions","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Component/id","Component/initialize","Component/out","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Component/style","Component/uid","ControlElement/width","ControlElement/wrapText","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"Card","name":"Card","isClass":true,"file":"./packages/ui/typings/UI/Components/Blocks/Card.d.ts","line":4,"code":"class Card extends Block","doc":"<p>Represents a card block containing a header, content, and a footer.</p>\n","extends":["Block"],"items":[{"id":"Card.Initializer","name":"Initializer","isInterface":true,"file":"./packages/ui/typings/UI/Components/Blocks/Card.d.ts","line":25,"code":"interface Initializer extends Block.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["Block.Initializer"],"items":[{"id":"Card.Initializer/content","name":"content","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Card.d.ts","line":27,"code":"content?: ComponentFactory.SpecList2;","doc":"<p>Property initializer: content blocks.</p>\n","declType":"ComponentFactory.SpecList2"},{"id":"Card.Initializer/footer","name":"footer","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Card.d.ts","line":31,"code":"footer?: ComponentFactory.SpecEltOrList;","doc":"<p>Property initializer: footer block.</p>\n","declType":"ComponentFactory.SpecEltOrList"},{"id":"Card.Initializer/header","name":"header","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Card.d.ts","line":29,"code":"header?: ComponentFactory.SpecEltOrList;","doc":"<p>Property initializer: header block.</p>\n","declType":"ComponentFactory.SpecEltOrList"}],"inherits":["Component.Initializer/ArrowDownKeyPressed","Component.Initializer/ArrowLeftKeyPressed","Component.Initializer/ArrowRightKeyPressed","Component.Initializer/ArrowUpKeyPressed","Component.Initializer/BackspaceKeyPressed","Component.Initializer/Blur","Component.Initializer/Click","Component.Initializer/Clicked","Component.Initializer/DeleteKeyPressed","Component.Initializer/DoubleClick","Component.Initializer/DoubleClicked","Component.Initializer/DragDrop","Component.Initializer/DragEnter","Component.Initializer/DragLeave","Component.Initializer/DragStart","Component.Initializer/EnterKeyPressed","Component.Initializer/EscapeKeyPressed","Component.Initializer/Focus","Component.Initializer/FocusGained","Component.Initializer/FocusLost","Component.Initializer/KeyDown","Component.Initializer/KeyPress","Component.Initializer/MouseContextMenu","Component.Initializer/MouseEnter","Component.Initializer/MouseLeave","Component.Initializer/Press","Component.Initializer/Pressed","Component.Initializer/Rendered","Component.Initializer/SpaceBarPressed","Component.Initializer/animations","Block.Initializer/displayOptions","Component.Initializer/focusMode","Component.Initializer/hasFocus","Component.Initializer/height","Component.Initializer/hidden","Component.Initializer/id","Block.Initializer/overlayPosition","Component.Initializer/renderOptions","Component.Initializer/selected","Component.Initializer/selectionMode","Component.Initializer/shadowEffect","Component.Initializer/shadowEffectOnFocus","Component.Initializer/shadowEffectOnHover","Component.Initializer/style","Component.Initializer/width"]},{"id":"Card.withContent","name":"withContent","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Blocks/Card.d.ts","line":8,"code":"static withContent<T extends Card>(this: { new (): T; with: typeof Card.with; }, content: ComponentFactory.SpecList2): ComponentFactory<T>;","doc":"<p>Initialize a card block factory with given content.</p>\n","typeParams":["T extends Card"],"declType":"ComponentFactory<T>"},{"id":"Card.constructor","name":"new Card","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Blocks/Card.d.ts","line":6,"code":"constructor(content?: Block[]);","doc":"<p>Create a card block with given content, if any.</p>\n"},{"id":"Card/content","name":"content","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Card.d.ts","line":19,"code":"content: Array<Block | undefined>;","doc":"<p>Array of main content blocks, stacked top to bottom (observed).</p>\n","declType":"Array<Block | undefined>"},{"id":"Card/footer","name":"footer","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Card.d.ts","line":17,"code":"footer?: Block;","doc":"<p>Block to be displayed as a footer, may be undefined (observed).</p>\n","declType":"Block"},{"id":"Card/getChildren","name":"getChildren","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Blocks/Card.d.ts","line":21,"code":"getChildren(): Component[];","doc":"<p>Returns an array of directly contained components (observable).</p>\n","declType":"Component[]"},{"id":"Card/header","name":"header","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Card.d.ts","line":15,"code":"header?: Block;","doc":"<p>Block to be displayed as a header, may be undefined (observed).</p>\n","declType":"Block"},{"id":"Card/initializeWith","name":"initializeWith","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Card.d.ts","line":13,"code":"initializeWith: (values: Card.Initializer) => this;","doc":"<p>Initialize with given (observable) properties; returns this.</p>\n","declType":"(values: Card.Initializer) => this"}],"isNamespace":true,"sourceIdx":8,"inherits":["Component.addStyleOverride","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Block/displayOptions","Component/focusMode","Component/getActualDimensions","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Component/id","Component/initialize","Component/out","Block/overlayPosition","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Component/style","Component/uid","Component/width","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"CenterRow","name":"CenterRow","isClass":true,"file":"./packages/ui/typings/UI/Components/Blocks/Row.d.ts","line":46,"code":"class CenterRow extends Row","doc":"<p>A row element with components aligned in the center.</p>\n","extends":["Row"],"items":[],"sourceIdx":18,"inherits":["Component.addStyleOverride","Row.withContent","Row.constructor","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Row/content","Block/displayOptions","Component/focusMode","Component/getActualDimensions","Row/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Component/id","Component/initialize","Row/initializeWith","Component/out","Block/overlayPosition","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Row/spacing","Component/style","Component/uid","Row/verticalSpacing","Component/width","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"Checkbox","name":"Checkbox","isClass":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":5,"code":"class Checkbox extends InputControl","doc":"<p>Represents a single checkbox or radio button control.</p>\n","extends":["InputControl"],"items":[{"id":"Checkbox.Initializer","name":"Initializer","isInterface":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":40,"code":"interface Initializer extends InputControl.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["InputControl.Initializer"],"items":[{"id":"Checkbox.Initializer/checked","name":"checked","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":42,"code":"checked?: UIValueOrAsync<boolean | undefined>;","doc":"<p>Property initializer: true to check checkbox/radio.</p>\n","declType":"UIValueOrAsync<boolean | undefined>"},{"id":"Checkbox.Initializer/style_text","name":"style_text","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":46,"code":"style_text?: UIValueOrAsync<Style | Style.StyleSet>;","doc":"<p>Property initializer: text element style.</p>\n","declType":"UIValueOrAsync<Style | Style.StyleSet>"},{"id":"Checkbox.Initializer/type","name":"type","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":44,"code":"type?: UIValueOrAsync<Checkbox.Type>;","doc":"<p>Property initializer: checkbox or radio.</p>\n","declType":"UIValueOrAsync<Checkbox.Type>"}],"inherits":["Component.Initializer/ArrowDownKeyPressed","Component.Initializer/ArrowLeftKeyPressed","Component.Initializer/ArrowRightKeyPressed","Component.Initializer/ArrowUpKeyPressed","Component.Initializer/BackspaceKeyPressed","Component.Initializer/Blur","Component.Initializer/Click","Component.Initializer/Clicked","Component.Initializer/DeleteKeyPressed","Component.Initializer/DoubleClick","Component.Initializer/DoubleClicked","Component.Initializer/DragDrop","Component.Initializer/DragEnter","Component.Initializer/DragLeave","Component.Initializer/DragStart","Component.Initializer/EnterKeyPressed","Component.Initializer/EscapeKeyPressed","Component.Initializer/Focus","Component.Initializer/FocusGained","Component.Initializer/FocusLost","Component.Initializer/KeyDown","Component.Initializer/KeyPress","Component.Initializer/MouseContextMenu","Component.Initializer/MouseEnter","Component.Initializer/MouseLeave","Component.Initializer/Press","Component.Initializer/Pressed","Component.Initializer/Rendered","Component.Initializer/SpaceBarPressed","InputControl.Initializer/ValueChange","InputControl.Initializer/ValueInput","Component.Initializer/animations","InputControl.Initializer/disabled","Component.Initializer/focusMode","ControlElement.Initializer/hasFocus","Component.Initializer/height","Component.Initializer/hidden","Component.Initializer/id","InputControl.Initializer/label","InputControl.Initializer/name","Component.Initializer/renderOptions","Component.Initializer/selected","Component.Initializer/selectionMode","Component.Initializer/shadowEffect","Component.Initializer/shadowEffectOnFocus","Component.Initializer/shadowEffectOnHover","ControlElement.Initializer/shrinkwrap","Component.Initializer/style","InputControl.Initializer/style_input","InputControl.Initializer/style_label","InputControl.Initializer/tooltipText","InputControl.Initializer/value","ControlElement.Initializer/width"]},{"id":"Checkbox.withName","name":"withName","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":9,"code":"static withName<T extends Checkbox>(this: { new (): T; with: typeof Checkbox.with; }, name: string, label?: string | TextLabelFactory, checked?: boolean, value?: string): ComponentFactory<T>;","doc":"<p>Initialize a checkbox control factory with given values.</p>\n","typeParams":["T extends Checkbox"],"declType":"ComponentFactory<T>"},{"id":"Checkbox.withRadioName","name":"withRadioName","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":14,"code":"static withRadioName<T extends Checkbox>(this: typeof Checkbox & { new (): T; }, name: string, label?: string | TextLabelFactory, checked?: boolean, value?: string): ComponentFactory<Checkbox>;","doc":"<p>Initialize a radio button control factory with given values.</p>\n","typeParams":["T extends Checkbox"],"declType":"ComponentFactory<Checkbox>"},{"id":"Checkbox.Type","name":"Type","isEnum":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":35,"code":"enum Type","doc":"<p>No description</p>\n","isStatic":true,"items":[{"id":"Checkbox.Type.Checkbox","name":"Checkbox","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":36,"code":"enum Type { ...Checkbox }","doc":"<p>No description</p>\n"},{"id":"Checkbox.Type.Radio","name":"Radio","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":37,"code":"enum Type { ...Radio }","doc":"<p>No description</p>\n"}]},{"id":"Checkbox.constructor","name":"new Checkbox","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":7,"code":"constructor(name?: string, label?: string | TextLabelFactory, type?: Checkbox.Type, checked?: boolean);","doc":"<p>Create a checkbox element.</p>\n"},{"id":"Checkbox/checked","name":"checked","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":24,"code":"checked: boolean;","doc":"<p>Current selection status (observable).</p>\n","declType":"boolean"},{"id":"Checkbox/getFormValues","name":"getFormValues","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":28,"code":"getFormValues(result?: {}): {};","doc":"<p>Returns an object containing all current values of input elements (observable).</p>\n","declType":"{}"},{"id":"Checkbox/initializeWith","name":"initializeWith","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":18,"code":"initializeWith: (values: Checkbox.Initializer) => this;","doc":"<p>Initialize with given (observable) values; returns this.</p>\n","declType":"(values: Checkbox.Initializer) => this"},{"id":"Checkbox/setFormValues","name":"setFormValues","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":30,"code":"setFormValues(values: any): void;","doc":"<p>Sets all input values by element name.</p>\n","declType":"void"},{"id":"Checkbox/shrinkwrap","name":"shrinkwrap","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":26,"code":"shrinkwrap: boolean;","doc":"<p>Set to false to expand horizontally within row (observed).</p>\n","declType":"boolean"},{"id":"Checkbox/style_text","name":"style_text","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":32,"code":"readonly style_text: Style;","doc":"<p>Encapsulation of inner text element style (observed).</p>\n","declType":"Style"},{"id":"Checkbox/type","name":"type","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":20,"code":"type: Checkbox.Type;","doc":"<p>Type: checkbox or radio button (observed), defaults to checkbox.</p>\n","declType":"Checkbox.Type"},{"id":"Checkbox/value","name":"value","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":22,"code":"value: string;","doc":"<p>Text value used when selected (observed), defaults to “checked”.</p>\n","declType":"string"}],"isNamespace":true,"sourceIdx":70,"inherits":["Component.addStyleOverride","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","InputControl/disabled","Component/focusMode","Component/getActualDimensions","Component/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Component/id","Component/initialize","InputControl/label","InputControl/name","Component/out","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/shadowEffect","Component/style","InputControl/style_input","InputControl/style_label","InputControl/tooltipText","Component/uid","ControlElement/width","ControlElement/wrapText","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed","InputControl/ValueChange","InputControl/ValueInput"]},{"id":"CloseControlStack","name":"CloseControlStack","isClass":true,"file":"./packages/ui/typings/UI/Components/Controls/ControlStack.d.ts","line":37,"code":"class CloseControlStack extends ControlStack","doc":"<p>Represents a stack containing control elements with equal width placed from top to bottom, with spacing set to 0 (no margin).</p>\n","extends":["ControlStack"],"items":[{"id":"CloseControlStack/spacing","name":"spacing","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ControlStack.d.ts","line":38,"code":"spacing: string;","doc":"<p>No description</p>\n","declType":"string"}],"sourceIdx":67,"inherits":["Component.addStyleOverride","ControlStack.withContent","ControlStack.constructor","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","ControlStack/content","Component/focusMode","Component/getActualDimensions","ControlStack/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","ControlStack/horzAlign","Component/hoverState","Component/id","Component/initialize","ControlStack/initializeWith","Component/out","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","ControlStack/shrinkwrap","Component/style","Component/uid","ControlElement/width","ControlElement/wrapText","Component/beforeFirstRender","Component/defineComponentSignal","Component/Renderer","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"CloseRow","name":"CloseRow","isClass":true,"file":"./packages/ui/typings/UI/Components/Blocks/Row.d.ts","line":38,"code":"class CloseRow extends Row","doc":"<p>Represents a row containing control elements placed horizontally, with spacing set to 0 (no margin).</p>\n","extends":["Row"],"items":[{"id":"CloseRow/spacing","name":"spacing","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Row.d.ts","line":39,"code":"spacing: string;","doc":"<p>No description</p>\n","declType":"string"},{"id":"CloseRow/verticalSpacing","name":"verticalSpacing","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Row.d.ts","line":40,"code":"verticalSpacing: string;","doc":"<p>No description</p>\n","declType":"string"}],"sourceIdx":16,"inherits":["Component.addStyleOverride","Row.withContent","Row.constructor","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Row/content","Block/displayOptions","Component/focusMode","Component/getActualDimensions","Row/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Component/id","Component/initialize","Row/initializeWith","Component/out","Block/overlayPosition","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Component/style","Component/uid","Component/width","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"Component","name":"Component","isClass":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":7,"code":"class Component extends Async.ObservableObject","doc":"<p>Component base class for every part of the user interface.</p>\n","extends":["Async.ObservableObject"],"items":[{"id":"Component.Animations","name":"Animations","isInterface":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":182,"code":"interface Animations","doc":"<p>Specification of which animations to play during the lifetime of a component on screen (can be extended for sub component types).</p>\n","isStatic":true,"items":[{"id":"Component.Animations/appear","name":"appear","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":184,"code":"appear?: Animation;","doc":"<p>Played when component is displayed or added to a displayed parent component.</p>\n","declType":"Animation"},{"id":"Component.Animations/deselect","name":"deselect","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":194,"code":"deselect?: Animation;","doc":"<p>Played when component is deselected (set <code>selected</code> to false).</p>\n","declType":"Animation"},{"id":"Component.Animations/disappear","name":"disappear","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":186,"code":"disappear?: Animation;","doc":"<p>Played when component is removed from the screen.</p>\n","declType":"Animation"},{"id":"Component.Animations/hide","name":"hide","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":190,"code":"hide?: Animation;","doc":"<p>Played when component is hidden (set <code>hidden</code> to true).</p>\n","declType":"Animation"},{"id":"Component.Animations/select","name":"select","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":192,"code":"select?: Animation;","doc":"<p>Played when component is selected (set <code>selected</code> to true).</p>\n","declType":"Animation"},{"id":"Component.Animations/show","name":"show","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":188,"code":"show?: Animation;","doc":"<p>Played when component is shown (set <code>hidden</code> to false).</p>\n","declType":"Animation"},{"id":"Component.Animations.!index:string","name":"[string]","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":195,"code":"[name: string]: Animation | undefined;","doc":"<p>No description</p>\n","declType":"Animation | undefined"}],"textSeeAlso":"Animation, Component/animations","text":[{"title":"","content":"<p>See <code>Animation</code> class and <code>animations</code> property for usage details.</p>\n"}],"sourceIdx":101},{"id":"Component.Initializer","name":"Initializer","isInterface":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":226,"code":"interface Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"items":[{"id":"Component.Initializer/ArrowDownKeyPressed","name":"ArrowDownKeyPressed","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":312,"code":"ArrowDownKeyPressed?: string | KeyHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | KeyHandler"},{"id":"Component.Initializer/ArrowLeftKeyPressed","name":"ArrowLeftKeyPressed","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":306,"code":"ArrowLeftKeyPressed?: string | KeyHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | KeyHandler"},{"id":"Component.Initializer/ArrowRightKeyPressed","name":"ArrowRightKeyPressed","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":310,"code":"ArrowRightKeyPressed?: string | KeyHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | KeyHandler"},{"id":"Component.Initializer/ArrowUpKeyPressed","name":"ArrowUpKeyPressed","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":308,"code":"ArrowUpKeyPressed?: string | KeyHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | KeyHandler"},{"id":"Component.Initializer/BackspaceKeyPressed","name":"BackspaceKeyPressed","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":300,"code":"BackspaceKeyPressed?: string | KeyHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | KeyHandler"},{"id":"Component.Initializer/Blur","name":"Blur","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":282,"code":"Blur?: string | ActionHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | ActionHandler"},{"id":"Component.Initializer/Click","name":"Click","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":258,"code":"Click?: string | PointerHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | PointerHandler"},{"id":"Component.Initializer/Clicked","name":"Clicked","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":260,"code":"Clicked?: string | PointerHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | PointerHandler"},{"id":"Component.Initializer/DeleteKeyPressed","name":"DeleteKeyPressed","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":302,"code":"DeleteKeyPressed?: string | KeyHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | KeyHandler"},{"id":"Component.Initializer/DoubleClick","name":"DoubleClick","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":262,"code":"DoubleClick?: string | PointerHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | PointerHandler"},{"id":"Component.Initializer/DoubleClicked","name":"DoubleClicked","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":264,"code":"DoubleClicked?: string | PointerHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | PointerHandler"},{"id":"Component.Initializer/DragDrop","name":"DragDrop","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":294,"code":"DragDrop?: string | DragHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | DragHandler"},{"id":"Component.Initializer/DragEnter","name":"DragEnter","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":290,"code":"DragEnter?: string | DragHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | DragHandler"},{"id":"Component.Initializer/DragLeave","name":"DragLeave","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":292,"code":"DragLeave?: string | DragHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | DragHandler"},{"id":"Component.Initializer/DragStart","name":"DragStart","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":288,"code":"DragStart?: string | DragHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | DragHandler"},{"id":"Component.Initializer/EnterKeyPressed","name":"EnterKeyPressed","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":296,"code":"EnterKeyPressed?: string | KeyHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | KeyHandler"},{"id":"Component.Initializer/EscapeKeyPressed","name":"EscapeKeyPressed","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":304,"code":"EscapeKeyPressed?: string | KeyHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | KeyHandler"},{"id":"Component.Initializer/Focus","name":"Focus","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":280,"code":"Focus?: string | ActionHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | ActionHandler"},{"id":"Component.Initializer/FocusGained","name":"FocusGained","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":284,"code":"FocusGained?: string | ActionHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | ActionHandler"},{"id":"Component.Initializer/FocusLost","name":"FocusLost","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":286,"code":"FocusLost?: string | ActionHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | ActionHandler"},{"id":"Component.Initializer/KeyDown","name":"KeyDown","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":276,"code":"KeyDown?: string | KeyHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | KeyHandler"},{"id":"Component.Initializer/KeyPress","name":"KeyPress","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":278,"code":"KeyPress?: string | KeyHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | KeyHandler"},{"id":"Component.Initializer/MouseContextMenu","name":"MouseContextMenu","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":274,"code":"MouseContextMenu?: string | PointerHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | PointerHandler"},{"id":"Component.Initializer/MouseEnter","name":"MouseEnter","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":270,"code":"MouseEnter?: string | PointerHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | PointerHandler"},{"id":"Component.Initializer/MouseLeave","name":"MouseLeave","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":272,"code":"MouseLeave?: string | PointerHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | PointerHandler"},{"id":"Component.Initializer/Press","name":"Press","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":266,"code":"Press?: string | PointerHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | PointerHandler"},{"id":"Component.Initializer/Pressed","name":"Pressed","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":268,"code":"Pressed?: string | PointerHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | PointerHandler"},{"id":"Component.Initializer/Rendered","name":"Rendered","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":256,"code":"Rendered?: string | ComponentRenderHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | ComponentRenderHandler"},{"id":"Component.Initializer/SpaceBarPressed","name":"SpaceBarPressed","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":298,"code":"SpaceBarPressed?: string | KeyHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | KeyHandler"},{"id":"Component.Initializer/animations","name":"animations","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":252,"code":"animations?: Component.Animations;","doc":"<p>Animations list (not observable, will overwrite all existing ones).</p>\n","declType":"Component.Animations"},{"id":"Component.Initializer/focusMode","name":"focusMode","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":250,"code":"focusMode?: UIValueOrAsync<FocusMode>;","doc":"<p>Property initializer: automatic focus management mode.</p>\n","declType":"UIValueOrAsync<FocusMode>"},{"id":"Component.Initializer/hasFocus","name":"hasFocus","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":248,"code":"hasFocus?: UIValueOrAsync<boolean>;","doc":"<p>Property initializer: true if component should be focused for input.</p>\n","declType":"UIValueOrAsync<boolean>"},{"id":"Component.Initializer/height","name":"height","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":232,"code":"height?: UIValueOrAsync<string>;","doc":"<p>Property initializer: target height (CSS length).</p>\n","declType":"UIValueOrAsync<string>"},{"id":"Component.Initializer/hidden","name":"hidden","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":242,"code":"hidden?: UIValueOrAsync<boolean>;","doc":"<p>Property initializer: true if component should be hidden.</p>\n","declType":"UIValueOrAsync<boolean>"},{"id":"Component.Initializer/id","name":"id","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":228,"code":"id?: string;","doc":"<p>Identifier, used to add a component reference to the base component (on which .with(…) or .initializeWith(…) was called) as a property with given identifier.</p>\n","declType":"string"},{"id":"Component.Initializer/renderOptions","name":"renderOptions","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":254,"code":"renderOptions?: ComponentRenderer.RenderOptions;","doc":"<p>Options for rendering this component (not observable).</p>\n","declType":"ComponentRenderer.RenderOptions"},{"id":"Component.Initializer/selected","name":"selected","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":244,"code":"selected?: UIValueOrAsync<boolean>;","doc":"<p>Property initializer: true if component should be selected.</p>\n","declType":"UIValueOrAsync<boolean>"},{"id":"Component.Initializer/selectionMode","name":"selectionMode","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":246,"code":"selectionMode?: UIValueOrAsync<SelectionMode>;","doc":"<p>Property initializer: automatic selection management mode.</p>\n","declType":"UIValueOrAsync<SelectionMode>"},{"id":"Component.Initializer/shadowEffect","name":"shadowEffect","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":236,"code":"shadowEffect?: UIValueOrAsync<number>;","doc":"<p>Property initializer: 0 (no shadow effect) - 1 (greatest effect).</p>\n","declType":"UIValueOrAsync<number>"},{"id":"Component.Initializer/shadowEffectOnFocus","name":"shadowEffectOnFocus","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":240,"code":"shadowEffectOnFocus?: number;","doc":"<p>Shadow effect when focused component or child: 0 (no shadow effect) - 1 (greatest effect).</p>\n","declType":"number"},{"id":"Component.Initializer/shadowEffectOnHover","name":"shadowEffectOnHover","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":238,"code":"shadowEffectOnHover?: number;","doc":"<p>Shadow effect when hovered over: 0 (no shadow effect) - 1 (greatest effect).</p>\n","declType":"number"},{"id":"Component.Initializer/style","name":"style","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":230,"code":"style?: UIValueOrAsync<Style | Style.StyleSet>;","doc":"<p>Style initializer: object or <code>Style</code> instance.</p>\n","declType":"UIValueOrAsync<Style | Style.StyleSet>"},{"id":"Component.Initializer/width","name":"width","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":234,"code":"width?: UIValueOrAsync<string>;","doc":"<p>Property initializer: target width (CSS length).</p>\n","declType":"UIValueOrAsync<string>"}]},{"id":"Component.addStyleOverride","name":"addStyleOverride","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":81,"code":"static addStyleOverride(style: Style): Style;","doc":"<p>Add a new style override to this component class (and derived classes); does not have any effect on existing component instances, but changes to previously added style overrides are always observed; returns given style instance.</p>\n","declType":"Style"},{"id":"Component.with","name":"with","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":11,"code":"static with: <T extends Component, InitializerT>(this: { new (): { initializeWith(initializer: InitializerT): T; }; }, values: InitializerT) => ComponentFactory<T>;","doc":"<p>Returns a component factory for this component type, with given (observable) property values; the result is an instance of <code>ComponentFactory</code>, which doubles as a pre-initialized component constructor; this method is only available on component classes that provide a parameterless constructor.</p>\n","declType":"<T extends Component, InitializerT>(this: {\r\n        new (): {\r\n            initializeWith(initializer: InitializerT): T;\r\n        };\r\n    }, values: InitializerT) => ComponentFactory<T>"},{"id":"Component.FocusMode","name":"FocusMode","isEnum":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":198,"code":"enum FocusMode","doc":"<p>Options for automatic focus management.</p>\n","isStatic":true,"items":[{"id":"Component.FocusMode.Auto","name":"Auto","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":204,"code":"enum FocusMode { ...Auto }","doc":"<p>Click, touch, or use keyboard (tab key) to focus.</p>\n"},{"id":"Component.FocusMode.Click","name":"Click","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":202,"code":"enum FocusMode { ...Click }","doc":"<p>Click or touch to focus.</p>\n"},{"id":"Component.FocusMode.Items","name":"Items","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":206,"code":"enum FocusMode { ...Items }","doc":"<p>Focus a child component on click, touch, or up/down arrow key press; child components with focus mode <code>None</code> are ignored.</p>\n"},{"id":"Component.FocusMode.None","name":"None","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":200,"code":"enum FocusMode { ...None }","doc":"<p>Unable to focus this component.</p>\n"}]},{"id":"Component.SelectionMode","name":"SelectionMode","isEnum":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":209,"code":"enum SelectionMode","doc":"<p>Options for automatic selection management.</p>\n","isStatic":true,"items":[{"id":"Component.SelectionMode.Click","name":"Click","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":215,"code":"enum SelectionMode { ...Click }","doc":"<p>Click or touch, or use space bar (while focused) to select.</p>\n"},{"id":"Component.SelectionMode.Focus","name":"Focus","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":213,"code":"enum SelectionMode { ...Focus }","doc":"<p>Focus to select.</p>\n"},{"id":"Component.SelectionMode.ItemClick","name":"ItemClick","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":219,"code":"enum SelectionMode { ...ItemClick }","doc":"<p>Select <em>one</em> child component on click or touch; set selection mode of child components to <code>Click</code> if undefined.</p>\n"},{"id":"Component.SelectionMode.ItemFocus","name":"ItemFocus","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":221,"code":"enum SelectionMode { ...ItemFocus }","doc":"<p>Select <em>one</em> child component on focus; set selection mode of child components to <code>Focus</code> if undefined; to be combined with focus mode <code>Items</code> for directional keyboard navigation.</p>\n"},{"id":"Component.SelectionMode.ItemToggle","name":"ItemToggle","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":223,"code":"enum SelectionMode { ...ItemToggle }","doc":"<p>Toggle selection on child components on click or touch, or space bar (while focused): set selection mode of child components to <code>Toggle</code> if undefined.</p>\n"},{"id":"Component.SelectionMode.None","name":"None","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":211,"code":"enum SelectionMode { ...None }","doc":"<p>Unable to select this component.</p>\n"},{"id":"Component.SelectionMode.Toggle","name":"Toggle","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":217,"code":"enum SelectionMode { ...Toggle }","doc":"<p>Click or touch, or use space bar (while focused) to toggle selection.</p>\n"}]},{"id":"Component.constructor","name":"new Component","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":9,"code":"constructor(...args: any[]);","doc":"<p>Abstract constructor with any number of arguments.</p>\n"},{"id":"Component/addShadowEffectOnFocus","name":"addShadowEffectOnFocus","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":98,"code":"addShadowEffectOnFocus(d: number): void;","doc":"<p>Override the drop shadow “depth” value while this component or a child component has input focus, with given number between 0 and 1.</p>\n","declType":"void"},{"id":"Component/addShadowEffectOnHover","name":"addShadowEffectOnHover","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":96,"code":"addShadowEffectOnHover(d: number): void;","doc":"<p>Override the drop shadow “depth” value while mouse cursor is hovering over this component, with given number between 0 and 1.</p>\n","declType":"void"},{"id":"Component/animate","name":"animate","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":51,"code":"animate<AnimationT extends Animation>(animation: AnimationT, continuous?: boolean, after?: () => void): Animation.AnimationControl<AnimationT>;\nanimate(animation: string, continuous?: boolean, after?: () => void): Animation.AnimationControl<Animation> | undefined;","doc":"<p>[1]. Play given animation on this component; returns the animation control instance, which can be used to stop the animation manually; given callback is called asynchronously after the animation completes.</p>\n<p>[2]. Play animation on this component (from <code>.animations</code>, by identifier); if found, returns the animation control instance, which can be used to stop the animation manually; given callback is called asynchronously after the animation completes.</p>\n","typeParams":["AnimationT extends Animation"],"declType":"Animation.AnimationControl<AnimationT> | Animation.AnimationControl<Animation> | undefined","count":2},{"id":"Component/animations","name":"animations","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":49,"code":"animations?: Component.Animations;","doc":"<p>Animation(s) to be played during the lifetime of this component on screen; initially undefined.</p>\n","declType":"Component.Animations"},{"id":"Component/focusMode","name":"focusMode","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":110,"code":"focusMode?: Component.FocusMode;","doc":"<p>Automatic focus management mode.</p>\n","declType":"Component.FocusMode"},{"id":"Component/getActualDimensions","name":"getActualDimensions","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":85,"code":"getActualDimensions(): { width: number; height: number; };","doc":"<p>Returns the current dimensions for this component, in logical (CSS) pixel units; may return 0x0 if this component is not yet displayed on screen (i.e. use the <code>.Rendered</code> signal and/or a timeout to obtain accurate results).</p>\n","declType":"{\r\n        width: number;\r\n        height: number;\r\n    }"},{"id":"Component/getChildren","name":"getChildren","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":29,"code":"getChildren(): Component[];","doc":"<p>Returns an array of directly contained components (observable).</p>\n","declType":"Component[]"},{"id":"Component/getComponentById","name":"getComponentById","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":35,"code":"getComponentById(id: string): Component | undefined;\ngetComponentById<C extends Component>(id: string, componentClass: typeof Component & { new (...p: any[]): C; }): C | undefined;","doc":"<p>[1]. Returns the nearest matching child element with given ID, if any (observable).</p>\n<p>[2]. Returns the nearest matching child element with given ID <em>and</em> that is an instance of given class, if any (observable).</p>\n","declType":"Component | undefined | C | undefined","count":2},{"id":"Component/getComponentsByType","name":"getComponentsByType","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":41,"code":"getComponentsByType<C extends Component>(componentClass: { new (...p: any[]): C; }): C[];","doc":"<p>Returns all (recursive) child components that are an instance of given class (observable).</p>\n","typeParams":["C extends Component"],"declType":"C[]"},{"id":"Component/getFormValues","name":"getFormValues","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":45,"code":"getFormValues(result?: {}): any;","doc":"<p>Returns an object containing all current values of input elements (observable).</p>\n"},{"id":"Component/getLastRenderedOutput","name":"getLastRenderedOutput","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":61,"code":"getLastRenderedOutput(): ComponentRenderer.Output<this, any> | undefined;","doc":"<p>Returns the last rendered output for this component, if any (value of <code>.out</code>); does not trigger a render.</p>\n","declType":"ComponentRenderer.Output<this, any> | undefined"},{"id":"Component/getLastSelectedChild","name":"getLastSelectedChild","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":33,"code":"getLastSelectedChild(): Component | undefined;","doc":"<p>Returns the last selected directly contained component (observable); evaluated asynchronously if automatic selection management mode is <code>ItemClick</code> or <code>ItemFocus</code>, otherwise evaluated synchronously from current selection status of child components.</p>\n","declType":"Component | undefined"},{"id":"Component/getRenderedOutputAsync","name":"getRenderedOutputAsync","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":59,"code":"getRenderedOutputAsync(): PromiseLike<ComponentRenderer.Output<this, any>>;","doc":"<p>Wait for this component to be rendered and return a promise for its output (value of <code>.out</code>), unless the component is already rendered, in which case this method returns a resolved promise for the last rendered output; never forces the component to be rendered.</p>\n","declType":"PromiseLike<ComponentRenderer.Output<this, any>>","isAsync":true},{"id":"Component/getSelectedChildren","name":"getSelectedChildren","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":31,"code":"getSelectedChildren(): Component[];","doc":"<p>Returns a list of currently selected directly contained components, in order of selection (observable).</p>\n","declType":"Component[]"},{"id":"Component/hasFocus","name":"hasFocus","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":112,"code":"hasFocus: boolean;","doc":"<p>True if this component <em>or</em> a child component has input focus, false otherwise; set to true to focus the component itself, if and when available (throws an exception if this component is unable to receive input focus); set to false to remove focus from this component.</p>\n","declType":"boolean"},{"id":"Component/height","name":"height","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":90,"code":"height: string;","doc":"<p>Overall target height of this component (CSS length; observable, directly modifies <code>.style</code> property, does <em>not</em> retrieve actual component height, may be “auto”).</p>\n","declType":"string"},{"id":"Component/hidden","name":"hidden","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":100,"code":"hidden: boolean;","doc":"<p>Set to true to hide this component (observable, directly modifies hidden state of <code>.style</code> and plays show/hide animations).</p>\n","declType":"boolean"},{"id":"Component/hoverState","name":"hoverState","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":116,"code":"readonly hoverState: boolean;","doc":"<p>True if the mouse cursor is hovering over this component, false otherwise; evaluated lazily using <code>.MouseEnter</code> and <code>.MouseLeave</code>, value is <code>false</code> initially until first signal is emitted after this property has been read once.</p>\n","declType":"boolean"},{"id":"Component/id","name":"id","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":25,"code":"id: string;","doc":"<p>Identifier string (optional), may be set by component factory constructor, and used with .getComponentById(…).</p>\n","declType":"string"},{"id":"Component/initialize","name":"initialize","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":19,"code":"initialize(): boolean;","doc":"<p>Force one-time initialization of this component, e.g. apply properties from the static property marked with the <code>@initializer</code> decorator, if any; called automatically just before rendering (unobserved), but can also be invoked manually if the initialized properties are required earlier, e.g. at the end of a constructor; only returns true if this instance was not already initialized.</p>\n","declType":"boolean"},{"id":"Component/initializeWith","name":"initializeWith","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":17,"code":"initializeWith: (values: Component.Initializer) => this;","doc":"<p>Initializes this instance with given properties; returns this.</p>\n","declType":"(values: Component.Initializer) => this"},{"id":"Component/out","name":"out","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":63,"code":"readonly out: ComponentRenderer.Output<this, any> | undefined;","doc":"<p>Rendered output for this component (observable); retrieving this value triggers a render operation, if it was not already subscribed to, e.g. if the component is displayed on screen; the renderer is lazily constructed from the class reference injected into the <code>.Renderer</code> property.</p>\n","declType":"ComponentRenderer.Output<this, any> | undefined"},{"id":"Component/render","name":"render","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":65,"code":"render(): ComponentRenderer.Output<this, any> | undefined;","doc":"<p>Render this component synchronously, always updating any existing rendered output; this method should <em>not</em> be used unless changes may have occurred outside of the observable context, otherwise read the value from <code>.out</code>, include it on a <code>Page</code>, or use the <code>.display()</code> method where available.</p>\n","declType":"ComponentRenderer.Output<this, any> | undefined"},{"id":"Component/renderOptions","name":"renderOptions","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":55,"code":"renderOptions?: ComponentRenderer.RenderOptions;","doc":"<p>Options for rendering this component (not observable); initially undefined.</p>\n","declType":"ComponentRenderer.RenderOptions"},{"id":"Component/selected","name":"selected","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":103,"code":"selected: boolean;","doc":"<p>Set to true to display this component in a selected state (observable, directly modifies selected state of <code>.style</code> and plays select/deselect animations).</p>\n","declType":"boolean"},{"id":"Component/selectionMode","name":"selectionMode","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":106,"code":"selectionMode?: Component.SelectionMode;","doc":"<p>Automatic selection management mode.</p>\n","declType":"Component.SelectionMode"},{"id":"Component/setFormValues","name":"setFormValues","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":47,"code":"setFormValues(values: any): void;","doc":"<p>Set all input values by element name.</p>\n","declType":"void"},{"id":"Component/shadowEffect","name":"shadowEffect","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":94,"code":"shadowEffect: number;","doc":"<p>Set to a number between 0 and 1 to add a drop shadow to this component (shadow “depth” of 1 creates the illusion of a component lifted off the canvas the furthest, 0 means no shadow at all; observable, directly adds shadow effect to <code>.style</code>).</p>\n","declType":"number"},{"id":"Component/style","name":"style","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":83,"code":"readonly style: Style;","doc":"<p>Read-only reference to an instance of <code>Style</code>, encapsulating CSS styles and classes for this component; for extensible component classes, do not override this property but use static method <code>.addStyleOverride(...)</code> instead.</p>\n","declType":"Style"},{"id":"Component/uid","name":"uid","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":27,"code":"readonly uid: string;","doc":"<p>Globally unique component identifier.</p>\n","declType":"string"},{"id":"Component/width","name":"width","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":92,"code":"width: string;","doc":"<p>Overall target width of this component (CSS length; observable, directly modifies <code>.style</code> property, does <em>not</em> retrieve actual component width, may be “auto”).</p>\n","declType":"string"},{"id":"Component/beforeFirstRender","name":"beforeFirstRender","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":71,"code":"protected beforeFirstRender(renderer: ComponentRenderer<this, any>): void;","doc":"<p>Method that is called immediately after the renderer for this component is constructed; override this method (and invoke <code>super.beforeFirstRender</code>) to be able to call or inject renderer methods before this component is first rendered.</p>\n","isProtected":true,"declType":"void"},{"id":"Component/defineComponentSignal","name":"defineComponentSignal","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":23,"code":"protected defineComponentSignal<DataT, SignalT extends typeof ComponentSignal>(base?: SignalT & (new (data: DataT) => ComponentSignal<DataT>), properties?: {}): ComponentSignal.Emittable<DataT, SignalT>;","doc":"<p>Returns a new component signal class specific to this component, with optional signal base class which must derive from ComponentSignal; can be used to define custom signals in a component constructor or public property initializer (or memoized get-accessor for lazy initialization); sets static property <code>ComponentSignal.component</code> of the derived signal class to the component instance, as well as any other static properties given.</p>\n","isProtected":true,"typeParams":["DataT","SignalT extends typeof ComponentSignal"],"declType":"ComponentSignal.Emittable<DataT, SignalT>"},{"id":"Component/Renderer","name":"Renderer","isProperty":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":57,"code":"protected Renderer: typeof ComponentRenderer;","doc":"<p>Primary renderer class for this component; injected globally on the component (sub) class, but can be overwritten by assigning to this property (observable).</p>\n","isProtected":true,"declType":"typeof ComponentRenderer"},{"id":"Component/ArrowDownKeyPressed","name":"ArrowDownKeyPressed","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":178,"code":"readonly ArrowDownKeyPressed: ComponentSignal.Emittable<KeyboardEvent, typeof KeyEventSignal>;","doc":"<p>Signal emitted after the down arrow/d-pad key is pressed (while focused); propagates from child components to parents, until a component consumes the event by connecting to this signal.</p>\n","declType":"ComponentSignal.Emittable<KeyboardEvent, typeof KeyEventSignal>","isSignal":true},{"id":"Component/ArrowLeftKeyPressed","name":"ArrowLeftKeyPressed","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":172,"code":"readonly ArrowLeftKeyPressed: ComponentSignal.Emittable<KeyboardEvent, typeof KeyEventSignal>;","doc":"<p>Signal emitted after the left arrow/d-pad key is pressed (while focused); propagates from child components to parents, until a component consumes the event by connecting to this signal.</p>\n","declType":"ComponentSignal.Emittable<KeyboardEvent, typeof KeyEventSignal>","isSignal":true},{"id":"Component/ArrowRightKeyPressed","name":"ArrowRightKeyPressed","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":176,"code":"readonly ArrowRightKeyPressed: ComponentSignal.Emittable<KeyboardEvent, typeof KeyEventSignal>;","doc":"<p>Signal emitted after the right arrow/d-pad key is pressed (while focused); propagates from child components to parents, until a component consumes the event by connecting to this signal.</p>\n","declType":"ComponentSignal.Emittable<KeyboardEvent, typeof KeyEventSignal>","isSignal":true},{"id":"Component/ArrowUpKeyPressed","name":"ArrowUpKeyPressed","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":174,"code":"readonly ArrowUpKeyPressed: ComponentSignal.Emittable<KeyboardEvent, typeof KeyEventSignal>;","doc":"<p>Signal emitted after the up arrow/d-pad key is pressed (while focused); propagates from child components to parents, until a component consumes the event by connecting to this signal.</p>\n","declType":"ComponentSignal.Emittable<KeyboardEvent, typeof KeyEventSignal>","isSignal":true},{"id":"Component/BackspaceKeyPressed","name":"BackspaceKeyPressed","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":166,"code":"readonly BackspaceKeyPressed: ComponentSignal.Emittable<KeyboardEvent, typeof KeyEventSignal>;","doc":"<p>Signal emitted after the backspace key is pressed (while focused); propagates from child components to parents, until a component consumes the event by connecting to this signal.</p>\n","declType":"ComponentSignal.Emittable<KeyboardEvent, typeof KeyEventSignal>","isSignal":true},{"id":"Component/Blur","name":"Blur","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":146,"code":"readonly Blur: ComponentSignal.Emittable<any, typeof ComponentSignal>;","doc":"<p>Signal emitted when this component <em>or</em> a child component loses focus; captured from containers down to contained components, not consumed.</p>\n","declType":"ComponentSignal.Emittable<any, typeof ComponentSignal>","isSignal":true},{"id":"Component/Click","name":"Click","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":122,"code":"readonly Click: ComponentSignal.Emittable<PointerEvent, typeof PointerEventSignal>;","doc":"<p>Signal emitted when this component <em>or</em> a child component is clicked, touched, or otherwise activated; captured from containers down to contained components, not consumed.</p>\n","declType":"ComponentSignal.Emittable<PointerEvent, typeof PointerEventSignal>","isSignal":true},{"id":"Component/Clicked","name":"Clicked","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":124,"code":"readonly Clicked: ComponentSignal.Emittable<PointerEvent, typeof PointerEventSignal>;","doc":"<p>Signal emitted asynchronously after this component <em>or</em> a child component is clicked, touched, or otherwise activated; propagates from child components to parents, until a component consumes the event by connecting to this signal.</p>\n","declType":"ComponentSignal.Emittable<PointerEvent, typeof PointerEventSignal>","isSignal":true},{"id":"Component/DeleteKeyPressed","name":"DeleteKeyPressed","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":168,"code":"readonly DeleteKeyPressed: ComponentSignal.Emittable<KeyboardEvent, typeof KeyEventSignal>;","doc":"<p>Signal emitted after the forward-delete key is pressed (while focused); propagates from child components to parents, until a component consumes the event by connecting to this signal.</p>\n","declType":"ComponentSignal.Emittable<KeyboardEvent, typeof KeyEventSignal>","isSignal":true},{"id":"Component/DoubleClick","name":"DoubleClick","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":126,"code":"readonly DoubleClick: ComponentSignal.Emittable<PointerEvent, typeof PointerEventSignal>;","doc":"<p>Signal emitted when this component <em>or</em> a child component is double-clicked; captured from containers down to contained components, not consumed.</p>\n","declType":"ComponentSignal.Emittable<PointerEvent, typeof PointerEventSignal>","isSignal":true},{"id":"Component/DoubleClicked","name":"DoubleClicked","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":128,"code":"readonly DoubleClicked: ComponentSignal.Emittable<PointerEvent, typeof PointerEventSignal>;","doc":"<p>Signal emitted asynchronously after this component <em>or</em> a child component is double-clicked; propagates from child components to parents, until a component consumes the event by connecting to this signal.</p>\n","declType":"ComponentSignal.Emittable<PointerEvent, typeof PointerEventSignal>","isSignal":true},{"id":"Component/DragDrop","name":"DragDrop","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":158,"code":"readonly DragDrop: ComponentSignal.Emittable<DragEvent, typeof DragEventSignal>;","doc":"<p>Signal emitted when this element or a child element is the target of a drop after a drag operation; captured from containers down to contained components, not consumed.</p>\n","declType":"ComponentSignal.Emittable<DragEvent, typeof DragEventSignal>","isSignal":true},{"id":"Component/DragEnter","name":"DragEnter","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":154,"code":"readonly DragEnter: ComponentSignal.Emittable<DragEvent, typeof DragEventSignal>;","doc":"<p>Signal emitted when a drag operation begins to hover over this component; captured from containers down to contained components, not consumable.</p>\n","declType":"ComponentSignal.Emittable<DragEvent, typeof DragEventSignal>","isSignal":true},{"id":"Component/DragLeave","name":"DragLeave","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":156,"code":"readonly DragLeave: ComponentSignal.Emittable<DragEvent, typeof DragEventSignal>;","doc":"<p>Signal emitted when a drag operation has left this component; captured from containers down to contained components, not consumable.</p>\n","declType":"ComponentSignal.Emittable<DragEvent, typeof DragEventSignal>","isSignal":true},{"id":"Component/DragStart","name":"DragStart","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":152,"code":"readonly DragStart: ComponentSignal.Emittable<DragEvent, typeof DragEventSignal>;","doc":"<p>Signal emitted when this component <em>or</em> a child component commences a drag operation; captured from containers down to contained components, not consumed.</p>\n","declType":"ComponentSignal.Emittable<DragEvent, typeof DragEventSignal>","isSignal":true},{"id":"Component/EnterKeyPressed","name":"EnterKeyPressed","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":162,"code":"readonly EnterKeyPressed: ComponentSignal.Emittable<KeyboardEvent, typeof KeyEventSignal>;","doc":"<p>Signal emitted after the enter key is pressed (while focused); propagates from child components to parents, until a component consumes the event by connecting to this signal.</p>\n","declType":"ComponentSignal.Emittable<KeyboardEvent, typeof KeyEventSignal>","isSignal":true},{"id":"Component/EscapeKeyPressed","name":"EscapeKeyPressed","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":170,"code":"readonly EscapeKeyPressed: ComponentSignal.Emittable<KeyboardEvent, typeof KeyEventSignal>;","doc":"<p>Signal emitted after the escape key is pressed (while focused); propagates from child components to parents, until a component consumes the event by connecting to this signal.</p>\n","declType":"ComponentSignal.Emittable<KeyboardEvent, typeof KeyEventSignal>","isSignal":true},{"id":"Component/Focus","name":"Focus","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":144,"code":"readonly Focus: ComponentSignal.Emittable<any, typeof ComponentSignal>;","doc":"<p>Signal emitted when this component <em>or</em> a child component receives focus; captured from containers down to contained components, not consumed.</p>\n","declType":"ComponentSignal.Emittable<any, typeof ComponentSignal>","isSignal":true},{"id":"Component/FocusGained","name":"FocusGained","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":148,"code":"readonly FocusGained: ComponentSignal.Emittable<any, typeof ComponentSignal>;","doc":"<p>Signal emitted asynchronously after this component receives focus; propagates from child components to parents, until a component consumes the event by connecting to this signal.</p>\n","declType":"ComponentSignal.Emittable<any, typeof ComponentSignal>","isSignal":true},{"id":"Component/FocusLost","name":"FocusLost","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":150,"code":"readonly FocusLost: ComponentSignal.Emittable<any, typeof ComponentSignal>;","doc":"<p>Signal emitted asynchronously after this component loses focus, and only if <code>.FocusGained</code> was emitted previously; propagates from child components to parents, not consumable.</p>\n","declType":"ComponentSignal.Emittable<any, typeof ComponentSignal>","isSignal":true},{"id":"Component/KeyDown","name":"KeyDown","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":140,"code":"readonly KeyDown: ComponentSignal.Emittable<KeyboardEvent, typeof KeyEventSignal>;","doc":"<p>Signal emitted when a key is pressed down (while this component <em>or</em> a child component is focused); captured from containers down to contained components, not consumed.</p>\n","declType":"ComponentSignal.Emittable<KeyboardEvent, typeof KeyEventSignal>","isSignal":true},{"id":"Component/KeyPress","name":"KeyPress","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":142,"code":"readonly KeyPress: ComponentSignal.Emittable<KeyboardEvent, typeof KeyEventSignal>;","doc":"<p>Signal emitted after a key is pressed (while this component <em>or</em> a child component is focused); captured from containers down to contained components, not consumed.</p>\n","declType":"ComponentSignal.Emittable<KeyboardEvent, typeof KeyEventSignal>","isSignal":true},{"id":"Component/MouseContextMenu","name":"MouseContextMenu","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":138,"code":"readonly MouseContextMenu: ComponentSignal.Emittable<PointerEvent, typeof PointerEventSignal>;","doc":"<p>Signal emitted when a context menu is requested for this component or a child component (usually by right-clicking); captured from containers down to contained components, not consumed.</p>\n","declType":"ComponentSignal.Emittable<PointerEvent, typeof PointerEventSignal>","isSignal":true},{"id":"Component/MouseEnter","name":"MouseEnter","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":134,"code":"readonly MouseEnter: ComponentSignal.Emittable<PointerEvent, typeof PointerEventSignal>;","doc":"<p>Signal emitted when the cursor begins to hover over this component; captured from containers down to contained components, not consumed.</p>\n","declType":"ComponentSignal.Emittable<PointerEvent, typeof PointerEventSignal>","isSignal":true},{"id":"Component/MouseLeave","name":"MouseLeave","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":136,"code":"readonly MouseLeave: ComponentSignal.Emittable<PointerEvent, typeof PointerEventSignal>;","doc":"<p>Signal emitted when the cursor has left this component; captured from containers down to contained components, not consumed.</p>\n","declType":"ComponentSignal.Emittable<PointerEvent, typeof PointerEventSignal>","isSignal":true},{"id":"Component/Press","name":"Press","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":130,"code":"readonly Press: ComponentSignal.Emittable<PointerEvent, typeof PointerEventSignal>;","doc":"<p>Signal emitted when a mouse button is pressed down, or a touch occurs, on this component <em>or</em> a child component; captured from containers down to contained components, not consumed.</p>\n","declType":"ComponentSignal.Emittable<PointerEvent, typeof PointerEventSignal>","isSignal":true},{"id":"Component/Pressed","name":"Pressed","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":132,"code":"readonly Pressed: ComponentSignal.Emittable<PointerEvent, typeof PointerEventSignal>;","doc":"<p>Signal emitted asynchronously after a mouse button is pressed down, or a touch occurs, on this component <em>or</em> a child component; propagates from child components to parents, until a component consumes the event by connecting to this signal.</p>\n","declType":"ComponentSignal.Emittable<PointerEvent, typeof PointerEventSignal>","isSignal":true},{"id":"Component/Rendered","name":"Rendered","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":67,"code":"readonly Rendered: ComponentSignal.Emittable<ComponentRenderer.Output<any, any>, typeof ComponentRenderSignal>;","doc":"<p>Signal emitted after updating DOM (render).</p>\n","declType":"ComponentSignal.Emittable<ComponentRenderer.Output<any, any>, typeof ComponentRenderSignal>","isSignal":true},{"id":"Component/SpaceBarPressed","name":"SpaceBarPressed","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Component.d.ts","line":164,"code":"readonly SpaceBarPressed: ComponentSignal.Emittable<KeyboardEvent, typeof KeyEventSignal>;","doc":"<p>Signal emitted after the space bar is pressed (while focused); propagates from child components to parents, until a component consumes the event by connecting to this signal.</p>\n","declType":"ComponentSignal.Emittable<KeyboardEvent, typeof KeyEventSignal>","isSignal":true}],"isNamespace":true,"sourceIdx":25},{"id":"ComponentFactory","name":"ComponentFactory","isInterface":true,"file":"./packages/ui/typings/UI/Components/ComponentFactory.d.ts","line":7,"code":"interface ComponentFactory<T extends Component>","doc":"<p>Component factory class: constructor creates and initializes a Component.</p>\n","typeParams":["T extends Component"],"items":[{"id":"ComponentFactory.applyAsync","name":"applyAsync","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/ComponentFactory.d.ts","line":53,"code":"function applyAsync(target: any, key: string): void;","doc":"<p><em>Property decorator</em> for a property for which values from an initializer spec should be applied asynchronously (using an <code>Async.defer(...)</code> call), instead of being set directly [decorator].</p>\n","declType":"void"},{"id":"ComponentFactory.applyComponentRef","name":"applyComponentRef","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/ComponentFactory.d.ts","line":51,"code":"function applyComponentRef(type: ComponentFactory.CLevel): (target: any, key: string) => void;","doc":"<p><em>Property decorator</em> for a property where values from an initializer spec should be applied as a reference to a component of given type (e.g. <code>Block</code>, <code>ControlElement</code>); the factory will then expand/wrap objects, factories, classes, and components into the correct type [decorator].</p>\n","declType":"(target: any, key: string) => void"},{"id":"ComponentFactory.applyComponentsArray","name":"applyComponentsArray","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/ComponentFactory.d.ts","line":49,"code":"function applyComponentsArray(type: ComponentFactory.CLevel): (target: any, key: string) => void;","doc":"<p><em>Property decorator</em> for a property where values from an initializer spec should be applied as an (observable) array of components of given type (e.g. <code>Block</code>, <code>ControlElement</code>, <code>TableRow</code>); the factory will then expand/wrap regular and observable arrays of objects, factories, classes, or components into the correct type [decorator].</p>\n","declType":"(target: any, key: string) => void"},{"id":"ComponentFactory.setterFor","name":"setterFor","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/ComponentFactory.d.ts","line":55,"code":"function setterFor(initializerPropertyName: string): MethodDecorator;","doc":"<p><em>Method decorator</em> for the method that should be called to apply the value of an initializer spec property with the given property name; the method should always accept values as well as instances of <code>Async.ObservableValue</code> [decorator].</p>\n","declType":"MethodDecorator"},{"id":"ComponentFactory.CLevel","name":"CLevel","isEnum":true,"file":"./packages/ui/typings/UI/Components/ComponentFactory.d.ts","line":41,"code":"enum CLevel","doc":"<p>Choices for the level at which components in (array) properties are expected to be; used by factory to expand/wrap initializer property values before storing them in a property decorated with <code>applyComponentsArray</code> or <code>applyComponentRef</code>.</p>\n","isStatic":true,"items":[{"id":"ComponentFactory.CLevel.Block","name":"Block","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/ComponentFactory.d.ts","line":43,"code":"enum CLevel { ...Block }","doc":"<p>No description</p>\n"},{"id":"ComponentFactory.CLevel.Container","name":"Container","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/ComponentFactory.d.ts","line":42,"code":"enum CLevel { ...Container }","doc":"<p>No description</p>\n"},{"id":"ComponentFactory.CLevel.ControlElement","name":"ControlElement","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/ComponentFactory.d.ts","line":44,"code":"enum CLevel { ...ControlElement }","doc":"<p>No description</p>\n"},{"id":"ComponentFactory.CLevel.TableHeader","name":"TableHeader","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/ComponentFactory.d.ts","line":46,"code":"enum CLevel { ...TableHeader }","doc":"<p>No description</p>\n"},{"id":"ComponentFactory.CLevel.TableRow","name":"TableRow","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/ComponentFactory.d.ts","line":45,"code":"enum CLevel { ...TableRow }","doc":"<p>No description</p>\n"}]},{"id":"ComponentFactory.SpecElt","name":"SpecElt","isType":true,"file":"./packages/ui/typings/UI/Components/ComponentFactory.d.ts","line":25,"code":"type SpecElt = UIValueOrAsync<ComponentFactory<Component> | TextLabelFactory | Component | typeof Component | undefined>;","doc":"<p>A factory initializer element (e.g. control element).</p>\n","isStatic":true,"declType":"UIValueOrAsync<ComponentFactory<Component> | TextLabelFactory | Component | typeof Component | undefined>"},{"id":"ComponentFactory.SpecEltOrList","name":"SpecEltOrList","isType":true,"file":"./packages/ui/typings/UI/Components/ComponentFactory.d.ts","line":33,"code":"type SpecEltOrList = UIValueOrAsync<SpecElt | Array<SpecElt>>;","doc":"<p>A list of factory initializer elements, or a single element.</p>\n","isStatic":true,"declType":"UIValueOrAsync<SpecElt | Array<SpecElt>>"},{"id":"ComponentFactory.SpecEltOrListTCol","name":"SpecEltOrListTCol","isType":true,"file":"./packages/ui/typings/UI/Components/ComponentFactory.d.ts","line":35,"code":"type SpecEltOrListTCol = UIValueOrAsync<SpecEltTCol | Array<SpecEltTCol>>;","doc":"<p>A list of factory initializer elements, or a single element; or table content.</p>\n","isStatic":true,"declType":"UIValueOrAsync<SpecEltTCol | Array<SpecEltTCol>>"},{"id":"ComponentFactory.SpecEltTCol","name":"SpecEltTCol","isType":true,"file":"./packages/ui/typings/UI/Components/ComponentFactory.d.ts","line":27,"code":"type SpecEltTCol = UIValueOrAsync<ComponentFactory<Component> | TextLabelFactory | Component | typeof Component | string | number | undefined>;","doc":"<p>A factory initializer element (e.g. control element) or table content.</p>\n","isStatic":true,"declType":"UIValueOrAsync<ComponentFactory<Component> | TextLabelFactory | Component | typeof Component | string | number | undefined>"},{"id":"ComponentFactory.SpecList","name":"SpecList","isType":true,"file":"./packages/ui/typings/UI/Components/ComponentFactory.d.ts","line":29,"code":"type SpecList = UIValueOrAsync<Array<SpecElt>>;","doc":"<p>A list of factory initializer elements (e.g. row).</p>\n","isStatic":true,"declType":"UIValueOrAsync<Array<SpecElt>>"},{"id":"ComponentFactory.SpecList2","name":"SpecList2","isType":true,"file":"./packages/ui/typings/UI/Components/ComponentFactory.d.ts","line":37,"code":"type SpecList2 = UIValueOrAsync<Array<SpecEltOrList>>;","doc":"<p>A list of (lists of) factory initializer elements.</p>\n","isStatic":true,"declType":"UIValueOrAsync<Array<SpecEltOrList>>"},{"id":"ComponentFactory.SpecList2TCol","name":"SpecList2TCol","isType":true,"file":"./packages/ui/typings/UI/Components/ComponentFactory.d.ts","line":39,"code":"type SpecList2TCol = UIValueOrAsync<Array<SpecEltOrListTCol>>;","doc":"<p>A list of (lists of) factory initializer elements or table content.</p>\n","isStatic":true,"declType":"UIValueOrAsync<Array<SpecEltOrListTCol>>"},{"id":"ComponentFactory.SpecListTCol","name":"SpecListTCol","isType":true,"file":"./packages/ui/typings/UI/Components/ComponentFactory.d.ts","line":31,"code":"type SpecListTCol = UIValueOrAsync<Array<SpecEltTCol>>;","doc":"<p>A list of factory initializer elements (e.g. row) or table content.</p>\n","isStatic":true,"declType":"UIValueOrAsync<Array<SpecEltTCol>>"},{"id":"ComponentFactory.constructor","name":"new","hasParams":false,"isCtor":true,"file":"./packages/ui/typings/UI/Components/ComponentFactory.d.ts","line":15,"code":"new (): T;","doc":"<p>Contruct the component with all properties contained in this factory.</p>\n","declType":"T"},{"id":"ComponentFactory/applyTo","name":"applyTo","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/ComponentFactory.d.ts","line":21,"code":"applyTo(component: T): T;","doc":"<p>Apply the properties from this factory to the given (existing) component; returns the component itself.</p>\n","declType":"T"},{"id":"ComponentFactory/create","name":"create","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Components/ComponentFactory.d.ts","line":19,"code":"create(): T;","doc":"<p>Creates an instance (same as using constructor, but can be chained).</p>\n","declType":"T"},{"id":"ComponentFactory/target","name":"target","isProperty":true,"file":"./packages/ui/typings/UI/Components/ComponentFactory.d.ts","line":9,"code":"target: { new (): T; };","doc":"<p>Component class that this factory was created from.</p>\n","declType":"{\r\n        new (): T;\r\n    }"},{"id":"ComponentFactory/uid","name":"uid","isProperty":true,"file":"./packages/ui/typings/UI/Components/ComponentFactory.d.ts","line":13,"code":"uid: string;","doc":"<p>Unique factory identifier.</p>\n","declType":"string"},{"id":"ComponentFactory/with","name":"with","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/ComponentFactory.d.ts","line":17,"code":"with(initializer: any): this;","doc":"<p>Initializes more properties using given values; returns this.</p>\n","declType":"this"}],"isNamespace":true,"sourceIdx":27,"text":[{"title":"","content":"<p>Result of various static <code>.with*</code> methods. See <code>Component.with</code>.</p>\n"},{"title":"Note","type":"note","content":"<p>You cannot create ComponentFactory instances directly; instead, use <code>.with*</code> methods to create factories, and apply them as initializers (see <code>Component/initializeWith</code> and <code>initializer</code>).</p>\n"}]},{"id":"ComponentRenderHandler","name":"ComponentRenderHandler","isClass":true,"file":"./packages/ui/typings/UI/Components/ComponentRenderer.d.ts","line":49,"code":"class ComponentRenderHandler extends ComponentSignalHandler<ComponentRenderer.Output<Component, any>, typeof ComponentRenderSignal>","doc":"<p>Constructor for a component render event handler.</p>\n","extends":["ComponentSignalHandler"],"items":[],"sourceIdx":31,"inherits":["ComponentSignalHandler.!call","ComponentSignalHandler/connectTo","ComponentSignalHandler/isEventHandler"]},{"id":"ComponentRenderSignal","name":"ComponentRenderSignal","isClass":true,"file":"./packages/ui/typings/UI/Components/ComponentRenderer.d.ts","line":45,"code":"class ComponentRenderSignal<ComponentT extends Component, ElementT> extends ComponentSignal<ComponentRenderer.Output<ComponentT, ElementT>>","doc":"<p>Signal that is emitted when a component updates its rendered output.</p>\n","extends":["ComponentSignal"],"typeParams":["ComponentT extends Component","ElementT"],"items":[{"id":"ComponentRenderSignal.renderer","name":"renderer","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Components/ComponentRenderer.d.ts","line":46,"code":"static renderer: ComponentRenderer<Component, any>;","doc":"<p>No description</p>\n","declType":"ComponentRenderer<Component, any>"}],"sourceIdx":30},{"id":"ComponentRenderer","name":"ComponentRenderer","isClass":true,"file":"./packages/ui/typings/UI/Components/ComponentRenderer.d.ts","line":4,"code":"class ComponentRenderer<ComponentT extends Component, ElementT>","doc":"<p>Class that contains the code necessary to render a component; to retrieve rendering output, Component methods only use the <code>.output</code> property, which is an ObservableValue instance that is populated using the (protected) <code>.render</code> method.</p>\n","typeParams":["ComponentT extends Component","ElementT"],"items":[{"id":"ComponentRenderer.Output","name":"Output","isClass":true,"file":"./packages/ui/typings/UI/Components/ComponentRenderer.d.ts","line":20,"code":"class Output<ComponentT extends Component, ElementT>","doc":"<p>Encapsulates output for a rendered component; class type parameters indicate the type of component rendered, and the output type (e.g. HTMLElement).</p>\n","isStatic":true,"typeParams":["ComponentT extends Component","ElementT"],"items":[{"id":"ComponentRenderer.Output.constructor","name":"new Output","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/ComponentRenderer.d.ts","line":22,"code":"constructor(component: ComponentT, element: ElementT, context?: any);","doc":"<p>Create a new instance for given component, with given element (should not be undefined).</p>\n"},{"id":"ComponentRenderer.Output/component","name":"component","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/ComponentRenderer.d.ts","line":24,"code":"readonly component: ComponentT;","doc":"<p>The component that the output is generated for.</p>\n","declType":"ComponentT"},{"id":"ComponentRenderer.Output/element","name":"element","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/ComponentRenderer.d.ts","line":26,"code":"readonly element: ElementT;","doc":"<p>Reference to the actual output (e.g. DOM element).</p>\n","declType":"ElementT"},{"id":"ComponentRenderer.Output/isComponentOutput","name":"isComponentOutput","isProperty":true,"file":"./packages/ui/typings/UI/Components/ComponentRenderer.d.ts","line":34,"code":"isComponentOutput: true;","doc":"<p>Flag that can be used for duck typing.</p>\n","declType":"true"},{"id":"ComponentRenderer.Output/liveElement","name":"liveElement","isProperty":true,"file":"./packages/ui/typings/UI/Components/ComponentRenderer.d.ts","line":30,"code":"liveElement?: ElementT;","doc":"<p>Reference to a (sub) element that should be used to register event handlers, if different from main element (otherwise undefined).</p>\n","declType":"ElementT"},{"id":"ComponentRenderer.Output/updated","name":"updated","isProperty":true,"file":"./packages/ui/typings/UI/Components/ComponentRenderer.d.ts","line":32,"code":"updated?: PromiseLike<any>;","doc":"<p>If defined, a promise that resolves the next time the content of the rendered output element is generated (drawn on screen <em>if</em> the parent output element is also already on screen).</p>\n","declType":"PromiseLike<any>","isAsync":true},{"id":"ComponentRenderer.Output/wrapper","name":"wrapper","isProperty":true,"file":"./packages/ui/typings/UI/Components/ComponentRenderer.d.ts","line":28,"code":"wrapper?: ElementT;","doc":"<p>Reference to an element that wraps around the output element, that should be included by the parent element instead (or undefined).</p>\n","declType":"ElementT"}]},{"id":"ComponentRenderer.RenderOptions","name":"RenderOptions","isInterface":true,"file":"./packages/ui/typings/UI/Components/ComponentRenderer.d.ts","line":37,"code":"interface RenderOptions","doc":"<p>Options for rendering (child) components.</p>\n","isStatic":true,"items":[{"id":"ComponentRenderer.RenderOptions/animateListItems","name":"animateListItems","isProperty":true,"file":"./packages/ui/typings/UI/Components/ComponentRenderer.d.ts","line":41,"code":"animateListItems?: number;","doc":"<p>Set to a value in milliseconds to animate <em>child component</em> positioning for the given duration, if possible; only works with lists and tables, and may require synchronous rendering of child components (i.e. set <code>.synchronous</code> on list items).</p>\n","declType":"number"},{"id":"ComponentRenderer.RenderOptions/synchronous","name":"synchronous","isProperty":true,"file":"./packages/ui/typings/UI/Components/ComponentRenderer.d.ts","line":39,"code":"synchronous?: boolean;","doc":"<p>Set to true to force synchronous rendering for this component.</p>\n","declType":"boolean"}]},{"id":"ComponentRenderer.constructor","name":"new ComponentRenderer","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/ComponentRenderer.d.ts","line":6,"code":"constructor(component: ComponentT);","doc":"<p>Create a new renderer instance for given component.</p>\n"},{"id":"ComponentRenderer/component","name":"component","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/ComponentRenderer.d.ts","line":8,"code":"readonly component: ComponentT;","doc":"<p>The component that this renderer renders.</p>\n","declType":"ComponentT"},{"id":"ComponentRenderer/output","name":"output","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/ComponentRenderer.d.ts","line":10,"code":"readonly output: Async.ObservableValue<ComponentRenderer.Output<ComponentT, ElementT> | undefined>;","doc":"<p>An observable value containing the rendered output, if any; used by the Component rendering methods to retrieve output; this property should <em>not</em> be overridden, override the protected <code>.render</code> method instead and/or use the <code>.watch</code> method to add partial rendering code.</p>\n","declType":"Async.ObservableValue<ComponentRenderer.Output<ComponentT, ElementT> | undefined>"},{"id":"ComponentRenderer/watch","name":"watch","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/ComponentRenderer.d.ts","line":16,"code":"watch<T>(getter: (this: this) => T, map?: (this: this, value: T) => void): void;","doc":"<p>Add a method that will be called (synchronously and asynchronously) from a new observable context, after previously added methods, immediately <em>after</em> the <code>.render</code> method has run once, along with an optional method that will be called (synchronously, unobserved) with the result of the first method; i.e. observable values used in the first method will be subscribed to while the output is subscribed to, but changes to these values will never trigger re-rendering the entire component – instead, the second function is invoked; useful for partially updating existing output using a subset of component properties; should be called <em>before</em> rendering takes place.</p>\n","typeParams":["T"],"declType":"void"},{"id":"ComponentRenderer/render","name":"render","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Components/ComponentRenderer.d.ts","line":14,"code":"protected render(): ComponentRenderer.Output<ComponentT, ElementT> | undefined;","doc":"<p>Component renderer function; to be overridden, <em>must</em> be a pure function, based on the current <code>.component</code> and <code>.output</code> properties (otherwise <em>creating</em> or <em>setting</em> ObservableValue instances should be done within a function that is passed to <code>unobserved</code>).</p>\n","isProtected":true,"declType":"ComponentRenderer.Output<ComponentT, ElementT> | undefined"},{"id":"ComponentRenderer/Rendered","name":"Rendered","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/ComponentRenderer.d.ts","line":12,"code":"readonly Rendered: ComponentSignal.Emittable<ComponentRenderer.Output<ComponentT, ElementT>, typeof ComponentRenderSignal>;","doc":"<p>Signal that is emitted after updating <code>.output</code> (but not if undefined) and/or when the <code>updated</code> promise on the rendered output is resolved.</p>\n","declType":"ComponentSignal.Emittable<ComponentRenderer.Output<ComponentT, ElementT>, typeof ComponentRenderSignal>","isSignal":true}],"isNamespace":true,"sourceIdx":29},{"id":"ComponentSignal","name":"ComponentSignal","isClass":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":4,"code":"class ComponentSignal<DataT> extends Async.Signal<DataT>","doc":"<p>Signal that is emitted by a component instance as the result of a user action.</p>\n","extends":["Async.Signal"],"typeParams":["DataT"],"items":[{"id":"ComponentSignal.Emittable","name":"Emittable","isInterface":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":10,"code":"interface Emittable<T, SignalClassT extends typeof ComponentSignal> extends Async.Signal.Emittable<T, SignalClassT>","doc":"<p>Type definition for a callable (emittable) component signal <em>class</em>; the type parameters represent handler function arguments: signal payload, and emitted signal base class, which has a static <code>component</code> property that refers to the emitting component.</p>\n","isStatic":true,"extends":["Async.Signal.Emittable"],"typeParams":["T","SignalClassT extends typeof ComponentSignal"],"items":[{"id":"ComponentSignal.Emittable.!call","name":"<call>","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":12,"code":"(data?: T): void;","doc":"<p>Emit a signal with given value, for the component this signal is attached to.</p>\n","declType":"void"},{"id":"ComponentSignal.Emittable/component","name":"component","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":14,"code":"readonly component: Component;","doc":"<p>Component for which this signal will be emitted.</p>\n","declType":"Component"}]},{"id":"ComponentSignal.component","name":"component","isStatic":true,"isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":6,"code":"static readonly component: Component;","doc":"<p>Component for which this signal will be emitted.</p>\n","declType":"Component"}],"isNamespace":true,"sourceIdx":33},{"id":"ComponentSignalHandler","name":"ComponentSignalHandler","isInterface":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":18,"code":"interface ComponentSignalHandler<DataT, SignalClassT extends typeof ComponentSignal> extends Function","doc":"<p>Abstract wrapper for a handler that can connect to signals derived from <code>ComponentSignal</code>; used for automatic type inference of signal handlers.</p>\n","extends":["Function"],"typeParams":["DataT","SignalClassT extends typeof ComponentSignal"],"items":[{"id":"ComponentSignalHandler.!call","name":"<call>","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":20,"code":"(data?: DataT, src?: SignalClassT): void;","doc":"<p>Call the handler as a function.</p>\n","declType":"void"},{"id":"ComponentSignalHandler/connectTo","name":"connectTo","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":22,"code":"connectTo(signal: ComponentSignal.Emittable<DataT, SignalClassT>): Async.SignalConnection;","doc":"<p>Add this EventHandler as a handler for given event signal.</p>\n","declType":"Async.SignalConnection","text":[{"title":"","content":"<p>This method is used by component factories to connect handlers to signals.</p>\n"}],"sourceIdx":106},{"id":"ComponentSignalHandler/isEventHandler","name":"isEventHandler","isProperty":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":24,"code":"isEventHandler: true;","doc":"<p>Always true, for duck typing wrapped handlers.</p>\n","declType":"true"}],"sourceIdx":34},{"id":"ConfirmationDialog","name":"ConfirmationDialog","isClass":true,"file":"./packages/ui/typings/UI/Components/Composite/ConfirmationDialog.d.ts","line":5,"code":"class ConfirmationDialog extends DialogContainer","doc":"<p>Represents a generic confirmation dialog with Confirm and Cancel options, contains either a single Paragraph component, or a stack initialized with given texts; emits Confirmed signal when confirm button is clicked.</p>\n","extends":["DialogContainer"],"items":[{"id":"ConfirmationDialog.initializer","name":"initializer","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Components/Composite/ConfirmationDialog.d.ts","line":6,"code":"static initializer: ComponentFactory<DialogContainer>;","doc":"<p>No description</p>\n","declType":"ComponentFactory<DialogContainer>"},{"id":"ConfirmationDialog.constructor","name":"new ConfirmationDialog","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Composite/ConfirmationDialog.d.ts","line":8,"code":"constructor(headerText: string | TextLabelFactory, messageText: string | TextLabelFactory, confirmButtonLabel?: string | TextLabelFactory, cancelButtonLabel?: string | TextLabelFactory);\nconstructor(headerText: string | TextLabelFactory, messageTexts: Array<string | TextLabelFactory>, confirmButtonLabel?: string | TextLabelFactory, cancelButtonLabel?: string | TextLabelFactory);","doc":"<p>[1]. Create a confirmation dialog with given text.</p>\n<p>[2]. Create a confirmation dialog with given texts stacked vertically.</p>\n","count":2},{"id":"ConfirmationDialog/cancelButtonLabel","name":"cancelButtonLabel","isProperty":true,"file":"./packages/ui/typings/UI/Components/Composite/ConfirmationDialog.d.ts","line":18,"code":"cancelButtonLabel: string | TextLabelFactory;","doc":"<p>The cancellation button label (defaults to Cancel).</p>\n","declType":"string | TextLabelFactory"},{"id":"ConfirmationDialog/confirmButtonLabel","name":"confirmButtonLabel","isProperty":true,"file":"./packages/ui/typings/UI/Components/Composite/ConfirmationDialog.d.ts","line":16,"code":"confirmButtonLabel: string | TextLabelFactory;","doc":"<p>The confirmation button label (defaults to Confirm).</p>\n","declType":"string | TextLabelFactory"},{"id":"ConfirmationDialog/headerText","name":"headerText","isProperty":true,"file":"./packages/ui/typings/UI/Components/Composite/ConfirmationDialog.d.ts","line":12,"code":"headerText?: string | TextLabelFactory;","doc":"<p>Dialog header text, if any.</p>\n","declType":"string | TextLabelFactory"},{"id":"ConfirmationDialog/messageText","name":"messageText","isProperty":true,"file":"./packages/ui/typings/UI/Components/Composite/ConfirmationDialog.d.ts","line":14,"code":"messageText: string | TextLabelFactory | Array<string | TextLabelFactory>;","doc":"<p>One or more lines of text to be displayed as main content.</p>\n","declType":"string | TextLabelFactory | Array<string | TextLabelFactory>"},{"id":"ConfirmationDialog/Confirmed","name":"Confirmed","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Composite/ConfirmationDialog.d.ts","line":20,"code":"readonly Confirmed: ComponentSignal.Emittable<{}, typeof ComponentSignal>;","doc":"<p>Signal that is emitted when the confirm button has been clicked.</p>\n","declType":"ComponentSignal.Emittable<{}, typeof ComponentSignal>","isSignal":true}],"sourceIdx":45,"inherits":["Component.addStyleOverride","Container.withContent","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","DialogContainer/close","Container/content","Container/display","DialogContainer/displayOptions","Component/focusMode","DialogContainer/footer","Component/getActualDimensions","DialogContainer/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Container/hasEmptyList","Component/hasFocus","DialogContainer/header","Component/height","Component/hidden","Container/horzAlign","Component/hoverState","Component/id","Component/initialize","DialogContainer/initializeWith","Container/maxContentWidth","Component/out","Component/render","Component/renderOptions","Container/scrollBottomThreshold","Container/scrollTopThreshold","Container/scrollable","Container/scrolledToBottom","Container/scrolledToLeft","Container/scrolledToRight","Container/scrolledToTop","Component/selected","Component/selectionMode","DialogContainer/setDragHandle","Component/setFormValues","Component/shadowEffect","Component/style","Component/uid","Container/vertAlign","Component/width","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","DialogContainer/Closed","DialogContainer/Closing","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"Container","name":"Container","isClass":true,"file":"./packages/ui/typings/UI/Components/Containers/Container.d.ts","line":5,"code":"class Container extends Component","doc":"<p>Represents a container with vertically stacked blocks.</p>\n","extends":["Component"],"items":[{"id":"Container.Initializer","name":"Initializer","isInterface":true,"file":"./packages/ui/typings/UI/Components/Containers/Container.d.ts","line":55,"code":"interface Initializer extends Component.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["Component.Initializer"],"items":[{"id":"Container.Initializer/content","name":"content","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/Container.d.ts","line":57,"code":"content?: ComponentFactory.SpecList2;","doc":"<p>Property initializer: content blocks.</p>\n","declType":"ComponentFactory.SpecList2"},{"id":"Container.Initializer/displayOptions","name":"displayOptions","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/Container.d.ts","line":71,"code":"displayOptions?: Page.DisplayOptions;","doc":"<p>Property initializer: display options (for use when displayed directly on the page).</p>\n","declType":"Page.DisplayOptions"},{"id":"Container.Initializer/focusFirst","name":"focusFirst","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/Container.d.ts","line":73,"code":"focusFirst?: UIValueOrAsync<boolean>;","doc":"<p>Property initializer: true to focus first component on render.</p>\n","declType":"UIValueOrAsync<boolean>"},{"id":"Container.Initializer/horzAlign","name":"horzAlign","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/Container.d.ts","line":61,"code":"horzAlign?: UIValueOrAsync<string>;","doc":"<p>Property initializer: horizontal positioning of main content area (“left”, “center”, “right”).</p>\n","declType":"UIValueOrAsync<string>"},{"id":"Container.Initializer/maxContentWidth","name":"maxContentWidth","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/Container.d.ts","line":63,"code":"maxContentWidth?: UIValueOrAsync<string>;","doc":"<p>Property initializer: maximum content width.</p>\n","declType":"UIValueOrAsync<string>"},{"id":"Container.Initializer/scrollBottomThreshold","name":"scrollBottomThreshold","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/Container.d.ts","line":69,"code":"scrollBottomThreshold?: UIValueOrAsync<number>;","doc":"<p>Property initializer: scroll-bottom threshold distance in pixels.</p>\n","declType":"UIValueOrAsync<number>"},{"id":"Container.Initializer/scrollTopThreshold","name":"scrollTopThreshold","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/Container.d.ts","line":67,"code":"scrollTopThreshold?: UIValueOrAsync<number>;","doc":"<p>Property initializer: scroll-top threshold distance in pixels.</p>\n","declType":"UIValueOrAsync<number>"},{"id":"Container.Initializer/scrollable","name":"scrollable","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/Container.d.ts","line":65,"code":"scrollable?: UIValueOrAsync<boolean>;","doc":"<p>Property initializer: true for scrollable content area.</p>\n","declType":"UIValueOrAsync<boolean>"},{"id":"Container.Initializer/vertAlign","name":"vertAlign","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/Container.d.ts","line":59,"code":"vertAlign?: UIValueOrAsync<string>;","doc":"<p>Property initializer: vertical positioning of main content area (“top”, “middle”, “bottom”).</p>\n","declType":"UIValueOrAsync<string>"}],"inherits":["Component.Initializer/ArrowDownKeyPressed","Component.Initializer/ArrowLeftKeyPressed","Component.Initializer/ArrowRightKeyPressed","Component.Initializer/ArrowUpKeyPressed","Component.Initializer/BackspaceKeyPressed","Component.Initializer/Blur","Component.Initializer/Click","Component.Initializer/Clicked","Component.Initializer/DeleteKeyPressed","Component.Initializer/DoubleClick","Component.Initializer/DoubleClicked","Component.Initializer/DragDrop","Component.Initializer/DragEnter","Component.Initializer/DragLeave","Component.Initializer/DragStart","Component.Initializer/EnterKeyPressed","Component.Initializer/EscapeKeyPressed","Component.Initializer/Focus","Component.Initializer/FocusGained","Component.Initializer/FocusLost","Component.Initializer/KeyDown","Component.Initializer/KeyPress","Component.Initializer/MouseContextMenu","Component.Initializer/MouseEnter","Component.Initializer/MouseLeave","Component.Initializer/Press","Component.Initializer/Pressed","Component.Initializer/Rendered","Component.Initializer/SpaceBarPressed","Component.Initializer/animations","Component.Initializer/focusMode","Component.Initializer/hasFocus","Component.Initializer/height","Component.Initializer/hidden","Component.Initializer/id","Component.Initializer/renderOptions","Component.Initializer/selected","Component.Initializer/selectionMode","Component.Initializer/shadowEffect","Component.Initializer/shadowEffectOnFocus","Component.Initializer/shadowEffectOnHover","Component.Initializer/style","Component.Initializer/width"]},{"id":"Container.withContent","name":"withContent","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Containers/Container.d.ts","line":9,"code":"static withContent<T extends Container>(this: { new (): T; with: typeof Container.with; }, content: ComponentFactory.SpecList2): ComponentFactory<T>;","doc":"<p>Initialize a container factory with given content.</p>\n","typeParams":["T extends Container"],"declType":"ComponentFactory<T>"},{"id":"Container.constructor","name":"new Container","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Containers/Container.d.ts","line":7,"code":"constructor(content?: Block[]);","doc":"<p>Create a container with given content, if any.</p>\n"},{"id":"Container/content","name":"content","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/Container.d.ts","line":16,"code":"content: Array<Block | undefined>;","doc":"<p>Array of main content blocks, stacked top to bottom (observed).</p>\n","declType":"Array<Block | undefined>"},{"id":"Container/display","name":"display","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Containers/Container.d.ts","line":46,"code":"display(): this;","doc":"<p>Display this container on screen; fills entire page unless <code>.displayOptions</code> is configured otherwise; returns this.</p>\n","declType":"this"},{"id":"Container/displayOptions","name":"displayOptions","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/Container.d.ts","line":42,"code":"displayOptions?: Page.DisplayOptions;","doc":"<p>Object with options to be used when displaying this container as a page component, initially undefined (observed).</p>\n","declType":"Page.DisplayOptions"},{"id":"Container/getChildren","name":"getChildren","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Containers/Container.d.ts","line":48,"code":"getChildren(): Component[];","doc":"<p>Returns an array of directly contained components (observable).</p>\n","declType":"Component[]"},{"id":"Container/hasEmptyList","name":"hasEmptyList","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Containers/Container.d.ts","line":44,"code":"hasEmptyList(listComponentClass?: typeof List): boolean;","doc":"<p>Returns true if this container contains a List component without items, optionally of given type (observable if used in getter); useful as a shortcut in a getter for .hidden on a “blank-slate” block.</p>\n","declType":"boolean"},{"id":"Container/horzAlign","name":"horzAlign","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/Container.d.ts","line":20,"code":"horzAlign?: \"left\" | \"center\" | \"right\";","doc":"<p>Horizontal positioning of main content area within the outer boundaries of the container (observed), defaults to “center” if not defined; may lead to unexpected results if the contained blocks are of different widths.</p>\n","declType":"\"left\" | \"center\" | \"right\""},{"id":"Container/initializeWith","name":"initializeWith","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/Container.d.ts","line":14,"code":"initializeWith: (values: Container.Initializer) => this;","doc":"<p>Initialize with given (observable) properties; returns this.</p>\n","declType":"(values: Container.Initializer) => this"},{"id":"Container/maxContentWidth","name":"maxContentWidth","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/Container.d.ts","line":22,"code":"maxContentWidth: string;","doc":"<p>Max width of main content (observed); leave this blank to remove content width limitations.</p>\n","declType":"string"},{"id":"Container/scrollBottomThreshold","name":"scrollBottomThreshold","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/Container.d.ts","line":38,"code":"scrollBottomThreshold?: number;","doc":"<p>Bottom scroll threshold in pixels away from the bottom of this container: when reached this position, the <code>.scrolledToBottom</code> property is set (observed, but does not directly influence current property values); can be used e.g. to trigger lazy loading of list items or trigger footer display.</p>\n","declType":"number"},{"id":"Container/scrollTopThreshold","name":"scrollTopThreshold","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/Container.d.ts","line":40,"code":"scrollTopThreshold?: number;","doc":"<p>Top scroll threshold in pixels away from the top of this container: when reached this position, the <code>.scrolledToTop</code> property is set (observed, but does not directly influence current property values); can be used e.g. to trigger lazy loading of list items or trigger header display.</p>\n","declType":"number"},{"id":"Container/scrollable","name":"scrollable","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/Container.d.ts","line":24,"code":"scrollable?: boolean;","doc":"<p>Set to true to make content within container scrollable; defaults to false (observed).</p>\n","declType":"boolean"},{"id":"Container/scrolledToBottom","name":"scrolledToBottom","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Containers/Container.d.ts","line":29,"code":"readonly scrolledToBottom: boolean | undefined;","doc":"<p>Flag that becomes true when the container content is scrolled all the way to the bottom, or to the threshold defined by <code>.scrollBottomThreshold</code> (observable); scroll position is continuously monitored after this value is read once.</p>\n","declType":"boolean | undefined"},{"id":"Container/scrolledToLeft","name":"scrolledToLeft","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Containers/Container.d.ts","line":32,"code":"readonly scrolledToLeft: boolean | undefined;","doc":"<p>Flag that becomes true when the container content is scrolled all the way to the left (observable); scroll position is continuously monitored after this value is read once.</p>\n","declType":"boolean | undefined"},{"id":"Container/scrolledToRight","name":"scrolledToRight","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Containers/Container.d.ts","line":35,"code":"readonly scrolledToRight: boolean | undefined;","doc":"<p>Flag that becomes true when the container content is scrolled all the way to the right (observable); scroll position is continuously monitored after this value is read once.</p>\n","declType":"boolean | undefined"},{"id":"Container/scrolledToTop","name":"scrolledToTop","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Containers/Container.d.ts","line":26,"code":"readonly scrolledToTop: boolean | undefined;","doc":"<p>Flag that becomes true when the container content is scrolled all the way to the top (observable); scroll position is continuously monitored after this value is read once.</p>\n","declType":"boolean | undefined"},{"id":"Container/vertAlign","name":"vertAlign","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/Container.d.ts","line":18,"code":"vertAlign?: \"top\" | \"middle\" | \"bottom\";","doc":"<p>Vertical positioning of main content area within the outer boundaries of the container (observed), defaults to “top” if not defined.</p>\n","declType":"\"top\" | \"middle\" | \"bottom\""}],"isNamespace":true,"sourceIdx":49,"inherits":["Component.addStyleOverride","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Component/focusMode","Component/getActualDimensions","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Component/id","Component/initialize","Component/out","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Component/style","Component/uid","Component/width","Component/defineComponentSignal","Component/Renderer","Component/beforeFirstRender","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"ContainerBlock","name":"ContainerBlock","isClass":true,"file":"./packages/ui/typings/UI/Components/Blocks/ContainerBlock.d.ts","line":5,"code":"class ContainerBlock<ContainerT extends Container> extends Block","doc":"<p>Represents a block with an embedded sub container within its margins/padding.</p>\n","extends":["Block"],"typeParams":["ContainerT extends Container"],"items":[{"id":"ContainerBlock.Initializer","name":"Initializer","isInterface":true,"file":"./packages/ui/typings/UI/Components/Blocks/ContainerBlock.d.ts","line":19,"code":"interface Initializer<ContainerT extends Container> extends Block.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["Block.Initializer"],"typeParams":["ContainerT extends Container"],"items":[{"id":"ContainerBlock.Initializer/container","name":"container","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/ContainerBlock.d.ts","line":21,"code":"container: UIValueOrAsync<ComponentFactory<Container> | Container> | ComponentFactory.SpecList2;","doc":"<p>Property initializer: container component or initializer.</p>\n","declType":"UIValueOrAsync<ComponentFactory<Container> | Container> | ComponentFactory.SpecList2"}],"inherits":["Component.Initializer/ArrowDownKeyPressed","Component.Initializer/ArrowLeftKeyPressed","Component.Initializer/ArrowRightKeyPressed","Component.Initializer/ArrowUpKeyPressed","Component.Initializer/BackspaceKeyPressed","Component.Initializer/Blur","Component.Initializer/Click","Component.Initializer/Clicked","Component.Initializer/DeleteKeyPressed","Component.Initializer/DoubleClick","Component.Initializer/DoubleClicked","Component.Initializer/DragDrop","Component.Initializer/DragEnter","Component.Initializer/DragLeave","Component.Initializer/DragStart","Component.Initializer/EnterKeyPressed","Component.Initializer/EscapeKeyPressed","Component.Initializer/Focus","Component.Initializer/FocusGained","Component.Initializer/FocusLost","Component.Initializer/KeyDown","Component.Initializer/KeyPress","Component.Initializer/MouseContextMenu","Component.Initializer/MouseEnter","Component.Initializer/MouseLeave","Component.Initializer/Press","Component.Initializer/Pressed","Component.Initializer/Rendered","Component.Initializer/SpaceBarPressed","Component.Initializer/animations","Block.Initializer/displayOptions","Component.Initializer/focusMode","Component.Initializer/hasFocus","Component.Initializer/height","Component.Initializer/hidden","Component.Initializer/id","Block.Initializer/overlayPosition","Component.Initializer/renderOptions","Component.Initializer/selected","Component.Initializer/selectionMode","Component.Initializer/shadowEffect","Component.Initializer/shadowEffectOnFocus","Component.Initializer/shadowEffectOnHover","Component.Initializer/style","Component.Initializer/width"]},{"id":"ContainerBlock.constructor","name":"new ContainerBlock","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Blocks/ContainerBlock.d.ts","line":7,"code":"constructor(container?: ContainerT | Container);","doc":"<p>Create a container block component with given container, if any.</p>\n"},{"id":"ContainerBlock/container","name":"container","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/ContainerBlock.d.ts","line":11,"code":"container?: ContainerT;","doc":"<p>Container element (created by constructor, but may be modified, may be undefined, defaults to a plain <code>Container</code> instance; observed).</p>\n","declType":"ContainerT"},{"id":"ContainerBlock/getChildren","name":"getChildren","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Blocks/ContainerBlock.d.ts","line":15,"code":"getChildren(): Component[];","doc":"<p>Returns an array of directly contained components (observable).</p>\n","declType":"Component[]"},{"id":"ContainerBlock/height","name":"height","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/ContainerBlock.d.ts","line":13,"code":"height: string;","doc":"<p>Overall target height of this component (CSS length; observable, directly modifies <code>.style</code> property, does <em>not</em> retrieve actual component height, may be “auto”); if a height has not been set explicitly, or is set to “auto”, then the value is taken from the height of the container; for <code>LayoutContainer</code>, a value of “100%” is used if the container’s height is also “auto”.</p>\n","declType":"string"},{"id":"ContainerBlock/initializeWith","name":"initializeWith","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/ContainerBlock.d.ts","line":9,"code":"initializeWith: (values: ContainerBlock.Initializer<ContainerT>) => this;","doc":"<p>Initialize with given (observable) properties; returns this.</p>\n","declType":"(values: ContainerBlock.Initializer<ContainerT>) => this"}],"isNamespace":true,"sourceIdx":9,"inherits":["Component.addStyleOverride","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Block/displayOptions","Component/focusMode","Component/getActualDimensions","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/hidden","Component/hoverState","Component/id","Component/initialize","Component/out","Block/overlayPosition","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Component/style","Component/uid","Component/width","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"ContainerControl","name":"ContainerControl","isClass":true,"file":"./packages/ui/typings/UI/Components/Controls/ContainerControl.d.ts","line":5,"code":"class ContainerControl<ContainerT extends Container> extends ControlElement","doc":"<p>Represents a control element that contains a container.</p>\n","extends":["ControlElement"],"typeParams":["ContainerT extends Container"],"items":[{"id":"ContainerControl.Initializer","name":"Initializer","isInterface":true,"file":"./packages/ui/typings/UI/Components/Controls/ContainerControl.d.ts","line":21,"code":"interface Initializer extends ControlElement.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["ControlElement.Initializer"],"items":[{"id":"ContainerControl.Initializer/container","name":"container","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ContainerControl.d.ts","line":23,"code":"container?: UIValueOrAsync<ComponentFactory<Container> | Container> | ComponentFactory.SpecList2;","doc":"<p>Property initializer: wrapped container.</p>\n","declType":"UIValueOrAsync<ComponentFactory<Container> | Container> | ComponentFactory.SpecList2"}],"inherits":["Component.Initializer/ArrowDownKeyPressed","Component.Initializer/ArrowLeftKeyPressed","Component.Initializer/ArrowRightKeyPressed","Component.Initializer/ArrowUpKeyPressed","Component.Initializer/BackspaceKeyPressed","Component.Initializer/Blur","Component.Initializer/Click","Component.Initializer/Clicked","Component.Initializer/DeleteKeyPressed","Component.Initializer/DoubleClick","Component.Initializer/DoubleClicked","Component.Initializer/DragDrop","Component.Initializer/DragEnter","Component.Initializer/DragLeave","Component.Initializer/DragStart","Component.Initializer/EnterKeyPressed","Component.Initializer/EscapeKeyPressed","Component.Initializer/Focus","Component.Initializer/FocusGained","Component.Initializer/FocusLost","Component.Initializer/KeyDown","Component.Initializer/KeyPress","Component.Initializer/MouseContextMenu","Component.Initializer/MouseEnter","Component.Initializer/MouseLeave","Component.Initializer/Press","Component.Initializer/Pressed","Component.Initializer/Rendered","Component.Initializer/SpaceBarPressed","Component.Initializer/animations","Component.Initializer/focusMode","ControlElement.Initializer/hasFocus","Component.Initializer/height","Component.Initializer/hidden","Component.Initializer/id","Component.Initializer/renderOptions","Component.Initializer/selected","Component.Initializer/selectionMode","Component.Initializer/shadowEffect","Component.Initializer/shadowEffectOnFocus","Component.Initializer/shadowEffectOnHover","ControlElement.Initializer/shrinkwrap","Component.Initializer/style","ControlElement.Initializer/width"]},{"id":"ContainerControl.constructor","name":"new ContainerControl","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Controls/ContainerControl.d.ts","line":7,"code":"constructor(container?: ContainerT);","doc":"<p>Create a container control element that contains the given container, if any.</p>\n"},{"id":"ContainerControl/container","name":"container","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ContainerControl.d.ts","line":11,"code":"container?: ContainerT;","doc":"<p>Container element (created by constructor, but may be modified or set to undefined; defaults to plain Container; observed); if set to a container (other than LayoutContainer) with maxContentWidth other than auto, and this control’s width is set to auto, this control will shrinkwrap to the same width as the container.</p>\n","declType":"ContainerT"},{"id":"ContainerControl/getChildren","name":"getChildren","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Controls/ContainerControl.d.ts","line":17,"code":"getChildren(): Component[];","doc":"<p>Returns an array of directly contained components (observable).</p>\n","declType":"Component[]"},{"id":"ContainerControl/height","name":"height","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ContainerControl.d.ts","line":13,"code":"height: string;","doc":"<p>Overall target height of this component (CSS length; observable, directly modifies <code>.style</code> property, does <em>not</em> retrieve actual component height, may be “auto”); if a height has not been set explicitly, or is set to “auto”, then the value is taken from the height of the container; for <code>LayoutContainer</code>, a value of “100%” is used if the container’s height is also “auto”.</p>\n","declType":"string"},{"id":"ContainerControl/initializeWith","name":"initializeWith","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ContainerControl.d.ts","line":9,"code":"initializeWith: (values: ContainerControl.Initializer) => this;","doc":"<p>Initialize with given (observable) properties; returns this.</p>\n","declType":"(values: ContainerControl.Initializer) => this"},{"id":"ContainerControl/width","name":"width","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ContainerControl.d.ts","line":15,"code":"width: string;","doc":"<p>Overall target width of this component (CSS length; observable, directly modifies <code>.style</code> property, does <em>not</em> retrieve actual component height, may be “auto”); if a width has not been set explicitly, or is set to “auto”, then the value is taken from the width of the container.</p>\n","declType":"string"}],"isNamespace":true,"sourceIdx":64,"inherits":["Component.addStyleOverride","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Component/focusMode","Component/getActualDimensions","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/hidden","Component/hoverState","Component/id","Component/initialize","Component/out","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","ControlElement/shrinkwrap","Component/style","Component/uid","ControlElement/wrapText","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"ControlElement","name":"ControlElement","isClass":true,"file":"./packages/ui/typings/UI/Components/Controls/ControlElement.d.ts","line":3,"code":"class ControlElement extends Component","doc":"<p>UI control element base class.</p>\n","extends":["Component"],"items":[{"id":"ControlElement.Initializer","name":"Initializer","isInterface":true,"file":"./packages/ui/typings/UI/Components/Controls/ControlElement.d.ts","line":15,"code":"interface Initializer extends Component.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["Component.Initializer"],"items":[{"id":"ControlElement.Initializer/hasFocus","name":"hasFocus","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ControlElement.d.ts","line":21,"code":"hasFocus?: UIValueOrAsync<boolean>;","doc":"<p>Property initializer: true to focus this component.</p>\n","declType":"UIValueOrAsync<boolean>"},{"id":"ControlElement.Initializer/shrinkwrap","name":"shrinkwrap","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ControlElement.d.ts","line":19,"code":"shrinkwrap?: UIValueOrAsync<boolean>;","doc":"<p>Property initializer: true to occupy as little horizontal space as possible.</p>\n","declType":"UIValueOrAsync<boolean>"},{"id":"ControlElement.Initializer/width","name":"width","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ControlElement.d.ts","line":17,"code":"width?: UIValueOrAsync<string>;","doc":"<p>Property initializer: target width of this component (CSS length).</p>\n","declType":"UIValueOrAsync<string>"}],"inherits":["Component.Initializer/ArrowDownKeyPressed","Component.Initializer/ArrowLeftKeyPressed","Component.Initializer/ArrowRightKeyPressed","Component.Initializer/ArrowUpKeyPressed","Component.Initializer/BackspaceKeyPressed","Component.Initializer/Blur","Component.Initializer/Click","Component.Initializer/Clicked","Component.Initializer/DeleteKeyPressed","Component.Initializer/DoubleClick","Component.Initializer/DoubleClicked","Component.Initializer/DragDrop","Component.Initializer/DragEnter","Component.Initializer/DragLeave","Component.Initializer/DragStart","Component.Initializer/EnterKeyPressed","Component.Initializer/EscapeKeyPressed","Component.Initializer/Focus","Component.Initializer/FocusGained","Component.Initializer/FocusLost","Component.Initializer/KeyDown","Component.Initializer/KeyPress","Component.Initializer/MouseContextMenu","Component.Initializer/MouseEnter","Component.Initializer/MouseLeave","Component.Initializer/Press","Component.Initializer/Pressed","Component.Initializer/Rendered","Component.Initializer/SpaceBarPressed","Component.Initializer/animations","Component.Initializer/focusMode","Component.Initializer/height","Component.Initializer/hidden","Component.Initializer/id","Component.Initializer/renderOptions","Component.Initializer/selected","Component.Initializer/selectionMode","Component.Initializer/shadowEffect","Component.Initializer/shadowEffectOnFocus","Component.Initializer/shadowEffectOnHover","Component.Initializer/style"]},{"id":"ControlElement/initializeWith","name":"initializeWith","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ControlElement.d.ts","line":5,"code":"initializeWith: (values: ControlElement.Initializer) => this;","doc":"<p>Initialize with given (observable) properties; returns this.</p>\n","declType":"(values: ControlElement.Initializer) => this"},{"id":"ControlElement/shrinkwrap","name":"shrinkwrap","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ControlElement.d.ts","line":9,"code":"shrinkwrap: boolean;","doc":"<p>Set to true to shrink this element to use as little horizontal space as possible in a row; set to false to expand (observed).</p>\n","declType":"boolean"},{"id":"ControlElement/width","name":"width","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ControlElement.d.ts","line":7,"code":"width: string;","doc":"<p>Width (CSS length), default “auto” (observed).</p>\n","declType":"string"},{"id":"ControlElement/wrapText","name":"wrapText","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ControlElement.d.ts","line":11,"code":"wrapText: boolean;","doc":"<p>Set to true to automatically break text across lines (observed).</p>\n","declType":"boolean"}],"isNamespace":true,"sourceIdx":65,"inherits":["Component.addStyleOverride","Component.constructor","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Component/focusMode","Component/getActualDimensions","Component/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Component/id","Component/initialize","Component/out","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Component/style","Component/uid","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"ControlStack","name":"ControlStack","isClass":true,"file":"./packages/ui/typings/UI/Components/Controls/ControlStack.d.ts","line":4,"code":"class ControlStack extends ControlElement","doc":"<p>Represents a stack control containing control elements with equal widths placed from top to bottom.</p>\n","extends":["ControlElement"],"items":[{"id":"ControlStack.Initializer","name":"Initializer","isInterface":true,"file":"./packages/ui/typings/UI/Components/Controls/ControlStack.d.ts","line":27,"code":"interface Initializer extends ControlElement.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["ControlElement.Initializer"],"items":[{"id":"ControlStack.Initializer/content","name":"content","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ControlStack.d.ts","line":29,"code":"content?: ComponentFactory.SpecList;","doc":"<p>Property initializer: list of stacked controls.</p>\n","declType":"ComponentFactory.SpecList"},{"id":"ControlStack.Initializer/horzAlign","name":"horzAlign","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ControlStack.d.ts","line":33,"code":"horzAlign?: UIValueOrAsync<string>;","doc":"<p>Property initializer: horizontal alignment of controls (e.g. “left”, “center”, “right”).</p>\n","declType":"UIValueOrAsync<string>"},{"id":"ControlStack.Initializer/spacing","name":"spacing","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ControlStack.d.ts","line":31,"code":"spacing?: UIValueOrAsync<string>;","doc":"<p>Property initializer: margin between controls (CSS value).</p>\n","declType":"UIValueOrAsync<string>"}],"inherits":["Component.Initializer/ArrowDownKeyPressed","Component.Initializer/ArrowLeftKeyPressed","Component.Initializer/ArrowRightKeyPressed","Component.Initializer/ArrowUpKeyPressed","Component.Initializer/BackspaceKeyPressed","Component.Initializer/Blur","Component.Initializer/Click","Component.Initializer/Clicked","Component.Initializer/DeleteKeyPressed","Component.Initializer/DoubleClick","Component.Initializer/DoubleClicked","Component.Initializer/DragDrop","Component.Initializer/DragEnter","Component.Initializer/DragLeave","Component.Initializer/DragStart","Component.Initializer/EnterKeyPressed","Component.Initializer/EscapeKeyPressed","Component.Initializer/Focus","Component.Initializer/FocusGained","Component.Initializer/FocusLost","Component.Initializer/KeyDown","Component.Initializer/KeyPress","Component.Initializer/MouseContextMenu","Component.Initializer/MouseEnter","Component.Initializer/MouseLeave","Component.Initializer/Press","Component.Initializer/Pressed","Component.Initializer/Rendered","Component.Initializer/SpaceBarPressed","Component.Initializer/animations","Component.Initializer/focusMode","ControlElement.Initializer/hasFocus","Component.Initializer/height","Component.Initializer/hidden","Component.Initializer/id","Component.Initializer/renderOptions","Component.Initializer/selected","Component.Initializer/selectionMode","Component.Initializer/shadowEffect","Component.Initializer/shadowEffectOnFocus","Component.Initializer/shadowEffectOnHover","ControlElement.Initializer/shrinkwrap","Component.Initializer/style","ControlElement.Initializer/width"]},{"id":"ControlStack.withContent","name":"withContent","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Controls/ControlStack.d.ts","line":8,"code":"static withContent<T extends ControlStack>(this: { new (): T; with: typeof ControlStack.with; }, content: ComponentFactory.SpecList): ComponentFactory<T>;","doc":"<p>Initialize a control stack factory with given controls.</p>\n","typeParams":["T extends ControlStack"],"declType":"ComponentFactory<T>"},{"id":"ControlStack.constructor","name":"new ControlStack","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Controls/ControlStack.d.ts","line":6,"code":"constructor(content?: ControlElement[]);","doc":"<p>Create a stack element with given content, if any.</p>\n"},{"id":"ControlStack/content","name":"content","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ControlStack.d.ts","line":15,"code":"content: Array<ControlElement | undefined>;","doc":"<p>Controls to be displayed (observed).</p>\n","declType":"Array<ControlElement | undefined>"},{"id":"ControlStack/getChildren","name":"getChildren","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Controls/ControlStack.d.ts","line":23,"code":"getChildren(): Component[];","doc":"<p>Returns an array of directly contained components (observable).</p>\n","declType":"Component[]"},{"id":"ControlStack/horzAlign","name":"horzAlign","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ControlStack.d.ts","line":19,"code":"horzAlign: \"left\" | \"center\" | \"right\";","doc":"<p>Horizontal alignment of fixed-width elements within control stack area.</p>\n","declType":"\"left\" | \"center\" | \"right\""},{"id":"ControlStack/initializeWith","name":"initializeWith","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ControlStack.d.ts","line":13,"code":"initializeWith: (values: ControlStack.Initializer) => this;","doc":"<p>Initialize with given (observable) properties; returns this.</p>\n","declType":"(values: ControlStack.Initializer) => this"},{"id":"ControlStack/shrinkwrap","name":"shrinkwrap","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ControlStack.d.ts","line":21,"code":"shrinkwrap: boolean;","doc":"<p>Set to true to shrink this component horizontally such that it occupies as little space as possible; set to false to expand horizontally within row (observed); note that shrinkwrapping a control stack with non-shrinkwrapped controls may lead to unexpected results; by default, this component observes child components and is only shrinkwrapped if all child components are shrinkwrapped.</p>\n","declType":"boolean"},{"id":"ControlStack/spacing","name":"spacing","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ControlStack.d.ts","line":17,"code":"spacing: string;","doc":"<p>Spacing between elements (CSS value, observed), defaults to <code>Row.CONTROL_SPACING</code>.</p>\n","declType":"string"}],"isNamespace":true,"sourceIdx":66,"inherits":["Component.addStyleOverride","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Component/focusMode","Component/getActualDimensions","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Component/id","Component/initialize","Component/out","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Component/style","Component/uid","ControlElement/width","ControlElement/wrapText","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"DOM","name":"DOM","isNamespace":true,"file":"./packages/ui/typings/UI/DOM/DOM.d.ts","line":4,"code":"namespace DOM","doc":"<p>Static container for helper methods that work with the DOM.</p>\n","items":[{"id":"DOM.CSS","name":"CSS","isNamespace":true,"file":"./packages/ui/typings/UI/DOM/DOM.d.ts","line":51,"code":"namespace CSS","doc":"<p>A set of predefined styles and style sheets that are used by specific components; these may be modified to apply a “theme”, which will generally update all styles in the DOM asynchronously; <em>however</em>, styles defined here are subject to change for now and it is not guaranteed that selectors and class names will continue to exist across versions.</p>\n","isStatic":true,"items":[{"id":"DOM.CSS.components","name":"components","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/DOM/DOM.d.ts","line":53,"code":"components: { readonly [className: string]: Stylesheet; }","doc":"<p>Groups basic component style sheet definitions together, indexed by class name (e.g. “UI-Container”).</p>\n","declType":"{\r\n            readonly [className: string]: Stylesheet;\r\n        }"},{"id":"DOM.CSS.variables","name":"variables","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/DOM/DOM.d.ts","line":57,"code":"variables: { [name: string]: Async.ObservableValue<string>; }","doc":"<p>Contains observable definitions of basic CSS values that can used in styles and style sheets; initially only contains “baseFontSize” (defaults to <code>1rem</code>) and “Paragraph.lineHeight” but more properties can be added here, provided they are properly namespaced.</p>\n","declType":"{\r\n            [name: string]: Async.ObservableValue<string>;\r\n        }"}]},{"id":"DOM.DOMPageOptions","name":"DOMPageOptions","isInterface":true,"file":"./packages/ui/typings/UI/DOM/DOM.d.ts","line":62,"code":"interface DOMPageOptions","doc":"<p>Collection of options that control page rendering.</p>\n","isStatic":true,"items":[{"id":"DOM.DOMPageOptions/baseZIndex","name":"baseZIndex","isProperty":true,"file":"./packages/ui/typings/UI/DOM/DOM.d.ts","line":64,"code":"baseZIndex: number;","doc":"<p>The z-index style property of the page and all content (default 1000).</p>\n","declType":"number"},{"id":"DOM.DOMPageOptions/shadeColor","name":"shadeColor","isProperty":true,"file":"./packages/ui/typings/UI/DOM/DOM.d.ts","line":70,"code":"shadeColor: string;","doc":"<p>CSS base color for the modal “shade” backdrop (default “#000”).</p>\n","declType":"string"},{"id":"DOM.DOMPageOptions/shadeOpacity","name":"shadeOpacity","isProperty":true,"file":"./packages/ui/typings/UI/DOM/DOM.d.ts","line":68,"code":"shadeOpacity: number;","doc":"<p>Opacity level (0-1) for the modal “shade” backdrop (default 0.2).</p>\n","declType":"number"},{"id":"DOM.DOMPageOptions/shadeTransition","name":"shadeTransition","isProperty":true,"file":"./packages/ui/typings/UI/DOM/DOM.d.ts","line":66,"code":"shadeTransition: number;","doc":"<p>Timing (ms) for the modal “shade” in/out animation (default 200).</p>\n","declType":"number"}]},{"id":"DOM.PAGE_OPTIONS","name":"PAGE_OPTIONS","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/DOM/DOM.d.ts","line":73,"code":"PAGE_OPTIONS: DOMPageOptions","doc":"<p>Options that control page rendering.</p>\n","declType":"DOMPageOptions"},{"id":"DOM.Stylesheet","name":"Stylesheet","isClass":true,"file":"./packages/ui/typings/UI/DOM/DOM.d.ts","line":14,"code":"class Stylesheet","doc":"<p>Represents a (live updating) style sheet, with an optional base class name; the style sheet consists of one or more CSS selectors that each contain a reference to a <code>Style</code> instance.</p>\n","isStatic":true,"items":[{"id":"DOM.Stylesheet.constructor","name":"new Stylesheet","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/DOM/DOM.d.ts","line":16,"code":"constructor(baseClassName?: string, sheet?: { [selector: string]: Style.StyleSet | Style | undefined; });","doc":"<p>Create a new style sheet, with given base class name(s) (optional) and given selectors and styles; selectors may be written as <code>&quot;@... { selector }&quot;</code> for e.g. @keyframe and @media nested at-rules; also, <code>.~~</code> will be replaced with the full base class name and <code>.~</code> with the final part, or if not included then the base class name will be prepended.</p>\n"},{"id":"DOM.Stylesheet/baseClassName","name":"baseClassName","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/DOM/DOM.d.ts","line":20,"code":"readonly baseClassName: string;","doc":"<p>Base class name for this style sheet (set using constructor call).</p>\n","declType":"string"},{"id":"DOM.Stylesheet/define","name":"define","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/DOM/DOM.d.ts","line":24,"code":"define(text: string): any;\ndefine(selector: string, style: Style.StyleSet | Style): any;","doc":"<p>[1]. Append a rule to this style sheet; returns this.</p>\n<p>[2]. Define or override styles for given selector, based on the properties stored in given <code>Style</code> instance (class names are ignored); selectors may be written as <code>&quot;@... { selector }&quot;</code> for e.g. @keyframe and @media nested at-rules; returns this.</p>\n","count":2},{"id":"DOM.Stylesheet/forEach","name":"forEach","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/DOM/DOM.d.ts","line":30,"code":"forEach(callback: (selector: string, style?: Style) => void): void;","doc":"<p>Invoke given function for each selector of this style sheet, including instance identifier class and base class (except for keyframe selectors), if any, and the referenced <code>Style</code> instance, if any; to be used in an observable context to watch for changes.</p>\n","declType":"void"},{"id":"DOM.Stylesheet/listSelectors","name":"listSelectors","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/DOM/DOM.d.ts","line":22,"code":"listSelectors(): string[];","doc":"<p>Returns a list of selectors defined in this style sheet (observable).</p>\n","declType":"string[]"},{"id":"DOM.Stylesheet/remove","name":"remove","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/DOM/DOM.d.ts","line":28,"code":"remove(selector: string | RegExp): this;","doc":"<p>Remove defined styles for given selector or pattern; returns this.</p>\n","declType":"this"}]},{"id":"DOM.applyStyleTo","name":"applyStyleTo","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/DOM/DOM.d.ts","line":41,"code":"function applyStyleTo(style: Style, element: HTMLElement): void;","doc":"<p>Helper function to apply Style properties to given DOM element; returns the Style object (does not observe styles directly, but can be used in an observable getter, e.g. using <code>ComponentRenderer#watch</code> to reapply styles when they change).</p>\n","declType":"void"},{"id":"DOM.applyStylesheet","name":"applyStylesheet","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/DOM/DOM.d.ts","line":35,"code":"function applyStylesheet(styles: { [selector: string]: Style.StyleSet | Style; }): any;\nfunction applyStylesheet(sheet: Stylesheet, liveUpdate?: boolean): any;","doc":"<p>[1]. Define global CSS styles from given list of selectors and style properties, in the context of the current runtime instance.</p>\n<p>[2]. Define global CSS styles from given style sheet, in the context of the current runtime instance; if the <code>liveUpdate</code> argument is set to true, changes to the style sheet are observed and reflected in the DOM asynchronously.</p>\n","count":2},{"id":"DOM.blur","name":"blur","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/DOM/DOM.d.ts","line":10,"code":"function blur(component?: Component): void;","doc":"<p>Remove focus from given component, or the currently focused element.</p>\n","declType":"void"},{"id":"DOM.contains","name":"contains","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/DOM/DOM.d.ts","line":6,"code":"function contains(component: Component, node: Node): boolean;","doc":"<p>Returns true if given component contains given DOM node.</p>\n","declType":"boolean"},{"id":"DOM.focus","name":"focus","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/DOM/DOM.d.ts","line":8,"code":"function focus(component: Component): void;","doc":"<p>Try to focus given component, its live element (from rendered output), or the first focusable element within given component, as soon as it becomes available.</p>\n","declType":"void"},{"id":"DOM.getSelectionClass","name":"getSelectionClass","hasParams":false,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/DOM/DOM.d.ts","line":47,"code":"function getSelectionClass(): string;","doc":"<p>Get the class name globally applied to selected items (if any).</p>\n","declType":"string"},{"id":"DOM.loadExternalCSS","name":"loadExternalCSS","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/DOM/DOM.d.ts","line":49,"code":"function loadExternalCSS(...urls: string[]): PromiseLike<any>;","doc":"<p>Load external stylesheet(s) by URL; returns a promise that resolves after the style sheet(s) have been applied (or after a 1s timeout for browsers that do not support onload event for link elements).</p>\n","declType":"PromiseLike<any>","isAsync":true},{"id":"DOM.setCSSRemSize","name":"setCSSRemSize","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/DOM/DOM.d.ts","line":43,"code":"function setCSSRemSize(px: number | string): void;","doc":"<p>Set the global root-em unit size in pixels or using a CSS value string.</p>\n","declType":"void","text":[{"title":"","content":"<p>It should not be necessary to call this function explicitly, since <code>rem</code> size is overridden at 16px by default.</p>\n<p>However, if this value is in turn overridden by e.g. Bootstrap loaded through <code>.loadExternalCSS(...)</code>, then the root-em size might be different. Bootstrap 3 uses 10px by default.</p>\n<p>With Bootstrap 4 and other CSS frameworks, use this function to scale the overall size of <em>all</em> elements.</p>\n<p>Alternatively, to change the overall <em>text</em> size only (which defaults to 1rem), override the <code>fontSize</code> property on the <code>Row</code> component using globally applied CSS, or by injecting a function into its initializer method chain that overrides the <code>fontSize</code> property on row component <code>Style</code> instances.</p>\n"}],"sourceIdx":109},{"id":"DOM.setSelectionClass","name":"setSelectionClass","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/DOM/DOM.d.ts","line":45,"code":"function setSelectionClass(className: string): void;","doc":"<p>Set the class name globally applied to selected items (in addition to the <code>selected</code> DOM attribute).</p>\n","declType":"void"},{"id":"DOM.uid","name":"uid","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/DOM/DOM.d.ts","line":12,"code":"uid: string","doc":"<p>Unique random identifier for this runtime instance of the library, used as an identifier on page root elements.</p>\n","declType":"string"}],"sourceIdx":87},{"id":"DOMAnimation","name":"DOMAnimation","isClass":true,"file":"./packages/ui/typings/UI/DOM/DOMAnimation.d.ts","line":4,"code":"class DOMAnimation extends Animation","doc":"<p>Represents a CSS keyframe animation.</p>\n","extends":["Animation"],"items":[{"id":"DOMAnimation.Keyframe","name":"Keyframe","isInterface":true,"file":"./packages/ui/typings/UI/DOM/DOMAnimation.d.ts","line":22,"code":"interface Keyframe","doc":"<p>Represents a single keyframe in an animation.</p>\n","isStatic":true,"items":[{"id":"DOMAnimation.Keyframe/style","name":"style","isProperty":true,"file":"./packages/ui/typings/UI/DOM/DOMAnimation.d.ts","line":26,"code":"style: Style.StyleSet | Style;","doc":"<p>Keyframe style properties.</p>\n","declType":"Style.StyleSet | Style"},{"id":"DOMAnimation.Keyframe/t","name":"t","isProperty":true,"file":"./packages/ui/typings/UI/DOM/DOMAnimation.d.ts","line":24,"code":"t?: number;","doc":"<p>Keyframe position (fraction, 0-1), defaults to the relative position of this keyframe from 0 to 1 (i.e. first keyframe to 0, second in a set of three keyframes to 0.5, second in a set of four keyframes to 0.25, etc).</p>\n","declType":"number"}]},{"id":"DOMAnimation.Options","name":"Options","isInterface":true,"file":"./packages/ui/typings/UI/DOM/DOMAnimation.d.ts","line":29,"code":"interface Options","doc":"<p>Keyframe animation options.</p>\n","isStatic":true,"items":[{"id":"DOMAnimation.Options/count","name":"count","isProperty":true,"file":"./packages/ui/typings/UI/DOM/DOMAnimation.d.ts","line":37,"code":"count?: number;","doc":"<p>Number of iterations to play (default 1; can be Infinity).</p>\n","declType":"number"},{"id":"DOMAnimation.Options/delay","name":"delay","isProperty":true,"file":"./packages/ui/typings/UI/DOM/DOMAnimation.d.ts","line":35,"code":"delay?: number;","doc":"<p>Delay in milliseconds before starting the animation (default 0).</p>\n","declType":"number"},{"id":"DOMAnimation.Options/direction","name":"direction","isProperty":true,"file":"./packages/ui/typings/UI/DOM/DOMAnimation.d.ts","line":39,"code":"direction?: \"normal\" | \"reverse\" | \"alternate\" | \"alternate-reverse\";","doc":"<p>Direction to play the keyframes in (normal, reverse, alternate, or alternate-reverse; default normal).</p>\n","declType":"\"normal\" | \"reverse\" | \"alternate\" | \"alternate-reverse\""},{"id":"DOMAnimation.Options/duration","name":"duration","isProperty":true,"file":"./packages/ui/typings/UI/DOM/DOMAnimation.d.ts","line":31,"code":"duration?: number;","doc":"<p>Duration in milliseconds (default 500).</p>\n","declType":"number"},{"id":"DOMAnimation.Options/ease","name":"ease","isProperty":true,"file":"./packages/ui/typings/UI/DOM/DOMAnimation.d.ts","line":41,"code":"ease?: boolean;","doc":"<p>Set to true to ease the animation timing.</p>\n","declType":"boolean"},{"id":"DOMAnimation.Options/specDuration","name":"specDuration","isProperty":true,"file":"./packages/ui/typings/UI/DOM/DOMAnimation.d.ts","line":33,"code":"specDuration?: number;","doc":"<p>Duration specified in CSS (copied from duration if unspecified).</p>\n","declType":"number"}]},{"id":"DOMAnimation.together","name":"together","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/DOM/DOMAnimation.d.ts","line":6,"code":"static together(...animations: DOMAnimation[]): Animation;","doc":"<p>Create a combined animation out of given key frame animations.</p>\n","declType":"Animation"},{"id":"DOMAnimation.constructor","name":"new DOMAnimation","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/DOM/DOMAnimation.d.ts","line":8,"code":"constructor(name: string, keyframes?: DOMAnimation.Keyframe[], options?: DOMAnimation.Options);","doc":"<p>Get an animation with given keyframes and given playback options ready for use.</p>\n"},{"id":"DOMAnimation/clone","name":"clone","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/DOM/DOMAnimation.d.ts","line":10,"code":"clone(options: DOMAnimation.Options): DOMAnimation;","doc":"<p>Clone the animation with the same keyframes but with extra options.</p>\n","declType":"DOMAnimation"},{"id":"DOMAnimation/play","name":"play","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/DOM/DOMAnimation.d.ts","line":18,"code":"play(component: Component): Animation.AnimationControl<DOMAnimation>;","doc":"<p>Play the animation once on given component.</p>\n","declType":"Animation.AnimationControl<DOMAnimation>"},{"id":"DOMAnimation/reverse","name":"reverse","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/DOM/DOMAnimation.d.ts","line":16,"code":"reverse(): DOMAnimation;","doc":"<p>Clone this animation and specify to be played in reverse.</p>\n","declType":"DOMAnimation"},{"id":"DOMAnimation/togetherWith","name":"togetherWith","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/DOM/DOMAnimation.d.ts","line":12,"code":"togetherWith(...animations: DOMAnimation[]): Animation;","doc":"<p>Combine this animation with given key frame animations; this does <em>not</em> work for animations that use the same CSS property, such as <code>transform</code> (rotate, scale, translate…).</p>\n","declType":"Animation"},{"id":"DOMAnimation/withTiming","name":"withTiming","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/DOM/DOMAnimation.d.ts","line":14,"code":"withTiming(msDuration: number, msDelay?: number): DOMAnimation;","doc":"<p>Clone this animation and override timings.</p>\n","declType":"DOMAnimation"}],"isNamespace":true,"sourceIdx":88,"text":[{"title":"Basic Animations","content":"<p>A collection of basic animations is available in the static <code>.basic</code> property of this class. The following animations are available:</p>\n<p><strong><code>basic.in.</code></strong> — <code>fade</code>, <code>fadeUp</code>, <code>fadeDown</code>, <code>fadeLeft</code>, <code>fadeRight</code>, <code>slideUp</code>, <code>slideDown</code>, <code>slideLeft</code>, <code>slideRight</code>, <code>scale</code>, <code>scaleOver</code>, <code>turnX</code>, <code>turnY</code>, <code>maxHeight</code>, <code>maxWidth</code></p>\n<p><strong><code>basic.in.</code></strong> — <code>fade</code>, <code>fadeUp</code>, <code>fadeDown</code>, <code>fadeLeft</code>, <code>fadeRight</code>, <code>slideUp</code>, <code>slideDown</code>, <code>slideLeft</code>, <code>slideRight</code>, <code>scale</code>, <code>scaleOver</code>, <code>turnX</code>, <code>turnY</code>, <code>maxHeight</code>, <code>maxWidth</code></p>\n<p><strong><code>basic.highlight.</code></strong> — <code>yellow</code>, <code>jumpOut</code></p>\n"},{"title":"Usage","content":"<p>To apply transitions automatically, use the <a href=\"#/Component/animations\"><code>.animations</code></a> property of any component:</p>\n<pre><code class=\"language-typescript\">class MyDialog extends UI.DialogContainer {\n    constructor(/* ... */) {\n        super();\n        this.animations.appear = UI.DOMAnimation.basic.in.fade;\n        this.animations.disappear = UI.DOMAnimation.basic.out.fade;\n        // ...\n    }\n}\n</code></pre>\n<p>For special effects, use the <code>play</code>/<code>playOnce</code> methods, or the component’s <code>animate</code> method:</p>\n<pre><code class=\"language-typescript\">var myAnimation = UI.DOMAnimation.basic.highlight.yellow.withTiming(600, 400)\n    .togetherWith(UI.DOMAnimation.basic.highlight.jumpOut\n        .withTiming(400, 400));\nmyAnimation.play(someComponent);\n\n// ... or use component:\nsomeComponent.animate(myAnimation);\n</code></pre>\n"}],"inherits":["Animation.disableAll","Animation.enableAll","Animation/duration","Animation/id","Animation/name","Animation/playOnce"]},{"id":"DOMBlock","name":"DOMBlock","isClass":true,"file":"./packages/ui/typings/UI/DOM/DOMBlock.d.ts","line":3,"code":"class DOMBlock extends Block","doc":"<p>Block base class: full-width horizontal block containing DOM element(s).</p>\n","extends":["Block"],"items":[{"id":"DOMBlock.constructor","name":"new DOMBlock","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/DOM/DOMBlock.d.ts","line":5,"code":"constructor(...elements: Array<Node | Async.ObservableValue<Node>>);\nconstructor(documentFragment: DocumentFragment);","doc":"<p>[1]. Create a new block component with given content.</p>\n<p>[2]. Create a new block component with elements from the given DOM fragment.</p>\n","count":2},{"id":"DOMBlock/nodes","name":"nodes","isProperty":true,"file":"./packages/ui/typings/UI/DOM/DOMBlock.d.ts","line":9,"code":"nodes: Array<Node | undefined>;","doc":"<p>Array of DOM nodes (observed).</p>\n","declType":"Array<Node | undefined>"}],"sourceIdx":89,"inherits":["Component.addStyleOverride","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Block/displayOptions","Component/focusMode","Component/getActualDimensions","Component/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Component/id","Component/initialize","Block/initializeWith","Component/out","Block/overlayPosition","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Component/style","Component/uid","Component/width","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"DialogContainer","name":"DialogContainer","isClass":true,"file":"./packages/ui/typings/UI/Components/Containers/DialogContainer.d.ts","line":9,"code":"class DialogContainer extends Container","doc":"<p>Represents a modal dialog container.</p>\n","extends":["Container"],"items":[{"id":"DialogContainer.APPEAR_ANIMATION","name":"APPEAR_ANIMATION","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/DialogContainer.d.ts","line":13,"code":"static APPEAR_ANIMATION?: Animation;","doc":"<p>Default “appear” animation, added to every new DialogContainer instance by the constructor.</p>\n","declType":"Animation"},{"id":"DialogContainer.CloseSignal","name":"CloseSignal","isClass":true,"file":"./packages/ui/typings/UI/Components/Containers/DialogContainer.d.ts","line":48,"code":"class CloseSignal extends ComponentSignal<void>","doc":"<p>Signal that is emitted when a dialog is closing or has closed.</p>\n","isStatic":true,"extends":["ComponentSignal"],"items":[]},{"id":"DialogContainer.DISAPPEAR_ANIMATION","name":"DISAPPEAR_ANIMATION","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/DialogContainer.d.ts","line":15,"code":"static DISAPPEAR_ANIMATION?: Animation;","doc":"<p>Default “disappear” animation, added to every new DialogContainer instance by the constructor.</p>\n","declType":"Animation"},{"id":"DialogContainer.Initializer","name":"Initializer","isInterface":true,"file":"./packages/ui/typings/UI/Components/Containers/DialogContainer.d.ts","line":37,"code":"interface Initializer extends Container.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["Container.Initializer"],"items":[{"id":"DialogContainer.Initializer/Closed","name":"Closed","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/DialogContainer.d.ts","line":45,"code":"Closed?: string | ActionHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | ActionHandler"},{"id":"DialogContainer.Initializer/Closing","name":"Closing","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/DialogContainer.d.ts","line":43,"code":"Closing?: string | ActionHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | ActionHandler"},{"id":"DialogContainer.Initializer/footer","name":"footer","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/DialogContainer.d.ts","line":41,"code":"footer?: ComponentFactory.SpecEltOrList;","doc":"<p>Property initializer: footer block.</p>\n","declType":"ComponentFactory.SpecEltOrList"},{"id":"DialogContainer.Initializer/header","name":"header","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/DialogContainer.d.ts","line":39,"code":"header?: ComponentFactory.SpecEltOrList;","doc":"<p>Property initializer: header block.</p>\n","declType":"ComponentFactory.SpecEltOrList"}],"inherits":["Component.Initializer/ArrowDownKeyPressed","Component.Initializer/ArrowLeftKeyPressed","Component.Initializer/ArrowRightKeyPressed","Component.Initializer/ArrowUpKeyPressed","Component.Initializer/BackspaceKeyPressed","Component.Initializer/Blur","Component.Initializer/Click","Component.Initializer/Clicked","Component.Initializer/DeleteKeyPressed","Component.Initializer/DoubleClick","Component.Initializer/DoubleClicked","Component.Initializer/DragDrop","Component.Initializer/DragEnter","Component.Initializer/DragLeave","Component.Initializer/DragStart","Component.Initializer/EnterKeyPressed","Component.Initializer/EscapeKeyPressed","Component.Initializer/Focus","Component.Initializer/FocusGained","Component.Initializer/FocusLost","Component.Initializer/KeyDown","Component.Initializer/KeyPress","Component.Initializer/MouseContextMenu","Component.Initializer/MouseEnter","Component.Initializer/MouseLeave","Component.Initializer/Press","Component.Initializer/Pressed","Component.Initializer/Rendered","Component.Initializer/SpaceBarPressed","Component.Initializer/animations","Container.Initializer/content","Container.Initializer/displayOptions","Container.Initializer/focusFirst","Component.Initializer/focusMode","Component.Initializer/hasFocus","Component.Initializer/height","Component.Initializer/hidden","Container.Initializer/horzAlign","Component.Initializer/id","Container.Initializer/maxContentWidth","Component.Initializer/renderOptions","Container.Initializer/scrollBottomThreshold","Container.Initializer/scrollTopThreshold","Container.Initializer/scrollable","Component.Initializer/selected","Component.Initializer/selectionMode","Component.Initializer/shadowEffect","Component.Initializer/shadowEffectOnFocus","Component.Initializer/shadowEffectOnHover","Component.Initializer/style","Container.Initializer/vertAlign","Component.Initializer/width"]},{"id":"DialogContainer.TopCloseButton","name":"TopCloseButton","isClass":true,"file":"./packages/ui/typings/UI/Components/Containers/DialogContainer.d.ts","line":51,"code":"class TopCloseButton extends TextButton","doc":"<p>Predefined modal close button (“X”) control, based on <code>TextButton</code>.</p>\n","isStatic":true,"extends":["TextButton"],"items":[{"id":"DialogContainer.TopCloseButton.constructor","name":"new TopCloseButton","hasParams":false,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Containers/DialogContainer.d.ts","line":53,"code":"constructor();","doc":"<p>Create a modal close button (“X”) control.</p>\n"}],"inherits":["Component.addStyleOverride","Button.withIcon","Button.withLabel","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Button/badge","Button/disabled","Button/dropdown","Component/focusMode","Component/getActualDimensions","Component/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Button/icon","Button/iconAfter","Component/id","Component/initialize","Button/initializeWith","Button/label","Component/out","Button/popover","Button/popoverAbove","Button/popoverAnimation","Button/popoverTitle","Button/primary","Button/remGutter","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Button/shrinkwrap","Component/style","Button/style_button","Button/target","Button/tooltipText","Component/uid","ControlElement/width","ControlElement/wrapText","Component/beforeFirstRender","Component/defineComponentSignal","Component/Renderer","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Button/DropdownClicked","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"DialogContainer.constructor","name":"new DialogContainer","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Containers/DialogContainer.d.ts","line":11,"code":"constructor(content?: Block[], width?: string);","doc":"<p>Create a new modal dialog with given content, if any.</p>\n"},{"id":"DialogContainer/close","name":"close","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Containers/DialogContainer.d.ts","line":23,"code":"close(): this;","doc":"<p>Remove the dialog from screen (does not emit or wait for <code>.Closing</code> signal, only emits <code>.Closed</code>); returns this.</p>\n","declType":"this"},{"id":"DialogContainer/displayOptions","name":"displayOptions","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/DialogContainer.d.ts","line":29,"code":"displayOptions: Page.DisplayOptions;","doc":"<p>Object with options to be used when displaying on a page (observed).</p>\n","declType":"Page.DisplayOptions"},{"id":"DialogContainer/footer","name":"footer","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/DialogContainer.d.ts","line":21,"code":"footer?: Block;","doc":"<p>Block to be displayed as a footer, may be undefined (observed).</p>\n","declType":"Block"},{"id":"DialogContainer/getChildren","name":"getChildren","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Containers/DialogContainer.d.ts","line":27,"code":"getChildren(): Component[];","doc":"<p>Returns an array of directly contained components (observable).</p>\n","declType":"Component[]"},{"id":"DialogContainer/header","name":"header","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/DialogContainer.d.ts","line":19,"code":"header?: Block;","doc":"<p>Block to be displayed as a header, may be undefined (observed).</p>\n","declType":"Block"},{"id":"DialogContainer/initializeWith","name":"initializeWith","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/DialogContainer.d.ts","line":17,"code":"initializeWith: (values: DialogContainer.Initializer) => this;","doc":"<p>Initialize with given (observable) properties; returns this.</p>\n","declType":"(values: DialogContainer.Initializer) => this"},{"id":"DialogContainer/setDragHandle","name":"setDragHandle","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Containers/DialogContainer.d.ts","line":25,"code":"setDragHandle(handle?: Component): void;","doc":"<p>Use given component as a drag handle for this dialog (and releases handle currently in use; defaults to .header).</p>\n","declType":"void"},{"id":"DialogContainer/Closed","name":"Closed","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Containers/DialogContainer.d.ts","line":33,"code":"readonly Closed: ComponentSignal.Emittable<void, typeof DialogContainer.CloseSignal>;","doc":"<p>Signal emitted when this dialog has been closed.</p>\n","declType":"ComponentSignal.Emittable<void, typeof DialogContainer.CloseSignal>","isSignal":true},{"id":"DialogContainer/Closing","name":"Closing","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Containers/DialogContainer.d.ts","line":31,"code":"readonly Closing: ComponentSignal.Emittable<void, typeof DialogContainer.CloseSignal>;","doc":"<p>Signal emitted when user clicks outside dialog, presses esc or clicks DialogContainer.TopCloseButton; if any handler throws an error then the dialog will not close.</p>\n","declType":"ComponentSignal.Emittable<void, typeof DialogContainer.CloseSignal>","isSignal":true}],"isNamespace":true,"sourceIdx":51,"inherits":["Component.addStyleOverride","Container.withContent","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Container/content","Container/display","Component/focusMode","Component/getActualDimensions","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Container/hasEmptyList","Component/hasFocus","Component/height","Component/hidden","Container/horzAlign","Component/hoverState","Component/id","Component/initialize","Container/maxContentWidth","Component/out","Component/render","Component/renderOptions","Container/scrollBottomThreshold","Container/scrollTopThreshold","Container/scrollable","Container/scrolledToBottom","Container/scrolledToLeft","Container/scrolledToRight","Container/scrolledToTop","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Component/style","Component/uid","Container/vertAlign","Component/width","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"Divider","name":"Divider","isClass":true,"file":"./packages/ui/typings/UI/Components/Blocks/Divider.d.ts","line":3,"code":"class Divider extends Block","doc":"<p>Represents a divider block element (horizontal line placed between blocks);.</p>\n","extends":["Block"],"items":[{"id":"Divider.COLOR","name":"COLOR","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Divider.d.ts","line":21,"code":"static COLOR: string;","doc":"<p>Default line color (black, 90% transparency).</p>\n","declType":"string"},{"id":"Divider.Initializer","name":"Initializer","isInterface":true,"file":"./packages/ui/typings/UI/Components/Blocks/Divider.d.ts","line":31,"code":"interface Initializer extends Block.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["Block.Initializer"],"items":[{"id":"Divider.Initializer/color","name":"color","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Divider.d.ts","line":35,"code":"color?: UIValueOrAsync<string>;","doc":"<p>Property initializer: line color (CSS color).</p>\n","declType":"UIValueOrAsync<string>"},{"id":"Divider.Initializer/insetLeft","name":"insetLeft","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Divider.d.ts","line":41,"code":"insetLeft?: UIValueOrAsync<string>;","doc":"<p>Property initializer: left side inset (CSS length).</p>\n","declType":"UIValueOrAsync<string>"},{"id":"Divider.Initializer/insetRight","name":"insetRight","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Divider.d.ts","line":43,"code":"insetRight?: UIValueOrAsync<string>;","doc":"<p>Property initializer: right side inset (CSS length).</p>\n","declType":"UIValueOrAsync<string>"},{"id":"Divider.Initializer/lineStyle","name":"lineStyle","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Divider.d.ts","line":33,"code":"lineStyle?: UIValueOrAsync<string>;","doc":"<p>Property initializer: line style (CSS property).</p>\n","declType":"UIValueOrAsync<string>"},{"id":"Divider.Initializer/margin","name":"margin","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Divider.d.ts","line":39,"code":"margin?: UIValueOrAsync<string>;","doc":"<p>Property initializer: space around line (CSS length).</p>\n","declType":"UIValueOrAsync<string>"},{"id":"Divider.Initializer/thickness","name":"thickness","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Divider.d.ts","line":37,"code":"thickness?: UIValueOrAsync<string>;","doc":"<p>Property initializer: line weight (CSS length).</p>\n","declType":"UIValueOrAsync<string>"}],"inherits":["Component.Initializer/ArrowDownKeyPressed","Component.Initializer/ArrowLeftKeyPressed","Component.Initializer/ArrowRightKeyPressed","Component.Initializer/ArrowUpKeyPressed","Component.Initializer/BackspaceKeyPressed","Component.Initializer/Blur","Component.Initializer/Click","Component.Initializer/Clicked","Component.Initializer/DeleteKeyPressed","Component.Initializer/DoubleClick","Component.Initializer/DoubleClicked","Component.Initializer/DragDrop","Component.Initializer/DragEnter","Component.Initializer/DragLeave","Component.Initializer/DragStart","Component.Initializer/EnterKeyPressed","Component.Initializer/EscapeKeyPressed","Component.Initializer/Focus","Component.Initializer/FocusGained","Component.Initializer/FocusLost","Component.Initializer/KeyDown","Component.Initializer/KeyPress","Component.Initializer/MouseContextMenu","Component.Initializer/MouseEnter","Component.Initializer/MouseLeave","Component.Initializer/Press","Component.Initializer/Pressed","Component.Initializer/Rendered","Component.Initializer/SpaceBarPressed","Component.Initializer/animations","Block.Initializer/displayOptions","Component.Initializer/focusMode","Component.Initializer/hasFocus","Component.Initializer/height","Component.Initializer/hidden","Component.Initializer/id","Block.Initializer/overlayPosition","Component.Initializer/renderOptions","Component.Initializer/selected","Component.Initializer/selectionMode","Component.Initializer/shadowEffect","Component.Initializer/shadowEffectOnFocus","Component.Initializer/shadowEffectOnHover","Component.Initializer/style","Component.Initializer/width"]},{"id":"Divider.LINE_STYLE","name":"LINE_STYLE","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Divider.d.ts","line":25,"code":"static LINE_STYLE: string;","doc":"<p>Default line style (solid).</p>\n","declType":"string"},{"id":"Divider.MARGIN","name":"MARGIN","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Divider.d.ts","line":27,"code":"static MARGIN: string;","doc":"<p>Default margin (1/2 rem).</p>\n","declType":"string"},{"id":"Divider.THICKNESS","name":"THICKNESS","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Divider.d.ts","line":23,"code":"static THICKNESS: string;","doc":"<p>Default line thickness (1px).</p>\n","declType":"string"},{"id":"Divider.constructor","name":"new Divider","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Blocks/Divider.d.ts","line":5,"code":"constructor(color?: string, thickness?: string, margin?: string, insetLeft?: string, insetRight?: string);","doc":"<p>Create a new divider with given (optional) properties.</p>\n"},{"id":"Divider/color","name":"color","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Divider.d.ts","line":11,"code":"color: string;","doc":"<p>Divider color (observed).</p>\n","declType":"string"},{"id":"Divider/initializeWith","name":"initializeWith","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Divider.d.ts","line":7,"code":"initializeWith: (values: Divider.Initializer) => this;","doc":"<p>Initialize with given (observable) properties; returns this.</p>\n","declType":"(values: Divider.Initializer) => this"},{"id":"Divider/insetLeft","name":"insetLeft","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Divider.d.ts","line":17,"code":"insetLeft: string;","doc":"<p>Horizontal inset on left side (CSS value, observed).</p>\n","declType":"string"},{"id":"Divider/insetRight","name":"insetRight","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Divider.d.ts","line":19,"code":"insetRight: string;","doc":"<p>Horizontal inset on right side (CSS value, observed).</p>\n","declType":"string"},{"id":"Divider/lineStyle","name":"lineStyle","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Divider.d.ts","line":9,"code":"lineStyle: string;","doc":"<p>Line style, e.g. dashed, dotted, double, solid (CSS value, observed).</p>\n","declType":"string"},{"id":"Divider/margin","name":"margin","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Divider.d.ts","line":15,"code":"margin: string;","doc":"<p>Vertical whitespace around divider (CSS value, observed).</p>\n","declType":"string"},{"id":"Divider/thickness","name":"thickness","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Divider.d.ts","line":13,"code":"thickness: string;","doc":"<p>Divider thickness (CSS value, observed).</p>\n","declType":"string"}],"isNamespace":true,"sourceIdx":10,"inherits":["Component.addStyleOverride","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Block/displayOptions","Component/focusMode","Component/getActualDimensions","Component/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Component/id","Component/initialize","Component/out","Block/overlayPosition","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Component/style","Component/uid","Component/width","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"Drag","name":"Drag","isClass":true,"file":"./packages/ui/typings/UI/Drag.d.ts","line":6,"code":"class Drag","doc":"<p>Represents a drag operation (created by static .start(…) method).</p>\n","items":[{"id":"Drag.DragEventDetail","name":"DragEventDetail","isInterface":true,"file":"./packages/ui/typings/UI/Drag.d.ts","line":34,"code":"interface DragEventDetail","doc":"<p>Details that are emitted along with a drag event.</p>\n","isStatic":true,"items":[{"id":"Drag.DragEventDetail/data","name":"data","isProperty":true,"file":"./packages/ui/typings/UI/Drag.d.ts","line":38,"code":"data: undefined;","doc":"<p>Application defined payload to identify the object being dragged.</p>\n","declType":"undefined"},{"id":"Drag.DragEventDetail/id","name":"id","isProperty":true,"file":"./packages/ui/typings/UI/Drag.d.ts","line":36,"code":"id: undefined;","doc":"<p>Platform-specific drag event identifier (may be undefined).</p>\n","declType":"undefined"}]},{"id":"Drag.getCurrentInstances","name":"getCurrentInstances","hasParams":false,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Drag.d.ts","line":8,"code":"static getCurrentInstances(): Drag[];","doc":"<p>Returns a list of current drag operations (for forwards compatibility, supporting multi touch); use this while handling drag events, e.g. get/set .detail with custom data, or observe coordinates).</p>\n","declType":"Drag[]"},{"id":"Drag.start","name":"start","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Drag.d.ts","line":10,"code":"static start(event: PointerEvent, data?: any): Drag;","doc":"<p>Start tracking mouse movement based on given event (with initial screen coordinates); creates a new instance of a platform specific class derived from Drag with given payload data; Drop targets may listen for drag events (enter/leave/drop), and use information from the data object to respond.</p>\n","declType":"Drag"},{"id":"Drag/cancel","name":"cancel","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Drag.d.ts","line":28,"code":"cancel(): void;","doc":"<p>Stop this drag operation, emits the <code>.Canceled</code> signal; throws an exception if this operation was already canceled or dropped.</p>\n","declType":"void"},{"id":"Drag/constrain","name":"constrain","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Drag.d.ts","line":24,"code":"abstract constrain(constrainX?: boolean, constrainY?: boolean, component?: Component): void;","doc":"<p>Constrain effective drag coordinates on (original) X and/or Y axis of the viewport, and/or contrain to stay within given component on screen (calling this method twice does not constrain further, but the constraints are replaced).</p>\n","declType":"void"},{"id":"Drag/detail","name":"detail","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Drag.d.ts","line":12,"code":"readonly detail: Drag.DragEventDetail;","doc":"<p>Event payload data for this operation (sealed observable object).</p>\n","declType":"Drag.DragEventDetail"},{"id":"Drag/drop","name":"drop","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Drag.d.ts","line":30,"code":"drop(): void;","doc":"<p>Accept the current drop target (i.e. perform the drop, called automatically based on input events, but can be called manually as well), emits the <code>.Dropped</code> signal; throws an exception if this operation was already canceled or dropped.</p>\n","declType":"void"},{"id":"Drag/moved","name":"moved","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Drag.d.ts","line":18,"code":"readonly abstract moved: PromiseLike<Drag>;","doc":"<p>Resolves to <code>this</code> when the observed coordinates actually change by a reasonable amount (to distinguish from a click), useful e.g. for calling <code>.pickUp(...)</code> only when resolved.</p>\n","declType":"PromiseLike<Drag>","isAsync":true},{"id":"Drag/pickUp","name":"pickUp","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Drag.d.ts","line":26,"code":"abstract pickUp(component: Component, removeWhenDone?: boolean): void;","doc":"<p>Make given component follow the mouse cursor while dragging.</p>\n","declType":"void"},{"id":"Drag/x","name":"x","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Drag.d.ts","line":14,"code":"readonly abstract x: number;","doc":"<p>Current screen X coordinate (read-only observable, constrained).</p>\n","declType":"number"},{"id":"Drag/y","name":"y","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Drag.d.ts","line":16,"code":"readonly abstract y: number;","doc":"<p>Current screen Y coordinate (read-only observable, constrained).</p>\n","declType":"number"},{"id":"Drag/Canceled","name":"Canceled","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Drag.d.ts","line":22,"code":"readonly Canceled: Async.Signal.Emittable<Drag, typeof DragEndSignal>;","doc":"<p>Signal emitted when the drag operation is canceled.</p>\n","declType":"Async.Signal.Emittable<Drag, typeof DragEndSignal>","isSignal":true},{"id":"Drag/Dropped","name":"Dropped","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Drag.d.ts","line":20,"code":"readonly Dropped: Async.Signal.Emittable<Drag, typeof DragEndSignal>;","doc":"<p>Signal emitted when the drag operation completes successfully.</p>\n","declType":"Async.Signal.Emittable<Drag, typeof DragEndSignal>","isSignal":true}],"isNamespace":true,"sourceIdx":91},{"id":"DragEndSignal","name":"DragEndSignal","isClass":true,"file":"./packages/ui/typings/UI/Drag.d.ts","line":3,"code":"class DragEndSignal extends Async.Signal<Drag>","doc":"<p>Represents a signal that is emitted when a drag operation is completed (drop or cancel).</p>\n","extends":["Async.Signal"],"items":[],"sourceIdx":90},{"id":"DragEvent","name":"DragEvent","isInterface":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":67,"code":"interface DragEvent","doc":"<p>Interface definition of a drag event with payload.</p>\n","items":[{"id":"DragEvent/detail","name":"detail","isProperty":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":69,"code":"detail: Drag.DragEventDetail;","doc":"<p>Event payload</p>\n","declType":"Drag.DragEventDetail"}],"sourceIdx":37},{"id":"DragEventSignal","name":"DragEventSignal","isClass":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":87,"code":"class DragEventSignal extends ComponentSignal<DragEvent>","doc":"<p>Signal that is emitted when a custom drag event occurs.</p>\n","extends":["ComponentSignal"],"items":[],"sourceIdx":43},{"id":"DragHandler","name":"DragHandler","isClass":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":90,"code":"class DragHandler extends ComponentSignalHandler<DragEvent, typeof DragEventSignal>","doc":"<p>Constructor for a drag event handler.</p>\n","extends":["ComponentSignalHandler"],"items":[],"sourceIdx":44,"inherits":["ComponentSignalHandler.!call","ComponentSignalHandler/connectTo","ComponentSignalHandler/isEventHandler"]},{"id":"DrawerContainer","name":"DrawerContainer","isClass":true,"file":"./packages/ui/typings/UI/Components/Containers/DrawerContainer.d.ts","line":5,"code":"class DrawerContainer extends DialogContainer","doc":"<p>Represents a modal container displayed on the side of the screen.</p>\n","extends":["DialogContainer"],"items":[{"id":"DrawerContainer.APPEAR_ANIMATION","name":"APPEAR_ANIMATION","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/DrawerContainer.d.ts","line":9,"code":"static APPEAR_ANIMATION?: Animation;","doc":"<p>Default “appear” animation, added to every new <code>DrawerContainer</code> instance by the constructor.</p>\n","declType":"Animation"},{"id":"DrawerContainer.DISAPPEAR_ANIMATION","name":"DISAPPEAR_ANIMATION","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/DrawerContainer.d.ts","line":11,"code":"static DISAPPEAR_ANIMATION?: Animation;","doc":"<p>Default “disappear” animation, added to every new <code>DrawerContainer</code> instance by the constructor.</p>\n","declType":"Animation"},{"id":"DrawerContainer.with","name":"with","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/DrawerContainer.d.ts","line":13,"code":"static with: (values: DialogContainer.Initializer) => ComponentFactory<DrawerContainer>;","doc":"<p>Initialize a drawer factory with given properties.</p>\n","declType":"(values: DialogContainer.Initializer) => ComponentFactory<DrawerContainer>"},{"id":"DrawerContainer.constructor","name":"new DrawerContainer","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Containers/DrawerContainer.d.ts","line":7,"code":"constructor(content?: Block[], width?: string);","doc":"<p>Create a drawer component with given content, if any.</p>\n"},{"id":"DrawerContainer/initializeWith","name":"initializeWith","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/DrawerContainer.d.ts","line":15,"code":"initializeWith: (values: DialogContainer.Initializer) => this;","doc":"<p>Initialize with given (observable) properties; returns this.</p>\n","declType":"(values: DialogContainer.Initializer) => this"}],"sourceIdx":52,"textSeeAlso":"OppositeDrawerContainer","text":[{"title":"","content":"<p>For a drawer on the right side of the screen, use <code>OppositeDrawerContainer</code>.</p>\n"}],"inherits":["Component.addStyleOverride","Container.withContent","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","DialogContainer/close","Container/content","Container/display","DialogContainer/displayOptions","Component/focusMode","DialogContainer/footer","Component/getActualDimensions","DialogContainer/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Container/hasEmptyList","Component/hasFocus","DialogContainer/header","Component/height","Component/hidden","Container/horzAlign","Component/hoverState","Component/id","Component/initialize","Container/maxContentWidth","Component/out","Component/render","Component/renderOptions","Container/scrollBottomThreshold","Container/scrollTopThreshold","Container/scrollable","Container/scrolledToBottom","Container/scrolledToLeft","Container/scrolledToRight","Container/scrolledToTop","Component/selected","Component/selectionMode","DialogContainer/setDragHandle","Component/setFormValues","Component/shadowEffect","Component/style","Component/uid","Container/vertAlign","Component/width","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","DialogContainer/Closed","DialogContainer/Closing","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"FlowContainer","name":"FlowContainer","isClass":true,"file":"./packages/ui/typings/UI/Components/Containers/Container.d.ts","line":51,"code":"class FlowContainer extends Container","doc":"<p>Represents a container with blocks that are laid out in rows, automatically spanning multiple rows if necessary.</p>\n","extends":["Container"],"items":[],"sourceIdx":50,"inherits":["Component.addStyleOverride","Container.withContent","Container.constructor","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Container/content","Container/display","Container/displayOptions","Component/focusMode","Component/getActualDimensions","Container/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Container/hasEmptyList","Component/hasFocus","Component/height","Component/hidden","Container/horzAlign","Component/hoverState","Component/id","Component/initialize","Container/initializeWith","Container/maxContentWidth","Component/out","Component/render","Component/renderOptions","Container/scrollBottomThreshold","Container/scrollTopThreshold","Container/scrollable","Container/scrolledToBottom","Container/scrolledToLeft","Container/scrolledToRight","Container/scrolledToTop","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Component/style","Component/uid","Container/vertAlign","Component/width","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"Heading1","name":"Heading1","isClass":true,"file":"./packages/ui/typings/UI/Components/Controls/Label.d.ts","line":56,"code":"class Heading1 extends Label","doc":"<p>H1 label control.</p>\n","extends":["Label"],"items":[],"sourceIdx":77,"inherits":["Component.addStyleOverride","Label.withText","Label.constructor","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Label/badge","Component/focusMode","Component/getActualDimensions","Component/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Label/icon","Component/id","Component/initialize","Label/initializeWith","Component/out","Label/remGutter","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Label/shrinkwrap","Component/style","Label/text","Label/tooltipText","Component/uid","ControlElement/width","ControlElement/wrapText","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"Heading2","name":"Heading2","isClass":true,"file":"./packages/ui/typings/UI/Components/Controls/Label.d.ts","line":59,"code":"class Heading2 extends Label","doc":"<p>H2 label control.</p>\n","extends":["Label"],"items":[],"sourceIdx":78,"inherits":["Component.addStyleOverride","Label.withText","Label.constructor","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Label/badge","Component/focusMode","Component/getActualDimensions","Component/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Label/icon","Component/id","Component/initialize","Label/initializeWith","Component/out","Label/remGutter","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Label/shrinkwrap","Component/style","Label/text","Label/tooltipText","Component/uid","ControlElement/width","ControlElement/wrapText","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"Heading3","name":"Heading3","isClass":true,"file":"./packages/ui/typings/UI/Components/Controls/Label.d.ts","line":62,"code":"class Heading3 extends Label","doc":"<p>H3 label control.</p>\n","extends":["Label"],"items":[],"sourceIdx":79,"inherits":["Component.addStyleOverride","Label.withText","Label.constructor","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Label/badge","Component/focusMode","Component/getActualDimensions","Component/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Label/icon","Component/id","Component/initialize","Label/initializeWith","Component/out","Label/remGutter","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Label/shrinkwrap","Component/style","Label/text","Label/tooltipText","Component/uid","ControlElement/width","ControlElement/wrapText","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"Heading4","name":"Heading4","isClass":true,"file":"./packages/ui/typings/UI/Components/Controls/Label.d.ts","line":65,"code":"class Heading4 extends Label","doc":"<p>H4 label control.</p>\n","extends":["Label"],"items":[],"sourceIdx":80,"inherits":["Component.addStyleOverride","Label.withText","Label.constructor","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Label/badge","Component/focusMode","Component/getActualDimensions","Component/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Label/icon","Component/id","Component/initialize","Label/initializeWith","Component/out","Label/remGutter","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Label/shrinkwrap","Component/style","Label/text","Label/tooltipText","Component/uid","ControlElement/width","ControlElement/wrapText","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"Heading5","name":"Heading5","isClass":true,"file":"./packages/ui/typings/UI/Components/Controls/Label.d.ts","line":68,"code":"class Heading5 extends Label","doc":"<p>H5 label control.</p>\n","extends":["Label"],"items":[],"sourceIdx":81,"inherits":["Component.addStyleOverride","Label.withText","Label.constructor","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Label/badge","Component/focusMode","Component/getActualDimensions","Component/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Label/icon","Component/id","Component/initialize","Label/initializeWith","Component/out","Label/remGutter","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Label/shrinkwrap","Component/style","Label/text","Label/tooltipText","Component/uid","ControlElement/width","ControlElement/wrapText","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"Heading6","name":"Heading6","isClass":true,"file":"./packages/ui/typings/UI/Components/Controls/Label.d.ts","line":71,"code":"class Heading6 extends Label","doc":"<p>H6 label control.</p>\n","extends":["Label"],"items":[],"sourceIdx":82,"inherits":["Component.addStyleOverride","Label.withText","Label.constructor","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Label/badge","Component/focusMode","Component/getActualDimensions","Component/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Label/icon","Component/id","Component/initialize","Label/initializeWith","Component/out","Label/remGutter","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Label/shrinkwrap","Component/style","Label/text","Label/tooltipText","Component/uid","ControlElement/width","ControlElement/wrapText","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"Icon","name":"Icon","isClass":true,"file":"./packages/ui/typings/UI/Components/Controls/Icon.d.ts","line":4,"code":"class Icon extends ControlElement","doc":"<p>Represents an icon control (horizontally centered).</p>\n","extends":["ControlElement"],"items":[{"id":"Icon.Initializer","name":"Initializer","isInterface":true,"file":"./packages/ui/typings/UI/Components/Controls/Icon.d.ts","line":23,"code":"interface Initializer extends ControlElement.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["ControlElement.Initializer"],"items":[{"id":"Icon.Initializer/icon","name":"icon","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Icon.d.ts","line":25,"code":"icon?: UIValueOrAsync<string>;","doc":"<p>Property initializer: icon to display.</p>\n","declType":"UIValueOrAsync<string>"},{"id":"Icon.Initializer/tooltipText","name":"tooltipText","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Icon.d.ts","line":27,"code":"tooltipText?: UIValueOrAsync<string | TextLabelFactory>;","doc":"<p>Property initializer: tooltip text.</p>\n","declType":"UIValueOrAsync<string | TextLabelFactory>"}],"inherits":["Component.Initializer/ArrowDownKeyPressed","Component.Initializer/ArrowLeftKeyPressed","Component.Initializer/ArrowRightKeyPressed","Component.Initializer/ArrowUpKeyPressed","Component.Initializer/BackspaceKeyPressed","Component.Initializer/Blur","Component.Initializer/Click","Component.Initializer/Clicked","Component.Initializer/DeleteKeyPressed","Component.Initializer/DoubleClick","Component.Initializer/DoubleClicked","Component.Initializer/DragDrop","Component.Initializer/DragEnter","Component.Initializer/DragLeave","Component.Initializer/DragStart","Component.Initializer/EnterKeyPressed","Component.Initializer/EscapeKeyPressed","Component.Initializer/Focus","Component.Initializer/FocusGained","Component.Initializer/FocusLost","Component.Initializer/KeyDown","Component.Initializer/KeyPress","Component.Initializer/MouseContextMenu","Component.Initializer/MouseEnter","Component.Initializer/MouseLeave","Component.Initializer/Press","Component.Initializer/Pressed","Component.Initializer/Rendered","Component.Initializer/SpaceBarPressed","Component.Initializer/animations","Component.Initializer/focusMode","ControlElement.Initializer/hasFocus","Component.Initializer/height","Component.Initializer/hidden","Component.Initializer/id","Component.Initializer/renderOptions","Component.Initializer/selected","Component.Initializer/selectionMode","Component.Initializer/shadowEffect","Component.Initializer/shadowEffectOnFocus","Component.Initializer/shadowEffectOnHover","ControlElement.Initializer/shrinkwrap","Component.Initializer/style","ControlElement.Initializer/width"]},{"id":"Icon.withIcon","name":"withIcon","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Controls/Icon.d.ts","line":8,"code":"static withIcon<T extends Icon>(this: { new (): T; with: typeof Icon.with; }, icon: UIValueOrAsync<string>): ComponentFactory<T>;","doc":"<p>Initialize an icon control with given icon name.</p>\n","typeParams":["T extends Icon"],"declType":"ComponentFactory<T>"},{"id":"Icon.constructor","name":"new Icon","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Controls/Icon.d.ts","line":6,"code":"constructor(icon?: string);","doc":"<p>Create an icon element.</p>\n"},{"id":"Icon/icon","name":"icon","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Icon.d.ts","line":15,"code":"icon: string;","doc":"<p>Icon name as CSS class(es), e.g. “glyphicon-edit” or “fa-edit fa-2x” or “material-icons:file_download”; first part is repeated Bootstrap-style automatically, e.g. “fa-edit” becomes “fa fa-edit”; observed); style properties can be appended like “fa-edit color=#ccc fontSize=200%” (or font-size); use quotes to wrap values with spaces, e.g. ‘fa-edit border=“1px solid #ccc”’.</p>\n","declType":"string"},{"id":"Icon/initializeWith","name":"initializeWith","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Icon.d.ts","line":13,"code":"initializeWith: (values: Icon.Initializer) => this;","doc":"<p>Initialize with given (observable) properties; returns this.</p>\n","declType":"(values: Icon.Initializer) => this"},{"id":"Icon/shrinkwrap","name":"shrinkwrap","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Icon.d.ts","line":19,"code":"shrinkwrap: boolean;","doc":"<p>Set to false to expand horizontally within row (observed).</p>\n","declType":"boolean"},{"id":"Icon/tooltipText","name":"tooltipText","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Icon.d.ts","line":17,"code":"tooltipText: string;","doc":"<p>Tooltip text (observed).</p>\n","declType":"string"}],"isNamespace":true,"sourceIdx":68,"inherits":["Component.addStyleOverride","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Component/focusMode","Component/getActualDimensions","Component/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Component/id","Component/initialize","Component/out","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Component/style","Component/uid","ControlElement/width","ControlElement/wrapText","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"Image","name":"Image","isClass":true,"file":"./packages/ui/typings/UI/Components/Controls/Image.d.ts","line":5,"code":"class Image extends ControlElement","doc":"<p>Represents an image control.</p>\n","extends":["ControlElement"],"items":[{"id":"Image.Initializer","name":"Initializer","isInterface":true,"file":"./packages/ui/typings/UI/Components/Controls/Image.d.ts","line":30,"code":"interface Initializer extends ControlElement.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["ControlElement.Initializer"],"items":[{"id":"Image.Initializer/imageUrl","name":"imageUrl","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Image.d.ts","line":32,"code":"imageUrl?: UIValueOrAsync<string>;","doc":"<p>Property initializer: image URL.</p>\n","declType":"UIValueOrAsync<string>"},{"id":"Image.Initializer/style_img","name":"style_img","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Image.d.ts","line":34,"code":"style_img?: UIValueOrAsync<Style | Style.StyleSet>;","doc":"<p>Property initializer: image element style.</p>\n","declType":"UIValueOrAsync<Style | Style.StyleSet>"},{"id":"Image.Initializer/tooltipText","name":"tooltipText","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Image.d.ts","line":36,"code":"tooltipText?: UIValueOrAsync<string | TextLabelFactory>;","doc":"<p>Property initializer: tooltip text.</p>\n","declType":"UIValueOrAsync<string | TextLabelFactory>"}],"inherits":["Component.Initializer/ArrowDownKeyPressed","Component.Initializer/ArrowLeftKeyPressed","Component.Initializer/ArrowRightKeyPressed","Component.Initializer/ArrowUpKeyPressed","Component.Initializer/BackspaceKeyPressed","Component.Initializer/Blur","Component.Initializer/Click","Component.Initializer/Clicked","Component.Initializer/DeleteKeyPressed","Component.Initializer/DoubleClick","Component.Initializer/DoubleClicked","Component.Initializer/DragDrop","Component.Initializer/DragEnter","Component.Initializer/DragLeave","Component.Initializer/DragStart","Component.Initializer/EnterKeyPressed","Component.Initializer/EscapeKeyPressed","Component.Initializer/Focus","Component.Initializer/FocusGained","Component.Initializer/FocusLost","Component.Initializer/KeyDown","Component.Initializer/KeyPress","Component.Initializer/MouseContextMenu","Component.Initializer/MouseEnter","Component.Initializer/MouseLeave","Component.Initializer/Press","Component.Initializer/Pressed","Component.Initializer/Rendered","Component.Initializer/SpaceBarPressed","Component.Initializer/animations","Component.Initializer/focusMode","ControlElement.Initializer/hasFocus","Component.Initializer/height","Component.Initializer/hidden","Component.Initializer/id","Component.Initializer/renderOptions","Component.Initializer/selected","Component.Initializer/selectionMode","Component.Initializer/shadowEffect","Component.Initializer/shadowEffectOnFocus","Component.Initializer/shadowEffectOnHover","ControlElement.Initializer/shrinkwrap","Component.Initializer/style","ControlElement.Initializer/width"]},{"id":"Image.withUrl","name":"withUrl","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Controls/Image.d.ts","line":9,"code":"static withUrl<T extends Image>(this: { new (): T; with: typeof Image.with; }, imageUrl: UIValueOrAsync<string>): ComponentFactory<T>;","doc":"<p>Initialize an image control with given URL.</p>\n","typeParams":["T extends Image"],"declType":"ComponentFactory<T>"},{"id":"Image.constructor","name":"new Image","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Controls/Image.d.ts","line":7,"code":"constructor(imageUrl?: string);","doc":"<p>Create an image element.</p>\n"},{"id":"Image/hasError","name":"hasError","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Image.d.ts","line":24,"code":"hasError: boolean;","doc":"<p>True if a load error occurred (observable).</p>\n","declType":"boolean"},{"id":"Image/imageUrl","name":"imageUrl","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Image.d.ts","line":16,"code":"imageUrl: string;","doc":"<p>Image URL (observed).</p>\n","declType":"string"},{"id":"Image/initializeWith","name":"initializeWith","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Image.d.ts","line":14,"code":"initializeWith: (values: Image.Initializer) => this;","doc":"<p>Initialize with given (observable) properties; returns this.</p>\n","declType":"(values: Image.Initializer) => this"},{"id":"Image/ready","name":"ready","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Image.d.ts","line":26,"code":"ready: PromiseLike<void>;","doc":"<p>Promise that resolves when the image is loaded, or if an error occurred (see .hasError).</p>\n","declType":"PromiseLike<void>","isAsync":true},{"id":"Image/shrinkwrap","name":"shrinkwrap","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Image.d.ts","line":20,"code":"shrinkwrap: boolean;","doc":"<p>Set to false to expand horizontally within row (observed).</p>\n","declType":"boolean"},{"id":"Image/style_img","name":"style_img","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Controls/Image.d.ts","line":22,"code":"readonly style_img: Style;","doc":"<p>Encapsulation of image element style (observed).</p>\n","declType":"Style"},{"id":"Image/tooltipText","name":"tooltipText","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Image.d.ts","line":18,"code":"tooltipText: string;","doc":"<p>Tooltip text (observed).</p>\n","declType":"string"}],"isNamespace":true,"sourceIdx":69,"inherits":["Component.addStyleOverride","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Component/focusMode","Component/getActualDimensions","Component/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Component/id","Component/initialize","Component/out","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Component/style","Component/uid","ControlElement/width","ControlElement/wrapText","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"InputControl","name":"InputControl","isClass":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":6,"code":"class InputControl extends ControlElement","doc":"<p>Input field control base class (abstract).</p>\n","extends":["ControlElement"],"items":[{"id":"InputControl.Initializer","name":"Initializer","isInterface":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":28,"code":"interface Initializer extends ControlElement.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["ControlElement.Initializer"],"items":[{"id":"InputControl.Initializer/ValueChange","name":"ValueChange","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":44,"code":"ValueChange?: string | ActionHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | ActionHandler"},{"id":"InputControl.Initializer/ValueInput","name":"ValueInput","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":46,"code":"ValueInput?: string | ActionHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | ActionHandler"},{"id":"InputControl.Initializer/disabled","name":"disabled","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":38,"code":"disabled?: UIValueOrAsync<boolean>;","doc":"<p>Property initializer: true to disable this input.</p>\n","declType":"UIValueOrAsync<boolean>"},{"id":"InputControl.Initializer/label","name":"label","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":34,"code":"label?: UIValueOrAsync<string | undefined> | TextLabelFactory;","doc":"<p>Property initializer: label text.</p>\n","declType":"UIValueOrAsync<string | undefined> | TextLabelFactory"},{"id":"InputControl.Initializer/name","name":"name","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":30,"code":"name?: string;","doc":"<p>Property initializer: form input property name.</p>\n","declType":"string"},{"id":"InputControl.Initializer/style_input","name":"style_input","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":42,"code":"style_input?: UIValueOrAsync<Style | Style.StyleSet>;","doc":"<p>Property initializer: input style.</p>\n","declType":"UIValueOrAsync<Style | Style.StyleSet>"},{"id":"InputControl.Initializer/style_label","name":"style_label","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":40,"code":"style_label?: UIValueOrAsync<Style | Style.StyleSet>;","doc":"<p>Property initializer: label style.</p>\n","declType":"UIValueOrAsync<Style | Style.StyleSet>"},{"id":"InputControl.Initializer/tooltipText","name":"tooltipText","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":36,"code":"tooltipText?: UIValueOrAsync<string | undefined> | TextLabelFactory;","doc":"<p>Property initializer: tooltip text.</p>\n","declType":"UIValueOrAsync<string | undefined> | TextLabelFactory"},{"id":"InputControl.Initializer/value","name":"value","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":32,"code":"value?: UIValueOrAsync<string>;","doc":"<p>Property initializer: input value.</p>\n","declType":"UIValueOrAsync<string>"}],"inherits":["Component.Initializer/ArrowDownKeyPressed","Component.Initializer/ArrowLeftKeyPressed","Component.Initializer/ArrowRightKeyPressed","Component.Initializer/ArrowUpKeyPressed","Component.Initializer/BackspaceKeyPressed","Component.Initializer/Blur","Component.Initializer/Click","Component.Initializer/Clicked","Component.Initializer/DeleteKeyPressed","Component.Initializer/DoubleClick","Component.Initializer/DoubleClicked","Component.Initializer/DragDrop","Component.Initializer/DragEnter","Component.Initializer/DragLeave","Component.Initializer/DragStart","Component.Initializer/EnterKeyPressed","Component.Initializer/EscapeKeyPressed","Component.Initializer/Focus","Component.Initializer/FocusGained","Component.Initializer/FocusLost","Component.Initializer/KeyDown","Component.Initializer/KeyPress","Component.Initializer/MouseContextMenu","Component.Initializer/MouseEnter","Component.Initializer/MouseLeave","Component.Initializer/Press","Component.Initializer/Pressed","Component.Initializer/Rendered","Component.Initializer/SpaceBarPressed","Component.Initializer/animations","Component.Initializer/focusMode","ControlElement.Initializer/hasFocus","Component.Initializer/height","Component.Initializer/hidden","Component.Initializer/id","Component.Initializer/renderOptions","Component.Initializer/selected","Component.Initializer/selectionMode","Component.Initializer/shadowEffect","Component.Initializer/shadowEffectOnFocus","Component.Initializer/shadowEffectOnHover","ControlElement.Initializer/shrinkwrap","Component.Initializer/style","ControlElement.Initializer/width"]},{"id":"InputControl/disabled","name":"disabled","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":16,"code":"disabled: boolean;","doc":"<p>True if input is disabled and read-only (observed).</p>\n","declType":"boolean"},{"id":"InputControl/label","name":"label","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":12,"code":"label: string;","doc":"<p>Label text (observed).</p>\n","declType":"string"},{"id":"InputControl/name","name":"name","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":10,"code":"name: string;","doc":"<p>Form input property name, if any (observed).</p>\n","declType":"string"},{"id":"InputControl/style_input","name":"style_input","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":20,"code":"readonly style_input: Style;","doc":"<p>Encapsulation of input element style (observed).</p>\n","declType":"Style"},{"id":"InputControl/style_label","name":"style_label","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":18,"code":"readonly style_label: Style;","doc":"<p>Encapsulation of label element style (observed).</p>\n","declType":"Style"},{"id":"InputControl/tooltipText","name":"tooltipText","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":14,"code":"tooltipText: string;","doc":"<p>Tooltip text (observed).</p>\n","declType":"string"},{"id":"InputControl/value","name":"value","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":8,"code":"value: string;","doc":"<p>Input value (read/write).</p>\n","declType":"string"},{"id":"InputControl/ValueChange","name":"ValueChange","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":22,"code":"readonly ValueChange: ComponentSignal.Emittable<any, typeof ComponentSignal>;","doc":"<p>Signal emitted when the input value is committed (on change); captured from containers down to contained components, not consumed.</p>\n","declType":"ComponentSignal.Emittable<any, typeof ComponentSignal>","isSignal":true},{"id":"InputControl/ValueInput","name":"ValueInput","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":24,"code":"readonly ValueInput: ComponentSignal.Emittable<any, typeof ComponentSignal>;","doc":"<p>Signal emitted immediately before the input value changes (on input); captured from containers down to contained components, not consumed.</p>\n","declType":"ComponentSignal.Emittable<any, typeof ComponentSignal>","isSignal":true}],"isNamespace":true,"sourceIdx":71,"inherits":["Component.addStyleOverride","Component.constructor","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Component/focusMode","Component/getActualDimensions","Component/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Component/id","Component/initialize","ControlElement/initializeWith","Component/out","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","ControlElement/shrinkwrap","Component/style","Component/uid","ControlElement/width","ControlElement/wrapText","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"KeyEventSignal","name":"KeyEventSignal","isClass":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":75,"code":"class KeyEventSignal extends ComponentSignal<KeyboardEvent>","doc":"<p>Signal that is emitted when a keyboard event occurs.</p>\n","extends":["ComponentSignal"],"items":[],"sourceIdx":39},{"id":"KeyHandler","name":"KeyHandler","isClass":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":78,"code":"class KeyHandler extends ComponentSignalHandler<KeyboardEvent, typeof KeyEventSignal>","doc":"<p>Constructor for a keyboard event handler.</p>\n","extends":["ComponentSignalHandler"],"items":[],"sourceIdx":40,"inherits":["ComponentSignalHandler.!call","ComponentSignalHandler/connectTo","ComponentSignalHandler/isEventHandler"]},{"id":"KeyboardEvent","name":"KeyboardEvent","isInterface":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":31,"code":"interface KeyboardEvent","doc":"<p>Interface definition of a platform agnostic keyboard event.</p>\n","items":[{"id":"KeyboardEvent/altKey","name":"altKey","isProperty":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":33,"code":"altKey?: boolean;","doc":"<p>True if <code>alt</code> key is held down.</p>\n","declType":"boolean"},{"id":"KeyboardEvent/ctrlKey","name":"ctrlKey","isProperty":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":35,"code":"ctrlKey?: boolean;","doc":"<p>True if <code>ctrl</code> key is held down.</p>\n","declType":"boolean"},{"id":"KeyboardEvent/keyCode","name":"keyCode","isProperty":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":41,"code":"keyCode?: number;","doc":"<p>Key code, used with key up/down events.</p>\n","declType":"number"},{"id":"KeyboardEvent/metaKey","name":"metaKey","isProperty":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":37,"code":"metaKey?: boolean;","doc":"<p>True if <code>meta</code> key is held down.</p>\n","declType":"boolean"},{"id":"KeyboardEvent/preventDefault","name":"preventDefault","isProperty":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":45,"code":"preventDefault?: () => void;","doc":"<p>Stop the default action for this event from taking place.</p>\n","declType":"() => void"},{"id":"KeyboardEvent/shiftKey","name":"shiftKey","isProperty":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":39,"code":"shiftKey?: boolean;","doc":"<p>True if <code>shift</code> key is held down.</p>\n","declType":"boolean"},{"id":"KeyboardEvent/which","name":"which","isProperty":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":43,"code":"which?: number;","doc":"<p>Character code (usually ASCII), used with key press events.</p>\n","declType":"number"}],"sourceIdx":35},{"id":"Label","name":"Label","isClass":true,"file":"./packages/ui/typings/UI/Components/Controls/Label.d.ts","line":5,"code":"class Label extends ControlElement","doc":"<p>Represents a minimal text control with icon and badge.</p>\n","extends":["ControlElement"],"items":[{"id":"Label.Initializer","name":"Initializer","isInterface":true,"file":"./packages/ui/typings/UI/Components/Controls/Label.d.ts","line":30,"code":"interface Initializer extends ControlElement.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["ControlElement.Initializer"],"items":[{"id":"Label.Initializer/badge","name":"badge","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Label.d.ts","line":38,"code":"badge?: UIValueOrAsync<string | TextLabelFactory>;","doc":"<p>Property initializer: badge text to display.</p>\n","declType":"UIValueOrAsync<string | TextLabelFactory>"},{"id":"Label.Initializer/icon","name":"icon","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Label.d.ts","line":34,"code":"icon?: UIValueOrAsync<string>;","doc":"<p>Property initializer: icon to display.</p>\n","declType":"UIValueOrAsync<string>"},{"id":"Label.Initializer/remGutter","name":"remGutter","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Label.d.ts","line":36,"code":"remGutter?: UIValueOrAsync<number>;","doc":"<p>Property initializer: space reserved for icon, in rem units.</p>\n","declType":"UIValueOrAsync<number>"},{"id":"Label.Initializer/text","name":"text","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Label.d.ts","line":32,"code":"text?: UIValueOrAsync<string | TextLabelFactory>;","doc":"<p>Property initializer: text to display.</p>\n","declType":"UIValueOrAsync<string | TextLabelFactory>"},{"id":"Label.Initializer/tooltipText","name":"tooltipText","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Label.d.ts","line":40,"code":"tooltipText?: UIValueOrAsync<string | TextLabelFactory>;","doc":"<p>Property initializer: tooltip text.</p>\n","declType":"UIValueOrAsync<string | TextLabelFactory>"}],"inherits":["Component.Initializer/ArrowDownKeyPressed","Component.Initializer/ArrowLeftKeyPressed","Component.Initializer/ArrowRightKeyPressed","Component.Initializer/ArrowUpKeyPressed","Component.Initializer/BackspaceKeyPressed","Component.Initializer/Blur","Component.Initializer/Click","Component.Initializer/Clicked","Component.Initializer/DeleteKeyPressed","Component.Initializer/DoubleClick","Component.Initializer/DoubleClicked","Component.Initializer/DragDrop","Component.Initializer/DragEnter","Component.Initializer/DragLeave","Component.Initializer/DragStart","Component.Initializer/EnterKeyPressed","Component.Initializer/EscapeKeyPressed","Component.Initializer/Focus","Component.Initializer/FocusGained","Component.Initializer/FocusLost","Component.Initializer/KeyDown","Component.Initializer/KeyPress","Component.Initializer/MouseContextMenu","Component.Initializer/MouseEnter","Component.Initializer/MouseLeave","Component.Initializer/Press","Component.Initializer/Pressed","Component.Initializer/Rendered","Component.Initializer/SpaceBarPressed","Component.Initializer/animations","Component.Initializer/focusMode","ControlElement.Initializer/hasFocus","Component.Initializer/height","Component.Initializer/hidden","Component.Initializer/id","Component.Initializer/renderOptions","Component.Initializer/selected","Component.Initializer/selectionMode","Component.Initializer/shadowEffect","Component.Initializer/shadowEffectOnFocus","Component.Initializer/shadowEffectOnHover","ControlElement.Initializer/shrinkwrap","Component.Initializer/style","ControlElement.Initializer/width"]},{"id":"Label.withText","name":"withText","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Controls/Label.d.ts","line":9,"code":"static withText<T extends Label>(this: { new (): T; with: typeof Label.with; }, text: UIValueOrAsync<string | TextLabelFactory>, style?: UIValueOrAsync<Style | Style.StyleSet>): ComponentFactory<T>;","doc":"<p>Initialize a text control factory with given text and style.</p>\n","typeParams":["T extends Label"],"declType":"ComponentFactory<T>"},{"id":"Label.constructor","name":"new Label","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Controls/Label.d.ts","line":7,"code":"constructor(text?: string | TextLabelFactory, icon?: string, remGutter?: number, badge?: string | TextLabelFactory);","doc":"<p>Create a label element.</p>\n"},{"id":"Label/badge","name":"badge","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Label.d.ts","line":24,"code":"badge: string;","doc":"<p>Badge text, if any (observed).</p>\n","declType":"string"},{"id":"Label/icon","name":"icon","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Label.d.ts","line":20,"code":"icon?: string;","doc":"<p>Icon to be placed in front of the label text (CSS class(es), e.g. “glyphicon-edit” or “fa-edit fa-2x” or “material-icons:file_download”; first part is repeated Bootstrap-style automatically, e.g. “fa-edit” becomes “fa fa-edit”; observed); style properties can be appended like “fa-edit color=#ccc fontSize=200%” (or font-size); use quotes to wrap values with spaces, e.g. ‘fa-edit border=“1px solid #ccc”’.</p>\n","declType":"string"},{"id":"Label/initializeWith","name":"initializeWith","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Label.d.ts","line":14,"code":"initializeWith: (values: Label.Initializer) => this;","doc":"<p>Initialize with given (observable) properties; returns this.</p>\n","declType":"(values: Label.Initializer) => this"},{"id":"Label/remGutter","name":"remGutter","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Label.d.ts","line":22,"code":"remGutter: number;","doc":"<p>Space reserved for icon (rem units), if &gt; 0 (observed).</p>\n","declType":"number"},{"id":"Label/shrinkwrap","name":"shrinkwrap","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Label.d.ts","line":16,"code":"shrinkwrap: boolean;","doc":"<p>Set to false to expand horizontally within row (default true; observed).</p>\n","declType":"boolean"},{"id":"Label/text","name":"text","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Label.d.ts","line":18,"code":"text: string;","doc":"<p>Text to display (observed).</p>\n","declType":"string"},{"id":"Label/tooltipText","name":"tooltipText","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Label.d.ts","line":26,"code":"tooltipText: string;","doc":"<p>Tooltip text (observed).</p>\n","declType":"string"}],"isNamespace":true,"sourceIdx":74,"inherits":["Component.addStyleOverride","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Component/focusMode","Component/getActualDimensions","Component/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Component/id","Component/initialize","Component/out","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Component/style","Component/uid","ControlElement/width","ControlElement/wrapText","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"LayoutContainer","name":"LayoutContainer","isClass":true,"file":"./packages/ui/typings/UI/Components/Containers/LayoutContainer.d.ts","line":4,"code":"class LayoutContainer extends Container","doc":"<p>Represents a container with sub containers on up to four sides, and a main area with vertically stacked blocks.</p>\n","extends":["Container"],"items":[{"id":"LayoutContainer.FOOTER_HEIGHT","name":"FOOTER_HEIGHT","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/LayoutContainer.d.ts","line":14,"code":"static FOOTER_HEIGHT: string;","doc":"<p>Default footer height, used when footer container has no defined height (CSS value, initially 2rem).</p>\n","declType":"string"},{"id":"LayoutContainer.HEADER_HEIGHT","name":"HEADER_HEIGHT","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/LayoutContainer.d.ts","line":12,"code":"static HEADER_HEIGHT: string;","doc":"<p>Default header height, used when header container has no defined height (CSS value, initially 4rem).</p>\n","declType":"string"},{"id":"LayoutContainer.Initializer","name":"Initializer","isInterface":true,"file":"./packages/ui/typings/UI/Components/Containers/LayoutContainer.d.ts","line":30,"code":"interface Initializer extends Container.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["Container.Initializer"],"items":[{"id":"LayoutContainer.Initializer/footer","name":"footer","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/LayoutContainer.d.ts","line":34,"code":"footer?: ComponentFactory.SpecEltOrList | null;","doc":"<p>Property initializer: footer container.</p>\n","declType":"ComponentFactory.SpecEltOrList | null"},{"id":"LayoutContainer.Initializer/header","name":"header","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/LayoutContainer.d.ts","line":32,"code":"header?: ComponentFactory.SpecEltOrList | null;","doc":"<p>Property initializer: header container.</p>\n","declType":"ComponentFactory.SpecEltOrList | null"},{"id":"LayoutContainer.Initializer/leftGutter","name":"leftGutter","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/LayoutContainer.d.ts","line":36,"code":"leftGutter?: ComponentFactory.SpecEltOrList | null;","doc":"<p>Property initializer: left side container.</p>\n","declType":"ComponentFactory.SpecEltOrList | null"},{"id":"LayoutContainer.Initializer/rightGutter","name":"rightGutter","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/LayoutContainer.d.ts","line":38,"code":"rightGutter?: ComponentFactory.SpecEltOrList | null;","doc":"<p>Property initializer: right side container.</p>\n","declType":"ComponentFactory.SpecEltOrList | null"}],"inherits":["Component.Initializer/ArrowDownKeyPressed","Component.Initializer/ArrowLeftKeyPressed","Component.Initializer/ArrowRightKeyPressed","Component.Initializer/ArrowUpKeyPressed","Component.Initializer/BackspaceKeyPressed","Component.Initializer/Blur","Component.Initializer/Click","Component.Initializer/Clicked","Component.Initializer/DeleteKeyPressed","Component.Initializer/DoubleClick","Component.Initializer/DoubleClicked","Component.Initializer/DragDrop","Component.Initializer/DragEnter","Component.Initializer/DragLeave","Component.Initializer/DragStart","Component.Initializer/EnterKeyPressed","Component.Initializer/EscapeKeyPressed","Component.Initializer/Focus","Component.Initializer/FocusGained","Component.Initializer/FocusLost","Component.Initializer/KeyDown","Component.Initializer/KeyPress","Component.Initializer/MouseContextMenu","Component.Initializer/MouseEnter","Component.Initializer/MouseLeave","Component.Initializer/Press","Component.Initializer/Pressed","Component.Initializer/Rendered","Component.Initializer/SpaceBarPressed","Component.Initializer/animations","Container.Initializer/content","Container.Initializer/displayOptions","Container.Initializer/focusFirst","Component.Initializer/focusMode","Component.Initializer/hasFocus","Component.Initializer/height","Component.Initializer/hidden","Container.Initializer/horzAlign","Component.Initializer/id","Container.Initializer/maxContentWidth","Component.Initializer/renderOptions","Container.Initializer/scrollBottomThreshold","Container.Initializer/scrollTopThreshold","Container.Initializer/scrollable","Component.Initializer/selected","Component.Initializer/selectionMode","Component.Initializer/shadowEffect","Component.Initializer/shadowEffectOnFocus","Component.Initializer/shadowEffectOnHover","Component.Initializer/style","Container.Initializer/vertAlign","Component.Initializer/width"]},{"id":"LayoutContainer.LEFT_GUTTER_WIDTH","name":"LEFT_GUTTER_WIDTH","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/LayoutContainer.d.ts","line":8,"code":"static LEFT_GUTTER_WIDTH: string;","doc":"<p>Default left gutter width, used when left gutter container has no defined width (CSS value, initially 18rem).</p>\n","declType":"string"},{"id":"LayoutContainer.RIGHT_GUTTER_WIDTH","name":"RIGHT_GUTTER_WIDTH","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/LayoutContainer.d.ts","line":10,"code":"static RIGHT_GUTTER_WIDTH: string;","doc":"<p>Default right gutter width, used when right gutter container has no defined width (CSS value, initially 22rem).</p>\n","declType":"string"},{"id":"LayoutContainer/footer","name":"footer","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/LayoutContainer.d.ts","line":18,"code":"footer?: Container;","doc":"<p>Footer container, if any (observed).</p>\n","declType":"Container"},{"id":"LayoutContainer/getChildren","name":"getChildren","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Containers/LayoutContainer.d.ts","line":26,"code":"getChildren(): Component[];","doc":"<p>Returns an array of directly contained components (observable).</p>\n","declType":"Component[]"},{"id":"LayoutContainer/header","name":"header","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/LayoutContainer.d.ts","line":16,"code":"header?: Container;","doc":"<p>Header container, if any (observed).</p>\n","declType":"Container"},{"id":"LayoutContainer/initializeWith","name":"initializeWith","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/LayoutContainer.d.ts","line":6,"code":"initializeWith: (values: LayoutContainer.Initializer) => this;","doc":"<p>Initialize with given (observable) properties; returns this.</p>\n","declType":"(values: LayoutContainer.Initializer) => this"},{"id":"LayoutContainer/leftGutter","name":"leftGutter","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/LayoutContainer.d.ts","line":20,"code":"leftGutter?: Container;","doc":"<p>Left gutter container, if any (observed).</p>\n","declType":"Container"},{"id":"LayoutContainer/rightGutter","name":"rightGutter","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/LayoutContainer.d.ts","line":22,"code":"rightGutter?: Container;","doc":"<p>Right gutter container, if any (observed).</p>\n","declType":"Container"},{"id":"LayoutContainer/scrollable","name":"scrollable","isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/LayoutContainer.d.ts","line":24,"code":"scrollable?: boolean;","doc":"<p>Set to true to make content within container scrollable; defaults to true for <code>LayoutContainer</code> (observed).</p>\n","declType":"boolean"}],"isNamespace":true,"sourceIdx":54,"inherits":["Component.addStyleOverride","Container.withContent","Container.constructor","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Container/content","Container/display","Container/displayOptions","Component/focusMode","Component/getActualDimensions","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Container/hasEmptyList","Component/hasFocus","Component/height","Component/hidden","Container/horzAlign","Component/hoverState","Component/id","Component/initialize","Container/maxContentWidth","Component/out","Component/render","Component/renderOptions","Container/scrollBottomThreshold","Container/scrollTopThreshold","Container/scrolledToBottom","Container/scrolledToLeft","Container/scrolledToRight","Container/scrolledToTop","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Component/style","Component/uid","Container/vertAlign","Component/width","Component/defineComponentSignal","Component/beforeFirstRender","Component/Renderer","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"LinkButton","name":"LinkButton","isClass":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":116,"code":"class LinkButton extends Button","doc":"<p>Link-styled button control (“btn-link” class).</p>\n","extends":["Button"],"items":[],"sourceIdx":60,"inherits":["Component.addStyleOverride","Button.withIcon","Button.withLabel","Button.constructor","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Button/badge","Button/disabled","Button/dropdown","Component/focusMode","Component/getActualDimensions","Component/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Button/icon","Button/iconAfter","Component/id","Component/initialize","Button/initializeWith","Button/label","Component/out","Button/popover","Button/popoverAbove","Button/popoverAnimation","Button/popoverTitle","Button/primary","Button/remGutter","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Button/shrinkwrap","Component/style","Button/style_button","Button/target","Button/tooltipText","Component/uid","ControlElement/width","ControlElement/wrapText","Component/defineComponentSignal","Component/beforeFirstRender","Component/Renderer","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Button/DropdownClicked","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"List","name":"List","isClass":true,"file":"./packages/ui/typings/UI/Components/Blocks/List.d.ts","line":7,"code":"class List<BlockT extends Block> extends Block","doc":"<p>Represents a list of blocks.</p>\n","extends":["Block"],"typeParams":["BlockT extends Block"],"items":[{"id":"List.Initializer","name":"Initializer","isInterface":true,"file":"./packages/ui/typings/UI/Components/Blocks/List.d.ts","line":44,"code":"interface Initializer<BlockT extends Block> extends Block.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["Block.Initializer"],"typeParams":["BlockT extends Block"],"items":[{"id":"List.Initializer/SelectionChange","name":"SelectionChange","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/List.d.ts","line":54,"code":"SelectionChange?: string | ListSelectionHandler<BlockT>;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | ListSelectionHandler<BlockT>"},{"id":"List.Initializer/divider","name":"divider","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/List.d.ts","line":48,"code":"divider?: Divider.Initializer;","doc":"<p>Divider initializer spec.</p>\n","declType":"Divider.Initializer"},{"id":"List.Initializer/items","name":"items","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/List.d.ts","line":46,"code":"items?: ComponentFactory.SpecList;","doc":"<p>Property initializer: list of items.</p>\n","declType":"ComponentFactory.SpecList"},{"id":"List.Initializer/name","name":"name","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/List.d.ts","line":52,"code":"name?: string;","doc":"<p>Property initializer: form values list name.</p>\n","declType":"string"},{"id":"List.Initializer/selectedIndex","name":"selectedIndex","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/List.d.ts","line":50,"code":"selectedIndex?: UIValueOrAsync<number>;","doc":"<p>Property initializer: (last) selected item index.</p>\n","declType":"UIValueOrAsync<number>"}],"inherits":["Component.Initializer/ArrowDownKeyPressed","Component.Initializer/ArrowLeftKeyPressed","Component.Initializer/ArrowRightKeyPressed","Component.Initializer/ArrowUpKeyPressed","Component.Initializer/BackspaceKeyPressed","Component.Initializer/Blur","Component.Initializer/Click","Component.Initializer/Clicked","Component.Initializer/DeleteKeyPressed","Component.Initializer/DoubleClick","Component.Initializer/DoubleClicked","Component.Initializer/DragDrop","Component.Initializer/DragEnter","Component.Initializer/DragLeave","Component.Initializer/DragStart","Component.Initializer/EnterKeyPressed","Component.Initializer/EscapeKeyPressed","Component.Initializer/Focus","Component.Initializer/FocusGained","Component.Initializer/FocusLost","Component.Initializer/KeyDown","Component.Initializer/KeyPress","Component.Initializer/MouseContextMenu","Component.Initializer/MouseEnter","Component.Initializer/MouseLeave","Component.Initializer/Press","Component.Initializer/Pressed","Component.Initializer/Rendered","Component.Initializer/SpaceBarPressed","Component.Initializer/animations","Block.Initializer/displayOptions","Component.Initializer/focusMode","Component.Initializer/hasFocus","Component.Initializer/height","Component.Initializer/hidden","Component.Initializer/id","Block.Initializer/overlayPosition","Component.Initializer/renderOptions","Component.Initializer/selected","Component.Initializer/selectionMode","Component.Initializer/shadowEffect","Component.Initializer/shadowEffectOnFocus","Component.Initializer/shadowEffectOnHover","Component.Initializer/style","Component.Initializer/width"]},{"id":"List.ItemEvent","name":"ItemEvent","isInterface":true,"file":"./packages/ui/typings/UI/Components/Blocks/List.d.ts","line":57,"code":"interface ItemEvent<T extends Block>","doc":"<p>Data that is emitted after the item selection of a list component changes.</p>\n","isStatic":true,"typeParams":["T extends Block"],"items":[{"id":"List.ItemEvent/index","name":"index","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/List.d.ts","line":59,"code":"index: number;","doc":"<p>The target item index.</p>\n","declType":"number"},{"id":"List.ItemEvent/item","name":"item","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/List.d.ts","line":61,"code":"item?: T;","doc":"<p>The target item.</p>\n","declType":"T"}]},{"id":"List.SelectionSignal","name":"SelectionSignal","isClass":true,"file":"./packages/ui/typings/UI/Components/Blocks/List.d.ts","line":64,"code":"class SelectionSignal<T extends Block> extends ComponentSignal<ItemEvent<T>>","doc":"<p>Signal that is emitted when a list selection event occurs.</p>\n","isStatic":true,"extends":["ComponentSignal"],"typeParams":["T extends Block"],"items":[]},{"id":"List.withItems","name":"withItems","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Blocks/List.d.ts","line":13,"code":"static withItems<T extends List<any>>(this: { new (): T; with: typeof List.with; }, items: ComponentFactory.SpecList): ComponentFactory<T>;","doc":"<p>Initialize a list factory with given items.</p>\n","typeParams":["T extends List<any>"],"declType":"ComponentFactory<T>"},{"id":"List.constructor","name":"new List","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Blocks/List.d.ts","line":9,"code":"constructor(items?: Array<BlockT | undefined>);","doc":"<p>Create a list component with given items.</p>\n"},{"id":"List/deselectAll","name":"deselectAll","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Blocks/List.d.ts","line":29,"code":"deselectAll(): void;","doc":"<p>Deselect all items currently in this list.</p>\n","declType":"void"},{"id":"List/divider","name":"divider","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/List.d.ts","line":25,"code":"divider: Divider.Initializer;","doc":"<p>Set to an initializer spec for the Divider component to insert a divider between each element (observed).</p>\n","declType":"Divider.Initializer"},{"id":"List/getChildren","name":"getChildren","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Blocks/List.d.ts","line":33,"code":"getChildren(): Component[];","doc":"<p>Returns an array of directly contained components (observable).</p>\n","declType":"Component[]"},{"id":"List/getFormValues","name":"getFormValues","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Blocks/List.d.ts","line":35,"code":"getFormValues(result?: {}): {};","doc":"<p>Returns an object containing all current values of input elements (observable).</p>\n","declType":"{}"},{"id":"List/initializeWith","name":"initializeWith","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/List.d.ts","line":18,"code":"initializeWith: (values: List.Initializer<BlockT>) => this;","doc":"<p>Initialize with given (observable) properties; returns this.</p>\n","declType":"(values: List.Initializer<BlockT>) => this"},{"id":"List/items","name":"items","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/List.d.ts","line":20,"code":"items: Array<BlockT | undefined>;","doc":"<p>List content (observed).</p>\n","declType":"Array<BlockT | undefined>"},{"id":"List/name","name":"name","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/List.d.ts","line":27,"code":"name: string;","doc":"<p>Set to a string value to have getFormValues add an ObservableArray with form values of list items.</p>\n","declType":"string"},{"id":"List/selectItem","name":"selectItem","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Blocks/List.d.ts","line":31,"code":"selectItem(item: BlockT | undefined): void;","doc":"<p>Select given item (block), and immediately deselect others if <code>.selectionMode</code> is <code>ItemClick</code> or <code>ItemFocus</code>; does <em>not</em> check if the item is included in <code>.items</code> at all for performance reasons.</p>\n","declType":"void"},{"id":"List/selectedIndex","name":"selectedIndex","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/List.d.ts","line":22,"code":"selectedIndex: number;","doc":"<p>Current (last) selected item index (base 0), or -1 if no item is selected (observed).</p>\n","declType":"number"},{"id":"List/setFormValues","name":"setFormValues","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Blocks/List.d.ts","line":37,"code":"setFormValues(values: any): void;","doc":"<p>Set all input values by element name.</p>\n","declType":"void"},{"id":"List/beforeFirstRender","name":"beforeFirstRender","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Blocks/List.d.ts","line":11,"code":"protected beforeFirstRender(renderer: ComponentRenderer<this, any>): void;","doc":"<p>Method that is called immediately after the renderer for this list is constructed; adds observers for item selection.</p>\n","isProtected":true,"declType":"void"},{"id":"List/SelectionChange","name":"SelectionChange","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Blocks/List.d.ts","line":39,"code":"readonly SelectionChange: ComponentSignal.Emittable<List.ItemEvent<any>, typeof List.SelectionSignal>;","doc":"<p>Signal emitted when the list selection changes, while displayed on screen.</p>\n","declType":"ComponentSignal.Emittable<List.ItemEvent<any>, typeof List.SelectionSignal>","isSignal":true}],"isNamespace":true,"sourceIdx":11,"inherits":["Component.addStyleOverride","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Block/displayOptions","Component/focusMode","Component/getActualDimensions","Component/getComponentById","Component/getComponentsByType","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Component/id","Component/initialize","Component/out","Block/overlayPosition","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/shadowEffect","Component/style","Component/uid","Component/width","Component/defineComponentSignal","Component/Renderer","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"ListSelectionHandler","name":"ListSelectionHandler","isClass":true,"file":"./packages/ui/typings/UI/Components/Blocks/List.d.ts","line":68,"code":"class ListSelectionHandler<T extends Block> extends ComponentSignalHandler<List.ItemEvent<T>, typeof List.SelectionSignal>","doc":"<p>Constructor for a list selection event handler.</p>\n","extends":["ComponentSignalHandler"],"typeParams":["T extends Block"],"items":[],"sourceIdx":12,"inherits":["ComponentSignalHandler.!call","ComponentSignalHandler/connectTo","ComponentSignalHandler/isEventHandler"]},{"id":"Menu","name":"Menu","isNamespace":true,"file":"./packages/ui/typings/UI/Menu.d.ts","line":2,"code":"namespace Menu","doc":"<p>Contains methods for displaying dropdown menus and context menus.</p>\n","items":[{"id":"Menu.Option","name":"Option","isInterface":true,"file":"./packages/ui/typings/UI/Menu.d.ts","line":10,"code":"interface Option","doc":"<p>Represents a context/dropdown menu option or divider.</p>\n","isStatic":true,"items":[{"id":"Menu.Option/disabled","name":"disabled","isProperty":true,"file":"./packages/ui/typings/UI/Menu.d.ts","line":20,"code":"disabled?: boolean;","doc":"<p>Set to true to disable this menu item.</p>\n","declType":"boolean"},{"id":"Menu.Option/divider","name":"divider","isProperty":true,"file":"./packages/ui/typings/UI/Menu.d.ts","line":22,"code":"divider?: boolean;","doc":"<p>Set to true (and leave other properties out) to display a divider instead of a menu option in this position.</p>\n","declType":"boolean"},{"id":"Menu.Option/icon","name":"icon","isProperty":true,"file":"./packages/ui/typings/UI/Menu.d.ts","line":16,"code":"icon?: string;","doc":"<p>Menu item icon.</p>\n","declType":"string"},{"id":"Menu.Option/key","name":"key","isProperty":true,"file":"./packages/ui/typings/UI/Menu.d.ts","line":12,"code":"key?: string;","doc":"<p>Optional key (string) used as an identifier.</p>\n","declType":"string"},{"id":"Menu.Option/label","name":"label","isProperty":true,"file":"./packages/ui/typings/UI/Menu.d.ts","line":14,"code":"label?: string | TextLabelFactory;","doc":"<p>Menu item label text.</p>\n","declType":"string | TextLabelFactory"},{"id":"Menu.Option/sideIcon","name":"sideIcon","isProperty":true,"file":"./packages/ui/typings/UI/Menu.d.ts","line":18,"code":"sideIcon?: string;","doc":"<p>Menu item icon displayed on the far side, next to where a sub menu would open.</p>\n","declType":"string"},{"id":"Menu.Option/subMenu","name":"subMenu","isProperty":true,"file":"./packages/ui/typings/UI/Menu.d.ts","line":24,"code":"subMenu?: Option[];","doc":"<p>Sub menu options, displayed when this item is selected/focused.</p>\n","declType":"Option[]"}]},{"id":"Menu.dismiss","name":"dismiss","hasParams":false,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Menu.d.ts","line":8,"code":"function dismiss(): void;","doc":"<p>Dismiss the menu currently on screen, if any.</p>\n","declType":"void"},{"id":"Menu.displayContextMenu","name":"displayContextMenu","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Menu.d.ts","line":4,"code":"function displayContextMenu(options: Menu.Option[], event: PointerEvent): PromiseLike<string | number>;","doc":"<p>Display a modal context menu; returns a Promise that resolves to the index(base 1)/key of the selected menu item, or is rejected if the user cancels the context menu.</p>\n","declType":"PromiseLike<string | number>","isAsync":true},{"id":"Menu.displayDropdown","name":"displayDropdown","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Menu.d.ts","line":6,"code":"function displayDropdown(options: Menu.Option[], component: Component): PromiseLike<string | number>;","doc":"<p>Display a modal dropdown menu below the given component (or above, depending on available screen space); returns a Promise that resolves to the index(base 1)/key of the selected menu item, or is rejected if the user cancels the context menu.</p>\n","declType":"PromiseLike<string | number>","isAsync":true}],"sourceIdx":92},{"id":"MessageDialog","name":"MessageDialog","isClass":true,"file":"./packages/ui/typings/UI/Components/Composite/MessageDialog.d.ts","line":4,"code":"class MessageDialog extends DialogContainer","doc":"<p>Represents a generic message dialog with one button to dismiss, contains either a single Paragraph component, or a stack initialized with given texts.</p>\n","extends":["DialogContainer"],"items":[{"id":"MessageDialog.initializer","name":"initializer","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Components/Composite/MessageDialog.d.ts","line":5,"code":"static initializer: ComponentFactory<DialogContainer>;","doc":"<p>No description</p>\n","declType":"ComponentFactory<DialogContainer>"},{"id":"MessageDialog.constructor","name":"new MessageDialog","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Composite/MessageDialog.d.ts","line":7,"code":"constructor(headerText: string | TextLabelFactory, messageText: string | TextLabelFactory, buttonLabel?: string | TextLabelFactory);\nconstructor(headerText: string | TextLabelFactory, messageTexts: Array<string | TextLabelFactory>, buttonLabel?: string | TextLabelFactory);","doc":"<p>[1]. Create a message dialog with given text.</p>\n<p>[2]. Create a message dialog with given texts stacked vertically.</p>\n","count":2},{"id":"MessageDialog/buttonLabel","name":"buttonLabel","isProperty":true,"file":"./packages/ui/typings/UI/Components/Composite/MessageDialog.d.ts","line":15,"code":"buttonLabel: string | TextLabelFactory;","doc":"<p>The dismiss button label (defaults to Dismiss).</p>\n","declType":"string | TextLabelFactory"},{"id":"MessageDialog/headerText","name":"headerText","isProperty":true,"file":"./packages/ui/typings/UI/Components/Composite/MessageDialog.d.ts","line":11,"code":"headerText?: string | TextLabelFactory;","doc":"<p>Dialog header text, if any.</p>\n","declType":"string | TextLabelFactory"},{"id":"MessageDialog/messageText","name":"messageText","isProperty":true,"file":"./packages/ui/typings/UI/Components/Composite/MessageDialog.d.ts","line":13,"code":"messageText: string | TextLabelFactory | Array<string | TextLabelFactory>;","doc":"<p>One or more lines of text to be displayed as main content.</p>\n","declType":"string | TextLabelFactory | Array<string | TextLabelFactory>"}],"sourceIdx":46,"inherits":["Component.addStyleOverride","Container.withContent","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","DialogContainer/close","Container/content","Container/display","DialogContainer/displayOptions","Component/focusMode","DialogContainer/footer","Component/getActualDimensions","DialogContainer/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Container/hasEmptyList","Component/hasFocus","DialogContainer/header","Component/height","Component/hidden","Container/horzAlign","Component/hoverState","Component/id","Component/initialize","DialogContainer/initializeWith","Container/maxContentWidth","Component/out","Component/render","Component/renderOptions","Container/scrollBottomThreshold","Container/scrollTopThreshold","Container/scrollable","Container/scrolledToBottom","Container/scrolledToLeft","Container/scrolledToRight","Container/scrolledToTop","Component/selected","Component/selectionMode","DialogContainer/setDragHandle","Component/setFormValues","Component/shadowEffect","Component/style","Component/uid","Container/vertAlign","Component/width","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","DialogContainer/Closed","DialogContainer/Closing","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"NavList","name":"NavList","isClass":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":8,"code":"class NavList extends Block","doc":"<p>Represents a list of tabs or links.</p>\n","extends":["Block"],"items":[{"id":"NavList.Activation","name":"Activation","isClass":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":48,"code":"class Activation","doc":"<p>Contains injectable methods for activating targets and querying activation state; instantiated by <code>NavList</code>.</p>\n","isStatic":true,"items":[{"id":"NavList.Activation/activate","name":"activate","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":50,"code":"activate(target: any): void;","doc":"<p>Injectable method to activate given target (e.g. URL, or Activity instance or class); default ony handles URLs, <code>Application</code> instance injects more functionality here.</p>\n","declType":"void"},{"id":"NavList.Activation/isActive","name":"isActive","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":52,"code":"isActive(target: any): boolean;","doc":"<p>Injectable method that returns true (observable) if and when given target matches the current target, i.e. URL/path matches, or activity/class matches current activity or one of its parent activities; this method is called from within an observable context to be able to observe changes to target states.</p>\n","declType":"boolean"}]},{"id":"NavList.Initializer","name":"Initializer","isInterface":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":79,"code":"interface Initializer extends Block.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["Block.Initializer"],"items":[{"id":"NavList.Initializer/NavChange","name":"NavChange","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":91,"code":"NavChange?: string | NavListSelectionHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | NavListSelectionHandler"},{"id":"NavList.Initializer/activate","name":"activate","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":85,"code":"activate?: number | string;","doc":"<p>Initializer: activate item automatically, by index or key.</p>\n","declType":"number | string"},{"id":"NavList.Initializer/justified","name":"justified","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":89,"code":"justified?: UIValueOrAsync<boolean>;","doc":"<p>Property initializer: true to fill all horizontal space.</p>\n","declType":"UIValueOrAsync<boolean>"},{"id":"NavList.Initializer/navItems","name":"navItems","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":81,"code":"navItems?: UIValueOrAsync<NavList.NavItem[]>;","doc":"<p>Property initializer: navlist items.</p>\n","declType":"UIValueOrAsync<NavList.NavItem[]>"},{"id":"NavList.Initializer/selectedIndex","name":"selectedIndex","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":83,"code":"selectedIndex?: UIValueOrAsync<number>;","doc":"<p>Property initializer: initial item index.</p>\n","declType":"UIValueOrAsync<number>"},{"id":"NavList.Initializer/type","name":"type","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":87,"code":"type?: UIValueOrAsync<NavList.Type>;","doc":"<p>Property initializer: nav display type.</p>\n","declType":"UIValueOrAsync<NavList.Type>"}],"inherits":["Component.Initializer/ArrowDownKeyPressed","Component.Initializer/ArrowLeftKeyPressed","Component.Initializer/ArrowRightKeyPressed","Component.Initializer/ArrowUpKeyPressed","Component.Initializer/BackspaceKeyPressed","Component.Initializer/Blur","Component.Initializer/Click","Component.Initializer/Clicked","Component.Initializer/DeleteKeyPressed","Component.Initializer/DoubleClick","Component.Initializer/DoubleClicked","Component.Initializer/DragDrop","Component.Initializer/DragEnter","Component.Initializer/DragLeave","Component.Initializer/DragStart","Component.Initializer/EnterKeyPressed","Component.Initializer/EscapeKeyPressed","Component.Initializer/Focus","Component.Initializer/FocusGained","Component.Initializer/FocusLost","Component.Initializer/KeyDown","Component.Initializer/KeyPress","Component.Initializer/MouseContextMenu","Component.Initializer/MouseEnter","Component.Initializer/MouseLeave","Component.Initializer/Press","Component.Initializer/Pressed","Component.Initializer/Rendered","Component.Initializer/SpaceBarPressed","Component.Initializer/animations","Block.Initializer/displayOptions","Component.Initializer/focusMode","Component.Initializer/hasFocus","Component.Initializer/height","Component.Initializer/hidden","Component.Initializer/id","Block.Initializer/overlayPosition","Component.Initializer/renderOptions","Component.Initializer/selected","Component.Initializer/selectionMode","Component.Initializer/shadowEffect","Component.Initializer/shadowEffectOnFocus","Component.Initializer/shadowEffectOnHover","Component.Initializer/style","Component.Initializer/width"]},{"id":"NavList.NavItem","name":"NavItem","isInterface":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":55,"code":"interface NavItem","doc":"<p>Represents an item in a navigation list (tab or link).</p>\n","isStatic":true,"items":[{"id":"NavList.NavItem/badge","name":"badge","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":61,"code":"badge?: string;","doc":"<p>Badge text</p>\n","declType":"string"},{"id":"NavList.NavItem/container","name":"container","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":65,"code":"container?: Container | ComponentFactory<Container>;","doc":"<p>Container to be displayed below tabs/links when this item is selected.</p>\n","declType":"Container | ComponentFactory<Container>"},{"id":"NavList.NavItem/icon","name":"icon","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":59,"code":"icon?: string;","doc":"<p>Icon (see <code>Label</code> component).</p>\n","declType":"string"},{"id":"NavList.NavItem/key","name":"key","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":63,"code":"key?: string;","doc":"<p>Key (identifier string) of the item, used to populate <code>NavList/selectedKey</code>.</p>\n","declType":"string"},{"id":"NavList.NavItem/label","name":"label","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":57,"code":"label?: string | TextLabelFactory;","doc":"<p>Text label</p>\n","declType":"string | TextLabelFactory"},{"id":"NavList.NavItem/target","name":"target","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":67,"code":"target?: any;","doc":"<p>URL/path string, or (App module) <code>Activity</code> instance or <code>Activity</code> class that will be activated when this item is selected; also, the item will be automatically selected if/when its target is active (i.e. URL/path matches, or activity/class matches current activity or one of its parent activities).</p>\n"}]},{"id":"NavList.SelectionEvent","name":"SelectionEvent","isInterface":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":94,"code":"interface SelectionEvent","doc":"<p>Data that is emitted when a navlist’s selection changes.</p>\n","isStatic":true,"items":[{"id":"NavList.SelectionEvent/container","name":"container","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":100,"code":"container?: Container;","doc":"<p>The container to be displayed, if any.</p>\n","declType":"Container"},{"id":"NavList.SelectionEvent/index","name":"index","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":96,"code":"index: number;","doc":"<p>The new selection index.</p>\n","declType":"number"},{"id":"NavList.SelectionEvent/key","name":"key","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":98,"code":"key?: string;","doc":"<p>The new selection key, if any.</p>\n","declType":"string"}]},{"id":"NavList.SelectionSignal","name":"SelectionSignal","isClass":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":103,"code":"class SelectionSignal extends ComponentSignal<SelectionEvent>","doc":"<p>Signal that is emitted when a navlist’s selection changes.</p>\n","isStatic":true,"extends":["ComponentSignal"],"items":[]},{"id":"NavList.withItems","name":"withItems","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":14,"code":"static withItems<T extends NavList>(this: { new (): T; with: typeof NavList.with; }, navItems: NavList.NavItem[]): ComponentFactory<T>;","doc":"<p>Initialize a nav list factory with given items.</p>\n","typeParams":["T extends NavList"],"declType":"ComponentFactory<T>"},{"id":"NavList.Type","name":"Type","isEnum":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":70,"code":"enum Type","doc":"<p>NavList display type.</p>\n","isStatic":true,"items":[{"id":"NavList.Type.Pills","name":"Pills","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":74,"code":"enum Type { ...Pills }","doc":"<p>Display as a row of pills.</p>\n"},{"id":"NavList.Type.StackedPills","name":"StackedPills","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":76,"code":"enum Type { ...StackedPills }","doc":"<p>Display as a list of pills.</p>\n"},{"id":"NavList.Type.Tabs","name":"Tabs","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":72,"code":"enum Type { ...Tabs }","doc":"<p>Display as a row of tabs.</p>\n"}]},{"id":"NavList.constructor","name":"new NavList","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":10,"code":"constructor(navItems?: NavList.NavItem[], type?: NavList.Type, selectedIndex?: number);","doc":"<p>Create a navigation list component.</p>\n"},{"id":"NavList/activate","name":"activate","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":34,"code":"activate(selection: number | string): this;","doc":"<p>Select nav item by index or key, display associated container if any, and/or start associated activity if any; returns this.</p>\n","declType":"this"},{"id":"NavList/getChildren","name":"getChildren","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":36,"code":"getChildren(): Component[];","doc":"<p>Returns an array of directly contained components (observable).</p>\n","declType":"Component[]"},{"id":"NavList/initializeWith","name":"initializeWith","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":19,"code":"initializeWith: (values: NavList.Initializer) => this;","doc":"<p>Initialize with given (observable) properties; returns this.</p>\n","declType":"(values: NavList.Initializer) => this"},{"id":"NavList/justified","name":"justified","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":32,"code":"justified: boolean;","doc":"<p>Set to true to fill all horizontal space.</p>\n","declType":"boolean"},{"id":"NavList/navItems","name":"navItems","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":21,"code":"navItems: NavList.NavItem[];","doc":"<p>Nav labels, icons, and badges (observed).</p>\n","declType":"NavList.NavItem[]"},{"id":"NavList/remGutter","name":"remGutter","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":23,"code":"remGutter: number;","doc":"<p>Space reserved for icons (rem units), if &gt; 0 (observed).</p>\n","declType":"number"},{"id":"NavList/selectedIndex","name":"selectedIndex","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":25,"code":"selectedIndex: number;","doc":"<p>Index of selected nav item (base 0), or -1 if no selection (observed); does not automatically activate nav item targets; to do so, use the <code>.activate(...)</code> function instead.</p>\n","declType":"number"},{"id":"NavList/selectedKey","name":"selectedKey","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":28,"code":"readonly selectedKey: string | undefined;","doc":"<p>Key (string value) of selected item, if any (read-only, observable).</p>\n","declType":"string | undefined"},{"id":"NavList/type","name":"type","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":30,"code":"type: NavList.Type;","doc":"<p>Type of nav: tabs or pills, inline or stacked; default tabs (observed).</p>\n","declType":"NavList.Type"},{"id":"NavList/beforeFirstRender","name":"beforeFirstRender","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":12,"code":"protected beforeFirstRender(renderer: ComponentRenderer<this, any>): void;","doc":"<p>Method that is called immediately after the renderer for this component is constructed; adds observers for nav item selection.</p>\n","isProtected":true,"declType":"void"},{"id":"NavList/NavChange","name":"NavChange","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":38,"code":"readonly NavChange: ComponentSignal.Emittable<NavList.SelectionEvent, typeof NavList.SelectionSignal>;","doc":"<p>Signal emitted when the selected nav item changes, while displayed on screen.</p>\n","declType":"ComponentSignal.Emittable<NavList.SelectionEvent, typeof NavList.SelectionSignal>","isSignal":true}],"isNamespace":true,"sourceIdx":13,"inherits":["Component.addStyleOverride","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Block/displayOptions","Component/focusMode","Component/getActualDimensions","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Component/id","Component/initialize","Component/out","Block/overlayPosition","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Component/style","Component/uid","Component/width","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"NavListSelectionHandler","name":"NavListSelectionHandler","isClass":true,"file":"./packages/ui/typings/UI/Components/Blocks/NavList.d.ts","line":107,"code":"class NavListSelectionHandler extends ComponentSignalHandler<NavList.SelectionEvent, typeof NavList.SelectionSignal>","doc":"<p>Constructor for a navlist selection event handler.</p>\n","extends":["ComponentSignalHandler"],"items":[],"sourceIdx":14,"inherits":["ComponentSignalHandler.!call","ComponentSignalHandler/connectTo","ComponentSignalHandler/isEventHandler"]},{"id":"OppositeDrawerContainer","name":"OppositeDrawerContainer","isClass":true,"file":"./packages/ui/typings/UI/Components/Containers/DrawerContainer.d.ts","line":18,"code":"class OppositeDrawerContainer extends DrawerContainer","doc":"<p>Represents a modal container displayed on the right hand side of the screen (i.e. DrawerContainer with different alignment and animations).</p>\n","extends":["DrawerContainer"],"items":[{"id":"OppositeDrawerContainer.APPEAR_ANIMATION","name":"APPEAR_ANIMATION","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/DrawerContainer.d.ts","line":22,"code":"static APPEAR_ANIMATION?: Animation;","doc":"<p>Default “appear” animation, added to every new <code>OppositeDrawerContainer</code> instance by the constructor.</p>\n","declType":"Animation"},{"id":"OppositeDrawerContainer.DISAPPEAR_ANIMATION","name":"DISAPPEAR_ANIMATION","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Components/Containers/DrawerContainer.d.ts","line":24,"code":"static DISAPPEAR_ANIMATION?: Animation;","doc":"<p>Default “disappear” animation, added to every new <code>OppositeDrawerContainer</code> instance by the constructor.</p>\n","declType":"Animation"},{"id":"OppositeDrawerContainer.constructor","name":"new OppositeDrawerContainer","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Containers/DrawerContainer.d.ts","line":20,"code":"constructor(content?: Block[], width?: string);","doc":"<p>Create a drawer component with given content, if any.</p>\n"}],"sourceIdx":53,"inherits":["Component.addStyleOverride","Container.withContent","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","DialogContainer/close","Container/content","Container/display","DialogContainer/displayOptions","Component/focusMode","DialogContainer/footer","Component/getActualDimensions","DialogContainer/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Container/hasEmptyList","Component/hasFocus","DialogContainer/header","Component/height","Component/hidden","Container/horzAlign","Component/hoverState","Component/id","Component/initialize","DrawerContainer/initializeWith","Container/maxContentWidth","Component/out","Component/render","Component/renderOptions","Container/scrollBottomThreshold","Container/scrollTopThreshold","Container/scrollable","Container/scrolledToBottom","Container/scrolledToLeft","Container/scrolledToRight","Container/scrolledToTop","Component/selected","Component/selectionMode","DialogContainer/setDragHandle","Component/setFormValues","Component/shadowEffect","Component/style","Component/uid","Container/vertAlign","Component/width","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","DialogContainer/Closed","DialogContainer/Closing","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"OppositeRow","name":"OppositeRow","isClass":true,"file":"./packages/ui/typings/UI/Components/Blocks/Row.d.ts","line":43,"code":"class OppositeRow extends Row","doc":"<p>A row element with components aligned to the right.</p>\n","extends":["Row"],"items":[],"sourceIdx":17,"inherits":["Component.addStyleOverride","Row.withContent","Row.constructor","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Row/content","Block/displayOptions","Component/focusMode","Component/getActualDimensions","Row/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Component/id","Component/initialize","Row/initializeWith","Component/out","Block/overlayPosition","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Row/spacing","Component/style","Component/uid","Row/verticalSpacing","Component/width","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"Page","name":"Page","isClass":true,"file":"./packages/ui/typings/UI/Page.d.ts","line":3,"code":"class Page","doc":"<p>Represents a page to be displayed on screen.</p>\n","items":[{"id":"Page.DisplayOptions","name":"DisplayOptions","isInterface":true,"file":"./packages/ui/typings/UI/Page.d.ts","line":43,"code":"interface DisplayOptions","doc":"<p>Options to be set on the <code>.displayOptions</code> object property of a component, if any, to define its positioning and behavior when displayed directly on a page.</p>\n","isStatic":true,"items":[{"id":"Page.DisplayOptions/alignMargin","name":"alignMargin","isProperty":true,"file":"./packages/ui/typings/UI/Page.d.ts","line":55,"code":"alignMargin?: string;","doc":"<p>Margin around the side(s) of this component that are aligned to the side(s) of the screen (CSS length value, defaults to 0).</p>\n","declType":"string"},{"id":"Page.DisplayOptions/modal","name":"modal","isProperty":true,"file":"./packages/ui/typings/UI/Page.d.ts","line":47,"code":"modal?: boolean;","doc":"<p>Set to true to float this component on top of previous components on the page, and block input to components below.</p>\n","declType":"boolean"},{"id":"Page.DisplayOptions/modalHorzAlign","name":"modalHorzAlign","isProperty":true,"file":"./packages/ui/typings/UI/Page.d.ts","line":53,"code":"modalHorzAlign?: \"left\" | \"center\" | \"right\";","doc":"<p>Horizontal alignment of this component relative to the page; only relevant if <code>.modal</code> is also true.</p>\n","declType":"\"left\" | \"center\" | \"right\""},{"id":"Page.DisplayOptions/modalVertAlign","name":"modalVertAlign","isProperty":true,"file":"./packages/ui/typings/UI/Page.d.ts","line":51,"code":"modalVertAlign?: \"top\" | \"middle\" | \"bottom\";","doc":"<p>Vertical alignment of this component relative to the page; only relevant if <code>.modal</code> is also true.</p>\n","declType":"\"top\" | \"middle\" | \"bottom\""},{"id":"Page.DisplayOptions/onEsc","name":"onEsc","isProperty":true,"file":"./packages/ui/typings/UI/Page.d.ts","line":59,"code":"onEsc?: () => void;","doc":"<p>Callback invoked when the user clicks or touches outside of this component, presses a modal-close button, or presses the escape key.</p>\n","declType":"() => void"},{"id":"Page.DisplayOptions/outerMargin","name":"outerMargin","isProperty":true,"file":"./packages/ui/typings/UI/Page.d.ts","line":57,"code":"outerMargin?: string;","doc":"<p>Margin around the side(s) of this component that are away from the side(s) of the screen (CSS length value, defaults to 0).</p>\n","declType":"string"},{"id":"Page.DisplayOptions/shade","name":"shade","isProperty":true,"file":"./packages/ui/typings/UI/Page.d.ts","line":45,"code":"shade?: boolean;","doc":"<p>Set to true to add a backdrop behind this component.</p>\n","declType":"boolean"},{"id":"Page.DisplayOptions/stayOnTop","name":"stayOnTop","isProperty":true,"file":"./packages/ui/typings/UI/Page.d.ts","line":49,"code":"stayOnTop?: boolean;","doc":"<p>Set to true to keep this component on top of all other components; only relevant if <code>.modal</code> is also true.</p>\n","declType":"boolean"}]},{"id":"Page.getCurrentPage","name":"getCurrentPage","hasParams":false,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Page.d.ts","line":5,"code":"static getCurrentPage(): Page | undefined;","doc":"<p>Returns the page currently displayed on screen, if any (observable).</p>\n","declType":"Page | undefined"},{"id":"Page/content","name":"content","isProperty":true,"file":"./packages/ui/typings/UI/Page.d.ts","line":9,"code":"content: Array<Component | undefined>;","doc":"<p>Components that are displayed on this page, each component stacked on top of the previous one along the z-axis (observed).</p>\n","declType":"Array<Component | undefined>"},{"id":"Page/disable","name":"disable","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Page.d.ts","line":29,"code":"disable(promise?: PromiseLike<any>): void;","doc":"<p>Block all input events on this page, until given promise is resolved, or until page is re-displayed.</p>\n","declType":"void"},{"id":"Page/display","name":"display","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Page.d.ts","line":25,"code":"display(): this;","doc":"<p>Display this page on screen; also re-enables the page if input was blocked; replaces the currently displaying page on screen, which is removed automatically, but the result may be an empty screen if this page has no content; always waits for <code>Screen.ready</code>; returns this.</p>\n","declType":"this"},{"id":"Page/getComponentById","name":"getComponentById","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Page.d.ts","line":11,"code":"getComponentById(id: string): Component | undefined;\ngetComponentById<C extends Component>(id: string, componentClass: typeof Component & { new (...p: any[]): C; }): C | undefined;","doc":"<p>[1]. Returns the nearest matching child element with given ID, if any (observable).</p>\n<p>[2]. Returns the nearest matching child element with given ID <em>and</em> that is an instance of given class, if any (observable).</p>\n","declType":"Component | undefined | C | undefined","count":2},{"id":"Page/getComponentsByType","name":"getComponentsByType","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Page.d.ts","line":17,"code":"getComponentsByType<C extends Component>(componentClass: typeof Component & { new (...p: any[]): C; }): C[];","doc":"<p>Returns all (recursive) child elements that are an instance of given class (observable).</p>\n","typeParams":["C extends Component"],"declType":"C[]"},{"id":"Page/handleEsc","name":"handleEsc","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Page.d.ts","line":21,"code":"handleEsc(): boolean;","doc":"<p>Invoke the <code>onEsc</code> handler of the component closest to the foreground that defines it (usually a modal dialog container in the foreground); returns true if handler was called, otherwise does nothing and returns false.</p>\n","declType":"boolean"},{"id":"Page/remove","name":"remove","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Page.d.ts","line":27,"code":"remove(): this;","doc":"<p>Remove this page from the screen, if currently displayed; returns this.</p>\n","declType":"this"},{"id":"Page/scrollTo","name":"scrollTo","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Page.d.ts","line":23,"code":"scrollTo(component: Component): void;","doc":"<p>Scroll the page and all parent components of given component, such that the entire component becomes visible.</p>\n","declType":"void"},{"id":"Page/uid","name":"uid","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Page.d.ts","line":7,"code":"readonly uid: string;","doc":"<p>Globally unique page identifier.</p>\n","declType":"string"},{"id":"Page/Displayed","name":"Displayed","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Page.d.ts","line":31,"code":"readonly Displayed: Async.Signal.Emittable<any, typeof PageSignal>;","doc":"<p>Signal that is emitted after this page is displayed on screen.</p>\n","declType":"Async.Signal.Emittable<any, typeof PageSignal>","isSignal":true},{"id":"Page/KeyDown","name":"KeyDown","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Page.d.ts","line":37,"code":"readonly KeyDown: Async.Signal.Emittable<KeyboardEvent, typeof PageSignal>;","doc":"<p>Signal that is emitted when a key is being pressed on the keyboard, while this page is displayed in the foreground.</p>\n","declType":"Async.Signal.Emittable<KeyboardEvent, typeof PageSignal>","isSignal":true},{"id":"Page/Removed","name":"Removed","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Page.d.ts","line":33,"code":"readonly Removed: Async.Signal.Emittable<any, typeof PageSignal>;","doc":"<p>Signal that is emitted after this page has been removed from the screen.</p>\n","declType":"Async.Signal.Emittable<any, typeof PageSignal>","isSignal":true},{"id":"Page/Rendered","name":"Rendered","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Page.d.ts","line":35,"code":"readonly Rendered: Async.Signal.Emittable<any, typeof PageSignal>;","doc":"<p>Signal that is emitted after the content of this page has been (re-) rendered, e.g. when a component is added or removed (but not when one of the components itself is re-rendered due to changes in its own sub content, use the <code>Component#Rendered</code> signal for that).</p>\n","declType":"Async.Signal.Emittable<any, typeof PageSignal>","isSignal":true}],"isNamespace":true,"sourceIdx":93},{"id":"PageSignal","name":"PageSignal","isClass":true,"file":"./packages/ui/typings/UI/Page.d.ts","line":63,"code":"class PageSignal<T> extends Async.Signal<T>","doc":"<p>Class definition for a signal that is emitted on a Page instance.</p>\n","extends":["Async.Signal"],"typeParams":["T"],"items":[{"id":"PageSignal.page","name":"page","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Page.d.ts","line":65,"code":"static page: Page;","doc":"<p>The page for which this event is emitted.</p>\n","declType":"Page"}],"sourceIdx":94},{"id":"Paragraph","name":"Paragraph","isClass":true,"file":"./packages/ui/typings/UI/Components/Controls/Label.d.ts","line":49,"code":"class Paragraph extends Label","doc":"<p>Paragraph control: a label that expands horizontally, with text that breaks automatically across lines, and added line spacing for enhanced readability.</p>\n","extends":["Label"],"items":[{"id":"Paragraph/shrinkwrap","name":"shrinkwrap","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Label.d.ts","line":51,"code":"shrinkwrap: boolean;","doc":"<p>Set to true to shrink horizontally (default false; observed).</p>\n","declType":"boolean"},{"id":"Paragraph/wrapText","name":"wrapText","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Label.d.ts","line":53,"code":"wrapText: boolean;","doc":"<p>Automatically break text across lines (default true, observed).</p>\n","declType":"boolean"}],"sourceIdx":76,"inherits":["Component.addStyleOverride","Label.withText","Label.constructor","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Label/badge","Component/focusMode","Component/getActualDimensions","Component/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Label/icon","Component/id","Component/initialize","Label/initializeWith","Component/out","Label/remGutter","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Component/style","Label/text","Label/tooltipText","Component/uid","ControlElement/width","Component/Renderer","Component/beforeFirstRender","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"PointerEvent","name":"PointerEvent","isInterface":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":48,"code":"interface PointerEvent","doc":"<p>Interface definition of a platform agnostic mouse/pointer event.</p>\n","items":[{"id":"PointerEvent/altKey","name":"altKey","isProperty":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":50,"code":"altKey?: boolean;","doc":"<p>True if <code>alt</code> key is held down.</p>\n","declType":"boolean"},{"id":"PointerEvent/button","name":"button","isProperty":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":58,"code":"button?: number;","doc":"<p>Mouse button affected: 0 = primary, 2 = secondary.</p>\n","declType":"number"},{"id":"PointerEvent/clientX","name":"clientX","isProperty":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":60,"code":"clientX?: number;","doc":"<p>Horizontal coordinate relative to the browser window.</p>\n","declType":"number"},{"id":"PointerEvent/clientY","name":"clientY","isProperty":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":62,"code":"clientY?: number;","doc":"<p>Vertical coordinate relative to the browser window.</p>\n","declType":"number"},{"id":"PointerEvent/ctrlKey","name":"ctrlKey","isProperty":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":52,"code":"ctrlKey?: boolean;","doc":"<p>True if <code>ctrl</code> key is held down.</p>\n","declType":"boolean"},{"id":"PointerEvent/metaKey","name":"metaKey","isProperty":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":54,"code":"metaKey?: boolean;","doc":"<p>True if <code>meta</code> key is held down.</p>\n","declType":"boolean"},{"id":"PointerEvent/preventDefault","name":"preventDefault","isProperty":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":64,"code":"preventDefault?: () => void;","doc":"<p>Stop the default action for this event from taking place.</p>\n","declType":"() => void"},{"id":"PointerEvent/shiftKey","name":"shiftKey","isProperty":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":56,"code":"shiftKey?: boolean;","doc":"<p>True if <code>shift</code> key is held down.</p>\n","declType":"boolean"}],"sourceIdx":36},{"id":"PointerEventSignal","name":"PointerEventSignal","isClass":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":81,"code":"class PointerEventSignal extends ComponentSignal<PointerEvent>","doc":"<p>Signal that is emitted when a mouse/pointer event occurs.</p>\n","extends":["ComponentSignal"],"items":[],"sourceIdx":41},{"id":"PointerHandler","name":"PointerHandler","isClass":true,"file":"./packages/ui/typings/UI/Components/ComponentSignal.d.ts","line":84,"code":"class PointerHandler extends ComponentSignalHandler<PointerEvent, typeof PointerEventSignal>","doc":"<p>Constructor for a mouse/pointer event handler.</p>\n","extends":["ComponentSignalHandler"],"items":[],"sourceIdx":42,"inherits":["ComponentSignalHandler.!call","ComponentSignalHandler/connectTo","ComponentSignalHandler/isEventHandler"]},{"id":"PopOver","name":"PopOver","isNamespace":true,"file":"./packages/ui/typings/UI/PopOver.d.ts","line":2,"code":"namespace PopOver","doc":"<p>Contains methods for displaying modal popovers.</p>\n","items":[{"id":"PopOver.Options","name":"Options","isInterface":true,"file":"./packages/ui/typings/UI/PopOver.d.ts","line":10,"code":"interface Options","doc":"<p>Contains popover display options.</p>\n","isStatic":true,"items":[{"id":"PopOver.Options/animation","name":"animation","isProperty":true,"file":"./packages/ui/typings/UI/PopOver.d.ts","line":13,"code":"animation?: Animation;","doc":"<p>No description</p>\n","declType":"Animation"},{"id":"PopOver.Options/hideArrow","name":"hideArrow","isProperty":true,"file":"./packages/ui/typings/UI/PopOver.d.ts","line":12,"code":"hideArrow?: boolean;","doc":"<p>No description</p>\n","declType":"boolean"},{"id":"PopOver.Options/title","name":"title","isProperty":true,"file":"./packages/ui/typings/UI/PopOver.d.ts","line":11,"code":"title?: string | TextLabelFactory;","doc":"<p>No description</p>\n","declType":"string | TextLabelFactory"}]},{"id":"PopOver.dismiss","name":"dismiss","hasParams":false,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/PopOver.d.ts","line":8,"code":"function dismiss(): void;","doc":"<p>Dismiss the popover currently on screen, if any.</p>\n","declType":"void"},{"id":"PopOver.displayAbove","name":"displayAbove","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/PopOver.d.ts","line":6,"code":"function displayAbove(ref: Component, container: Container, options: PopOver.Options): void;","doc":"<p>Display a popover containing given container, above given reference component.</p>\n","declType":"void"},{"id":"PopOver.displayBelow","name":"displayBelow","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/PopOver.d.ts","line":4,"code":"function displayBelow(ref: Component, container: Container, options?: PopOver.Options): void;","doc":"<p>Display a popover containing given container, below given reference component.</p>\n","declType":"void"}],"sourceIdx":95,"text":[{"title":"","content":"<p>Mostly applied to buttons, see <a href=\"#Button_popover\"><code>.popover</code></a> member of Button class.</p>\n"},{"title":"Note","type":"note","content":"<p>Currently, the HTML implementation for popovers using Bootstrap 4 (beta) is broken. This issue will be fixed in the future by implementing custom styles and overriding Bootstrap positioning altogether.</p>\n"}]},{"id":"PrimaryButton","name":"PrimaryButton","isClass":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":108,"code":"class PrimaryButton extends Button","doc":"<p>Primary button control (shortcut for setting <code>.primary</code> on regular <code>Button</code> class).</p>\n","extends":["Button"],"items":[{"id":"PrimaryButton/primary","name":"primary","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":109,"code":"primary: boolean;","doc":"<p>No description</p>\n","declType":"boolean"}],"sourceIdx":58,"inherits":["Component.addStyleOverride","Button.withIcon","Button.withLabel","Button.constructor","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Button/badge","Button/disabled","Button/dropdown","Component/focusMode","Component/getActualDimensions","Component/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Button/icon","Button/iconAfter","Component/id","Component/initialize","Button/initializeWith","Button/label","Component/out","Button/popover","Button/popoverAbove","Button/popoverAnimation","Button/popoverTitle","Button/remGutter","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Button/shrinkwrap","Component/style","Button/style_button","Button/target","Button/tooltipText","Component/uid","ControlElement/width","ControlElement/wrapText","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Button/DropdownClicked","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"ProgressBar","name":"ProgressBar","isClass":true,"file":"./packages/ui/typings/UI/Components/Controls/ProgressBar.d.ts","line":5,"code":"class ProgressBar extends ControlElement","doc":"<p>Represents a progress bar control (full width by default).</p>\n","extends":["ControlElement"],"items":[{"id":"ProgressBar.Initializer","name":"Initializer","isInterface":true,"file":"./packages/ui/typings/UI/Components/Controls/ProgressBar.d.ts","line":24,"code":"interface Initializer extends ControlElement.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["ControlElement.Initializer"],"items":[{"id":"ProgressBar.Initializer/progress","name":"progress","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ProgressBar.d.ts","line":26,"code":"progress?: UIValueOrAsync<number>;","doc":"<p>Property initializer: progress value (0-1).</p>\n","declType":"UIValueOrAsync<number>"},{"id":"ProgressBar.Initializer/style_bar","name":"style_bar","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ProgressBar.d.ts","line":30,"code":"style_bar?: UIValueOrAsync<Style | Style.StyleSet>;","doc":"<p>Property initializer: inner bar element style.</p>\n","declType":"UIValueOrAsync<Style | Style.StyleSet>"},{"id":"ProgressBar.Initializer/tooltipText","name":"tooltipText","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ProgressBar.d.ts","line":28,"code":"tooltipText?: UIValueOrAsync<string | TextLabelFactory>;","doc":"<p>Property initializer: tooltip text.</p>\n","declType":"UIValueOrAsync<string | TextLabelFactory>"}],"inherits":["Component.Initializer/ArrowDownKeyPressed","Component.Initializer/ArrowLeftKeyPressed","Component.Initializer/ArrowRightKeyPressed","Component.Initializer/ArrowUpKeyPressed","Component.Initializer/BackspaceKeyPressed","Component.Initializer/Blur","Component.Initializer/Click","Component.Initializer/Clicked","Component.Initializer/DeleteKeyPressed","Component.Initializer/DoubleClick","Component.Initializer/DoubleClicked","Component.Initializer/DragDrop","Component.Initializer/DragEnter","Component.Initializer/DragLeave","Component.Initializer/DragStart","Component.Initializer/EnterKeyPressed","Component.Initializer/EscapeKeyPressed","Component.Initializer/Focus","Component.Initializer/FocusGained","Component.Initializer/FocusLost","Component.Initializer/KeyDown","Component.Initializer/KeyPress","Component.Initializer/MouseContextMenu","Component.Initializer/MouseEnter","Component.Initializer/MouseLeave","Component.Initializer/Press","Component.Initializer/Pressed","Component.Initializer/Rendered","Component.Initializer/SpaceBarPressed","Component.Initializer/animations","Component.Initializer/focusMode","ControlElement.Initializer/hasFocus","Component.Initializer/height","Component.Initializer/hidden","Component.Initializer/id","Component.Initializer/renderOptions","Component.Initializer/selected","Component.Initializer/selectionMode","Component.Initializer/shadowEffect","Component.Initializer/shadowEffectOnFocus","Component.Initializer/shadowEffectOnHover","ControlElement.Initializer/shrinkwrap","Component.Initializer/style","ControlElement.Initializer/width"]},{"id":"ProgressBar.withProgress","name":"withProgress","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Controls/ProgressBar.d.ts","line":9,"code":"static withProgress<T extends ProgressBar>(this: { new (): T; with: typeof ProgressBar.with; }, progress: UIValueOrAsync<number>): ComponentFactory<T>;","doc":"<p>Initialize a progress bar control factory with given progress value (0-1).</p>\n","typeParams":["T extends ProgressBar"],"declType":"ComponentFactory<T>"},{"id":"ProgressBar.constructor","name":"new ProgressBar","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Controls/ProgressBar.d.ts","line":7,"code":"constructor(progress?: number);","doc":"<p>Create a progress bar control element.</p>\n"},{"id":"ProgressBar/initializeWith","name":"initializeWith","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ProgressBar.d.ts","line":14,"code":"initializeWith: (values: ProgressBar.Initializer) => this;","doc":"<p>Initialize with given (observable) properties; returns this.</p>\n","declType":"(values: ProgressBar.Initializer) => this"},{"id":"ProgressBar/progress","name":"progress","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ProgressBar.d.ts","line":16,"code":"progress: number;","doc":"<p>Current progress value, between 0 and 1, inclusive (observed).</p>\n","declType":"number"},{"id":"ProgressBar/style_bar","name":"style_bar","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Controls/ProgressBar.d.ts","line":20,"code":"readonly style_bar: Style;","doc":"<p>Encapsulation of inner bar style (observed).</p>\n","declType":"Style"},{"id":"ProgressBar/tooltipText","name":"tooltipText","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/ProgressBar.d.ts","line":18,"code":"tooltipText: string;","doc":"<p>Tooltip text (observed).</p>\n","declType":"string"}],"isNamespace":true,"sourceIdx":83,"inherits":["Component.addStyleOverride","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Component/focusMode","Component/getActualDimensions","Component/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Component/id","Component/initialize","Component/out","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","ControlElement/shrinkwrap","Component/style","Component/uid","ControlElement/width","ControlElement/wrapText","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"RoundButton","name":"RoundButton","isClass":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":122,"code":"class RoundButton extends Button","doc":"<p>Round button control (e.g. with an icon).</p>\n","extends":["Button"],"items":[],"sourceIdx":62,"inherits":["Component.addStyleOverride","Button.withIcon","Button.withLabel","Button.constructor","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Button/badge","Button/disabled","Button/dropdown","Component/focusMode","Component/getActualDimensions","Component/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Button/icon","Button/iconAfter","Component/id","Component/initialize","Button/initializeWith","Button/label","Component/out","Button/popover","Button/popoverAbove","Button/popoverAnimation","Button/popoverTitle","Button/primary","Button/remGutter","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Button/shrinkwrap","Component/style","Button/style_button","Button/target","Button/tooltipText","Component/uid","ControlElement/width","ControlElement/wrapText","Component/defineComponentSignal","Component/beforeFirstRender","Component/Renderer","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Button/DropdownClicked","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"Row","name":"Row","isClass":true,"file":"./packages/ui/typings/UI/Components/Blocks/Row.d.ts","line":5,"code":"class Row extends Block","doc":"<p>Represents a row containing control elements placed horizontally.</p>\n","extends":["Block"],"items":[{"id":"Row.CONTROL_SPACING","name":"CONTROL_SPACING","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Row.d.ts","line":16,"code":"static CONTROL_SPACING: string;","doc":"<p>Default control component spacing (CSS length).</p>\n","declType":"string"},{"id":"Row.Initializer","name":"Initializer","isInterface":true,"file":"./packages/ui/typings/UI/Components/Blocks/Row.d.ts","line":28,"code":"interface Initializer extends Block.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["Block.Initializer"],"items":[{"id":"Row.Initializer/content","name":"content","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Row.d.ts","line":30,"code":"content?: ComponentFactory.SpecList;","doc":"<p>Property initializer: list of control elements.</p>\n","declType":"ComponentFactory.SpecList"},{"id":"Row.Initializer/spacing","name":"spacing","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Row.d.ts","line":32,"code":"spacing?: UIValueOrAsync<string>;","doc":"<p>Property initializer: spacing around controls.</p>\n","declType":"UIValueOrAsync<string>"},{"id":"Row.Initializer/verticalSpacing","name":"verticalSpacing","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Row.d.ts","line":34,"code":"verticalSpacing?: UIValueOrAsync<string>;","doc":"<p>Property initializer: vertical spacing above and below controls.</p>\n","declType":"UIValueOrAsync<string>"}],"inherits":["Component.Initializer/ArrowDownKeyPressed","Component.Initializer/ArrowLeftKeyPressed","Component.Initializer/ArrowRightKeyPressed","Component.Initializer/ArrowUpKeyPressed","Component.Initializer/BackspaceKeyPressed","Component.Initializer/Blur","Component.Initializer/Click","Component.Initializer/Clicked","Component.Initializer/DeleteKeyPressed","Component.Initializer/DoubleClick","Component.Initializer/DoubleClicked","Component.Initializer/DragDrop","Component.Initializer/DragEnter","Component.Initializer/DragLeave","Component.Initializer/DragStart","Component.Initializer/EnterKeyPressed","Component.Initializer/EscapeKeyPressed","Component.Initializer/Focus","Component.Initializer/FocusGained","Component.Initializer/FocusLost","Component.Initializer/KeyDown","Component.Initializer/KeyPress","Component.Initializer/MouseContextMenu","Component.Initializer/MouseEnter","Component.Initializer/MouseLeave","Component.Initializer/Press","Component.Initializer/Pressed","Component.Initializer/Rendered","Component.Initializer/SpaceBarPressed","Component.Initializer/animations","Block.Initializer/displayOptions","Component.Initializer/focusMode","Component.Initializer/hasFocus","Component.Initializer/height","Component.Initializer/hidden","Component.Initializer/id","Block.Initializer/overlayPosition","Component.Initializer/renderOptions","Component.Initializer/selected","Component.Initializer/selectionMode","Component.Initializer/shadowEffect","Component.Initializer/shadowEffectOnFocus","Component.Initializer/shadowEffectOnHover","Component.Initializer/style","Component.Initializer/width"]},{"id":"Row.withContent","name":"withContent","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Blocks/Row.d.ts","line":9,"code":"static withContent<T extends Row>(this: { new (): T; with: typeof Row.with; }, content: ComponentFactory.SpecList): ComponentFactory<T>;","doc":"<p>Initialize a row factory with given content.</p>\n","typeParams":["T extends Row"],"declType":"ComponentFactory<T>"},{"id":"Row.constructor","name":"new Row","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Blocks/Row.d.ts","line":7,"code":"constructor(content?: ControlElement[]);","doc":"<p>Create a row block with given content, if any.</p>\n"},{"id":"Row/content","name":"content","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Row.d.ts","line":18,"code":"content: Array<ControlElement | undefined>;","doc":"<p>Array of elements that go into this row (observed).</p>\n","declType":"Array<ControlElement | undefined>"},{"id":"Row/getChildren","name":"getChildren","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Blocks/Row.d.ts","line":24,"code":"getChildren(): Component[];","doc":"<p>Returns an array of directly contained components (observable).</p>\n","declType":"Component[]"},{"id":"Row/initializeWith","name":"initializeWith","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Row.d.ts","line":14,"code":"initializeWith: (values: Row.Initializer) => this;","doc":"<p>Initialize with given (observable) properties; returns this.</p>\n","declType":"(values: Row.Initializer) => this"},{"id":"Row/spacing","name":"spacing","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Row.d.ts","line":20,"code":"spacing: string;","doc":"<p>Spacing between elements (CSS value, observed), defaults to <code>.CONTROL_SPACING</code>.</p>\n","declType":"string"},{"id":"Row/verticalSpacing","name":"verticalSpacing","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Row.d.ts","line":22,"code":"verticalSpacing?: string;","doc":"<p>Vertical spacing (margin) for this row (CSS value, observed), defaults to <code>.spacing</code> if undefined/blank; not applicable if <code>.height</code> is set.</p>\n","declType":"string"}],"isNamespace":true,"sourceIdx":15,"inherits":["Component.addStyleOverride","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Block/displayOptions","Component/focusMode","Component/getActualDimensions","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Component/id","Component/initialize","Component/out","Block/overlayPosition","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Component/style","Component/uid","Component/width","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"Screen","name":"Screen","isNamespace":true,"file":"./packages/ui/typings/UI/Screen.d.ts","line":3,"code":"namespace Screen","doc":"<p>Methods for managing the available (fixed) screen space in the application viewport.</p>\n","items":[{"id":"Screen.Dimensions","name":"Dimensions","isInterface":true,"file":"./packages/ui/typings/UI/Screen.d.ts","line":15,"code":"interface Dimensions extends Async.ObservableObject","doc":"<p>Type definition for the <code>Screen.dimensions</code> observable object.</p>\n","isStatic":true,"extends":["Async.ObservableObject"],"items":[{"id":"Screen.Dimensions/height","name":"height","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Screen.d.ts","line":19,"code":"readonly height: number;","doc":"<p>Number of logical pixels available on vertical axis (observable).</p>\n","declType":"number"},{"id":"Screen.Dimensions/isExtraLarge","name":"isExtraLarge","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Screen.d.ts","line":27,"code":"readonly isExtraLarge: boolean;","doc":"<p>True if viewport width is EXTRALARGE_WIDTH or above; implies that .isLarge is also true (observable).</p>\n","declType":"boolean"},{"id":"Screen.Dimensions/isExtraSmall","name":"isExtraSmall","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Screen.d.ts","line":21,"code":"readonly isExtraSmall: boolean;","doc":"<p>True if viewport width is less than EXTRASMALL_WIDTH; implies that .isSmall is also true (observable).</p>\n","declType":"boolean"},{"id":"Screen.Dimensions/isLarge","name":"isLarge","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Screen.d.ts","line":25,"code":"readonly isLarge: boolean;","doc":"<p>True if viewport width is LARGE_WIDTH or above (observable).</p>\n","declType":"boolean"},{"id":"Screen.Dimensions/isSmall","name":"isSmall","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Screen.d.ts","line":23,"code":"readonly isSmall: boolean;","doc":"<p>True if viewport width is less than SMALL_WIDTH (observable).</p>\n","declType":"boolean"},{"id":"Screen.Dimensions/width","name":"width","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Screen.d.ts","line":17,"code":"readonly width: number;","doc":"<p>Number of logical pixels available on horizontal axis (observable).</p>\n","declType":"number"}]},{"id":"Screen.EXTRALARGE_WIDTH","name":"EXTRALARGE_WIDTH","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Screen.d.ts","line":36,"code":"EXTRALARGE_WIDTH: number","doc":"<p>“Extra large” horizontal root width in logical pixels, default 1200.</p>\n","declType":"number"},{"id":"Screen.EXTRASMALL_WIDTH","name":"EXTRASMALL_WIDTH","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Screen.d.ts","line":30,"code":"EXTRASMALL_WIDTH: number","doc":"<p>“Extra small” horizontal root width in logical pixels, default 550.</p>\n","declType":"number"},{"id":"Screen.LARGE_WIDTH","name":"LARGE_WIDTH","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Screen.d.ts","line":34,"code":"LARGE_WIDTH: number","doc":"<p>“Large” horizontal root width in logical pixels, default 960.</p>\n","declType":"number"},{"id":"Screen.SMALL_WIDTH","name":"SMALL_WIDTH","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Screen.d.ts","line":32,"code":"SMALL_WIDTH: number","doc":"<p>“Small” horizontal root width in logical pixels, default 720.</p>\n","declType":"number"},{"id":"Screen.dimensions","name":"dimensions","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Screen.d.ts","line":13,"code":"dimensions: Dimensions & Async.ObservableObject","doc":"<p>Viewport dimensions (sealed observable object).</p>\n","declType":"Dimensions & Async.ObservableObject"},{"id":"Screen.display","name":"display","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Screen.d.ts","line":5,"code":"function display(view: Component | Page): void;","doc":"<p>Display given view in the foreground, replacing the current page or adding to it (or to a new blank page, if none was displayed).</p>\n","declType":"void"},{"id":"Screen.ready","name":"ready","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Screen.d.ts","line":11,"code":"ready: PromiseLike<true>","doc":"<p>Promise that resolves to true when ready to display the UI, after all static resources have been loaded.</p>\n","declType":"PromiseLike<true>","isAsync":true},{"id":"Screen.remove","name":"remove","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Screen.d.ts","line":7,"code":"function remove(view: Component): any;\nfunction remove(view: Page): any;","doc":"<p>[1]. Remove given component from the page (i.e. the page it was <em>last displayed</em> on using the <code>.display(...)</code> method).</p>\n<p>[2]. Remove given page from the screen, if it is currently displayed.</p>\n","count":2}],"sourceIdx":96},{"id":"SelectField","name":"SelectField","isClass":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/SelectField.d.ts","line":4,"code":"class SelectField extends InputControl","doc":"<p>Represents a native dropdown selection field control.</p>\n","extends":["InputControl"],"items":[{"id":"SelectField.Initializer","name":"Initializer","isInterface":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/SelectField.d.ts","line":32,"code":"interface Initializer extends InputControl.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["InputControl.Initializer"],"items":[{"id":"SelectField.Initializer/options","name":"options","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/SelectField.d.ts","line":34,"code":"options?: UIValueOrAsync<SelectField.Option[]>;","doc":"<p>Property initializer: options with text labels and (optional) values.</p>\n","declType":"UIValueOrAsync<SelectField.Option[]>"}],"inherits":["Component.Initializer/ArrowDownKeyPressed","Component.Initializer/ArrowLeftKeyPressed","Component.Initializer/ArrowRightKeyPressed","Component.Initializer/ArrowUpKeyPressed","Component.Initializer/BackspaceKeyPressed","Component.Initializer/Blur","Component.Initializer/Click","Component.Initializer/Clicked","Component.Initializer/DeleteKeyPressed","Component.Initializer/DoubleClick","Component.Initializer/DoubleClicked","Component.Initializer/DragDrop","Component.Initializer/DragEnter","Component.Initializer/DragLeave","Component.Initializer/DragStart","Component.Initializer/EnterKeyPressed","Component.Initializer/EscapeKeyPressed","Component.Initializer/Focus","Component.Initializer/FocusGained","Component.Initializer/FocusLost","Component.Initializer/KeyDown","Component.Initializer/KeyPress","Component.Initializer/MouseContextMenu","Component.Initializer/MouseEnter","Component.Initializer/MouseLeave","Component.Initializer/Press","Component.Initializer/Pressed","Component.Initializer/Rendered","Component.Initializer/SpaceBarPressed","InputControl.Initializer/ValueChange","InputControl.Initializer/ValueInput","Component.Initializer/animations","InputControl.Initializer/disabled","Component.Initializer/focusMode","ControlElement.Initializer/hasFocus","Component.Initializer/height","Component.Initializer/hidden","Component.Initializer/id","InputControl.Initializer/label","InputControl.Initializer/name","Component.Initializer/renderOptions","Component.Initializer/selected","Component.Initializer/selectionMode","Component.Initializer/shadowEffect","Component.Initializer/shadowEffectOnFocus","Component.Initializer/shadowEffectOnHover","ControlElement.Initializer/shrinkwrap","Component.Initializer/style","InputControl.Initializer/style_input","InputControl.Initializer/style_label","InputControl.Initializer/tooltipText","InputControl.Initializer/value","ControlElement.Initializer/width"]},{"id":"SelectField.Option","name":"Option","isInterface":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/SelectField.d.ts","line":25,"code":"interface Option","doc":"<p>Represents a select field option.</p>\n","isStatic":true,"items":[{"id":"SelectField.Option/text","name":"text","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/SelectField.d.ts","line":29,"code":"text: string | TextLabelFactory;","doc":"<p>Text label</p>\n","declType":"string | TextLabelFactory"},{"id":"SelectField.Option/value","name":"value","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/SelectField.d.ts","line":27,"code":"value?: string;","doc":"<p>Selection value</p>\n","declType":"string"}]},{"id":"SelectField.withOptions","name":"withOptions","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/SelectField.d.ts","line":8,"code":"static withOptions<T extends SelectField>(this: { new (): T; with: typeof SelectField.with; }, name: string, label?: string | TextLabelFactory, options?: UIValueOrAsync<SelectField.Option[]>): ComponentFactory<T>;","doc":"<p>Initialize a select field control factory with given name, label, and options.</p>\n","typeParams":["T extends SelectField"],"declType":"ComponentFactory<T>"},{"id":"SelectField.constructor","name":"new SelectField","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/SelectField.d.ts","line":6,"code":"constructor(name?: string, label?: string | TextLabelFactory, options?: SelectField.Option[]);","doc":"<p>Create a select field element.</p>\n"},{"id":"SelectField/getFormValues","name":"getFormValues","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/SelectField.d.ts","line":19,"code":"getFormValues(result?: {}): {};","doc":"<p>Returns an object containing all current values of input elements (observable).</p>\n","declType":"{}"},{"id":"SelectField/initializeWith","name":"initializeWith","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/SelectField.d.ts","line":13,"code":"initializeWith: (values: SelectField.Initializer) => this;","doc":"<p>Initialize with given (observable) values; returns this.</p>\n","declType":"(values: SelectField.Initializer) => this"},{"id":"SelectField/options","name":"options","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/SelectField.d.ts","line":15,"code":"options: Array<SelectField.Option | undefined>;","doc":"<p>List of options and their values (observed).</p>\n","declType":"Array<SelectField.Option | undefined>"},{"id":"SelectField/setFormValues","name":"setFormValues","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/SelectField.d.ts","line":21,"code":"setFormValues(values: any): void;","doc":"<p>Sets all input values by element name.</p>\n","declType":"void"},{"id":"SelectField/value","name":"value","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/SelectField.d.ts","line":17,"code":"value: string;","doc":"<p>Currently selected value (read/write observable).</p>\n","declType":"string"}],"isNamespace":true,"sourceIdx":72,"inherits":["Component.addStyleOverride","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","InputControl/disabled","Component/focusMode","Component/getActualDimensions","Component/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Component/id","Component/initialize","InputControl/label","InputControl/name","Component/out","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/shadowEffect","ControlElement/shrinkwrap","Component/style","InputControl/style_input","InputControl/style_label","InputControl/tooltipText","Component/uid","ControlElement/width","ControlElement/wrapText","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed","InputControl/ValueChange","InputControl/ValueInput"]},{"id":"Spacer","name":"Spacer","isClass":true,"file":"./packages/ui/typings/UI/Components/Controls/Spacer.d.ts","line":3,"code":"class Spacer extends ControlElement","doc":"<p>Represents an empty control element to take up horizontal space within a row.</p>\n","extends":["ControlElement"],"items":[{"id":"Spacer.Initializer","name":"Initializer","isInterface":true,"file":"./packages/ui/typings/UI/Components/Controls/Spacer.d.ts","line":16,"code":"interface Initializer extends ControlElement.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["ControlElement.Initializer"],"items":[],"inherits":["Component.Initializer/ArrowDownKeyPressed","Component.Initializer/ArrowLeftKeyPressed","Component.Initializer/ArrowRightKeyPressed","Component.Initializer/ArrowUpKeyPressed","Component.Initializer/BackspaceKeyPressed","Component.Initializer/Blur","Component.Initializer/Click","Component.Initializer/Clicked","Component.Initializer/DeleteKeyPressed","Component.Initializer/DoubleClick","Component.Initializer/DoubleClicked","Component.Initializer/DragDrop","Component.Initializer/DragEnter","Component.Initializer/DragLeave","Component.Initializer/DragStart","Component.Initializer/EnterKeyPressed","Component.Initializer/EscapeKeyPressed","Component.Initializer/Focus","Component.Initializer/FocusGained","Component.Initializer/FocusLost","Component.Initializer/KeyDown","Component.Initializer/KeyPress","Component.Initializer/MouseContextMenu","Component.Initializer/MouseEnter","Component.Initializer/MouseLeave","Component.Initializer/Press","Component.Initializer/Pressed","Component.Initializer/Rendered","Component.Initializer/SpaceBarPressed","Component.Initializer/animations","Component.Initializer/focusMode","ControlElement.Initializer/hasFocus","Component.Initializer/height","Component.Initializer/hidden","Component.Initializer/id","Component.Initializer/renderOptions","Component.Initializer/selected","Component.Initializer/selectionMode","Component.Initializer/shadowEffect","Component.Initializer/shadowEffectOnFocus","Component.Initializer/shadowEffectOnHover","ControlElement.Initializer/shrinkwrap","Component.Initializer/style","ControlElement.Initializer/width"]},{"id":"Spacer.withSize","name":"withSize","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Controls/Spacer.d.ts","line":7,"code":"static withSize<T extends Spacer>(this: { new (): T; with: typeof Spacer.with; }, width?: UIValueOrAsync<string>, height?: UIValueOrAsync<string>): ComponentFactory<T>;","doc":"<p>Initialize a spacer control factory with given size (CSS lengths); also sets <code>.shrinkwrap</code> to true if a width is given.</p>\n","typeParams":["T extends Spacer"],"declType":"ComponentFactory<T>"},{"id":"Spacer.constructor","name":"new Spacer","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Controls/Spacer.d.ts","line":5,"code":"constructor(height?: string);","doc":"<p>Create a spacer element with given height (default 1px).</p>\n"},{"id":"Spacer/initializeWith","name":"initializeWith","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Spacer.d.ts","line":12,"code":"initializeWith: (values: Spacer.Initializer) => this;","doc":"<p>Initialize with given (observable) properties; returns this.</p>\n","declType":"(values: Spacer.Initializer) => this"}],"isNamespace":true,"sourceIdx":84,"inherits":["Component.addStyleOverride","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Component/focusMode","Component/getActualDimensions","Component/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Component/id","Component/initialize","Component/out","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","ControlElement/shrinkwrap","Component/style","Component/uid","ControlElement/width","ControlElement/wrapText","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"Style","name":"Style","isClass":true,"file":"./packages/ui/typings/UI/Style.d.ts","line":2,"code":"class Style","doc":"<p>Encapsulates CSS style properties, classes, and hidden/selected attributes; these styles are observed when applied to components on screen, by themselves or overridden using another Style instance (see <code>.override(...)</code>); properties are always applied in alphabetical order, i.e <code>backgroundColor</code> after <code>background</code>, <code>paddingTop</code> after <code>padding</code>, etc.</p>\n","items":[{"id":"Style.StyleSet","name":"StyleSet","isInterface":true,"file":"./packages/ui/typings/UI/Style.d.ts","line":52,"code":"interface StyleSet","doc":"<p>A set of styles: properties with CSS values, e.g. { textAlign: “left” }; the operator “||” may be used within CSS value strings to indicate fallbacks for older platforms, e.g. “start || left” where “left” is applied before “start”.</p>\n","isStatic":true,"items":[{"id":"Style.StyleSet.!index:string","name":"[string]","isProperty":true,"file":"./packages/ui/typings/UI/Style.d.ts","line":53,"code":"[cssProperty: string]: string | Async.ObservableValue<string>;","doc":"<p>No description</p>\n","declType":"string | Async.ObservableValue<string>"}]},{"id":"Style.withClass","name":"withClass","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Style.d.ts","line":4,"code":"static withClass(className: string): Style;","doc":"<p>Create a Style instance that only contains given class name(s); alias for new Style(undefined, className).</p>\n","declType":"Style"},{"id":"Style.constructor","name":"new Style","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Style.d.ts","line":6,"code":"constructor(styles?: Style.StyleSet, className?: string, hidden?: boolean);","doc":"<p>Create a new instance with given styles; class name argument may contain multiple class names separated with spaces.</p>\n"},{"id":"Style/addClass","name":"addClass","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Style.d.ts","line":10,"code":"addClass(...classNames: string[]): this;","doc":"<p>Add the given class name(s); returns this.</p>\n","declType":"this"},{"id":"Style/addShadowEffect","name":"addShadowEffect","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Style.d.ts","line":22,"code":"addShadowEffect(depth: number | Async.ObservableValue<number>): this;","doc":"<p>Add a drop shadow effect, with given depth factor (0-1); returns this.</p>\n","declType":"this"},{"id":"Style/deselect","name":"deselect","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Style.d.ts","line":36,"code":"deselect(): this;","doc":"<p>Remove the “selected” attribute; returns this.</p>\n","declType":"this"},{"id":"Style/get","name":"get","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Style.d.ts","line":20,"code":"get(propertyName: string): any;","doc":"<p>Returns value for given property; the property must be set explicitly on this Style instance or overriding Style instances.</p>\n"},{"id":"Style/getCSSText","name":"getCSSText","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Style.d.ts","line":18,"code":"getCSSText(): string;","doc":"<p>Returns the full CSS text for all properties set/overridden.</p>\n","declType":"string"},{"id":"Style/getClassName","name":"getClassName","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Style.d.ts","line":16,"code":"getClassName(): string;","doc":"<p>Returns the current CSS class name(s) stored in this instance (observable).</p>\n","declType":"string"},{"id":"Style/getOverrides","name":"getOverrides","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Style.d.ts","line":46,"code":"getOverrides(): Style[];","doc":"<p>Returns a list that consists of this Style instance itself, plus any recursively overriding Style instances in effect; except for instances without any non-empty properties or classes (observable).</p>\n","declType":"Style[]"},{"id":"Style/hide","name":"hide","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Style.d.ts","line":24,"code":"hide(): this;\nhide(hidden?: boolean | Async.ObservableValue<boolean>): any;","doc":"<p>[1]. Add the “hidden” attribute; returns this.</p>\n<p>[2]. Map the “hidden” attribute to the value of given observable; returns this.</p>\n","declType":"this","count":2},{"id":"Style/isHidden","name":"isHidden","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Style.d.ts","line":30,"code":"isHidden(): any;","doc":"<p>Returns hidden state for this Style instance, true if explicitly hidden, false if explicity shown, undefined otherwise (observable).</p>\n"},{"id":"Style/isSelected","name":"isSelected","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Style.d.ts","line":38,"code":"isSelected(): any;","doc":"<p>Returns selection state for this Style instance, true if explicitly selected, false if explicity deselected, undefined otherwise (observable).</p>\n"},{"id":"Style/override","name":"override","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Style.d.ts","line":44,"code":"override(style?: Style | Style.StyleSet | Async.ObservableObject | Async.ObservableValue<Style | Style.StyleSet | Async.ObservableObject | undefined>): this;","doc":"<p>Override styles and classes with those from given Style instance; returns this.</p>\n","declType":"this"},{"id":"Style/removeClass","name":"removeClass","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Style.d.ts","line":12,"code":"removeClass(...classNames: string[]): this;","doc":"<p>Remove the given class name(s), from this instance as well as any instances that this instance overrides; returns this.</p>\n","declType":"this"},{"id":"Style/select","name":"select","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Style.d.ts","line":32,"code":"select(): any;\nselect(selected?: boolean | Async.ObservableValue<boolean>): any;","doc":"<p>[1]. Add the “selected” attribute; returns this.</p>\n<p>[2]. Map the “selected” attribute to the value of given observable; returns this.</p>\n","count":2},{"id":"Style/set","name":"set","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Style.d.ts","line":40,"code":"set(propertyName: string, value: string | Async.ObservableValue<string>): this;\nset(obj: Style.StyleSet | Async.ObservableObject): this;","doc":"<p>[1]. Set a style property; if given value is observable, this value will be observed while this Style instance is applied to an element on screen; returns this.</p>\n<p>[2]. Set multiple style properties using values (strings or <code>ObservableValue</code> instances) in given object; if given object is an <code>ObservableObject</code>, only <em>existing observable</em> properties are observed; returns this.</p>\n","declType":"this | this","count":2},{"id":"Style/setClass","name":"setClass","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Style.d.ts","line":14,"code":"setClass(...classNames: string[]): this;","doc":"<p>Remove (all) existing CSS class name(s) and use given class(es) (only on this Style instance, not on overriding or overridden styles); returns this.</p>\n","declType":"this"},{"id":"Style/show","name":"show","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Style.d.ts","line":28,"code":"show(): this;","doc":"<p>Remove the “hidden” attribute; returns this.</p>\n","declType":"this"},{"id":"Style/uid","name":"uid","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Style.d.ts","line":8,"code":"readonly uid: string;","doc":"<p>Globally unique ID for this Style instance.</p>\n","declType":"string"}],"isNamespace":true,"sourceIdx":97},{"id":"Table","name":"Table","isClass":true,"file":"./packages/ui/typings/UI/Components/Blocks/Table.d.ts","line":7,"code":"class Table<TableRowT extends TableRow> extends Block","doc":"<p>Represents a table block component.</p>\n","extends":["Block"],"typeParams":["TableRowT extends TableRow"],"items":[{"id":"Table.Initializer","name":"Initializer","isInterface":true,"file":"./packages/ui/typings/UI/Components/Blocks/Table.d.ts","line":32,"code":"interface Initializer extends Block.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["Block.Initializer"],"items":[{"id":"Table.Initializer/header","name":"header","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Table.d.ts","line":36,"code":"header?: ComponentFactory.SpecEltOrListTCol;","doc":"<p>Property initializer: header row.</p>\n","declType":"ComponentFactory.SpecEltOrListTCol"},{"id":"Table.Initializer/name","name":"name","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Table.d.ts","line":38,"code":"name?: string;","doc":"<p>Property initializer: form values list name.</p>\n","declType":"string"},{"id":"Table.Initializer/rows","name":"rows","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Table.d.ts","line":34,"code":"rows: ComponentFactory.SpecList2TCol;","doc":"<p>Property initializer: list of rows.</p>\n","declType":"ComponentFactory.SpecList2TCol"}],"inherits":["Component.Initializer/ArrowDownKeyPressed","Component.Initializer/ArrowLeftKeyPressed","Component.Initializer/ArrowRightKeyPressed","Component.Initializer/ArrowUpKeyPressed","Component.Initializer/BackspaceKeyPressed","Component.Initializer/Blur","Component.Initializer/Click","Component.Initializer/Clicked","Component.Initializer/DeleteKeyPressed","Component.Initializer/DoubleClick","Component.Initializer/DoubleClicked","Component.Initializer/DragDrop","Component.Initializer/DragEnter","Component.Initializer/DragLeave","Component.Initializer/DragStart","Component.Initializer/EnterKeyPressed","Component.Initializer/EscapeKeyPressed","Component.Initializer/Focus","Component.Initializer/FocusGained","Component.Initializer/FocusLost","Component.Initializer/KeyDown","Component.Initializer/KeyPress","Component.Initializer/MouseContextMenu","Component.Initializer/MouseEnter","Component.Initializer/MouseLeave","Component.Initializer/Press","Component.Initializer/Pressed","Component.Initializer/Rendered","Component.Initializer/SpaceBarPressed","Component.Initializer/animations","Block.Initializer/displayOptions","Component.Initializer/focusMode","Component.Initializer/hasFocus","Component.Initializer/height","Component.Initializer/hidden","Component.Initializer/id","Block.Initializer/overlayPosition","Component.Initializer/renderOptions","Component.Initializer/selected","Component.Initializer/selectionMode","Component.Initializer/shadowEffect","Component.Initializer/shadowEffectOnFocus","Component.Initializer/shadowEffectOnHover","Component.Initializer/style","Component.Initializer/width"]},{"id":"Table.withRows","name":"withRows","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Blocks/Table.d.ts","line":11,"code":"static withRows<T extends Table<any>>(this: { new (): T; with: typeof Table.with; }, rows: ComponentFactory.SpecList2TCol): ComponentFactory<T>;","doc":"<p>Initialize a table factory with given rows.</p>\n","typeParams":["T extends Table<any>"],"declType":"ComponentFactory<T>"},{"id":"Table.constructor","name":"new Table","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Blocks/Table.d.ts","line":9,"code":"constructor(headerColumns?: Array<string | ControlElement | Block>, widths?: string[], rows?: TableRowT[] | Async.ObservableArray<TableRowT>);","doc":"<p>Create a table with given header and rows, if any.</p>\n"},{"id":"Table/getChildren","name":"getChildren","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Blocks/Table.d.ts","line":24,"code":"getChildren(): Component[];","doc":"<p>Returns an array of directly contained components (observable).</p>\n","declType":"Component[]"},{"id":"Table/getFormValues","name":"getFormValues","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Blocks/Table.d.ts","line":26,"code":"getFormValues(result?: {}): {};","doc":"<p>Returns an object containing all current values of input elements (observable).</p>\n","declType":"{}"},{"id":"Table/header","name":"header","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Table.d.ts","line":18,"code":"header?: TableHeader;","doc":"<p>Header row; not rendered if undefined, or does not contain columns, OR if table itself has no rows (observed).</p>\n","declType":"TableHeader"},{"id":"Table/initializeWith","name":"initializeWith","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Table.d.ts","line":16,"code":"initializeWith: (values: Table.Initializer) => this;","doc":"<p>Initialize with given (observable) properties; returns this.</p>\n","declType":"(values: Table.Initializer) => this"},{"id":"Table/name","name":"name","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Table.d.ts","line":22,"code":"name?: string;","doc":"<p>Set to a string value to have getFormValues add an ObservableArray with form values of table rows.</p>\n","declType":"string"},{"id":"Table/rows","name":"rows","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/Table.d.ts","line":20,"code":"rows: Array<TableRowT | undefined>;","doc":"<p>List of rows; each row should have the same number of columns (observed).</p>\n","declType":"Array<TableRowT | undefined>"},{"id":"Table/setFormValues","name":"setFormValues","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Blocks/Table.d.ts","line":28,"code":"setFormValues(values: any): void;","doc":"<p>Set all input values by element name.</p>\n","declType":"void"}],"isNamespace":true,"sourceIdx":19,"inherits":["Component.addStyleOverride","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Block/displayOptions","Component/focusMode","Component/getActualDimensions","Component/getComponentById","Component/getComponentsByType","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Component/id","Component/initialize","Component/out","Block/overlayPosition","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/shadowEffect","Component/style","Component/uid","Component/width","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"TableHeader","name":"TableHeader","isClass":true,"file":"./packages/ui/typings/UI/Components/Blocks/TableRow.d.ts","line":39,"code":"class TableHeader extends TableRow","doc":"<p>A table header at the top of a table.</p>\n","extends":["TableRow"],"items":[{"id":"TableHeader/focusMode","name":"focusMode","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/TableRow.d.ts","line":43,"code":"focusMode: Component.FocusMode;","doc":"<p>Automatic focus management mode: table header rows are not focusable.</p>\n","declType":"Component.FocusMode"},{"id":"TableHeader/selectionMode","name":"selectionMode","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/TableRow.d.ts","line":41,"code":"selectionMode: Component.SelectionMode;","doc":"<p>Automatic selection management mode: table header rows are not selectable.</p>\n","declType":"Component.SelectionMode"}],"sourceIdx":21,"inherits":["Component.addStyleOverride","TableRow.withColumns","TableRow.constructor","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","TableRow/columns","Block/displayOptions","Component/getActualDimensions","TableRow/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Component/id","Component/initialize","TableRow/initializeWith","Component/out","Block/overlayPosition","Component/render","Component/renderOptions","TableRow/rowIndex","Component/selected","Component/setFormValues","Component/shadowEffect","Component/style","TableRow/styles","Component/uid","Component/width","TableRow/widths","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"TableRow","name":"TableRow","isClass":true,"file":"./packages/ui/typings/UI/Components/Blocks/TableRow.d.ts","line":6,"code":"class TableRow extends Block","doc":"<p>Represents a row within a <code>Table</code> component.</p>\n","extends":["Block"],"items":[{"id":"TableRow.Initializer","name":"Initializer","isInterface":true,"file":"./packages/ui/typings/UI/Components/Blocks/TableRow.d.ts","line":29,"code":"interface Initializer extends Block.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["Block.Initializer"],"items":[{"id":"TableRow.Initializer/columns","name":"columns","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/TableRow.d.ts","line":31,"code":"columns: ComponentFactory.SpecListTCol;","doc":"<p>Property initializer: content of all columns, as strings, control elements, or blocks.</p>\n","declType":"ComponentFactory.SpecListTCol"},{"id":"TableRow.Initializer/styles","name":"styles","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/TableRow.d.ts","line":35,"code":"styles?: UIValueOrAsync<Array<Style | Style.StyleSet | undefined>>;","doc":"<p>Property initializer: additional styles for all columns.</p>\n","declType":"UIValueOrAsync<Array<Style | Style.StyleSet | undefined>>"},{"id":"TableRow.Initializer/widths","name":"widths","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/TableRow.d.ts","line":33,"code":"widths?: UIValueOrAsync<Array<string | undefined>>;","doc":"<p>Property initializer: widths of all columns.</p>\n","declType":"UIValueOrAsync<Array<string | undefined>>"}],"inherits":["Component.Initializer/ArrowDownKeyPressed","Component.Initializer/ArrowLeftKeyPressed","Component.Initializer/ArrowRightKeyPressed","Component.Initializer/ArrowUpKeyPressed","Component.Initializer/BackspaceKeyPressed","Component.Initializer/Blur","Component.Initializer/Click","Component.Initializer/Clicked","Component.Initializer/DeleteKeyPressed","Component.Initializer/DoubleClick","Component.Initializer/DoubleClicked","Component.Initializer/DragDrop","Component.Initializer/DragEnter","Component.Initializer/DragLeave","Component.Initializer/DragStart","Component.Initializer/EnterKeyPressed","Component.Initializer/EscapeKeyPressed","Component.Initializer/Focus","Component.Initializer/FocusGained","Component.Initializer/FocusLost","Component.Initializer/KeyDown","Component.Initializer/KeyPress","Component.Initializer/MouseContextMenu","Component.Initializer/MouseEnter","Component.Initializer/MouseLeave","Component.Initializer/Press","Component.Initializer/Pressed","Component.Initializer/Rendered","Component.Initializer/SpaceBarPressed","Component.Initializer/animations","Block.Initializer/displayOptions","Component.Initializer/focusMode","Component.Initializer/hasFocus","Component.Initializer/height","Component.Initializer/hidden","Component.Initializer/id","Block.Initializer/overlayPosition","Component.Initializer/renderOptions","Component.Initializer/selected","Component.Initializer/selectionMode","Component.Initializer/shadowEffect","Component.Initializer/shadowEffectOnFocus","Component.Initializer/shadowEffectOnHover","Component.Initializer/style","Component.Initializer/width"]},{"id":"TableRow.withColumns","name":"withColumns","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Blocks/TableRow.d.ts","line":10,"code":"static withColumns<T extends TableRow>(this: { new (): T; with: typeof TableRow.with; }, columns: ComponentFactory.SpecListTCol): ComponentFactory<T>;","doc":"<p>Initialize a table row/header factory with given columns.</p>\n","typeParams":["T extends TableRow"],"declType":"ComponentFactory<T>"},{"id":"TableRow.constructor","name":"new TableRow","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Blocks/TableRow.d.ts","line":8,"code":"constructor(columns?: Array<string | ControlElement | Block>, widths?: string[], styles?: Array<Style | Style.StyleSet>);","doc":"<p>Create a table row with given columns, if any.</p>\n"},{"id":"TableRow/columns","name":"columns","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/TableRow.d.ts","line":17,"code":"columns: Array<string | ControlElement | Block | undefined>;","doc":"<p>Column content as strings, control elements, or blocks (observed).</p>\n","declType":"Array<string | ControlElement | Block | undefined>"},{"id":"TableRow/getChildren","name":"getChildren","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Blocks/TableRow.d.ts","line":25,"code":"getChildren(): Component[];","doc":"<p>Returns an array of directly contained components.</p>\n","declType":"Component[]"},{"id":"TableRow/initializeWith","name":"initializeWith","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/TableRow.d.ts","line":15,"code":"initializeWith: (values: TableRow.Initializer) => this;","doc":"<p>Initialize with given (observable) properties; returns this.</p>\n","declType":"(values: TableRow.Initializer) => this"},{"id":"TableRow/rowIndex","name":"rowIndex","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/TableRow.d.ts","line":23,"code":"rowIndex: number;","doc":"<p>Row index (base 0) the last time this row was rendered, or -1 (observable).</p>\n","declType":"number"},{"id":"TableRow/styles","name":"styles","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/TableRow.d.ts","line":21,"code":"styles: Array<Style | Style.StyleSet | undefined>;","doc":"<p>Additional styles for all columns (observed).</p>\n","declType":"Array<Style | Style.StyleSet | undefined>"},{"id":"TableRow/widths","name":"widths","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/TableRow.d.ts","line":19,"code":"widths: Array<string | undefined>;","doc":"<p>Column widths for all columns (CSS values, observed).</p>\n","declType":"Array<string | undefined>"}],"isNamespace":true,"sourceIdx":20,"inherits":["Component.addStyleOverride","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Block/displayOptions","Component/focusMode","Component/getActualDimensions","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Component/id","Component/initialize","Component/out","Block/overlayPosition","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Component/style","Component/uid","Component/width","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"TextButton","name":"TextButton","isClass":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":119,"code":"class TextButton extends Button","doc":"<p>Button control that is not decorated as a button.</p>\n","extends":["Button"],"items":[],"sourceIdx":61,"inherits":["Component.addStyleOverride","Button.withIcon","Button.withLabel","Button.constructor","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Button/badge","Button/disabled","Button/dropdown","Component/focusMode","Component/getActualDimensions","Component/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Button/icon","Button/iconAfter","Component/id","Component/initialize","Button/initializeWith","Button/label","Component/out","Button/popover","Button/popoverAbove","Button/popoverAnimation","Button/popoverTitle","Button/primary","Button/remGutter","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Button/shrinkwrap","Component/style","Button/style_button","Button/target","Button/tooltipText","Component/uid","ControlElement/width","ControlElement/wrapText","Component/defineComponentSignal","Component/beforeFirstRender","Component/Renderer","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Button/DropdownClicked","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"TextField","name":"TextField","isClass":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":4,"code":"class TextField extends InputControl","doc":"<p>Represents a single- or multi-line text input field control.</p>\n","extends":["InputControl"],"items":[{"id":"TextField.Initializer","name":"Initializer","isInterface":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":49,"code":"interface Initializer extends InputControl.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["InputControl.Initializer"],"items":[{"id":"TextField.Initializer/immediateValueUpdate","name":"immediateValueUpdate","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":57,"code":"immediateValueUpdate?: UIValueOrAsync<boolean>;","doc":"<p>Property initializer: true to update value immediately on input.</p>\n","declType":"UIValueOrAsync<boolean>"},{"id":"TextField.Initializer/placeholderText","name":"placeholderText","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":55,"code":"placeholderText?: UIValueOrAsync<string | TextLabelFactory>;","doc":"<p>Property initializer: placeholder text.</p>\n","declType":"UIValueOrAsync<string | TextLabelFactory>"},{"id":"TextField.Initializer/textareaLines","name":"textareaLines","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":51,"code":"textareaLines?: UIValueOrAsync<number>;","doc":"<p>Property initializer: number of text area lines.</p>\n","declType":"UIValueOrAsync<number>"},{"id":"TextField.Initializer/type","name":"type","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":53,"code":"type?: UIValueOrAsync<TextField.Type>;","doc":"<p>Property initializer: text field type.</p>\n","declType":"UIValueOrAsync<TextField.Type>"}],"inherits":["Component.Initializer/ArrowDownKeyPressed","Component.Initializer/ArrowLeftKeyPressed","Component.Initializer/ArrowRightKeyPressed","Component.Initializer/ArrowUpKeyPressed","Component.Initializer/BackspaceKeyPressed","Component.Initializer/Blur","Component.Initializer/Click","Component.Initializer/Clicked","Component.Initializer/DeleteKeyPressed","Component.Initializer/DoubleClick","Component.Initializer/DoubleClicked","Component.Initializer/DragDrop","Component.Initializer/DragEnter","Component.Initializer/DragLeave","Component.Initializer/DragStart","Component.Initializer/EnterKeyPressed","Component.Initializer/EscapeKeyPressed","Component.Initializer/Focus","Component.Initializer/FocusGained","Component.Initializer/FocusLost","Component.Initializer/KeyDown","Component.Initializer/KeyPress","Component.Initializer/MouseContextMenu","Component.Initializer/MouseEnter","Component.Initializer/MouseLeave","Component.Initializer/Press","Component.Initializer/Pressed","Component.Initializer/Rendered","Component.Initializer/SpaceBarPressed","InputControl.Initializer/ValueChange","InputControl.Initializer/ValueInput","Component.Initializer/animations","InputControl.Initializer/disabled","Component.Initializer/focusMode","ControlElement.Initializer/hasFocus","Component.Initializer/height","Component.Initializer/hidden","Component.Initializer/id","InputControl.Initializer/label","InputControl.Initializer/name","Component.Initializer/renderOptions","Component.Initializer/selected","Component.Initializer/selectionMode","Component.Initializer/shadowEffect","Component.Initializer/shadowEffectOnFocus","Component.Initializer/shadowEffectOnHover","ControlElement.Initializer/shrinkwrap","Component.Initializer/style","InputControl.Initializer/style_input","InputControl.Initializer/style_label","InputControl.Initializer/tooltipText","InputControl.Initializer/value","ControlElement.Initializer/width"]},{"id":"TextField.withName","name":"withName","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":8,"code":"static withName<T extends TextField>(this: { new (): T; with: typeof TextField.with; }, name: string, label?: string | TextLabelFactory, placeholderText?: string | TextLabelFactory): ComponentFactory<T>;","doc":"<p>Initialize a text field control factory with given name, label, and placeholder.</p>\n","typeParams":["T extends TextField"],"declType":"ComponentFactory<T>"},{"id":"TextField.Type","name":"Type","isEnum":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":33,"code":"enum Type","doc":"<p>Text field type options (e.g. Text, Password, Email etc.).</p>\n","isStatic":true,"items":[{"id":"TextField.Type.Color","name":"Color","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":46,"code":"enum Type { ...Color }","doc":"<p>No description</p>\n"},{"id":"TextField.Type.Date","name":"Date","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":37,"code":"enum Type { ...Date }","doc":"<p>No description</p>\n"},{"id":"TextField.Type.DateTime","name":"DateTime","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":36,"code":"enum Type { ...DateTime }","doc":"<p>No description</p>\n"},{"id":"TextField.Type.Email","name":"Email","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":42,"code":"enum Type { ...Email }","doc":"<p>No description</p>\n"},{"id":"TextField.Type.Month","name":"Month","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":38,"code":"enum Type { ...Month }","doc":"<p>No description</p>\n"},{"id":"TextField.Type.Number","name":"Number","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":41,"code":"enum Type { ...Number }","doc":"<p>No description</p>\n"},{"id":"TextField.Type.Password","name":"Password","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":35,"code":"enum Type { ...Password }","doc":"<p>No description</p>\n"},{"id":"TextField.Type.Search","name":"Search","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":44,"code":"enum Type { ...Search }","doc":"<p>No description</p>\n"},{"id":"TextField.Type.Tel","name":"Tel","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":45,"code":"enum Type { ...Tel }","doc":"<p>No description</p>\n"},{"id":"TextField.Type.Text","name":"Text","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":34,"code":"enum Type { ...Text }","doc":"<p>No description</p>\n"},{"id":"TextField.Type.Time","name":"Time","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":39,"code":"enum Type { ...Time }","doc":"<p>No description</p>\n"},{"id":"TextField.Type.Url","name":"Url","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":43,"code":"enum Type { ...Url }","doc":"<p>No description</p>\n"},{"id":"TextField.Type.Week","name":"Week","isStatic":true,"isConst":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":40,"code":"enum Type { ...Week }","doc":"<p>No description</p>\n"}]},{"id":"TextField.constructor","name":"new TextField","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":6,"code":"constructor(name?: string, label?: string | TextLabelFactory, textareaLines?: number);","doc":"<p>Create a text field.</p>\n"},{"id":"TextField/getFormValues","name":"getFormValues","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":27,"code":"getFormValues(result?: {}): {};","doc":"<p>Returns an object containing all current values of input elements (observable).</p>\n","declType":"{}"},{"id":"TextField/immediateValueUpdate","name":"immediateValueUpdate","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":23,"code":"immediateValueUpdate: boolean;","doc":"<p>Set to true to update <code>.value</code> immediately after the input field text has changed, instead of only on blur or enter press (observed).</p>\n","declType":"boolean"},{"id":"TextField/initializeWith","name":"initializeWith","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":13,"code":"initializeWith: (values: TextField.Initializer) => this;","doc":"<p>Initialize with given (observable) values; returns this.</p>\n","declType":"(values: TextField.Initializer) => this"},{"id":"TextField/placeholderText","name":"placeholderText","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":21,"code":"placeholderText: string;","doc":"<p>Placeholder text (observed).</p>\n","declType":"string"},{"id":"TextField/selectText","name":"selectText","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":25,"code":"selectText(start?: number, end?: number): this;","doc":"<p>Select (a part of) the text in this text field, returns this.</p>\n","declType":"this"},{"id":"TextField/setFormValues","name":"setFormValues","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":29,"code":"setFormValues(values: any): void;","doc":"<p>Sets all input values by element name.</p>\n","declType":"void"},{"id":"TextField/textareaLines","name":"textareaLines","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":15,"code":"textareaLines: number;","doc":"<p>Number of rows for a multiline text field, default 0 (NOT observed).</p>\n","declType":"number"},{"id":"TextField/type","name":"type","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":17,"code":"type: TextField.Type;","doc":"<p>Text field type (text, password, number, etc.; observed).</p>\n","declType":"TextField.Type"},{"id":"TextField/value","name":"value","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":19,"code":"value: string;","doc":"<p>Current input value (read/write observable) value changes only on blur or enter press unless <code>.immediateValueUpdate</code> is set.</p>\n","declType":"string"}],"isNamespace":true,"sourceIdx":73,"inherits":["Component.addStyleOverride","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","InputControl/disabled","Component/focusMode","Component/getActualDimensions","Component/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Component/id","Component/initialize","InputControl/label","InputControl/name","Component/out","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/shadowEffect","ControlElement/shrinkwrap","Component/style","InputControl/style_input","InputControl/style_label","InputControl/tooltipText","Component/uid","ControlElement/width","ControlElement/wrapText","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed","InputControl/ValueChange","InputControl/ValueInput"]},{"id":"TextLabelFactory","name":"TextLabelFactory","isClass":true,"file":"./packages/ui/typings/UI/Components/TextLabelFactory.d.ts","line":5,"code":"class TextLabelFactory","doc":"<p>Shared factory implementation for a piece of text as a string and/or as (an observable value representing) a Label instance (or sub class); can be used in Component factory specs using UI.tl(…) or with backticks.</p>\n","items":[{"id":"TextLabelFactory.TLInitializer","name":"TLInitializer","isType":true,"file":"./packages/ui/typings/UI/Components/TextLabelFactory.d.ts","line":22,"code":"type TLInitializer = (baseComponent: Component, propertyName: string) => Async.ObservableValue<string>;","doc":"<p>Function used by <code>tl</code> to construct TextLabelFactory that can only construct a <code>Label</code> instance if a base component and property name is given, to convert bindings into observables.</p>\n","isStatic":true,"declType":"(baseComponent: Component, propertyName: string) => Async.ObservableValue<string>"},{"id":"TextLabelFactory.constructor","name":"new TextLabelFactory","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/TextLabelFactory.d.ts","line":7,"code":"constructor(text: { toString; } | Async.ObservableValue<{ toString; }> | TextLabelFactory.TLInitializer, baseClass?: typeof Label);","doc":"<p>Create the text label factory using the given string, stringable (object with .toString method), observable value, or a function that returns an observable value, and a Label base class that is used if not overridden by string content prefix.</p>\n"},{"id":"TextLabelFactory/getComponent","name":"getComponent","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/TextLabelFactory.d.ts","line":15,"code":"getComponent(baseComponent?: Component, propertyName?: string): Label | Async.ObservableValue<Label>;","doc":"<p>Get the encapsulated text wrapped in a new Label (or derived) instance, or an observable value representing the instance; uses {…} prefix to control component type and its properties; parameters are used by compononent factory to initialize bindings used in <code>tl</code> strings, if any.</p>\n","declType":"Label | Async.ObservableValue<Label>"},{"id":"TextLabelFactory/toString","name":"toString","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Components/TextLabelFactory.d.ts","line":13,"code":"toString(): string;","doc":"<p>Get the encapsulated text as a string; adds a dependency on the observable value if called from an obserable value getter; trims {…} prefix if present.</p>\n","declType":"string"}],"isNamespace":true,"sourceIdx":85},{"id":"Toast","name":"Toast","isClass":true,"file":"./packages/ui/typings/UI/Components/Composite/Toast.d.ts","line":5,"code":"class Toast extends Row","doc":"<p>Represents a toast message that is displayed in the corner of the page.</p>\n","extends":["Row"],"items":[{"id":"Toast.APPEAR_ANIMATION","name":"APPEAR_ANIMATION","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Components/Composite/Toast.d.ts","line":21,"code":"static APPEAR_ANIMATION?: Animation;","doc":"<p>Default “appear” animation, added to every new <code>Toast</code> instance by the constructor.</p>\n","declType":"Animation"},{"id":"Toast.DISAPPEAR_ANIMATION","name":"DISAPPEAR_ANIMATION","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Components/Composite/Toast.d.ts","line":23,"code":"static DISAPPEAR_ANIMATION?: Animation;","doc":"<p>Default “disappear” animation, added to every new <code>Toast</code> instance by the constructor.</p>\n","declType":"Animation"},{"id":"Toast.HORZ_OUTER_MARGIN_PX","name":"HORZ_OUTER_MARGIN_PX","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Components/Composite/Toast.d.ts","line":11,"code":"static HORZ_OUTER_MARGIN_PX: number;","doc":"<p>Global margin setting, in pixels (do not change after first display).</p>\n","declType":"number"},{"id":"Toast.MAX_WIDTH","name":"MAX_WIDTH","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Components/Composite/Toast.d.ts","line":19,"code":"static MAX_WIDTH: string;","doc":"<p>Maximum width for toast messages (CSS length).</p>\n","declType":"string"},{"id":"Toast.POSITION","name":"POSITION","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Components/Composite/Toast.d.ts","line":9,"code":"static POSITION: Block.OverlayPosition;","doc":"<p>Global positioning setting (do not change after first display).</p>\n","declType":"Block.OverlayPosition"},{"id":"Toast.TIMEOUT","name":"TIMEOUT","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Components/Composite/Toast.d.ts","line":17,"code":"static TIMEOUT: number;","doc":"<p>Default timeout for new toast messages, in milliseconds (defaults to 4000).</p>\n","declType":"number"},{"id":"Toast.VERT_INNER_MARGIN_PX","name":"VERT_INNER_MARGIN_PX","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Components/Composite/Toast.d.ts","line":15,"code":"static VERT_INNER_MARGIN_PX: number;","doc":"<p>Global margin setting, in pixels (do not change after first display).</p>\n","declType":"number"},{"id":"Toast.VERT_OUTER_MARGIN_PX","name":"VERT_OUTER_MARGIN_PX","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Components/Composite/Toast.d.ts","line":13,"code":"static VERT_OUTER_MARGIN_PX: number;","doc":"<p>Global margin setting, in pixels (do not change after first display).</p>\n","declType":"number"},{"id":"Toast.closeAll","name":"closeAll","hasParams":false,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Composite/Toast.d.ts","line":7,"code":"static closeAll(): void;","doc":"<p>Close all toasts currently displayed on the page.</p>\n","declType":"void"},{"id":"Toast.constructor","name":"new Toast","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Composite/Toast.d.ts","line":25,"code":"constructor(content: string | TextLabelFactory | ComponentFactory.SpecElt[], timeout?: number);","doc":"<p>Create a toast message with given content, and optional timeout in ms.</p>\n"},{"id":"Toast/close","name":"close","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Composite/Toast.d.ts","line":31,"code":"close(): void;","doc":"<p>Remove this toast from the page.</p>\n","declType":"void"},{"id":"Toast/display","name":"display","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Composite/Toast.d.ts","line":29,"code":"display(): this | undefined;","doc":"<p>Display this toast message on the page.</p>\n","declType":"this | undefined"},{"id":"Toast/timeout","name":"timeout","isProperty":true,"file":"./packages/ui/typings/UI/Components/Composite/Toast.d.ts","line":27,"code":"timeout: number;","doc":"<p>Time (in ms) after which this toast will be removed from the page automatically.</p>\n","declType":"number"}],"sourceIdx":47,"inherits":["Component.addStyleOverride","Row.withContent","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Row/content","Block/displayOptions","Component/focusMode","Component/getActualDimensions","Row/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Component/id","Component/initialize","Row/initializeWith","Component/out","Block/overlayPosition","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Row/spacing","Component/style","Component/uid","Row/verticalSpacing","Component/width","Component/defineComponentSignal","Component/Renderer","Component/beforeFirstRender","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"ToggleButton","name":"ToggleButton","isClass":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":112,"code":"class ToggleButton extends Button","doc":"<p>Button that switches between selected (active) and deselected (inactive) when clicked (shortcut for setting <code>toggleMode</code> on regular <code>Button</code> class).</p>\n","extends":["Button"],"items":[{"id":"ToggleButton.constructor","name":"new ToggleButton","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Controls/Button.d.ts","line":113,"code":"constructor(label?: string | TextLabelFactory, icon?: string);","doc":"<p>No description</p>\n"}],"sourceIdx":59,"inherits":["Component.addStyleOverride","Button.withIcon","Button.withLabel","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Button/badge","Button/disabled","Button/dropdown","Component/focusMode","Component/getActualDimensions","Component/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Button/icon","Button/iconAfter","Component/id","Component/initialize","Button/initializeWith","Button/label","Component/out","Button/popover","Button/popoverAbove","Button/popoverAnimation","Button/popoverTitle","Button/primary","Button/remGutter","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Button/shrinkwrap","Component/style","Button/style_button","Button/target","Button/tooltipText","Component/uid","ControlElement/width","ControlElement/wrapText","Component/beforeFirstRender","Component/defineComponentSignal","Component/Renderer","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Button/DropdownClicked","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"TreeList","name":"TreeList","isClass":true,"file":"./packages/ui/typings/UI/Components/Blocks/TreeList.d.ts","line":6,"code":"class TreeList<BlockT extends TreeList.BlockItem> extends Block","doc":"<p>Represents a hierarchical list of blocks.</p>\n","extends":["Block"],"typeParams":["BlockT extends TreeList.BlockItem"],"items":[{"id":"TreeList.BlockItem","name":"BlockItem","isInterface":true,"file":"./packages/ui/typings/UI/Components/Blocks/TreeList.d.ts","line":50,"code":"interface BlockItem extends Block","doc":"<p>Represents a <code>Block</code> component with optional properties that define the hierarchical structure used by <code>TreeList</code>.</p>\n","isStatic":true,"extends":["Block"],"items":[{"id":"TreeList.BlockItem/collapsed","name":"collapsed","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/TreeList.d.ts","line":54,"code":"collapsed?: boolean;","doc":"<p>Optional flag, set to true to collapse the hierarchy below this item; this property should be observable to update rendered components asynchronously.</p>\n","declType":"boolean"},{"id":"TreeList.BlockItem/key","name":"key","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/TreeList.d.ts","line":52,"code":"key?: string;","doc":"<p>Optional key (identifier string) of the item, used to populate <code>TreeList/selectedKey</code>.</p>\n","declType":"string"},{"id":"TreeList.BlockItem/treeListItems","name":"treeListItems","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/TreeList.d.ts","line":56,"code":"treeListItems?: Array<TreeList.BlockItem | undefined>;","doc":"<p>Optional (observable) array containing tree list items to be displayed below this item; this property should be observable to update rendered components asynchronously.</p>\n","declType":"Array<TreeList.BlockItem | undefined>"}],"inherits":["Component.addStyleOverride","Block.constructor","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Block/displayOptions","Component/focusMode","Component/getActualDimensions","Component/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Component/id","Component/initialize","Block/initializeWith","Component/out","Block/overlayPosition","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Component/style","Component/uid","Component/width","Component/defineComponentSignal","Component/beforeFirstRender","Component/Renderer","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"TreeList.FoldSignal","name":"FoldSignal","isClass":true,"file":"./packages/ui/typings/UI/Components/Blocks/TreeList.d.ts","line":69,"code":"class FoldSignal<T extends TreeList.BlockItem> extends ComponentSignal<ItemEvent<T>>","doc":"<p>Signal that is emitted when a tree list item is collapsed or expanded.</p>\n","isStatic":true,"extends":["ComponentSignal"],"typeParams":["T extends TreeList.BlockItem"],"items":[]},{"id":"TreeList.Initializer","name":"Initializer","isInterface":true,"file":"./packages/ui/typings/UI/Components/Blocks/TreeList.d.ts","line":39,"code":"interface Initializer<BlockT extends Block> extends Block.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["Block.Initializer"],"typeParams":["BlockT extends Block"],"items":[{"id":"TreeList.Initializer/ItemCollapsed","name":"ItemCollapsed","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/TreeList.d.ts","line":45,"code":"ItemCollapsed?: string | TreeListFoldHandler<BlockT>;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | TreeListFoldHandler<BlockT>"},{"id":"TreeList.Initializer/ItemExpanded","name":"ItemExpanded","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/TreeList.d.ts","line":47,"code":"ItemExpanded?: string | TreeListFoldHandler<BlockT>;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | TreeListFoldHandler<BlockT>"},{"id":"TreeList.Initializer/SelectionChange","name":"SelectionChange","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/TreeList.d.ts","line":43,"code":"SelectionChange?: string | TreeListSelectionHandler<BlockT>;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | TreeListSelectionHandler<BlockT>"},{"id":"TreeList.Initializer/items","name":"items","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/TreeList.d.ts","line":41,"code":"items?: ComponentFactory.SpecList;","doc":"<p>Property initializer: nested list of items.</p>\n","declType":"ComponentFactory.SpecList"}],"inherits":["Component.Initializer/ArrowDownKeyPressed","Component.Initializer/ArrowLeftKeyPressed","Component.Initializer/ArrowRightKeyPressed","Component.Initializer/ArrowUpKeyPressed","Component.Initializer/BackspaceKeyPressed","Component.Initializer/Blur","Component.Initializer/Click","Component.Initializer/Clicked","Component.Initializer/DeleteKeyPressed","Component.Initializer/DoubleClick","Component.Initializer/DoubleClicked","Component.Initializer/DragDrop","Component.Initializer/DragEnter","Component.Initializer/DragLeave","Component.Initializer/DragStart","Component.Initializer/EnterKeyPressed","Component.Initializer/EscapeKeyPressed","Component.Initializer/Focus","Component.Initializer/FocusGained","Component.Initializer/FocusLost","Component.Initializer/KeyDown","Component.Initializer/KeyPress","Component.Initializer/MouseContextMenu","Component.Initializer/MouseEnter","Component.Initializer/MouseLeave","Component.Initializer/Press","Component.Initializer/Pressed","Component.Initializer/Rendered","Component.Initializer/SpaceBarPressed","Component.Initializer/animations","Block.Initializer/displayOptions","Component.Initializer/focusMode","Component.Initializer/hasFocus","Component.Initializer/height","Component.Initializer/hidden","Component.Initializer/id","Block.Initializer/overlayPosition","Component.Initializer/renderOptions","Component.Initializer/selected","Component.Initializer/selectionMode","Component.Initializer/shadowEffect","Component.Initializer/shadowEffectOnFocus","Component.Initializer/shadowEffectOnHover","Component.Initializer/style","Component.Initializer/width"]},{"id":"TreeList.ItemEvent","name":"ItemEvent","isInterface":true,"file":"./packages/ui/typings/UI/Components/Blocks/TreeList.d.ts","line":59,"code":"interface ItemEvent<T extends TreeList.BlockItem>","doc":"<p>Data that is emitted after the item selection of a tree list component changes, or when a tree list item is collapsed/expanded.</p>\n","isStatic":true,"typeParams":["T extends TreeList.BlockItem"],"items":[{"id":"TreeList.ItemEvent/item","name":"item","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/TreeList.d.ts","line":61,"code":"item?: T;","doc":"<p>The newly selected item.</p>\n","declType":"T"},{"id":"TreeList.ItemEvent/key","name":"key","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/TreeList.d.ts","line":63,"code":"key?: string;","doc":"<p>The key (string value) of the newly selected item, if any.</p>\n","declType":"string"}]},{"id":"TreeList.SelectionSignal","name":"SelectionSignal","isClass":true,"file":"./packages/ui/typings/UI/Components/Blocks/TreeList.d.ts","line":66,"code":"class SelectionSignal<T extends TreeList.BlockItem> extends ComponentSignal<ItemEvent<T>>","doc":"<p>Signal that is emitted when a tree list selection event occurs.</p>\n","isStatic":true,"extends":["ComponentSignal"],"typeParams":["T extends TreeList.BlockItem"],"items":[]},{"id":"TreeList.withItems","name":"withItems","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Blocks/TreeList.d.ts","line":12,"code":"static withItems<T extends TreeList<TreeList.BlockItem>>(this: { new (): T; with: typeof TreeList.with; }, items: ComponentFactory.SpecList): ComponentFactory<T>;","doc":"<p>Initialize a list factory with given items.</p>\n","typeParams":["T extends TreeList<TreeList.BlockItem>"],"declType":"ComponentFactory<T>"},{"id":"TreeList.constructor","name":"new TreeList","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Blocks/TreeList.d.ts","line":8,"code":"constructor(items?: Array<BlockT | undefined>);","doc":"<p>Create a tree list component with given items.</p>\n"},{"id":"TreeList/getChildren","name":"getChildren","hasParams":false,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Blocks/TreeList.d.ts","line":27,"code":"getChildren(): Component[];","doc":"<p>Returns an array of directly contained components (observable); i.e. a flattened list of all <em>visible</em> tree list items.</p>\n","declType":"Component[]"},{"id":"TreeList/initializeWith","name":"initializeWith","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/TreeList.d.ts","line":17,"code":"initializeWith: (values: TreeList.Initializer<BlockT>) => this;","doc":"<p>Initialize with given (observable) properties; returns this.</p>\n","declType":"(values: TreeList.Initializer<BlockT>) => this"},{"id":"TreeList/items","name":"items","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/TreeList.d.ts","line":19,"code":"items: Array<BlockT | undefined>;","doc":"<p>Hierarchical list content (observed); items can use the <code>TreeList.BlockItem</code> interface to provide sub content, see e.g. <code>TreeListRow</code>.</p>\n","declType":"Array<BlockT | undefined>"},{"id":"TreeList/selectItem","name":"selectItem","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Blocks/TreeList.d.ts","line":21,"code":"selectItem(item: BlockT | undefined): void;","doc":"<p>Select given item (block), and immediately deselect others if <code>.selectionMode</code> is <code>ItemClick</code> or <code>ItemFocus</code>; does <em>not</em> check if the item is included in <code>.items</code> at all for performance reasons.</p>\n","declType":"void"},{"id":"TreeList/selectedKey","name":"selectedKey","isProperty":true,"file":"./packages/ui/typings/UI/Components/Blocks/TreeList.d.ts","line":23,"code":"selectedKey: string | undefined;","doc":"<p>Key (string value) of selected item, if any (observable); see <code>TreeList.BlockItem/key</code>; if set to a string value, all items in the hierarchy will be checked for a matching key, and selected or deselected; for selected items, parent items will be expanded automatically; input focus will be removed from deselected items as well, but selected items are not focused automatically.</p>\n","declType":"string | undefined"},{"id":"TreeList/beforeFirstRender","name":"beforeFirstRender","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Blocks/TreeList.d.ts","line":10,"code":"protected beforeFirstRender(renderer: ComponentRenderer<this, any>): void;","doc":"<p>Method that is called immediately after the renderer for this list is constructed; adds observers for item selection.</p>\n","isProtected":true,"declType":"void"},{"id":"TreeList/ItemCollapsed","name":"ItemCollapsed","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Blocks/TreeList.d.ts","line":31,"code":"readonly ItemCollapsed: ComponentSignal.Emittable<TreeList.ItemEvent<any>, typeof TreeList.FoldSignal>;","doc":"<p>Signal emitted when a tree list item is collapsed, while displayed on screen.</p>\n","declType":"ComponentSignal.Emittable<TreeList.ItemEvent<any>, typeof TreeList.FoldSignal>","isSignal":true},{"id":"TreeList/ItemExpanded","name":"ItemExpanded","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Blocks/TreeList.d.ts","line":33,"code":"readonly ItemExpanded: ComponentSignal.Emittable<TreeList.ItemEvent<any>, typeof TreeList.FoldSignal>;","doc":"<p>Signal emitted when a tree list item is expanded, while displayed on screen.</p>\n","declType":"ComponentSignal.Emittable<TreeList.ItemEvent<any>, typeof TreeList.FoldSignal>","isSignal":true},{"id":"TreeList/SelectionChange","name":"SelectionChange","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Blocks/TreeList.d.ts","line":29,"code":"readonly SelectionChange: ComponentSignal.Emittable<TreeList.ItemEvent<BlockT>, typeof TreeList.SelectionSignal>;","doc":"<p>Signal emitted when the list selection changes, while displayed on screen.</p>\n","declType":"ComponentSignal.Emittable<TreeList.ItemEvent<BlockT>, typeof TreeList.SelectionSignal>","isSignal":true}],"isNamespace":true,"sourceIdx":22,"inherits":["Component.addStyleOverride","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Block/displayOptions","Component/focusMode","Component/getActualDimensions","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Component/id","Component/initialize","Component/out","Block/overlayPosition","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Component/style","Component/uid","Component/width","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"TreeListFoldHandler","name":"TreeListFoldHandler","isClass":true,"file":"./packages/ui/typings/UI/Components/Blocks/TreeList.d.ts","line":76,"code":"class TreeListFoldHandler<T extends TreeList.BlockItem> extends ComponentSignalHandler<TreeList.ItemEvent<T>, typeof TreeList.FoldSignal>","doc":"<p>Constructor for a tree list fold (collapse/expand) event handler.</p>\n","extends":["ComponentSignalHandler"],"typeParams":["T extends TreeList.BlockItem"],"items":[],"sourceIdx":24,"inherits":["ComponentSignalHandler.!call","ComponentSignalHandler/connectTo","ComponentSignalHandler/isEventHandler"]},{"id":"TreeListRow","name":"TreeListRow","isClass":true,"file":"./packages/ui/typings/UI/Components/Composite/TreeListRow.d.ts","line":4,"code":"class TreeListRow extends CloseRow implements TreeList.BlockItem","doc":"<p>Represents a tree list row, with an optional list of sub rows; implements the <code>TreeList.BlockItem</code> interface.</p>\n","extends":["CloseRow"],"items":[{"id":"TreeListRow.HEIGHT","name":"HEIGHT","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Components/Composite/TreeListRow.d.ts","line":12,"code":"static HEIGHT: string;","doc":"<p>Default height for new instances (CSS length, initially 1.75em).</p>\n","declType":"string"},{"id":"TreeListRow.ItemData","name":"ItemData","isInterface":true,"file":"./packages/ui/typings/UI/Components/Composite/TreeListRow.d.ts","line":50,"code":"interface ItemData","doc":"<p>Interface definition of the source data that can be used to construct a <code>TreeListRow</code> instance and its children; actual objects may contain more state information such as an instance of a linked (view) model, however either a <code>content</code> array or a <code>name</code> property is required.</p>\n","isStatic":true,"items":[{"id":"TreeListRow.ItemData/autoExpand","name":"autoExpand","isProperty":true,"file":"./packages/ui/typings/UI/Components/Composite/TreeListRow.d.ts","line":62,"code":"autoExpand?: boolean;","doc":"<p>True if the created tree list row should be automatically expanded to reveal sub items when rendered.</p>\n","declType":"boolean"},{"id":"TreeListRow.ItemData/content","name":"content","isProperty":true,"file":"./packages/ui/typings/UI/Components/Composite/TreeListRow.d.ts","line":54,"code":"content?: ComponentFactory.SpecList;","doc":"<p>Row content to be displayed for this item, as a factory initializer spec: an array containing strings, <code>TextLabelFactory</code> instances, <code>Icon</code> instances or factories, etc.</p>\n","declType":"ComponentFactory.SpecList"},{"id":"TreeListRow.ItemData/icon","name":"icon","isProperty":true,"file":"./packages/ui/typings/UI/Components/Composite/TreeListRow.d.ts","line":58,"code":"icon?: string;","doc":"<p>Name of the icon displayed at the start of the row (after the open/closed icon, if any).</p>\n","declType":"string"},{"id":"TreeListRow.ItemData/items","name":"items","isProperty":true,"file":"./packages/ui/typings/UI/Components/Composite/TreeListRow.d.ts","line":60,"code":"items?: TreeListRow.ItemData[];","doc":"<p>(Observable) array of sub items to be displayed; child instances of <code>TreeListRow</code> are automatically created for these items upon initialization; if this property is undefined, the tree list row will be displayed as a leaf item; if this array is not observable, the list of sub items will not be updated automatically.</p>\n","declType":"TreeListRow.ItemData[]"},{"id":"TreeListRow.ItemData/key","name":"key","isProperty":true,"file":"./packages/ui/typings/UI/Components/Composite/TreeListRow.d.ts","line":52,"code":"key?: string;","doc":"<p>Optional key (identifier string) of the item.</p>\n","declType":"string"},{"id":"TreeListRow.ItemData/name","name":"name","isProperty":true,"file":"./packages/ui/typings/UI/Components/Composite/TreeListRow.d.ts","line":56,"code":"name?: string;","doc":"<p>Item display name, displayed in a <code>WideLabel</code> component if <code>content</code> is undefined.</p>\n","declType":"string"}]},{"id":"TreeListRow.REM_GUTTER","name":"REM_GUTTER","isStatic":true,"isProperty":true,"file":"./packages/ui/typings/UI/Components/Composite/TreeListRow.d.ts","line":14,"code":"static REM_GUTTER: number;","doc":"<p>Default gutter width for new instances (CSS length in rem units, initially 1.5).</p>\n","declType":"number"},{"id":"TreeListRow.arrayFromBinding","name":"arrayFromBinding","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Composite/TreeListRow.d.ts","line":8,"code":"static arrayFromBinding(sourcePath: string, openIcon: string, closedIcon: string, remGutter?: number, height?: string, batchSize?: number): ArrayBinding<Component>;","doc":"<p>Create a new <code>ArrayBinding</code> for given property name/path on the base component, which should contain an array of unique tree item data objects; the binding resolves to an observable array of <code>TreeListRow</code> instances; for use in a component initializer; set the <code>batchSize</code> argument to a value greater than 0 to create rows in batches for faster initial rendering.</p>\n","declType":"ArrayBinding<Component>"},{"id":"TreeListRow.arrayFromItems","name":"arrayFromItems","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/ui/typings/UI/Components/Composite/TreeListRow.d.ts","line":6,"code":"static arrayFromItems(itemData: TreeListRow.ItemData[], openIcon: string, closedIcon: string, remGutter?: number, height?: string): TreeListRow[];","doc":"<p>Create an <em>array</em> of tree list row components from the given array of tree item data objects, with given icons and measurements.</p>\n","declType":"TreeListRow[]"},{"id":"TreeListRow.constructor","name":"new TreeListRow","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Components/Composite/TreeListRow.d.ts","line":10,"code":"constructor(itemData: TreeListRow.ItemData, openIcon: string, closedIcon: string, remGutter?: number, height?: string, batchSize?: number);","doc":"<p>Creates a new tree list row for given item data, with given open/closed icon names and measurements; set the <code>batchSize</code> argument to a value greater than 0 to create child rows in batches for faster initial rendering.</p>\n"},{"id":"TreeListRow/closedIcon","name":"closedIcon","isProperty":true,"file":"./packages/ui/typings/UI/Components/Composite/TreeListRow.d.ts","line":24,"code":"closedIcon: string;","doc":"<p>Name of the icon that is used in front of rows that have a <code>treeListItems</code> array and are currently collapsed (see <code>Icon/icon</code> property on <code>Icon</code>; observed).</p>\n","declType":"string"},{"id":"TreeListRow/collapsed","name":"collapsed","isProperty":true,"file":"./packages/ui/typings/UI/Components/Composite/TreeListRow.d.ts","line":28,"code":"collapsed: boolean;","doc":"<p>True if this row is collapsed (defaults to true; observable).</p>\n","declType":"boolean"},{"id":"TreeListRow/content","name":"content","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Composite/TreeListRow.d.ts","line":32,"code":"readonly content: ControlElement[];","doc":"<p>Tree list row content; automatically generated based on <code>itemData</code> and its properties.</p>\n","declType":"ControlElement[]"},{"id":"TreeListRow/itemData","name":"itemData","isProperty":true,"file":"./packages/ui/typings/UI/Components/Composite/TreeListRow.d.ts","line":16,"code":"itemData: TreeListRow.ItemData;","doc":"<p>Item data for this row (observed as a shallow reference, i.e. item data properties are not automatically observed, but the reference to the object itself is).</p>\n","declType":"TreeListRow.ItemData"},{"id":"TreeListRow/key","name":"key","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Composite/TreeListRow.d.ts","line":18,"code":"readonly key: string | undefined;","doc":"<p>Item key for this row (read-only, taken directly from the <code>itemData</code> object; observable).</p>\n","declType":"string | undefined"},{"id":"TreeListRow/openIcon","name":"openIcon","isProperty":true,"file":"./packages/ui/typings/UI/Components/Composite/TreeListRow.d.ts","line":22,"code":"openIcon: string;","doc":"<p>Name of the icon that is used in front of rows that have a <code>treeListItems</code> array and are not collapsed (see <code>Icon/icon</code> property on <code>Icon</code>; observed).</p>\n","declType":"string"},{"id":"TreeListRow/remGutter","name":"remGutter","isProperty":true,"file":"./packages/ui/typings/UI/Components/Composite/TreeListRow.d.ts","line":20,"code":"remGutter: number;","doc":"<p>Indent width, i.e. width of space before nested row content, and icon width (CSS length in rem units; observed).</p>\n","declType":"number"},{"id":"TreeListRow/treeListItems","name":"treeListItems","isProperty":true,"isReadOnly":true,"file":"./packages/ui/typings/UI/Components/Composite/TreeListRow.d.ts","line":30,"code":"readonly treeListItems: TreeListRow[];","doc":"<p>List of rows displayed below this row in the hierarchical structure of a <code>TreeList</code> component; automatically generated based on <code>itemData</code> and its properties.</p>\n","declType":"TreeListRow[]"},{"id":"TreeListRow/treeListRowParent","name":"treeListRowParent","isProperty":true,"file":"./packages/ui/typings/UI/Components/Composite/TreeListRow.d.ts","line":26,"code":"treeListRowParent?: TreeListRow;","doc":"<p>Reference to the <code>TreeListRow</code> instance that created this row, if any, i.e. the parent row in the visual hierarchy; this property is set automatically by a parent constructor, and by the static methods <code>arrayFromItems</code>, and <code>arrayFromBinding</code>; otherwise it <em>must</em> be set before rendering.</p>\n","declType":"TreeListRow"}],"isNamespace":true,"sourceIdx":48,"inherits":["Component.addStyleOverride","Row.withContent","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Block/displayOptions","Component/focusMode","Component/getActualDimensions","Row/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Component/id","Component/initialize","Row/initializeWith","Component/out","Block/overlayPosition","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","CloseRow/spacing","Component/style","Component/uid","CloseRow/verticalSpacing","Component/width","Component/beforeFirstRender","Component/Renderer","Component/defineComponentSignal","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"TreeListSelectionHandler","name":"TreeListSelectionHandler","isClass":true,"file":"./packages/ui/typings/UI/Components/Blocks/TreeList.d.ts","line":73,"code":"class TreeListSelectionHandler<T extends TreeList.BlockItem> extends ComponentSignalHandler<TreeList.ItemEvent<T>, typeof TreeList.SelectionSignal>","doc":"<p>Constructor for a tree list selection event handler.</p>\n","extends":["ComponentSignalHandler"],"typeParams":["T extends TreeList.BlockItem"],"items":[],"sourceIdx":23,"inherits":["ComponentSignalHandler.!call","ComponentSignalHandler/connectTo","ComponentSignalHandler/isEventHandler"]},{"id":"TwoWayBinding","name":"TwoWayBinding","isClass":true,"file":"./packages/ui/typings/UI/Binding.d.ts","line":10,"code":"class TwoWayBinding<ResultT> extends Binding<ResultT>","doc":"<p>Represents a two-way binding (<code>Binding</code> that also includes a setter on the proxy property).</p>\n","extends":["Binding"],"typeParams":["ResultT"],"items":[{"id":"TwoWayBinding.constructor","name":"new TwoWayBinding","hasParams":true,"isCtor":true,"file":"./packages/ui/typings/UI/Binding.d.ts","line":12,"code":"constructor(sourcePath?: string, getTransform?: (value: any, baseComponent: Component) => (ResultT | Async.ObservableValue<ResultT> | PromiseLike<ResultT>), setTransform?: (value: any, baseComponent: Component) => any);","doc":"<p>Create a new two-way binding based on the given property name/path (see <code>new Binding</code>), and optionally a transformation function, invoked each time a new value is being set (outside of any observable context); if no path is specified, the name of the initializer property that contains this binding is used, if any.</p>\n"},{"id":"TwoWayBinding/observeOn","name":"observeOn","hasParams":true,"isMethod":true,"file":"./packages/ui/typings/UI/Binding.d.ts","line":14,"code":"observeOn(component: Component, name?: string): Async.ObservableValue<ResultT>;","doc":"<p>Make an ObservableValue that is bound to the value on given component (used by factory initializer to apply binding).</p>\n","declType":"Async.ObservableValue<ResultT>"}],"sourceIdx":2,"textSeeAlso":"Binding, ArrayBinding, bind, bind2, bindComponents","text":[{"title":"","content":"<p>An instance of this class is commonly obtained as the result of the <code>bind2</code> function.</p>\n"}]},{"id":"WideLabel","name":"WideLabel","isClass":true,"file":"./packages/ui/typings/UI/Components/Controls/Label.d.ts","line":44,"code":"class WideLabel extends Label","doc":"<p>Stretched label control: a label that expands horizontally, while not breaking across lines (uses ellipsis if available).</p>\n","extends":["Label"],"items":[{"id":"WideLabel/shrinkwrap","name":"shrinkwrap","isProperty":true,"file":"./packages/ui/typings/UI/Components/Controls/Label.d.ts","line":46,"code":"shrinkwrap: boolean;","doc":"<p>Set to true to shrink horizontally (default false; observed).</p>\n","declType":"boolean"}],"sourceIdx":75,"inherits":["Component.addStyleOverride","Label.withText","Label.constructor","Component/addShadowEffectOnFocus","Component/addShadowEffectOnHover","Component/animate","Component/animations","Label/badge","Component/focusMode","Component/getActualDimensions","Component/getChildren","Component/getComponentById","Component/getComponentsByType","Component/getFormValues","Component/getLastRenderedOutput","Component/getLastSelectedChild","Component/getRenderedOutputAsync","Component/getSelectedChildren","Component/hasFocus","Component/height","Component/hidden","Component/hoverState","Label/icon","Component/id","Component/initialize","Label/initializeWith","Component/out","Label/remGutter","Component/render","Component/renderOptions","Component/selected","Component/selectionMode","Component/setFormValues","Component/shadowEffect","Component/style","Label/text","Label/tooltipText","Component/uid","ControlElement/width","ControlElement/wrapText","Component/Renderer","Component/defineComponentSignal","Component/beforeFirstRender","Component/ArrowDownKeyPressed","Component/ArrowLeftKeyPressed","Component/ArrowRightKeyPressed","Component/ArrowUpKeyPressed","Component/BackspaceKeyPressed","Component/Blur","Component/Click","Component/Clicked","Component/DeleteKeyPressed","Component/DoubleClick","Component/DoubleClicked","Component/DragDrop","Component/DragEnter","Component/DragLeave","Component/DragStart","Component/EnterKeyPressed","Component/EscapeKeyPressed","Component/Focus","Component/FocusGained","Component/FocusLost","Component/KeyDown","Component/KeyPress","Component/MouseContextMenu","Component/MouseEnter","Component/MouseLeave","Component/Press","Component/Pressed","Component/Rendered","Component/SpaceBarPressed"]},{"id":"UIValueOrAsync","name":"UIValueOrAsync","isType":true,"file":"./packages/ui/typings/UI/Components/ComponentFactory.d.ts","line":5,"code":"type UIValueOrAsync<T> = T | Async.ObservableValue<T> | PromiseLike<T> | Binding<any>;","doc":"<p>Type definition used by component initializers, that wraps a type as well as the same type within an observable value, promise, or binding.</p>\n","typeParams":["T"],"declType":"T | Async.ObservableValue<T> | PromiseLike<T> | Binding<any>","sourceIdx":26},{"id":"bind","name":"bind","hasParams":false,"isFunction":true,"file":"./packages/ui/typings/UI/Binding.d.ts","line":30,"code":"function bind(): Binding<any>;\nfunction bind(sourcePath: string): Binding<any>;\nfunction bind<T>(sourcePath: string, getTransform: (value: any) => T): Binding<T>;","doc":"<p>[1]. Create a new <code>Binding</code> for a property on the base component with the same name as the component initializer property.</p>\n<p>[2]. Create a new <code>Binding</code> for given property name/path on the base component; for use in a component initializer.</p>\n<p>[3]. Create a new <code>Binding</code> for given property name/path on the base component, and transformation function; for use in a component initializer.</p>\n","declType":"Binding<any> | Binding<any> | Binding<T>","count":3,"sourceIdx":4},{"id":"bind2","name":"bind2","hasParams":false,"isFunction":true,"file":"./packages/ui/typings/UI/Binding.d.ts","line":36,"code":"function bind2(): TwoWayBinding<any>;\nfunction bind2(sourcePath: string): TwoWayBinding<any>;\nfunction bind2<T>(sourcePath: string, getTransform: (value: any) => T, setTransform?: (value: any) => any): Binding<T>;","doc":"<p>[1]. Create a new <code>TwoWayBinding</code> for a property on the base component with the same name as the component initializer property.</p>\n<p>[2]. Create a new <code>TwoWayBinding</code> for given property name/path on the base component; for use in a component initializer.</p>\n<p>[3]. Create a new <code>TwoWayBinding</code> for given property name/path on the base component, and transformation function(s); for use in a component initializer.</p>\n","declType":"TwoWayBinding<any> | TwoWayBinding<any> | Binding<T>","count":3,"sourceIdx":5},{"id":"bindComponents","name":"bindComponents","hasParams":true,"isFunction":true,"file":"./packages/ui/typings/UI/Binding.d.ts","line":42,"code":"function bindComponents<ComponentT extends Component>(sourcePath: string, componentClass: { new (value: any, baseComponent: Component): ComponentT; }, uniqueValues?: boolean, batchSize?: number): ArrayBinding<Component>;","doc":"<p>Create a new <code>ArrayBinding</code> for given property name/path on the base component, which should contain an array; the binding resolves to an observable array of instances of given <code>Component</code> class (with a constructor that takes one or two arguments: the original array element value, and optionally the base component reference); for use in a component initializer; uses <code>mapAsync</code> on the observable array by default: deleting a value in the middle of the array will trigger reinstantiation of all components after it; to use <code>mapAsyncValues</code> for better results with arrays of objects, set the <code>uniqueValues</code> argument to true; to create components asynchronously in batches, set the <code>batchSize</code> argument to a number.</p>\n","typeParams":["ComponentT extends Component"],"declType":"ArrayBinding<Component>","sourceIdx":6},{"id":"tl","name":"tl","hasParams":true,"isFunction":true,"file":"./packages/ui/typings/UI/Components/TextLabelFactory.d.ts","line":41,"code":"function tl(strings: TemplateStringsArray, ...values: any[]): TextLabelFactory;\nfunction tl(text: string | Async.ObservableValue<string>, baseClass?: typeof Label): TextLabelFactory;\nfunction tl(getter: () => (string | Async.ObservableValue<string>), baseClass?: typeof Label): TextLabelFactory;\nfunction tl(getter: Binding<string>, baseClass?: typeof Label): TextLabelFactory;","doc":"<p>[1]. Tagged template string function that returns a text label factory instance to be used with component factory content lists; functions in the expanded values (i.e. result of ${…}), and bindings (instanceof Binding), are used as getters for nested observable string values (e.g. ${() =&gt; …} is observed and converted to a string); prefixes can be used to change the type of component factory created and its styles and properties:</p>\n<ul>\n<li><code>{p}</code> for Paragraph,</li>\n<li><code>{h1-6}</code> for Heading,</li>\n<li><code>{w}</code> for WideLabel,</li>\n<li><code>{b|i|u}</code> for text styles,</li>\n<li><code>{left|center|right}</code> for alignment,</li>\n<li><code>{#...}</code> for text colors,</li>\n<li><code>{nnn}</code> for font weights,</li>\n<li><code>{icon:...}</code> for icons,</li>\n<li><code>{icon:... property-name=...}</code> for icon style properties,</li>\n<li><code>{property-name=...}</code> or <code>{propertyName=...}</code> for individual style properties,</li>\n<li><code>{.classname}</code> and <code>{.class1.class2}</code> for class name(s),</li>\n<li><code>{...%|...em|...rem| etc.}</code> for font sizes, and</li>\n<li><code>{l:...%|...rem| etc.}</code> for Label with given width;</li>\n</ul>\n<p>Prefixes can be combined using the pipe | symbol and may also be the result of an expanded value (i.e. first ${…} part).</p>\n<p>[2]. Simplified version of tagged template helper .tl`…` with a single piece of text, possibly with a base Label class that is used if given string does not override the class using e.g. <code>{p}</code> or <code>{h1}</code>.</p>\n<p>[3]. Simplified version of tagged template helper .tl`…` observing a single piece of text, possibly with a base Label class that is used if given string does not override the class using e.g. <code>{p}</code> or <code>{h1}</code>.</p>\n<p>[4]. Simplified version of tagged template helper .tl`…` observing a single binding, possibly with a base Label class that is used if given string does not override the class using e.g. <code>{p}</code> or <code>{h1}</code>.</p>\n","declType":"TextLabelFactory | TextLabelFactory | TextLabelFactory | TextLabelFactory","count":4,"sourceIdx":86},{"id":"initializer","name":"initializer","hasParams":true,"isFunction":true,"file":"./packages/ui/typings/UI/Components/ComponentFactory.d.ts","line":58,"code":"function initializer<ComponentT extends Component>(target: { new (...args): ComponentT; }, key: \"initializer\", descriptor?: TypedPropertyDescriptor<ComponentFactory<ComponentT>>): any;","doc":"<p><em>Property decorator</em> for the static <code>initializer</code> property of a <code>Component</code> class, containing a <code>ComponentFactory</code> that will be used to initialize every instance before rendering; the factory must be of a compatible type, i.e. result of the static <code>.with*(...)</code> method of a parent component class [decorator].</p>\n","typeParams":["ComponentT extends Component"],"isDecorator":true,"sourceIdx":28},{"id":"mapComponentRenderer","name":"mapComponentRenderer","hasParams":true,"isFunction":true,"file":"./packages/ui/typings/UI/Components/ComponentRenderer.d.ts","line":52,"code":"function mapComponentRenderer<ComponentT extends Component>(componentClass: typeof Component & { new (...args: any[]): ComponentT; }): (target: typeof ComponentRenderer & (new (component: ComponentT) => ComponentRenderer<ComponentT, any>)) => void;","doc":"<p><em>Class decorator</em>, maps the decorated <code>ComponentRenderer</code> class to a <code>Component</code> class as its primary renderer; the renderer class constructor must have a single argument, being the component to be rendered; overrides previously mapped renderer entirely, to extend super class renderer functionality inject a class that extends the previous renderer class [decorator].</p>\n","typeParams":["ComponentT extends Component"],"declType":"(target: typeof ComponentRenderer & (new (component: ComponentT) => ComponentRenderer<ComponentT, any>)) => void","isDecorator":true,"sourceIdx":32},{"id":"~reference","name":"Reference","textSlug":"reference","text":[],"toc":["ActionHandler","Animation","ArrayBinding","Binding","Block","BlockControl","Button","ButtonDropdownClickHandler","ButtonGroup","Card","CenterRow","Checkbox","CloseControlStack","CloseRow","Component","ComponentFactory","ComponentRenderHandler","ComponentRenderSignal","ComponentRenderer","ComponentSignal","ComponentSignalHandler","ConfirmationDialog","Container","ContainerBlock","ContainerControl","ControlElement","ControlStack","DOM","DOMAnimation","DOMBlock","DialogContainer","Divider","Drag","DragEndSignal","DragEvent","DragEventSignal","DragHandler","DrawerContainer","FlowContainer","Heading1","Heading2","Heading3","Heading4","Heading5","Heading6","Icon","Image","InputControl","KeyEventSignal","KeyHandler","KeyboardEvent","Label","LayoutContainer","LinkButton","List","ListSelectionHandler","Menu","MessageDialog","NavList","NavListSelectionHandler","OppositeDrawerContainer","OppositeRow","Page","PageSignal","Paragraph","PointerEvent","PointerEventSignal","PointerHandler","PopOver","PrimaryButton","ProgressBar","RoundButton","Row","Screen","SelectField","Spacer","Style","Table","TableHeader","TableRow","TextButton","TextField","TextLabelFactory","Toast","ToggleButton","TreeList","TreeListFoldHandler","TreeListRow","TreeListSelectionHandler","TwoWayBinding","WideLabel","UIValueOrAsync","bind","bind2","bindComponents","tl","initializer","mapComponentRenderer"]}]}