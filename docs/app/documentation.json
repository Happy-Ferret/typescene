{"title":"Typescene App module","toc":["overview","samples","~reference"],"items":[{"name":"Overview","id":"overview","textDocTitle":"Typescene App module","textSort":"01","text":[{"title":"","content":"<p>The Typescene ‘App’ module defines the necessary constructs to create full featured Web applications.</p>\n<p>At the heart of this module is the <code>Application</code> class. This is a <em>singleton</em> class, meaning there can only ever be one instance of this class each time the module is loaded.</p>\n<p>The primary purpose of the <code>Application</code> class is to keep track of a ‘stack’ (a last-in-first-out list) of <code>Activity</code> instances. These can be synchronized with the browser’s navigation history, which makes the App module dependent on the browser <code>window</code> interface.</p>\n<p>To learn how to use Application and Activity classes, refer to the <a href=\"#/overview/architecture\">Architecture</a> topic.</p>\n"},{"title":"What is Typescene?","type":"note","content":"<p>This module is part of the Typescene toolkit, a strongly typed front-end toolkit for modern Web applications built with TypeScript. Read more about Typescene on the project’s <a href=\"http://typescene.org\">website</a>.</p>\n"}],"sourceIdx":32,"toc":["overview/architecture"]},{"name":"Architecture","id":"overview/architecture","textSort":"01","text":[{"title":"","content":"<p>When deciding on the architecture of your application there are a number of things to consider, such as the way data is communicated to and from the Web server, the way it is stored in the user’s browser, and how it is presented on screen by your UI code.</p>\n<p>Typescene can help to structure your front end user interface code in a way that is clear and concise, by adhering to a well-defined object oriented pattern. Following this pattern, the entire UI is made up of Component objects, which communicate asynchronously through (observable) properties and Signals. Components are combined in logical ways and presented on a page.</p>\n<p>However Components do not define how a user should move from page to page or among modal dialogs, or how the application should store its internal state. This is what the App module and its Activity classes can be used for.</p>\n"},{"title":"Dependency inversion","content":"<p>Often, the first step to defining the overall application architecture is to decide on dependencies. Minimizing dependencies in code, especially mutual dependencies, is important for producing code that is easy to understand an maintain.</p>\n<p>The Typescene App module is built to support ‘inverted’ dependencies, i.e. even though the application itself creates activities to manage application state, and activities in turn create and display UI views, the direction of dependencies in code is exactly the other way around.</p>\n<ul>\n<li>Views know about the public API of the activity they are subscribed to, but activities do not depend on specific views;</li>\n<li>Activities know about parent activities, but not the other way around; and</li>\n<li>Activities subscribe to application (URL) routes to eliminate the need for a global routing map that would have to refer to classes across the app’s code base.</li>\n</ul>\n<p>Using dependency inversion to your advantage, you may even wish to structure your source code such that adding a new feature (activity) to your application would only involve creating a single folder in your code base:</p>\n<ul>\n<li><code>./feature-name</code> — folder that contains all files for a feature with this name\n<ul>\n<li><code>./feature-name/FeatureActivity.ts</code> — activity source, i.e. an implementation of a <code>ViewActivity</code> class (and/or other activities), mapped to an application route using <code>mapToPath</code> or <code>mapToResource</code></li>\n<li><code>./feature-name/FeatureView.ts</code> — main view source, i.e. an implementation of a UI component or page class, mapped to the activity using <code>mapToActivity</code> or <code>mapPageToActivity</code></li>\n<li><code>./feature-name/components/...</code> — optional, more view classes (sub components) that are used by the main activity view</li>\n<li><code>./feature-name/sub-feature/...</code> — optional, sub activities that depend on the feature activity as a parent activity</li>\n</ul>\n</li>\n</ul>\n<p>The only issue with this structure is that tools such as Webpack will not automatically include all files in the build process. This can be solved by recursively including <code>index.ts</code> files for all folders, that import all source files in that folder.</p>\n"},{"title":"Activities","content":"<p>This section is TBD, to introduce <code>Activity</code>, <code>ViewActivity</code>, <code>RootViewActivity</code> etc.</p>\n<p>Examples TBD: implementing an Activity class, looking up Activity classes, and starting activities.</p>\n"},{"title":"Keeping track of application state","content":"<p>This section is TBD, to introduce observable state, e.g. through the <code>Activity#state</code> property.</p>\n<p>Also state vs data models, to explicitly <em>exclude</em> options for representing application models on the client.</p>\n"},{"title":"Client-server communication","content":"<p>This section is TBD, to introduce options for client-server communication; with only <code>Http</code> (for simple REST-like requests) being a part of the Typescene toolkit.</p>\n"}],"sourceIdx":33,"textParent":"overview"},{"name":"Samples","id":"samples","textSort":"02","text":[{"title":"About the Examples","content":"<p>All examples are included here as if they are taken from the body of a sample application, which would import the Typescene toolkit as follows:</p>\n<pre><code class=\"language-typescript\">import { Async, UI, App } from &quot;@typescene/typescene&quot;;\n</code></pre>\n<p>As a result, all exported members are prefixed with <code>Async.</code>, <code>UI.</code>, or <code>App.</code> in the examples.</p>\n"}],"sourceIdx":31,"toc":["samples/http"]},{"name":"Samples: Http functions","id":"samples/http","textTopic":"Http","textSort":"05","text":[{"title":"","content":"<p>Performing a simple GET request with <code>fetch</code>:</p>\n<pre><code class=\"language-typescript\">// outputs the content of index.html\nApp.Http.fetch(&quot;/index.html&quot;)\n    .then(response =&gt; {\n        if (!response.ok)\n            throw new Error(&quot;HTTP &quot; + response.status);\n        else\n            return response.text();\n    })\n    .then(text =&gt; {\n        console.log(text);\n    });\n</code></pre>\n<p>For the example above, <code>getTextAsync</code> works too:</p>\n<pre><code class=\"language-typescript\">// outputs the content of index.html\nApp.Http.getTextAsync(&quot;/index.html&quot;)\n    .then(text =&gt; {\n        console.log(text);\n    });\n</code></pre>\n<p>And if you want to parse HTML, use <code>getHtmlContentAsync</code>:</p>\n<pre><code class=\"language-typescript\">// appends the content of index.html to the current document\nApp.Http.getHtmlContentAsync(&quot;/index.html&quot;)\n    .then(fragment =&gt; {\n        document.body.appendChild(fragment);\n    });\n</code></pre>\n<p>Sending a POST request using <code>postAsync</code> with a JSON payload, and parsing the JSON response:</p>\n<pre><code class=\"language-typescript\">// sends and receives some JSON data\nApp.Http.postAsync(&quot;/api/items&quot;, { name: &quot;Bob&quot;, foo: &quot;bar&quot; })\n    .then(responseData =&gt; {\n        // output the parsed response\n        console.log(responseData);\n    });\n</code></pre>\n<p>All of the library functions work well with the async/await pattern, too:</p>\n<pre><code class=\"language-typescript\">// sends and receives some JSON data\nasync function postItemAsync(data) {\n    var responseData = await App.Http.postAsync(&quot;/api/items&quot;, data);\n\n    // ... do something with responseData\n    console.log(responseData);\n}\n\npostItemAsync({ name: &quot;Bob&quot;, foo: &quot;bar&quot; });\n</code></pre>\n<p>Finally, you can intercept requests and return mock responses, as well as intercept genuine responses, by connecting to the provided signals: <code>Requesting</code> and <code>Responded</code>.</p>\n<pre><code class=\"language-typescript\">// intercept all requests before they are sent\nApp.Http.Requesting.connect(req =&gt; {\n    // log all requests\n    console.log(&quot;Requesting: &quot; + req.url);\n\n    // throw an exception if URL is not absolute\n    if (!req.url || req.url.charAt(0) !== &quot;/&quot;)\n        throw new Error(&quot;Oops.&quot;);\n\n    // send mock response for POST /api/items\n    if (req.method === &quot;POST&quot; &amp;&amp; req.url === &quot;/api/items&quot;) {\n        return App.Http.MockResponse.withJSONContent({ foo: &quot;bar&quot; });\n    }\n});\n\n// redirect /api/items/{x} to /api/test/items/{x}\nApp.Http.Requesting.connect(req =&gt; {\n    if (req.url) {\n        req.url.replace(/^\\/api\\/items\\/([^\\/]+)/,\n            &quot;/api/test/items/$1&quot;);\n    }\n});\n\n// take content for &quot;/index.html&quot; from a JSON response\nApp.Http.Requesting.connect(req =&gt; {\n    if (req.url === &quot;/index.html&quot;) {\n        return App.Http.getAsync(&quot;/api/test/index&quot;).then(data =&gt; {\n            // take text from a property and fake a response\n            return new App.Http.MockResponse(\n                { responseText: data.html },\n                new App.Http.MockResponseHeaders(\n                    &quot;Content-Type: text/html&quot;));\n        });\n    }\n});\n\n// log all (real) response statuses\nApp.Http.Responded.connect(res =&gt; {\n    console.log(&quot;Response: &quot; + res.status);\n    // (`res` is either a real response from `window.fetch`,\n    // or a MockResponse created from XMLHttpRequest data)\n});\n</code></pre>\n"}],"sourceIdx":30,"textParent":"samples"},{"id":"Activity","name":"Activity","isClass":true,"file":"./packages/app/typings/App/Activity/Activity.d.ts","line":4,"code":"class Activity extends Async.ObservableObject","doc":"<p>Represents a UI activity.</p>\n","extends":["Async.ObservableObject"],"items":[{"id":"Activity.ActivityOptions","name":"ActivityOptions","isInterface":true,"file":"./packages/app/typings/App/Activity/Activity.d.ts","line":30,"code":"interface ActivityOptions","doc":"<p>Options for an activity that determine its behavior in the activity stack.</p>\n","isStatic":true,"items":[{"id":"Activity.ActivityOptions/isBackgroundActivity","name":"isBackgroundActivity","isProperty":true,"file":"./packages/app/typings/App/Activity/Activity.d.ts","line":38,"code":"isBackgroundActivity?: boolean;","doc":"<p>Set to true to mark this activity as a background activity; i.e. it should not be started directly, and it should be skipped when navigating back in history (enforced by <code>Application</code>, not <code>ActivityStack</code> itself, to allow background activities in the foreground temporarily, and to enable skipping past a first background activity on the stack by exiting the application).</p>\n","declType":"boolean"},{"id":"Activity.ActivityOptions/isHubActivity","name":"isHubActivity","isProperty":true,"file":"./packages/app/typings/App/Activity/Activity.d.ts","line":34,"code":"isHubActivity?: boolean;","doc":"<p>Set to true to require this activity to be in the foreground, or move up to it, when used as a parent activity; i.e. when starting or resuming a child activity, all activities on top of the hub activity are suspended and replaced with the child activity; can be used to prevent buildup of activities on the history stack and therefore memory leaks.</p>\n","declType":"boolean"},{"id":"Activity.ActivityOptions/isRootActivity","name":"isRootActivity","isProperty":true,"file":"./packages/app/typings/App/Activity/Activity.d.ts","line":36,"code":"isRootActivity?: boolean;","doc":"<p>Set to true to allow only one copy of an activity on the stack; i.e. when pushing an instance that is already on the stack, the stack is transitioned up to the existing instance instead; use with a singleton activity to implement e.g. an application home activity.</p>\n","declType":"boolean"},{"id":"Activity.ActivityOptions/parentActivity","name":"parentActivity","isProperty":true,"file":"./packages/app/typings/App/Activity/Activity.d.ts","line":32,"code":"parentActivity?: Activity | typeof Activity;","doc":"<p>The parent activity, if any; the activity stack will ensure the given activity (or an instance of given class) exists in its history stack when activating this activity, or insert it before.</p>\n","declType":"Activity | typeof Activity"}],"text":[{"title":"Usage","content":"<p>Set the <code>.options</code> property in the constructor of your activity class, to have these options enforced by the activity stack when activated.</p>\n<pre><code class=\"language-typescript\">class MyActivity extends UI.Activity {\n    constructor(/* ... */) {\n        super();\n        this.options.parentActivity = MyParentActivity;\n        // ...\n    }\n}\n</code></pre>\n"},{"title":"See Also","content":"<p>To implement a home view activity, derive from <a href=\"#RootViewActivity\"><code>RootViewActivity</code></a>.</p>\n"}],"sourceIdx":23},{"id":"Activity.getInstance","name":"getInstance","hasParams":false,"isStatic":true,"isMethod":true,"file":"./packages/app/typings/App/Activity/Activity.d.ts","line":6,"code":"static getInstance(): Activity;","doc":"<p>Get an instance of this activity class, can be overridden to alter behavior when e.g. pushing a parent activity by class; by default simply constructs the instance without parameters.</p>\n","declType":"Activity"},{"id":"Activity.constructor","name":"new Activity","hasParams":true,"isCtor":true,"file":"./packages/app/typings/App/Activity/Activity.d.ts","line":8,"code":"constructor(title?: string);","doc":"<p>Create an activity with given display title.</p>\n"},{"id":"Activity/options","name":"options","isProperty":true,"file":"./packages/app/typings/App/Activity/Activity.d.ts","line":12,"code":"options: Activity.ActivityOptions;","doc":"<p>Object that contains options for this activity (observable, not null or undefined).</p>\n","declType":"Activity.ActivityOptions"},{"id":"Activity/title","name":"title","isProperty":true,"file":"./packages/app/typings/App/Activity/Activity.d.ts","line":10,"code":"title: string | undefined;","doc":"<p>Display title of this activity (observable).</p>\n","declType":"string | undefined"},{"id":"Activity/Activated","name":"Activated","isProperty":true,"isReadOnly":true,"file":"./packages/app/typings/App/Activity/Activity.d.ts","line":16,"code":"readonly Activated: Async.Signal.Emittable<ActivityTransition, typeof ActivitySignal>;","doc":"<p>Signal that is emitted after this activity is pushed to foreground.</p>\n","declType":"Async.Signal.Emittable<ActivityTransition, typeof ActivitySignal>","isSignal":true},{"id":"Activity/Activating","name":"Activating","isProperty":true,"isReadOnly":true,"file":"./packages/app/typings/App/Activity/Activity.d.ts","line":14,"code":"readonly Activating: Async.Signal.Emittable<ActivityTransition, typeof ActivitySignal>;","doc":"<p>Signal that is emitted before this activity is pushed to foreground, if any handler throws an error then the activity is not activated.</p>\n","declType":"Async.Signal.Emittable<ActivityTransition, typeof ActivitySignal>","isSignal":true},{"id":"Activity/Deactivated","name":"Deactivated","isProperty":true,"isReadOnly":true,"file":"./packages/app/typings/App/Activity/Activity.d.ts","line":26,"code":"readonly Deactivated: Async.Signal.Emittable<ActivityTransition, typeof ActivitySignal>;","doc":"<p>Signal that is emitted after this activity is removed from history.</p>\n","declType":"Async.Signal.Emittable<ActivityTransition, typeof ActivitySignal>","isSignal":true},{"id":"Activity/Resumed","name":"Resumed","isProperty":true,"isReadOnly":true,"file":"./packages/app/typings/App/Activity/Activity.d.ts","line":24,"code":"readonly Resumed: Async.Signal.Emittable<ActivityTransition, typeof ActivitySignal>;","doc":"<p>Signal that is emitted when this activity is back in foreground.</p>\n","declType":"Async.Signal.Emittable<ActivityTransition, typeof ActivitySignal>","isSignal":true},{"id":"Activity/Resuming","name":"Resuming","isProperty":true,"isReadOnly":true,"file":"./packages/app/typings/App/Activity/Activity.d.ts","line":22,"code":"readonly Resuming: Async.Signal.Emittable<ActivityTransition, typeof ActivitySignal>;","doc":"<p>Signal that is emitted before this activity is put back in foreground, if any handler throws an error then the activity is not suspended.</p>\n","declType":"Async.Signal.Emittable<ActivityTransition, typeof ActivitySignal>","isSignal":true},{"id":"Activity/Suspended","name":"Suspended","isProperty":true,"isReadOnly":true,"file":"./packages/app/typings/App/Activity/Activity.d.ts","line":20,"code":"readonly Suspended: Async.Signal.Emittable<ActivityTransition, typeof ActivitySignal>;","doc":"<p>Signal that is emitted when this activity is no longer in foreground.</p>\n","declType":"Async.Signal.Emittable<ActivityTransition, typeof ActivitySignal>","isSignal":true},{"id":"Activity/Suspending","name":"Suspending","isProperty":true,"isReadOnly":true,"file":"./packages/app/typings/App/Activity/Activity.d.ts","line":18,"code":"readonly Suspending: Async.Signal.Emittable<ActivityTransition, typeof ActivitySignal>;","doc":"<p>Signal that is emitted before another activity is pushed to foreground, if any handler throws an error then the activity is not suspended.</p>\n","declType":"Async.Signal.Emittable<ActivityTransition, typeof ActivitySignal>","isSignal":true}],"isNamespace":true,"sourceIdx":22,"text":[{"title":"See Also","content":"<p>Activities live on an activity stack implemented by <a href=\"#ActivityStack\"><code>ActivityStack</code></a>.</p>\n<p>The most frequently used activity stack is part of the <a href=\"#Application\"><code>Application</code></a> instance, which can be used to start and stop activities.</p>\n"}]},{"id":"ActivityResourceMap","name":"ActivityResourceMap","isClass":true,"file":"./packages/app/typings/App/Activity/ActivityPath.d.ts","line":27,"code":"class ActivityResourceMap","doc":"<p>Represents a mapping of paths to activity providers (routes).</p>\n","items":[{"id":"ActivityResourceMap/obtainAsync","name":"obtainAsync","hasParams":true,"isMethod":true,"file":"./packages/app/typings/App/Activity/ActivityPath.d.ts","line":31,"code":"obtainAsync(location: string | ActivityResourcePath): PromiseLike<Activity[]>;","doc":"<p>Get a promise that resolves to a list of activities that are registered for given path (#/… or /… or full href, %-decoded).</p>\n","declType":"PromiseLike<Activity[]>","isAsync":true},{"id":"ActivityResourceMap/register","name":"register","hasParams":true,"isMethod":true,"file":"./packages/app/typings/App/Activity/ActivityPath.d.ts","line":29,"code":"register(path: PathInitializerPart | PathInitializerPart[], callback: (...params: string[]) => Activity | Activity[] | PromiseLike<Activity | Activity[]> | undefined): Async.SignalConnection;","doc":"<p>Add a route that invokes given callback with parameters that correspond to the parts of the path remainder when current location matches with given path (#/… or /…); the final parameter is set to all remaining parts joined with slashes (glob); if the callback has no parameters, an exact match is required; returns a signal connection that can be used to unregister.</p>\n","declType":"Async.SignalConnection"}],"sourceIdx":4,"text":[{"title":"-","content":"<blockquote>\n<p><strong>Note:</strong> This class is used internally by <a href=\"#Application\"><code>Application</code></a>.</p>\n</blockquote>\n"}]},{"id":"ActivityResourcePath","name":"ActivityResourcePath","isClass":true,"file":"./packages/app/typings/App/Activity/ActivityPath.d.ts","line":4,"code":"class ActivityResourcePath","doc":"<p>Represents a resource path (URL/hash segment) that is handled by one or more activities.</p>\n","items":[{"id":"ActivityResourcePath.Match","name":"Match","isInterface":true,"file":"./packages/app/typings/App/Activity/ActivityPath.d.ts","line":17,"code":"interface Match","doc":"<p>Information for a resource path match.</p>\n","isStatic":true,"items":[{"id":"ActivityResourcePath.Match/isHash","name":"isHash","isProperty":true,"file":"./packages/app/typings/App/Activity/ActivityPath.d.ts","line":23,"code":"isHash: boolean;","doc":"<p>True if location matched by hash (part after #/…).</p>\n","declType":"boolean"},{"id":"ActivityResourcePath.Match/location","name":"location","isProperty":true,"file":"./packages/app/typings/App/Activity/ActivityPath.d.ts","line":19,"code":"location: string;","doc":"<p>The path name or hash prefix that was matched.</p>\n","declType":"string"},{"id":"ActivityResourcePath.Match/remainder","name":"remainder","isProperty":true,"file":"./packages/app/typings/App/Activity/ActivityPath.d.ts","line":21,"code":"remainder: string;","doc":"<p>The remainder of the location after the matching prefix, without leading slash (if any).</p>\n","declType":"string"}]},{"id":"ActivityResourcePath.constructor","name":"new ActivityResourcePath","hasParams":true,"isCtor":true,"file":"./packages/app/typings/App/Activity/ActivityPath.d.ts","line":6,"code":"constructor(...parts: PathInitializerPart[]);","doc":"<p>Create a new resource path from given parts (string, ResourceActivity instance, or another resource path).</p>\n"},{"id":"ActivityResourcePath/concat","name":"concat","hasParams":true,"isMethod":true,"file":"./packages/app/typings/App/Activity/ActivityPath.d.ts","line":8,"code":"concat(...parts: PathInitializerPart[]): ActivityResourcePath;","doc":"<p>Append a part to the end of this path and return new path.</p>\n","declType":"ActivityResourcePath"},{"id":"ActivityResourcePath/match","name":"match","hasParams":true,"isMethod":true,"file":"./packages/app/typings/App/Activity/ActivityPath.d.ts","line":12,"code":"match(location: string): ActivityResourcePath.Match | undefined;","doc":"<p>Check if given URL or path (e.g. http://… or /… or #/…) matches this path (or a sub path); returns matching prefix and remainder if matched successfully, undefined otherwise.</p>\n","declType":"ActivityResourcePath.Match | undefined"},{"id":"ActivityResourcePath/toString","name":"toString","hasParams":false,"isMethod":true,"file":"./packages/app/typings/App/Activity/ActivityPath.d.ts","line":10,"code":"toString(): any;","doc":"<p>Returns the URL that can be used e.g. in href attributes; does not contain final slash so can be concatenated.</p>\n"}],"isNamespace":true,"sourceIdx":3,"text":[{"title":"Usage","content":"<p>This class enables building resource paths from several parts, and is used internally to match paths against each other.</p>\n<pre><code class=\"language-typescript\">class MyCountersActivity extends UI.SingletonViewActivity {\n    constructor() {\n        super(&quot;Counters&quot;, &quot;#/counters&quot;);\n    }\n    // ...\n}\n\nclass MyCounterActivity extends UI.ViewActivity {\n    constructor(id: string, name: string) {\n        super(name);\n\n        // concatenate resource path\n        this.resourcePath = new ActivityResourcePath(\n            MyCountersActivity.getInstance(), id);\n    }\n    // ...\n}\n</code></pre>\n"}]},{"id":"ActivitySignal","name":"ActivitySignal","isClass":true,"file":"./packages/app/typings/App/Activity/ActivityStack.d.ts","line":73,"code":"class ActivitySignal extends Async.Signal<ActivityTransition>","doc":"<p>Signal that is emitted when a change in the activity stack occurs.</p>\n","extends":["Async.Signal"],"items":[],"sourceIdx":7},{"id":"ActivityStack","name":"ActivityStack","isClass":true,"file":"./packages/app/typings/App/Activity/ActivityStack.d.ts","line":4,"code":"class ActivityStack","doc":"<p>Represents a stack of activated activities (like browser history).</p>\n","items":[{"id":"ActivityStack.TRACE_LOG","name":"TRACE_LOG","isStatic":true,"isProperty":true,"file":"./packages/app/typings/App/Activity/ActivityStack.d.ts","line":6,"code":"static TRACE_LOG: boolean;","doc":"<p>Set to true to enable trace logging (on <code>console.log</code>) for activity operations.</p>\n","declType":"boolean"},{"id":"ActivityStack/contains","name":"contains","hasParams":true,"isMethod":true,"file":"./packages/app/typings/App/Activity/ActivityStack.d.ts","line":28,"code":"contains(activity: Activity): boolean;","doc":"<p>Returns true if the stack contains given activity.</p>\n","declType":"boolean"},{"id":"ActivityStack/getHistoryState","name":"getHistoryState","hasParams":false,"isMethod":true,"file":"./packages/app/typings/App/Activity/ActivityStack.d.ts","line":20,"code":"getHistoryState(): string;","doc":"<p>Get an ID that represents the current state, for use with <code>.restoreHistoryStateAsync</code>.</p>\n","declType":"string"},{"id":"ActivityStack/getParent","name":"getParent","hasParams":true,"isMethod":true,"file":"./packages/app/typings/App/Activity/ActivityStack.d.ts","line":22,"code":"getParent<T>(ActivityClass: typeof Activity & { new (...args): T; }, before?: Activity): T | undefined;","doc":"<p>Get the activity closest to the foreground of the given type, if any (excluding foreground activity itself, and before given activity in second parameter, if any).</p>\n","typeParams":["T"],"declType":"T | undefined"},{"id":"ActivityStack/getViewComponent","name":"getViewComponent","hasParams":true,"isMethod":true,"file":"./packages/app/typings/App/Activity/ActivityStack.d.ts","line":26,"code":"getViewComponent(outlet: string): Component | undefined;","doc":"<p>Get Component instance for given named outlet, from the view activity closest to the foreground that has given outlet mapped using <code>.mapView(...)</code> or the <code>mapToActivity(...)</code> decorator on a view Component class.</p>\n","declType":"Component | undefined"},{"id":"ActivityStack/length","name":"length","isProperty":true,"isReadOnly":true,"file":"./packages/app/typings/App/Activity/ActivityStack.d.ts","line":32,"code":"readonly length: number;","doc":"<p>The number of activities on the stack (observable).</p>\n","declType":"number"},{"id":"ActivityStack/popAsync","name":"popAsync","hasParams":false,"isMethod":true,"file":"./packages/app/typings/App/Activity/ActivityStack.d.ts","line":12,"code":"popAsync(): PromiseLike<ActivityTransition>;\npopAsync(activity: Activity): PromiseLike<ActivityTransition | null>;","doc":"<p>[1]. Remove the current foreground activity (go back) asynchronously, returns Promise that resolves to the completed transition.</p>\n<p>[2]. Remove the current foreground activity (go back) asynchronously if and only if it is the given activity, returns Promise that resolves to the completed transition, if any.</p>\n","declType":"PromiseLike<ActivityTransition> | PromiseLike<ActivityTransition | null>","isAsync":true,"count":2},{"id":"ActivityStack/pushAsync","name":"pushAsync","hasParams":true,"isMethod":true,"file":"./packages/app/typings/App/Activity/ActivityStack.d.ts","line":8,"code":"pushAsync(activity: Activity): PromiseLike<ActivityTransition>;","doc":"<p>Add an activity to the foreground asynchronously, does nothing if given activity was already in the foreground; returns Promise that resolves to the completed transition.</p>\n","declType":"PromiseLike<ActivityTransition>","isAsync":true},{"id":"ActivityStack/replaceAsync","name":"replaceAsync","hasParams":true,"isMethod":true,"file":"./packages/app/typings/App/Activity/ActivityStack.d.ts","line":10,"code":"replaceAsync(activity: Activity): PromiseLike<ActivityTransition>;","doc":"<p>Replace the current activity asynchronously (throws error if none), or remove current activity if given activity was already directly below current activity in the activity stack; returns Promise that resolves to the completed transition.</p>\n","declType":"PromiseLike<ActivityTransition>","isAsync":true},{"id":"ActivityStack/restoreHistoryStateAsync","name":"restoreHistoryStateAsync","hasParams":true,"isMethod":true,"file":"./packages/app/typings/App/Activity/ActivityStack.d.ts","line":18,"code":"restoreHistoryStateAsync(historyID: string): PromiseLike<void>;","doc":"<p>Reload state using given history ID, if possible (i.e. not yet deactivated relevant activities in the meantime); returns a promise that resolves when the state has been reached.</p>\n","declType":"PromiseLike<void>","isAsync":true},{"id":"ActivityStack/title","name":"title","isProperty":true,"isReadOnly":true,"file":"./packages/app/typings/App/Activity/ActivityStack.d.ts","line":34,"code":"readonly title: string | undefined;","doc":"<p>The title of the topmost activity that has a title defined (observable).</p>\n","declType":"string | undefined"},{"id":"ActivityStack/top","name":"top","isProperty":true,"isReadOnly":true,"file":"./packages/app/typings/App/Activity/ActivityStack.d.ts","line":30,"code":"readonly top: Activity | undefined;","doc":"<p>The current foreground activity (top of stack, if any; observable).</p>\n","declType":"Activity | undefined"},{"id":"ActivityStack/upAsync","name":"upAsync","hasParams":true,"isMethod":true,"file":"./packages/app/typings/App/Activity/ActivityStack.d.ts","line":16,"code":"upAsync(activityOrClass: Activity | typeof Activity): PromiseLike<Activity | null>;","doc":"<p>Remove foreground activities until given activity or activity of given type is in the foreground; returns Promise that resolves to activity, or null if there was no matching activity on the stack.</p>\n","declType":"PromiseLike<Activity | null>","isAsync":true},{"id":"ActivityStack/Transition","name":"Transition","isProperty":true,"isReadOnly":true,"file":"./packages/app/typings/App/Activity/ActivityStack.d.ts","line":36,"code":"readonly Transition: Async.Signal.Emittable<ActivityTransition, typeof ActivitySignal>;","doc":"<p>Signal that is emitted when a transition occurs (after Activating/Resuming/Suspending but before Activated/Resumed).</p>\n","declType":"Async.Signal.Emittable<ActivityTransition, typeof ActivitySignal>","isSignal":true}],"sourceIdx":5,"text":[{"title":"See Also","content":"<p>The most frequently used activity stack is part of the <a href=\"#Application\"><code>Application</code></a> instance, referenced by its <a href=\"#Application_activities\"><code>activities</code></a> property.</p>\n"}]},{"id":"ActivityTransition","name":"ActivityTransition","isInterface":true,"file":"./packages/app/typings/App/Activity/ActivityStack.d.ts","line":47,"code":"interface ActivityTransition","doc":"<p>Represents a transition from one foreground activity to another.</p>\n","items":[{"id":"ActivityTransition.Operation","name":"Operation","isEnum":true,"file":"./packages/app/typings/App/Activity/ActivityStack.d.ts","line":63,"code":"enum Operation","doc":"<p>Operation type that triggered a transition.</p>\n","isStatic":true,"items":[{"id":"ActivityTransition.Operation.Pop","name":"Pop","isStatic":true,"isConst":true,"file":"./packages/app/typings/App/Activity/ActivityStack.d.ts","line":69,"code":"enum Operation { ...Pop }","doc":"<p>Pop operation</p>\n"},{"id":"ActivityTransition.Operation.Push","name":"Push","isStatic":true,"isConst":true,"file":"./packages/app/typings/App/Activity/ActivityStack.d.ts","line":65,"code":"enum Operation { ...Push }","doc":"<p>Push operation</p>\n"},{"id":"ActivityTransition.Operation.Replace","name":"Replace","isStatic":true,"isConst":true,"file":"./packages/app/typings/App/Activity/ActivityStack.d.ts","line":67,"code":"enum Operation { ...Replace }","doc":"<p>Replace operation</p>\n"}]},{"id":"ActivityTransition/activityStack","name":"activityStack","isProperty":true,"file":"./packages/app/typings/App/Activity/ActivityStack.d.ts","line":51,"code":"activityStack: ActivityStack;","doc":"<p>The activity stack that is transitioning.</p>\n","declType":"ActivityStack"},{"id":"ActivityTransition/from","name":"from","isProperty":true,"file":"./packages/app/typings/App/Activity/ActivityStack.d.ts","line":53,"code":"from: Activity;","doc":"<p>The activity that is currently in the foreground, if any.</p>\n","declType":"Activity"},{"id":"ActivityTransition/id","name":"id","isProperty":true,"file":"./packages/app/typings/App/Activity/ActivityStack.d.ts","line":49,"code":"id: string;","doc":"<p>Unique ID for this transition.</p>\n","declType":"string"},{"id":"ActivityTransition/operation","name":"operation","isProperty":true,"file":"./packages/app/typings/App/Activity/ActivityStack.d.ts","line":57,"code":"operation: ActivityTransition.Operation;","doc":"<p>The stack operation being performed: push, replace, or pop.</p>\n","declType":"ActivityTransition.Operation"},{"id":"ActivityTransition/previous","name":"previous","isProperty":true,"file":"./packages/app/typings/App/Activity/ActivityStack.d.ts","line":59,"code":"previous: ActivityTransition;","doc":"<p>The previous transition that is part of the same operation (pop/push/pop/up).</p>\n","declType":"ActivityTransition"},{"id":"ActivityTransition/to","name":"to","isProperty":true,"file":"./packages/app/typings/App/Activity/ActivityStack.d.ts","line":55,"code":"to: Activity;","doc":"<p>The new foreground activity, if any.</p>\n","declType":"Activity"}],"isNamespace":true,"sourceIdx":6},{"id":"Application","name":"Application","isClass":true,"file":"./packages/app/typings/App/Application.d.ts","line":4,"code":"class Application extends Async.ObservableObject","doc":"<p>Encapsulates the application as a singleton object.</p>\n","extends":["Async.ObservableObject"],"items":[{"id":"Application.current","name":"current","isStatic":true,"isProperty":true,"file":"./packages/app/typings/App/Application.d.ts","line":14,"code":"static current: Application;","doc":"<p>The current (and only) Application instance, when created.</p>\n","declType":"Application"},{"id":"Application.disableBrowserHistory","name":"disableBrowserHistory","hasParams":false,"isStatic":true,"isMethod":true,"file":"./packages/app/typings/App/Application.d.ts","line":12,"code":"static disableBrowserHistory(): void;","doc":"<p>Disable synchronization of activity stack with browser history.</p>\n","declType":"void"},{"id":"Application.mapActivity","name":"mapActivity","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/app/typings/App/Application.d.ts","line":6,"code":"static mapActivity(activity: ResourceActivity): void;\nstatic mapActivity(path: PathInitializerPart | PathInitializerPart[], activity?: Activity | typeof Activity): void;","doc":"<p>[1]. Map resource activity on its path (using .resourcePath).</p>\n<p>[2]. Map given path (#/… or /…) to given activity (i.e. instance or instance of class through static getInstance method).</p>\n","declType":"void | void","count":2},{"id":"Application.mapResource","name":"mapResource","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/app/typings/App/Application.d.ts","line":10,"code":"static mapResource(path: PathInitializerPart | PathInitializerPart[], callback: (...params: string[]) => Activity | Activity[] | PromiseLike<Activity | Activity[]> | undefined): Async.SignalConnection;","doc":"<p>Map given path (#/… or /…) to given callback; if callback has no parameters, an exact path match is required; otherwise callback is called with path remainder split on / characters plus glob (last parameter); callback should return an activity or array of activities (or a promise that resolves to either), returned ResourceActivity instances without a resource path will get the requested path set as their resource path automatically.</p>\n","declType":"Async.SignalConnection"},{"id":"Application.ready","name":"ready","isStatic":true,"isProperty":true,"file":"./packages/app/typings/App/Application.d.ts","line":16,"code":"static ready: PromiseLike<Application>;","doc":"<p>Promise that resolves to the application instance after it has been created.</p>\n","declType":"PromiseLike<Application>","isAsync":true},{"id":"Application.constructor","name":"new Application","hasParams":true,"isCtor":true,"file":"./packages/app/typings/App/Application.d.ts","line":19,"code":"constructor(title?: string);","doc":"<p>Create the application instance (either from a derived class or from the Application class itself); can be called only once.</p>\n"},{"id":"Application/activities","name":"activities","isProperty":true,"file":"./packages/app/typings/App/Application.d.ts","line":27,"code":"activities: ActivityStack;","doc":"<p>Activity stack instance.</p>\n","declType":"ActivityStack"},{"id":"Application/dropActivity","name":"dropActivity","hasParams":true,"isMethod":true,"file":"./packages/app/typings/App/Application.d.ts","line":41,"code":"dropActivity(ActivityClass?: typeof Activity): PromiseLike<Activity | null>;","doc":"<p>Go back in activity history; either to previous activity or to activity of given class; returns promise that resolves to the new foreground activity, or null if activity was not found; the NoActivity signal is emitted if all activities have been dropped and there is no current activity anymore.</p>\n","declType":"PromiseLike<Activity | null>","isAsync":true},{"id":"Application/getTopActivity","name":"getTopActivity","hasParams":false,"isMethod":true,"file":"./packages/app/typings/App/Application.d.ts","line":37,"code":"getTopActivity(): Activity | undefined;","doc":"<p>Returns the activity that is currently in the foreground (observable).</p>\n","declType":"Activity | undefined"},{"id":"Application/getViewComponent","name":"getViewComponent","hasParams":true,"isMethod":true,"file":"./packages/app/typings/App/Application.d.ts","line":35,"code":"getViewComponent(outlet: string): Component | undefined;","doc":"<p>Get Component instance for given named outlet, from the view activity closest to the foreground that has given outlet mapped using <code>.mapView(...)</code> or the <code>mapToActivity(...)</code> decorator on a view Component class; can be used as an observable getter to obtain an observable value that changes when activities are started or suspended.</p>\n","declType":"Component | undefined"},{"id":"Application/isActive","name":"isActive","hasParams":true,"isMethod":true,"file":"./packages/app/typings/App/Application.d.ts","line":43,"code":"isActive(path: ActivityResourcePath | string): boolean;\nisActive(activityClass: typeof Activity): boolean;\nisActive(activity: Activity): boolean;","doc":"<p>[1]. Returns true if the given path matches or is a prefix of the currently active path (e.g. <code>#/items</code> is considered active if the current path is <code>#/items/123</code> or <code>#/items</code>).</p>\n<p>[2]. Returns true if the current activity or one of its parent activities is an instance of the given activity class.</p>\n<p>[3]. Returns true if the given activity matches the current activity or one of its parent activities.</p>\n","declType":"boolean | boolean | boolean","count":3},{"id":"Application/mapActivity","name":"mapActivity","hasParams":true,"isMethod":true,"file":"./packages/app/typings/App/Application.d.ts","line":29,"code":"mapActivity(activity: ResourceActivity): void;\nmapActivity(path: PathInitializerPart | PathInitializerPart[], activity?: Activity | typeof Activity): void;","doc":"<p>[1]. Map resource activity on its path (using .resourcePath); returns this; also available as a static method.</p>\n<p>[2]. Map given path (#/… or /…) to given activity (i.e. instance or instance of class through static getInstance method); returns this; also available as a static method.</p>\n","declType":"void | void","count":2},{"id":"Application/mapResource","name":"mapResource","hasParams":true,"isMethod":true,"file":"./packages/app/typings/App/Application.d.ts","line":33,"code":"mapResource(path: PathInitializerPart | PathInitializerPart[], callback: (...params: string[]) => Activity | Activity[] | PromiseLike<Activity | Activity[]>): this;","doc":"<p>Map given path (#/… or /…) to given callback; if callback has no parameters, an exact path match is required; otherwise callback is called with path remainder split on / characters except last parameter (glob); callback should return an activity or array of activities (or a promise that resolves to either), returned ResourceActivity instances without a resource path will get the requested path set as their resource path automatically; returns this; also available as a static method.</p>\n","declType":"this"},{"id":"Application/startActivity","name":"startActivity","hasParams":true,"isMethod":true,"file":"./packages/app/typings/App/Application.d.ts","line":39,"code":"startActivity(activityOrPath: Activity | typeof Activity | ActivityResourcePath | string, replace?: boolean, setHrefIfNotFound?: boolean): PromiseLike<ActivityTransition[]>;","doc":"<p>Start given activity as foreground activity (push/replace, same as calling .activities.push/replace(…) directly), or start activity using given resource path or string (#/… or /…, or relative path as #./…, #…/…, ./… or …/…); if setHrefIfNotFound is not false, then window.location.href is set to the new location if no matching activity is found (automatic for external URLs), otherwise invokes onPageNotFound handler; note that activities transition asynchronously and any updates may not be reflected until several milliseconds after calling this method.</p>\n","declType":"PromiseLike<ActivityTransition[]>","isAsync":true},{"id":"Application/title","name":"title","isProperty":true,"file":"./packages/app/typings/App/Application.d.ts","line":21,"code":"title: string;","doc":"<p>The application name to be displayed in the title bar (observed), overridden by the title of the current activity/ies, if any.</p>\n","declType":"string"},{"id":"Application/NoActivity","name":"NoActivity","isProperty":true,"isReadOnly":true,"file":"./packages/app/typings/App/Application.d.ts","line":25,"code":"readonly NoActivity: Async.Signal.Emittable<void, typeof ApplicationSignal>;","doc":"<p>Signal that is emitted when all activities have been dropped and none have been started.</p>\n","declType":"Async.Signal.Emittable<void, typeof ApplicationSignal>","isSignal":true},{"id":"Application/PageNotFound","name":"PageNotFound","isProperty":true,"isReadOnly":true,"file":"./packages/app/typings/App/Application.d.ts","line":23,"code":"readonly PageNotFound: Async.Signal.Emittable<string, typeof ApplicationSignal>;","doc":"<p>Signal that is emitted when no activity is found for a location.</p>\n","declType":"Async.Signal.Emittable<string, typeof ApplicationSignal>","isSignal":true,"text":[{"title":"Example","content":"<pre><code class=\"language-typescript\">// Redirect to #/ and log a warning message\nApplication.current.PageNotFound.connect(path =&gt; {\n    console.log(&quot;Page not found: &quot; + path);\n    Application.startActivity(&quot;#/&quot;);\n})\n</code></pre>\n"}],"sourceIdx":28}],"sourceIdx":15,"text":[{"title":"Usage","content":"<p>This class can either be used directly, or can be used as a base class.</p>\n<p>To create a basic Application instance and start a root activity, use <code>new Application</code> directly:</p>\n<pre><code class=\"language-typescript\">class MyRootActivity extends UI.RootViewActivity {\n    // ...\n}\n\n// start the application\nvar app = new UI.Application();\napp.startActivity(MyRootActivity);\n</code></pre>\n<p>To customize the Application class, simply derive from it:</p>\n<pre><code class=\"language-typescript\">class MyApplication extends UI.Application {\n    constructor() {\n        super(&quot;My Application&quot;);\n        this.startActivity(MyRootActivity);\n    }\n\n    // now you can use public properties on the instance\n    @Async.observable\n    public myModel = {\n        categories: []  // ...\n    };\n}\n\n// start the application\nnew MyApplication();\n</code></pre>\n"}]},{"id":"ApplicationSignal","name":"ApplicationSignal","isClass":true,"file":"./packages/app/typings/App/Application.d.ts","line":63,"code":"class ApplicationSignal extends Async.Signal<string>","doc":"<p>A signal that is emitted by <code>Application</code>.</p>\n","extends":["Async.Signal"],"items":[],"sourceIdx":20},{"id":"Http","name":"Http","isNamespace":true,"file":"./packages/app/typings/App/Http.d.ts","line":2,"code":"namespace Http","doc":"<p>Namespace that encapsulates <code>.fetch</code> and related functionality.</p>\n","items":[{"id":"Http.FetchHeaders","name":"FetchHeaders","isInterface":true,"file":"./packages/app/typings/App/Http.d.ts","line":21,"code":"interface FetchHeaders","doc":"<p>Interface definition for the simple read-only methods of a native Headers instance.</p>\n","isStatic":true,"items":[{"id":"Http.FetchHeaders/get","name":"get","hasParams":true,"isMethod":true,"file":"./packages/app/typings/App/Http.d.ts","line":23,"code":"get(name: string): string;","doc":"<p>Returns the first value of a single header by name.</p>\n","declType":"string"},{"id":"Http.FetchHeaders/getAll","name":"getAll","hasParams":true,"isMethod":true,"file":"./packages/app/typings/App/Http.d.ts","line":25,"code":"getAll(name: string): string[];","doc":"<p>Returns all values of a single header by name (e.g. <code>Accept-Encoding</code>).</p>\n","declType":"string[]"},{"id":"Http.FetchHeaders/has","name":"has","hasParams":true,"isMethod":true,"file":"./packages/app/typings/App/Http.d.ts","line":27,"code":"has(name: string): boolean;","doc":"<p>Returns true if this instance contains the given header.</p>\n","declType":"boolean"},{"id":"Http.FetchHeaders/keys","name":"keys","hasParams":false,"isMethod":true,"file":"./packages/app/typings/App/Http.d.ts","line":29,"code":"keys(): { next(): { done?: boolean; value?: string; }; };","doc":"<p>Returns an iterator that lists all headers by name (polyfill only supports manual iteration with the <code>next</code> method for compatibility).</p>\n","declType":"{\r\n            next(): {\r\n                done?: boolean;\r\n                value?: string;\r\n            };\r\n        }"}]},{"id":"Http.FetchOptions","name":"FetchOptions","isInterface":true,"file":"./packages/app/typings/App/Http.d.ts","line":37,"code":"interface FetchOptions","doc":"<p>Interface definition for supported fetch options.</p>\n","isStatic":true,"items":[{"id":"Http.FetchOptions/body","name":"body","isProperty":true,"file":"./packages/app/typings/App/Http.d.ts","line":45,"code":"body?: string | Blob;","doc":"<p>Request body (string, or possibly a Blob if using the native <code>fetch</code> implementation).</p>\n","declType":"string | Blob"},{"id":"Http.FetchOptions/headers","name":"headers","isProperty":true,"file":"./packages/app/typings/App/Http.d.ts","line":43,"code":"headers?: Headers | FetchHeaders;","doc":"<p>Request headers (object literal or native Headers instance).</p>\n","declType":"Headers | FetchHeaders"},{"id":"Http.FetchOptions/method","name":"method","isProperty":true,"file":"./packages/app/typings/App/Http.d.ts","line":39,"code":"method?: string;","doc":"<p>The HTTP method (GET, PUT, POST, DELETE, etc).</p>\n","declType":"string"},{"id":"Http.FetchOptions/url","name":"url","isProperty":true,"file":"./packages/app/typings/App/Http.d.ts","line":41,"code":"url?: string;","doc":"<p>The URL to send a request to.</p>\n","declType":"string"}]},{"id":"Http.FetchResponse","name":"FetchResponse","isInterface":true,"file":"./packages/app/typings/App/Http.d.ts","line":48,"code":"interface FetchResponse","doc":"<p>Interface definition for Response properties available in the native Fetch implementation as well as the polyfill implementation.</p>\n","isStatic":true,"items":[{"id":"Http.FetchResponse/blob","name":"blob","hasParams":false,"isMethod":true,"file":"./packages/app/typings/App/Http.d.ts","line":58,"code":"blob(): PromiseLike<Blob>;","doc":"<p>Returns a promise for the response body read into a Blob, if supported.</p>\n","declType":"PromiseLike<Blob>","isAsync":true},{"id":"Http.FetchResponse/headers","name":"headers","isProperty":true,"isReadOnly":true,"file":"./packages/app/typings/App/Http.d.ts","line":50,"code":"readonly headers: FetchHeaders;","doc":"<p>Headers returned to the client.</p>\n","declType":"FetchHeaders"},{"id":"Http.FetchResponse/json","name":"json","hasParams":false,"isMethod":true,"file":"./packages/app/typings/App/Http.d.ts","line":62,"code":"json(): PromiseLike<any>;","doc":"<p>Returns a promise for the response body, parsed as JSON.</p>\n","declType":"PromiseLike<any>","isAsync":true},{"id":"Http.FetchResponse/ok","name":"ok","isProperty":true,"isReadOnly":true,"file":"./packages/app/typings/App/Http.d.ts","line":52,"code":"readonly ok: boolean;","doc":"<p>True if the response was successful (status 200-299).</p>\n","declType":"boolean"},{"id":"Http.FetchResponse/status","name":"status","isProperty":true,"isReadOnly":true,"file":"./packages/app/typings/App/Http.d.ts","line":54,"code":"readonly status: number;","doc":"<p>Status code of the response.</p>\n","declType":"number"},{"id":"Http.FetchResponse/statusText","name":"statusText","isProperty":true,"isReadOnly":true,"file":"./packages/app/typings/App/Http.d.ts","line":56,"code":"readonly statusText: string;","doc":"<p>Status message</p>\n","declType":"string"},{"id":"Http.FetchResponse/text","name":"text","hasParams":false,"isMethod":true,"file":"./packages/app/typings/App/Http.d.ts","line":60,"code":"text(): PromiseLike<string>;","doc":"<p>Returns a promise for the response body.</p>\n","declType":"PromiseLike<string>","isAsync":true}]},{"id":"Http.GlobalConfig","name":"GlobalConfig","isInterface":true,"file":"./packages/app/typings/App/Http.d.ts","line":6,"code":"interface GlobalConfig","doc":"<p>Configuration options (for exported <code>config</code> variable).</p>\n","isStatic":true,"items":[{"id":"Http.GlobalConfig/FETCH_INCLUDE_CREDENTIALS","name":"FETCH_INCLUDE_CREDENTIALS","isProperty":true,"file":"./packages/app/typings/App/Http.d.ts","line":10,"code":"FETCH_INCLUDE_CREDENTIALS: true;","doc":"<p>Automatically set <code>fetch</code> credentials mode to “include” (defaults to true).</p>\n","declType":"true"},{"id":"Http.GlobalConfig/FORCE_XHR_FETCH","name":"FORCE_XHR_FETCH","isProperty":true,"file":"./packages/app/typings/App/Http.d.ts","line":8,"code":"FORCE_XHR_FETCH: false;","doc":"<p>Force <code>fetch</code> to use XMLHttpRequest instead of native <code>fetch</code> implementation (defaults to false).</p>\n","declType":"false"}]},{"id":"Http.Headers","name":"Headers","isInterface":true,"file":"./packages/app/typings/App/Http.d.ts","line":17,"code":"interface Headers","doc":"<p>Definition of a collection of HTTP headers as an object.</p>\n","isStatic":true,"items":[{"id":"Http.Headers.!index:string","name":"[string]","isProperty":true,"file":"./packages/app/typings/App/Http.d.ts","line":18,"code":"[headerName: string]: string;","doc":"<p>No description</p>\n","declType":"string"}]},{"id":"Http.MockResponse","name":"MockResponse","isClass":true,"file":"./packages/app/typings/App/Http.d.ts","line":65,"code":"class MockResponse implements FetchResponse","doc":"<p>Implements the FetchResponse interface, can be used to mock responses or initialize a response from an XMLHttpRequest.</p>\n","isStatic":true,"items":[{"id":"Http.MockResponse.withJSONContent","name":"withJSONContent","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/app/typings/App/Http.d.ts","line":67,"code":"static withJSONContent(data: any): MockResponse;","doc":"<p>Create a response with given data encoded as JSON, the <code>application/json</code> content type, and status 200.</p>\n","declType":"MockResponse"},{"id":"Http.MockResponse.constructor","name":"new MockResponse","hasParams":true,"isCtor":true,"file":"./packages/app/typings/App/Http.d.ts","line":69,"code":"constructor(init?: { status?: number; statusText?: string; responseText?: string; response?: Blob; }, headers?: FetchHeaders);","doc":"<p>Create a response with given properties (an XMLHttpRequest object can be passed in directly, along with a native fetch <code>Headers</code> instance or a MockResponseHeaders instance); the response itself is taken from <code>.responseText</code> if it is not undefined, or from <code>.response</code> if it is a Blob.</p>\n"},{"id":"Http.MockResponse/blob","name":"blob","hasParams":false,"isMethod":true,"file":"./packages/app/typings/App/Http.d.ts","line":84,"code":"blob(): PromiseLike<Blob>;","doc":"<p>Returns a promise for the response body read into a Blob, if supported.</p>\n","declType":"PromiseLike<Blob>","isAsync":true},{"id":"Http.MockResponse/headers","name":"headers","isProperty":true,"isReadOnly":true,"file":"./packages/app/typings/App/Http.d.ts","line":76,"code":"readonly headers: FetchHeaders;","doc":"<p>Headers returned to the client.</p>\n","declType":"FetchHeaders"},{"id":"Http.MockResponse/json","name":"json","hasParams":false,"isMethod":true,"file":"./packages/app/typings/App/Http.d.ts","line":88,"code":"json(): PromiseLike<any>;","doc":"<p>Returns a promise for the response body, parsed as JSON.</p>\n","declType":"PromiseLike<any>","isAsync":true},{"id":"Http.MockResponse/ok","name":"ok","isProperty":true,"isReadOnly":true,"file":"./packages/app/typings/App/Http.d.ts","line":78,"code":"readonly ok: boolean;","doc":"<p>True if the response was successful (status 200-299).</p>\n","declType":"boolean"},{"id":"Http.MockResponse/status","name":"status","isProperty":true,"isReadOnly":true,"file":"./packages/app/typings/App/Http.d.ts","line":80,"code":"readonly status: number;","doc":"<p>Status code of the response.</p>\n","declType":"number"},{"id":"Http.MockResponse/statusText","name":"statusText","isProperty":true,"isReadOnly":true,"file":"./packages/app/typings/App/Http.d.ts","line":82,"code":"readonly statusText: string;","doc":"<p>Status message</p>\n","declType":"string"},{"id":"Http.MockResponse/text","name":"text","hasParams":false,"isMethod":true,"file":"./packages/app/typings/App/Http.d.ts","line":86,"code":"text(): PromiseLike<string>;","doc":"<p>Returns a promise for the response body.</p>\n","declType":"PromiseLike<string>","isAsync":true}]},{"id":"Http.MockResponseHeaders","name":"MockResponseHeaders","isClass":true,"file":"./packages/app/typings/App/Http.d.ts","line":93,"code":"class MockResponseHeaders implements FetchHeaders","doc":"<p>Implements the FetchResponse interface, can be used to mock response headers or initialize response headers from an XMLHttpRequest.</p>\n","isStatic":true,"items":[{"id":"Http.MockResponseHeaders.constructor","name":"new MockResponseHeaders","hasParams":true,"isCtor":true,"file":"./packages/app/typings/App/Http.d.ts","line":95,"code":"constructor(allResponseHeaders?: string);","doc":"<p>Initialize the list of headers using given HTTP header text (i.e. one or more lines with header name, colon, and header value; strips all whitespace around names and values).</p>\n"},{"id":"Http.MockResponseHeaders/get","name":"get","hasParams":true,"isMethod":true,"file":"./packages/app/typings/App/Http.d.ts","line":97,"code":"get(name: string): any;","doc":"<p>No description</p>\n"},{"id":"Http.MockResponseHeaders/getAll","name":"getAll","hasParams":true,"isMethod":true,"file":"./packages/app/typings/App/Http.d.ts","line":98,"code":"getAll(name: string): any;","doc":"<p>No description</p>\n"},{"id":"Http.MockResponseHeaders/has","name":"has","hasParams":true,"isMethod":true,"file":"./packages/app/typings/App/Http.d.ts","line":99,"code":"has(name: string): boolean;","doc":"<p>No description</p>\n","declType":"boolean"},{"id":"Http.MockResponseHeaders/keys","name":"keys","hasParams":false,"isMethod":true,"file":"./packages/app/typings/App/Http.d.ts","line":100,"code":"keys(): { next: () => { done?: boolean | undefined; value?: string | undefined; }; };","doc":"<p>No description</p>\n","declType":"{\r\n            next: () => {\r\n                done?: boolean | undefined;\r\n                value?: string | undefined;\r\n            };\r\n        }"}]},{"id":"Http.Requesting","name":"Requesting","isStatic":true,"isProperty":true,"file":"./packages/app/typings/App/Http.d.ts","line":13,"code":"Requesting: Signal.Emittable<FetchOptions, typeof Signal>","doc":"<p>Signal that is emitted before sending a request; can be used to intercept requests, modify request options, and provide an alternate response; if one of the connected handlers returns a (promise for) an alternate response, i.e. an object that implements <code>FetchResponse</code>, then the request will not be sent, and the (first) resulting alternate response is used instead; if one of the connected handlers throws an exception, the original promise for the request is rejected; otherwise the request is sent as per normal.</p>\n","declType":"Signal.Emittable<FetchOptions, typeof Signal>","isSignal":true},{"id":"Http.Responded","name":"Responded","isStatic":true,"isProperty":true,"file":"./packages/app/typings/App/Http.d.ts","line":15,"code":"Responded: Signal.Emittable<FetchResponse, typeof Signal>","doc":"<p>Signal that is emitted after obtaining a remote response (from an actual request, not an alternate response provided by a connected handler of <code>.Requesting</code>).</p>\n","declType":"Signal.Emittable<FetchResponse, typeof Signal>","isSignal":true},{"id":"Http.config","name":"config","isStatic":true,"isProperty":true,"file":"./packages/app/typings/App/Http.d.ts","line":4,"code":"config: GlobalConfig","doc":"<p>Configuration options</p>\n","declType":"GlobalConfig"},{"id":"Http.deleteAsync","name":"deleteAsync","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/app/typings/App/Http.d.ts","line":124,"code":"function deleteAsync(url: string, data?: any, headers?: Headers): PromiseLike<any>;","doc":"<p>Perform a DELETE request with given object (sent as JSON) and headers, if any; returns a promise that resolves to the parsed JSON response (or undefined if response was empty), or gets rejected if the request fails or response status is not in 2xx range.</p>\n","declType":"PromiseLike<any>","isAsync":true},{"id":"Http.fetch","name":"fetch","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/app/typings/App/Http.d.ts","line":108,"code":"function fetch(inputUrl: string, init?: FetchOptions): PromiseLike<FetchResponse>;\nfunction fetch(inputRequest: any): PromiseLike<FetchResponse>;","doc":"<p>[1]. Perform a request to fetch a resource at given URL; provides a partial polyfill for the Fetch standard using XMLHttpRequest, but uses native <code>fetch()</code> internally if available.</p>\n<p>[2]. Perform a request to fetch a resource; provides a partial polyfill for the Fetch standard using XMLHttpRequest, but uses native <code>fetch</code> internally if available.</p>\n","declType":"PromiseLike<FetchResponse> | PromiseLike<FetchResponse>","isAsync":true,"count":2},{"id":"Http.getAsync","name":"getAsync","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/app/typings/App/Http.d.ts","line":118,"code":"function getAsync(url: string, params?: any, headers?: Headers | FetchHeaders): PromiseLike<any>;","doc":"<p>Perform a GET request with given parameters and headers, if any; returns a promise that resolves to the parsed JSON response (or undefined if response was empty), or gets rejected if the request fails or response status is not in 2xx range.</p>\n","declType":"PromiseLike<any>","isAsync":true},{"id":"Http.getBlobAsync","name":"getBlobAsync","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/app/typings/App/Http.d.ts","line":114,"code":"function getBlobAsync(url: string, params?: any, headers?: Headers | FetchHeaders): PromiseLike<Blob>;","doc":"<p>Perform a GET request with given parameters and headers, if any; returns a promise that resolves to a blob, or gets rejected if the request fails or response status is not in 2xx range; requires a browser that supports Blob constructors.</p>\n","declType":"PromiseLike<Blob>","isAsync":true},{"id":"Http.getHtmlContentAsync","name":"getHtmlContentAsync","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/app/typings/App/Http.d.ts","line":116,"code":"function getHtmlContentAsync(url: string, params?: any, headers?: Headers | FetchHeaders): PromiseLike<DocumentFragment>;","doc":"<p>Perform a GET request with given parameters and headers, if any; returns a promise that resolves to the parsed HTML result body as a document fragment (ignores everything before and after body tag, if any; inserts everything if no body tag is found, i.e. partial HTML), or gets rejected if the request fails or response status is not in 2xx range.</p>\n","declType":"PromiseLike<DocumentFragment>","isAsync":true},{"id":"Http.getTextAsync","name":"getTextAsync","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/app/typings/App/Http.d.ts","line":112,"code":"function getTextAsync(url: string, params?: any, headers?: Headers | FetchHeaders): PromiseLike<string>;","doc":"<p>Perform a GET request with given parameters and headers, if any; returns a promise that resolves to the response text, or gets rejected if the request fails or response status is not in 2xx range.</p>\n","declType":"PromiseLike<string>","isAsync":true},{"id":"Http.postAsync","name":"postAsync","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/app/typings/App/Http.d.ts","line":120,"code":"function postAsync(url: string, data?: any, headers?: Headers): PromiseLike<any>;","doc":"<p>Perform a POST request with given object (sent as JSON) and headers, if any; returns a promise that resolves to the parsed JSON response (or undefined if response was empty), or gets rejected if the request fails or response status is not in 2xx range.</p>\n","declType":"PromiseLike<any>","isAsync":true},{"id":"Http.putAsync","name":"putAsync","hasParams":true,"isStatic":true,"isMethod":true,"file":"./packages/app/typings/App/Http.d.ts","line":122,"code":"function putAsync(url: string, data?: any, headers?: Headers): PromiseLike<any>;","doc":"<p>Perform a PUT request with given object (sent as JSON) and headers, if any; returns a promise that resolves to the parsed JSON response (or undefined if response was empty), or gets rejected if the request fails or response status is not in 2xx range.</p>\n","declType":"PromiseLike<any>","isAsync":true}],"sourceIdx":21,"text":[{"title":"","content":"<p>This mini-toolkit is provided to simplify development of single-page applications that rely on asynchronous HTTP communication with their Web server. This toolkit library is <em>not</em> intended to be a full framework for all types of client-server communication.</p>\n<p>However, since most applications won’t need much more than simple “Ajax”-style REST requests to transfer HTML or JSON data anyway—and there are no simple ways to achieve this in a cross-browser solution using Promises, the Http toolkit at least provides the basics.</p>\n"},{"title":"Exported members","content":"<p>This namespace module exports the following classes and methods:</p>\n<ul>\n<li><code>.fetch</code> function — mimics the <code>window.fetch</code> function in modern browsers. Internally uses either XMLHttpRequest <em>or</em> the native fetch implementation (when available) to process requests and responses, and always returns a Promise for a response object.</li>\n<li><code>.getTextAsync</code> and <code>.getBlobAsync</code> — to perform a GET request and return a Promise for the text or blob response data.</li>\n<li><code>.getHtmlContentAsync</code> — to perform a GET request and return a Promise for a document fragment that contains everything in the HTML response’s <code>&lt;body&gt;</code>.</li>\n<li><code>.getAsync</code>, <code>.postAsync</code>, <code>.putAsync</code>, and <code>.deleteAsync</code> — wrapper functions that send JSON data and return a promise for a parsed JSON response.</li>\n<li><code>Http.MockResponse</code> and <code>Http.MockResponseHeaders</code> — can be used to generate mock responses, and used internally to transform XMLHttpRequest data.</li>\n<li><code>Http.Requesting</code> and <code>Http.Responded</code> signals — for intercepting requests and responses.</li>\n<li><code>Http.options</code> object — contains options for default behavior of the <code>fetch</code> function.</li>\n</ul>\n<p>Refer to the <a href=\"#/samples/http\">samples</a> for common usage patterns.</p>\n"}]},{"id":"ResourceActivity","name":"ResourceActivity","isClass":true,"file":"./packages/app/typings/App/Activity/Activity.d.ts","line":42,"code":"class ResourceActivity extends Activity","doc":"<p>Represents an activity pertaining to a resource (URL path).</p>\n","extends":["Activity"],"items":[{"id":"ResourceActivity.constructor","name":"new ResourceActivity","hasParams":true,"isCtor":true,"file":"./packages/app/typings/App/Activity/Activity.d.ts","line":44,"code":"constructor(title?: string, path?: ActivityResourcePath | string);","doc":"<p>Create an activity with given resource path.</p>\n"},{"id":"ResourceActivity/resourcePath","name":"resourcePath","isProperty":true,"file":"./packages/app/typings/App/Activity/Activity.d.ts","line":46,"code":"resourcePath: ActivityResourcePath | string | undefined;","doc":"<p>The path (URL/hash segment) that is associated with this activity.</p>\n","declType":"ActivityResourcePath | string | undefined"}],"sourceIdx":1,"inherits":["Activity.getInstance","Activity/options","Activity/title","Activity/Activated","Activity/Activating","Activity/Deactivated","Activity/Resumed","Activity/Resuming","Activity/Suspended","Activity/Suspending"]},{"id":"RootViewActivity","name":"RootViewActivity","isClass":true,"file":"./packages/app/typings/App/Activity/ViewActivity.d.ts","line":37,"code":"class RootViewActivity extends SingletonViewActivity","doc":"<p>Represents a singleton view activity that is both a root activity (i.e. may exist only once on the activity stack, starting/replacing the activity again transitions the stack up to the existing activity instead), and a hub activity (i.e. starting any activity that specifies this activity as its parent activity, transitions the stack up to the hub activity first, suspending all other activities that used to be in the foreground); abstract class, needs to be overridden.</p>\n","extends":["SingletonViewActivity"],"items":[{"id":"RootViewActivity.constructor","name":"new RootViewActivity","hasParams":true,"isCtor":true,"file":"./packages/app/typings/App/Activity/ViewActivity.d.ts","line":38,"code":"constructor(title?: string, path?: ActivityResourcePath | string, view?: Component | Page);","doc":"<p>No description</p>\n"}],"sourceIdx":10,"inherits":["SingletonViewActivity.getInstance","ViewActivity/getViewByName","ViewActivity/mapView","Activity/options","ResourceActivity/resourcePath","Activity/title","ViewActivity/view","Activity/Activated","Activity/Activating","Activity/Deactivated","ViewActivity/Displayed","ViewActivity/Displaying","Activity/Resumed","Activity/Resuming","Activity/Suspended","Activity/Suspending"]},{"id":"SingletonViewActivity","name":"SingletonViewActivity","isClass":true,"file":"./packages/app/typings/App/Activity/ViewActivity.d.ts","line":29,"code":"class SingletonViewActivity extends ViewActivity","doc":"<p>Represents an activity that corresponds to a component or page on screen, created only once and re-used if required (overrides .getInstance static method); abstract class, needs to be overridden.</p>\n","extends":["ViewActivity"],"items":[{"id":"SingletonViewActivity.getInstance","name":"getInstance","hasParams":false,"isStatic":true,"isMethod":true,"file":"./packages/app/typings/App/Activity/ViewActivity.d.ts","line":31,"code":"static getInstance(): SingletonViewActivity;","doc":"<p>Get the instance of this activity class, constructs the instance without parameters once and returns this instance every time.</p>\n","declType":"SingletonViewActivity"},{"id":"SingletonViewActivity.constructor","name":"new SingletonViewActivity","hasParams":true,"isCtor":true,"file":"./packages/app/typings/App/Activity/ViewActivity.d.ts","line":33,"code":"constructor(title?: string, path?: ActivityResourcePath | string, view?: Component | Page, parent?: Activity | typeof Activity);","doc":"<p>Create a new activity; can be used only once.</p>\n"}],"sourceIdx":9,"inherits":["ViewActivity/getViewByName","ViewActivity/mapView","Activity/options","ResourceActivity/resourcePath","Activity/title","ViewActivity/view","Activity/Activated","Activity/Activating","Activity/Deactivated","ViewActivity/Displayed","ViewActivity/Displaying","Activity/Resumed","Activity/Resuming","Activity/Suspended","Activity/Suspending"]},{"id":"ViewActivity","name":"ViewActivity","isClass":true,"file":"./packages/app/typings/App/Activity/ViewActivity.d.ts","line":6,"code":"class ViewActivity extends ResourceActivity","doc":"<p>Represents an activity that corresponds to a (component or Page on) screen.</p>\n","extends":["ResourceActivity"],"items":[{"id":"ViewActivity.constructor","name":"new ViewActivity","hasParams":true,"isCtor":true,"file":"./packages/app/typings/App/Activity/ViewActivity.d.ts","line":8,"code":"constructor(title?: string, path?: ActivityResourcePath | string, view?: Component | Page, parent?: Activity | typeof Activity);","doc":"<p>Create a view activity with optional title and view instance, parent reference, and resource path; to add a view component/page dynamically, use the <code>mapToActivity(...)</code> decorator on a view Component or Page class, or call the <code>.mapView(...)</code> method on this activity.</p>\n"},{"id":"ViewActivity/getViewByName","name":"getViewByName","hasParams":true,"isMethod":true,"file":"./packages/app/typings/App/Activity/ViewActivity.d.ts","line":18,"code":"getViewByName(outlet?: string): Component | Page | undefined;","doc":"<p>Get an instance of the view component/page for given named outlet on this activity, or main view if none given, by calling the mapped view getter that has been registered through the <code>.mapView(...)</code> method (within unobserved function wrapper to avoid observable side effects).</p>\n","declType":"Component | Page | undefined"},{"id":"ViewActivity/mapView","name":"mapView","hasParams":true,"isMethod":true,"file":"./packages/app/typings/App/Activity/ViewActivity.d.ts","line":16,"code":"mapView(f: (fg: ViewActivity) => (Component | Page), outlet?: string): void;","doc":"<p>Register given function to return the view instance for given outlet name, or for the main view if none given; existing getter for the same outlet is replaced, if any; getter must always return a component/page instance, which may be the same instance every time; the function may accept a single parameter, which is the foreground activity (i.e. this activity, or another <code>ViewActivity</code> instance that refers to this activity as a parent activity).</p>\n","declType":"void"},{"id":"ViewActivity/view","name":"view","isProperty":true,"isReadOnly":true,"file":"./packages/app/typings/App/Activity/ViewActivity.d.ts","line":10,"code":"readonly view: Component | Page | undefined;","doc":"<p>The main view component/page that is currently displayed, if any; this is a readonly field, to link a view to an activity use the <code>mapToActivity(...)</code> decorator on a view Component or Page class, or call the <code>.mapView(...)</code> method on a view activity.</p>\n","declType":"Component | Page | undefined"},{"id":"ViewActivity/Displayed","name":"Displayed","isProperty":true,"isReadOnly":true,"file":"./packages/app/typings/App/Activity/ViewActivity.d.ts","line":14,"code":"readonly Displayed: Async.Signal.Emittable<ViewActivityTransition, typeof ViewActivitySignal>;","doc":"<p>Signal that is emitted after this activity is displayed in the foreground (i.e. NOT if displayed as parent view).</p>\n","declType":"Async.Signal.Emittable<ViewActivityTransition, typeof ViewActivitySignal>","isSignal":true},{"id":"ViewActivity/Displaying","name":"Displaying","isProperty":true,"isReadOnly":true,"file":"./packages/app/typings/App/Activity/ViewActivity.d.ts","line":12,"code":"readonly Displaying: Async.Signal.Emittable<ViewActivityTransition, typeof ViewActivitySignal>;","doc":"<p>Signal that is emitted before this activity’s view is displayed in the foreground (i.e. NOT if displayed as parent view).</p>\n","declType":"Async.Signal.Emittable<ViewActivityTransition, typeof ViewActivitySignal>","isSignal":true}],"sourceIdx":8,"inherits":["Activity.getInstance","Activity/options","ResourceActivity/resourcePath","Activity/title","Activity/Activated","Activity/Activating","Activity/Deactivated","Activity/Resumed","Activity/Resuming","Activity/Suspended","Activity/Suspending"]},{"id":"ViewActivitySignal","name":"ViewActivitySignal","isClass":true,"file":"./packages/app/typings/App/Activity/ViewActivity.d.ts","line":54,"code":"class ViewActivitySignal extends Async.Signal<ViewActivityTransition>","doc":"<p>Signal that is emitted when a change in the activity stack occurs.</p>\n","extends":["Async.Signal"],"items":[],"sourceIdx":12},{"id":"ViewActivityTransition","name":"ViewActivityTransition","isInterface":true,"file":"./packages/app/typings/App/Activity/ViewActivity.d.ts","line":41,"code":"interface ViewActivityTransition","doc":"<p>Represents a transition from one (view) activity to a view activity that is to be displayed, encapsulates activity transition.</p>\n","items":[{"id":"ViewActivityTransition/firstDisplay","name":"firstDisplay","isProperty":true,"file":"./packages/app/typings/App/Activity/ViewActivity.d.ts","line":47,"code":"firstDisplay: boolean;","doc":"<p>True if displaying this view for the first time (i.e. the activity has just been added, and not resumed or added again).</p>\n","declType":"boolean"},{"id":"ViewActivityTransition/forward","name":"forward","isProperty":true,"file":"./packages/app/typings/App/Activity/ViewActivity.d.ts","line":49,"code":"forward: boolean;","doc":"<p>True if adding this view to the browser history (i.e. not resuming from history).</p>\n","declType":"boolean"},{"id":"ViewActivityTransition/hops","name":"hops","isProperty":true,"file":"./packages/app/typings/App/Activity/ViewActivity.d.ts","line":51,"code":"hops: number;","doc":"<p>Number of transitions in the current chain (for checking if e.g. a dropActivity(…) call crossed multiple activities to get to this view).</p>\n","declType":"number"},{"id":"ViewActivityTransition/transition","name":"transition","isProperty":true,"file":"./packages/app/typings/App/Activity/ViewActivity.d.ts","line":43,"code":"transition: ActivityTransition;","doc":"<p>The activity transition itself.</p>\n","declType":"ActivityTransition"},{"id":"ViewActivityTransition/view","name":"view","isProperty":true,"file":"./packages/app/typings/App/Activity/ViewActivity.d.ts","line":45,"code":"view: Component | Page | undefined;","doc":"<p>The main view, if any, displayed as a result of this transition.</p>\n","declType":"Component | Page | undefined"}],"sourceIdx":11},{"id":"PathInitializerPart","name":"PathInitializerPart","isType":true,"file":"./packages/app/typings/App/Activity/ActivityPath.d.ts","line":2,"code":"type PathInitializerPart = ResourceActivity | ActivityResourcePath | string;","doc":"<p>No description</p>\n","declType":"ResourceActivity | ActivityResourcePath | string","sourceIdx":2},{"id":"findActivity","name":"findActivity","hasParams":true,"isFunction":true,"file":"./packages/app/typings/App/Application.d.ts","line":59,"code":"function findActivity<T>(ActivityClass: typeof Activity & { new (...args): T; }): T | undefined;","doc":"<p>Get the activity closest to the foreground of given type, if any.</p>\n","typeParams":["T"],"declType":"T | undefined","sourceIdx":19},{"id":"startActivity","name":"startActivity","hasParams":true,"isFunction":true,"file":"./packages/app/typings/App/Application.d.ts","line":57,"code":"function startActivity(activityOrPath: Activity | typeof Activity | ActivityResourcePath | string, replace?: boolean, setHrefIfNotFound?: boolean): PromiseLike<ActivityTransition[]>;","doc":"<p>Alias for <code>Application#startActivity</code> on the current Application instance; if there is no current instance, this function waits for the instance to be created first.</p>\n","declType":"PromiseLike<ActivityTransition[]>","isAsync":true,"sourceIdx":18},{"id":"mapPageToActivity","name":"mapPageToActivity","hasParams":true,"isFunction":true,"file":"./packages/app/typings/App/Activity/ViewActivity.d.ts","line":63,"code":"function mapPageToActivity<ActivityT extends ViewActivity, ComponentT extends Component>(activityClass: { new (...args: any[]): ActivityT; }, outlet?: string, dereferenceTimeout?: number): (target: { new (activity: ActivityT): ComponentT; }) => void;","doc":"<p><em>Class decorator</em>, maps the decorated view Page class (with a constructor that has a single matching activity argument) to a ViewActivity class as given named outlet, or as the main view if none specified; view instances are re-used when possible, but are dereferenced within given timeout when no longer in use (in ms, defaults to 2s, set to 0 to disable) [decorator].</p>\n","typeParams":["ActivityT extends ViewActivity","ComponentT extends Component"],"declType":"(target: {\r\n    new (activity: ActivityT): ComponentT;\r\n}) => void","isDecorator":true,"sourceIdx":14},{"id":"mapToActivity","name":"mapToActivity","hasParams":true,"isFunction":true,"file":"./packages/app/typings/App/Activity/ViewActivity.d.ts","line":57,"code":"function mapToActivity<ActivityT extends ViewActivity, ComponentT extends Component>(activityClass: { new (...args: any[]): ActivityT; }, outlet?: string, dereferenceTimeout?: number): (target: { new (activity: ActivityT): ComponentT; }) => void;","doc":"<p><em>Class decorator</em>, maps the decorated view Component class (with a constructor that has a single matching activity argument) to a ViewActivity class as given named outlet, or as the main view if none specified; view instances are re-used when possible, but are dereferenced within given timeout when no longer in use (in ms, defaults to 2s, set to 0 to disable) [decorator].</p>\n","typeParams":["ActivityT extends ViewActivity","ComponentT extends Component"],"declType":"(target: {\r\n    new (activity: ActivityT): ComponentT;\r\n}) => void","isDecorator":true,"sourceIdx":13},{"id":"mapToPath","name":"mapToPath","hasParams":true,"isFunction":true,"file":"./packages/app/typings/App/Application.d.ts","line":53,"code":"function mapToPath(path: PathInitializerPart | PathInitializerPart[]): (target: typeof Activity) => void;","doc":"<p><em>Class decorator</em>, maps the decorated Activity class to given path (using <code>Application.mapActivity</code> method) [decorator].</p>\n","declType":"(target: typeof Activity) => void","isDecorator":true,"sourceIdx":16},{"id":"mapToResource","name":"mapToResource","hasParams":true,"isFunction":true,"file":"./packages/app/typings/App/Application.d.ts","line":55,"code":"function mapToResource(path: PathInitializerPart | PathInitializerPart[]): (target: new (glob: string) => Activity) => void;","doc":"<p><em>Class decorator</em>, maps the decorated Activity class to simple sub resources on given path (using <code>Application.mapResource</code> method, use that method directly for more options), but not the path itself; the activity class <em>must</em> have a constructor that takes a single string parameter, i.e. the resource path glob [decorator].</p>\n","declType":"(target: new (glob: string) => Activity) => void","isDecorator":true,"sourceIdx":17},{"id":"~reference","name":"Reference","textSlug":"reference","text":[],"toc":["Activity","ActivityResourceMap","ActivityResourcePath","ActivitySignal","ActivityStack","ActivityTransition","Application","ApplicationSignal","Http","ResourceActivity","RootViewActivity","SingletonViewActivity","ViewActivity","ViewActivitySignal","ViewActivityTransition","PathInitializerPart","findActivity","startActivity","mapPageToActivity","mapToActivity","mapToPath","mapToResource"]}]}